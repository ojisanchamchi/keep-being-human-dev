"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71193],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(36672);const s={},c=o.createContext(s);function r(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(c.Provider,{value:n},e.children)}},99445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/openssl/advanced/custom_ssl_context_configuration","title":"custom_ssl_context_configuration","description":"\ud83d\udd27 Custom SSLContext Configuration for Advanced TLS Handshakes","source":"@site/docs/ruby/openssl/advanced/custom_ssl_context_configuration.md","sourceDirName":"ruby/openssl/advanced","slug":"/ruby/openssl/advanced/custom_ssl_context_configuration","permalink":"/keep-being-human-dev/docs/ruby/openssl/advanced/custom_ssl_context_configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/advanced/custom_ssl_context_configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"use_simpledelegator_for_wrappers","permalink":"/keep-being-human-dev/docs/ruby/oop/middle/use_simpledelegator_for_wrappers"},"next":{"title":"ocsp_certificate_revocation_checking","permalink":"/keep-being-human-dev/docs/ruby/openssl/advanced/ocsp_certificate_revocation_checking"}}');var s=t(23420),c=t(65404);const r={},a=void 0,i={},u=[{value:"\ud83d\udd27 Custom SSLContext Configuration for Advanced TLS Handshakes",id:"-custom-sslcontext-configuration-for-advanced-tls-handshakes",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-custom-sslcontext-configuration-for-advanced-tls-handshakes",children:"\ud83d\udd27 Custom SSLContext Configuration for Advanced TLS Handshakes"}),"\n",(0,s.jsxs)(n.p,{children:["By fine\u2011tuning ",(0,s.jsx)(n.code,{children:"OpenSSL::SSL::SSLContext"}),", you can control ciphers, protocols, ALPN, session reuse, and hostname verification for strict security requirements. This approach is essential when integrating Ruby clients in environments with corporate firewalls or FIPS\u2011compliant modules. You can also hook into the handshake to inspect peer certificates or inject custom OCSP responses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\nctx = OpenSSL::SSL::SSLContext.new(:TLSv1_2)\n# Restrict to strong ciphers and enable session tickets\nctx.ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384'\nctx.options |= OpenSSL::SSL::OP_NO_COMPRESSION | OpenSSL::SSL::OP_SINGLE_ECDH_USE\nctx.session_cache_mode = OpenSSL::SSL::SSLContext::SESSION_CACHE_CLIENT\n\n# Enforce hostname verification\nctx.verify_mode = OpenSSL::SSL::VERIFY_PEER | OpenSSL::SSL::VERIFY_FAIL_IF_NO_PEER_CERT\nctx.verify_hostname = true\n\ntcp = TCPSocket.new('secure.example.com', 443)\nssl = OpenSSL::SSL::SSLSocket.new(tcp, ctx)\nssl.connect\nputs \"Negotiated Protocol: #{ssl.alpn_protocol}\"\nssl.sysclose\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);