"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87032],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(36672);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},78523:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/api_mode/expert/accept_header_api_versioning","title":"accept_header_api_versioning","description":"\ud83e\udde9 API Versioning via Accept Header Constraints","source":"@site/docs/rails/api_mode/expert/accept_header_api_versioning.md","sourceDirName":"rails/api_mode/expert","slug":"/rails/api_mode/expert/accept_header_api_versioning","permalink":"/keep-being-human-dev/docs/rails/api_mode/expert/accept_header_api_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/api_mode/expert/accept_header_api_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"use_strong_parameters","permalink":"/keep-being-human-dev/docs/rails/api_mode/beginner/use_strong_parameters"},"next":{"title":"custom_rate_limiting_middleware","permalink":"/keep-being-human-dev/docs/rails/api_mode/expert/custom_rate_limiting_middleware"}}');var i=t(23420),r=t(65404);const s={},o=void 0,c={},d=[{value:"\ud83e\udde9 API Versioning via Accept Header Constraints",id:"-api-versioning-via-accept-header-constraints",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-api-versioning-via-accept-header-constraints",children:"\ud83e\udde9 API Versioning via Accept Header Constraints"}),"\n",(0,i.jsxs)(n.p,{children:["Implement version negotiation by inspecting the ",(0,i.jsx)(n.code,{children:"Accept"})," header rather than URL paths. Create a custom route constraint and fallback logic to maintain backward compatibility without polluting URIs."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# lib/api_constraints.rb\nclass ApiConstraints\n  def initialize(options)\n    @version = options[:version]\n    @default = options[:default]\n  end\n\n  def matches?(req)\n    accept = req.headers['Accept']\n    has_version = accept&.include?(\"application/vnd.myapp.v#{@version}+json\")\n    @default || has_version\n  end\nend\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/routes.rb\ndraw do\n  namespace :api, defaults: { format: :json } do\n    scope module: :v1, constraints: ApiConstraints.new(version: 1, default: true) do\n      resources :posts\n    end\n\n    scope module: :v2, constraints: ApiConstraints.new(version: 2) do\n      resources :posts\n    end\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);