"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86817],{42709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard","title":"lock_striping_mutex_shard","description":"\ud83d\udd12 Lock Striping with Sharded Mutex Pools","source":"@site/docs/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard.md","sourceDirName":"ruby/concurrency_and_mutexes/expert","slug":"/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fair_fifo_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex"},"next":{"title":"reentrant_mutex_monitor","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor"}}');var s=t(23420),o=t(65404);const i={},c=void 0,d={},u=[{value:"\ud83d\udd12 Lock Striping with Sharded Mutex Pools",id:"-lock-striping-with-sharded-mutex-pools",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-lock-striping-with-sharded-mutex-pools",children:"\ud83d\udd12 Lock Striping with Sharded Mutex Pools"}),"\n",(0,s.jsxs)(n.p,{children:["For high\u2010throughput scenarios with shared hash maps or counters, use lock striping to reduce contention. By partitioning your resource into N buckets each guarded by its own ",(0,s.jsx)(n.code,{children:"Mutex"}),", you enable parallel writes on different shards while preserving thread safety."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class ShardedCounter\n  SHARD_COUNT = 8\n\n  def initialize\n    @shards = Array.new(SHARD_COUNT) { { count: 0 } }\n    @mutexes = Array.new(SHARD_COUNT) { Mutex.new }\n  end\n\n  def increment(key)\n    idx = shard_index(key)\n    @mutexes[idx].synchronize do\n      @shards[idx][:count] += 1\n    end\n  end\n\n  def count(key)\n    idx = shard_index(key)\n    @mutexes[idx].synchronize { @shards[idx][:count] }\n  end\n\n  private\n\n  def shard_index(key)\n    Zlib.crc32(key.to_s) % SHARD_COUNT\n  end\nend\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This pattern scales writes almost linearly with the number of shards. Tune ",(0,s.jsx)(n.code,{children:"SHARD_COUNT"})," to the number of cores or expected contention domains."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(36672);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);