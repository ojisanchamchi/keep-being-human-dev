"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81113],{31967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/data_types/advanced/lazy_enumerators","title":"lazy_enumerators","description":"\ud83c\udf00 Generate Infinite Sequences with Enumerator::Lazy","source":"@site/docs/ruby/data_types/advanced/lazy_enumerators.md","sourceDirName":"ruby/data_types/advanced","slug":"/ruby/data_types/advanced/lazy_enumerators","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/lazy_enumerators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/advanced/lazy_enumerators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deep_default_hash","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/deep_default_hash"},"next":{"title":"pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/pattern_matching"}}');var r=t(23420),s=t(65404);const i={},o=void 0,d={},c=[{value:"\ud83c\udf00 Generate Infinite Sequences with Enumerator::Lazy",id:"-generate-infinite-sequences-with-enumeratorlazy",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-generate-infinite-sequences-with-enumeratorlazy",children:"\ud83c\udf00 Generate Infinite Sequences with Enumerator::Lazy"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"Enumerator::Lazy"})," to define potentially infinite streams, filter or map lazily, and materialize only what you need. Great for large data or algorithmic series."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Fibonacci lazy sequence\nfib = Enumerator.new do |yielder|\n  a, b = [0, 1]\n  loop do\n    yielder << a\n    a, b = b, a + b\n  end\nend.lazy\n\n# Select even numbers, take first 5\neven_fibs = fib.select { |n| n.even? }.take(5).to_a\nputs even_fibs.inspect\n# => [0, 2, 8, 34, 144]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(36672);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);