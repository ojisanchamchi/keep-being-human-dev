"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23944],{49836:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/operators/expert/refinements_for_core_operators","title":"refinements_for_core_operators","description":"\ud83d\ude80 Scoped Refinements for Core Operators","source":"@site/docs/ruby/operators/expert/refinements_for_core_operators.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/refinements_for_core_operators","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/refinements_for_core_operators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/refinements_for_core_operators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pipeline_operator_with_procs","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/pipeline_operator_with_procs"},"next":{"title":"spaceship_sort_with_memoization","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/spaceship_sort_with_memoization"}}');var n=o(23420),s=o(65404);const i={},a=void 0,p={},c=[{value:"\ud83d\ude80 Scoped Refinements for Core Operators",id:"-scoped-refinements-for-core-operators",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-scoped-refinements-for-core-operators",children:"\ud83d\ude80 Scoped Refinements for Core Operators"}),"\n",(0,n.jsx)(r.p,{children:"Use Ruby refinements to override core operator behavior within a narrow scope, avoiding global patch pollution. This is critical when writing gems that must not affect other code."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"module SafeMath\n  refine Integer do\n    def /(other)\n      return Float::INFINITY if other.zero?\n      super\n    end\n  end\nend\n\nusing SafeMath\nputs 10 / 0   # \u21d2 Infinity\n\n# Outside the refinement, behavior remains unchanged:\nModule.new { puts 10 / 0 } # raises ZeroDivisionError\n"})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},65404:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>a});var t=o(36672);const n={},s=t.createContext(n);function i(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);