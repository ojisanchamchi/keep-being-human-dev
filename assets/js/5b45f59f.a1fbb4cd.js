"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[69517],{40955:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/oop/advanced/method_missing_as_proxy","title":"method_missing_as_proxy","description":"\ud83d\udee0\ufe0f Build Lightweight Proxies with method_missing","source":"@site/docs/ruby/oop/advanced/method_missing_as_proxy.md","sourceDirName":"ruby/oop/advanced","slug":"/ruby/oop/advanced/method_missing_as_proxy","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/method_missing_as_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/advanced/method_missing_as_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"internal_dsl_with_blocks","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/internal_dsl_with_blocks"},"next":{"title":"modules_as_namespaces_and_mixins","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/modules_as_namespaces_and_mixins"}}');var t=s(23420),o=s(65404);const r={},d=void 0,a={},c=[{value:"\ud83d\udee0\ufe0f Build Lightweight Proxies with <code>method_missing</code>",id:"\ufe0f-build-lightweight-proxies-with-method_missing",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"\ufe0f-build-lightweight-proxies-with-method_missing",children:["\ud83d\udee0\ufe0f Build Lightweight Proxies with ",(0,t.jsx)(n.code,{children:"method_missing"})]}),"\n",(0,t.jsx)(n.p,{children:"Intercept calls to undefined methods and delegate them dynamically. This technique can power API wrappers, building proxies without boilerplate for every method."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class ApiClient\n  BASE_URL = 'https://api.example.com/'\n\n  def initialize(resource)\n    @resource = resource\n  end\n\n  def method_missing(name, *args)\n    if args.first.is_a?(Hash)\n      query = URI.encode_www_form(args.first)\n      get(\"#{@resource}/#{name}?#{query}\")\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, _)\n    true\n  end\n\n  private\n\ndef get(path)\n    # HTTP GET logic using Net::HTTP or Faraday\n  end\nend\n\nclient = ApiClient.new('users')\nclient.find(id: 1)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(36672);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);