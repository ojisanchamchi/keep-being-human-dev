"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39063],{60417:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/enumerables/expert/fiber_based_enumerator","title":"fiber_based_enumerator","description":"\ud83e\uddf5 Stateful Fiber-Based Enumerators for External Iteration Control","source":"@site/docs/ruby/enumerables/expert/fiber_based_enumerator.md","sourceDirName":"ruby/enumerables/expert","slug":"/ruby/enumerables/expert/fiber_based_enumerator","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/fiber_based_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/expert/fiber_based_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_slice_when","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/dynamic_slice_when"},"next":{"title":"infinite_sequence_produce","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/infinite_sequence_produce"}}');var a=n(23420),o=n(65404);const s={},u=void 0,i={},l=[{value:"\ud83e\uddf5 Stateful Fiber-Based Enumerators for External Iteration Control",id:"-stateful-fiber-based-enumerators-for-external-iteration-control",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-stateful-fiber-based-enumerators-for-external-iteration-control",children:"\ud83e\uddf5 Stateful Fiber-Based Enumerators for External Iteration Control"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.code,{children:"Enumerator.new"})," uses an internal fiber to yield values, giving you manual control of state and backpressure. This is perfect for complex generators where you want to pause, resume, or interleave multiple streams."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"fib = Enumerator.new do |yielder|\n  a, b = 0, 1\n  loop do\n    yielder << a         # yield current value\n    a, b = b, a + b      # update state\n  end\nend\n\n# External iteration\n10.times { puts fib.next }\n# => 0 1 1 2 3 5 8 13 21 34\n"})})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>u});var t=n(36672);const a={},o=t.createContext(a);function s(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);