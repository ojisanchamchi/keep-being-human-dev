"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30583],{45653:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service","title":"orchestrating_external_service","description":"\ud83d\udee0\ufe0f Orchestrate External Services with before(suite)","source":"@site/docs/gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/advanced","slug":"/gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metadata_conditional_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/metadata_conditional_hooks"},"next":{"title":"transactional_time_travel","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel"}}');var s=t(23420),a=t(65404);const c={},o=void 0,i={},d=[{value:"\ud83d\udee0\ufe0f Orchestrate External Services with before()/after()",id:"\ufe0f-orchestrate-external-services-with-beforeafter",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"\ufe0f-orchestrate-external-services-with-beforeafter",children:["\ud83d\udee0\ufe0f Orchestrate External Services with before(",":suite",")/after(",":suite",")"]}),"\n",(0,s.jsxs)(n.p,{children:["When your test suite depends on an external service (e.g., Elasticsearch, Redis, Kafka), spinning up and tearing down containers for each example is expensive. Use ",(0,s.jsx)(n.code,{children:"before(:suite)"})," and ",(0,s.jsx)(n.code,{children:"after(:suite)"})," to start and stop the service only once per suite."]}),"\n",(0,s.jsxs)(n.p,{children:["Configure RSpec in ",(0,s.jsx)(n.code,{children:"spec/spec_helper.rb"})," or ",(0,s.jsx)(n.code,{children:"spec/rails_helper.rb"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# spec/spec_helper.rb\nRSpec.configure do |config|\n  config.before(:suite) do\n    # Start Docker container via docker-api gem\n    container = Docker::Container.create(\n      'Image' => 'elasticsearch:7.10.0',\n      'name'  => 'test-elasticsearch'\n    )\n    container.start\n\n    # Wait until the service is healthy\n    Timeout.timeout(30) do\n      loop do\n        break if `curl -s http://localhost:9200`.include?('\"status\"')\n        sleep 1\n      end\n    end\n  end\n\n  config.after(:suite) do\n    # Cleanly stop and remove\n    container = Docker::Container.get('test-elasticsearch')\n    container.stop\n    container.delete(force: true)\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"This approach ensures minimal overhead, maintaining a single service instance throughout the suite. Replace with any service or orchestrator as needed."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(36672);const s={},a=r.createContext(s);function c(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);