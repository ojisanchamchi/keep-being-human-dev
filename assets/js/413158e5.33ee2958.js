"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71027],{2832:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>i,contentTitle:()=>t,default:()=>l,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/performance/advanced/custom_polymorphic_preloader","title":"custom_polymorphic_preloader","description":"\ud83d\udd04 Custom Polymorphic Association Preloader","source":"@site/docs/rails/performance/advanced/custom_polymorphic_preloader.md","sourceDirName":"rails/performance/advanced","slug":"/rails/performance/advanced/custom_polymorphic_preloader","permalink":"/keep-being-human-dev/docs/rails/performance/advanced/custom_polymorphic_preloader","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/performance/advanced/custom_polymorphic_preloader.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"cpu_profiling_with_stackprof","permalink":"/keep-being-human-dev/docs/rails/performance/advanced/cpu_profiling_with_stackprof"},"next":{"title":"db_connection_pool_tuning","permalink":"/keep-being-human-dev/docs/rails/performance/advanced/db_connection_pool_tuning"}}');var a=r(23420),s=r(65404);const c={},t=void 0,i={},d=[{value:"\ud83d\udd04 Custom Polymorphic Association Preloader",id:"-custom-polymorphic-association-preloader",level:2}];function p(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h2,{id:"-custom-polymorphic-association-preloader",children:"\ud83d\udd04 Custom Polymorphic Association Preloader"}),"\n",(0,a.jsxs)(o.p,{children:["ActiveRecord\u2019s default preloader doesn\u2019t always handle polymorphic associations optimally. You can use ",(0,a.jsx)(o.code,{children:"ActiveRecord::Associations::Preloader"})," directly to group records by type and perform batched queries, eliminating N+1 queries in complex setups."]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-ruby",children:"class PolymorphicLoader\n  def self.preload(records, association)\n    groups = records.group_by { |r| r.send(association).class }\n    groups.each do |model, subset|\n      ActiveRecord::Associations::Preloader.new.preload(subset, association)\n    end\n  end\nend\n\n# Usage\nposts = Comment.where(active: true).to_a\nPolymorphicLoader.preload(posts, :commentable)\n"})})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},65404:(e,o,r)=>{r.d(o,{R:()=>c,x:()=>t});var n=r(36672);const a={},s=n.createContext(a);function c(e){const o=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function t(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);