"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39757],{60708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"ruby/openssl/middle/custom_ssl_context","title":"custom_ssl_context","description":"\ud83c\udf10 Custom SSLContext for Secure HTTP","source":"@site/docs/ruby/openssl/middle/custom_ssl_context.md","sourceDirName":"ruby/openssl/middle","slug":"/ruby/openssl/middle/custom_ssl_context","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/custom_ssl_context","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/middle/custom_ssl_context.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"aes_gcm_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/aes_gcm_encryption"},"next":{"title":"verify_certificate_chain","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/verify_certificate_chain"}}');var o=n(23420),r=n(65404);const c={},i=void 0,u={},p=[{value:"\ud83c\udf10 Custom SSLContext for Secure HTTP",id:"-custom-sslcontext-for-secure-http",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-custom-sslcontext-for-secure-http",children:"\ud83c\udf10 Custom SSLContext for Secure HTTP"}),"\n",(0,o.jsxs)(t.p,{children:["You can configure ",(0,o.jsx)(t.code,{children:"OpenSSL::SSL::SSLContext"})," to enforce strong ciphers, set timeouts, and pin CAs when using ",(0,o.jsx)(t.code,{children:"Net::HTTP"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\nrequire 'openssl'\n\nuri = URI('https://api.example.com/data')\nctx = OpenSSL::SSL::SSLContext.new(:TLSv1_2)\n# Enforce only strong ciphers\nctx.ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384'\n# Use system and custom CA\nctx.set_params(\n  verify_mode: OpenSSL::SSL::VERIFY_PEER,\n  ca_file: '/etc/ssl/certs/ca-bundle.crt'\n)\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nhttp.ssl_version = :TLSv1_2\nhttp.ssl_timeout = 5\nhttp.read_timeout = 10\nhttp.verify_mode = OpenSSL::SSL::VERIFY_PEER\nhttp.cert_store = ctx.cert_store\n\nresponse = http.get(uri)\nputs response.body\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(36672);const o={},r=s.createContext(o);function c(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);