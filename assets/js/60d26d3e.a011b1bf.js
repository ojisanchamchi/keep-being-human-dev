"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14585],{43307:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/strings/middle/string_formatting_sprintf","title":"string_formatting_sprintf","description":"\ud83d\udcd0 Format with sprintf and format","source":"@site/docs/ruby/strings/middle/string_formatting_sprintf.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/string_formatting_sprintf","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/string_formatting_sprintf","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/string_formatting_sprintf.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scrub_invalid_bytes","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/scrub_invalid_bytes"},"next":{"title":"string_slicing_ranges","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/string_slicing_ranges"}}');var s=t(23420),i=t(65404);const a={},o=void 0,d={},c=[{value:"\ud83d\udcd0 Format with sprintf and format",id:"-format-with-sprintf-and-format",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-format-with-sprintf-and-format",children:"\ud83d\udcd0 Format with sprintf and format"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby\u2019s ",(0,s.jsx)(n.code,{children:"sprintf"})," (or alias ",(0,s.jsx)(n.code,{children:"format"}),") allows C-style formatting directives for numbers, strings, and more. Use ",(0,s.jsx)(n.code,{children:"%d"}),", ",(0,s.jsx)(n.code,{children:"%f"}),", ",(0,s.jsx)(n.code,{children:"%s"}),", and precision/width specifiers for aligned reports or human-readable output. It\u2019s safer and clearer than manual padding or rounding."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'name = "Carol"\nbalance = 1234.5\nputs sprintf("%-10s | %08.2f", name, balance)\n# => "Carol      | 0001234.50"\n# Using format alias\nputs format("[%s] %0.3f%% complete", name, 99.8765)\n# => "[Carol] 99.877% complete"\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(36672);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);