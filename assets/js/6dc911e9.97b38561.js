"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74413],{12911:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/advanced/rspec_configuration_overrides","title":"rspec_configuration_overrides","description":"\u2699\ufe0f Override RSpec Configuration at Runtime","source":"@site/docs/gems/rspec/advanced/rspec_configuration_overrides.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/rspec_configuration_overrides","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/rspec_configuration_overrides","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/rspec_configuration_overrides.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"profiling_slow_specs","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/profiling_slow_specs"},"next":{"title":"shared_contexts_with_metadata","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/shared_contexts_with_metadata"}}');var o=r(23420),s=r(65404);const c={},i=void 0,a={},d=[{value:"\u2699\ufe0f Override RSpec Configuration at Runtime",id:"\ufe0f-override-rspec-configuration-at-runtime",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-override-rspec-configuration-at-runtime",children:"\u2699\ufe0f Override RSpec Configuration at Runtime"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes you need to tweak RSpec settings for a subset of your suite, such as enabling color or custom formatters only for certain directories. You can override configuration within example groups by using ",(0,o.jsx)(n.code,{children:"RSpec.describe"})," metadata hooks. This preserves global defaults while allowing local adjustments."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# spec/special/spec_helper_override.rb\nRSpec.configure do |config|\n  config.add_formatter('documentation') if ENV['VERBOSE_SPECS']\nend\n\n# In a spec file\ntags = { verbose: true }\nRSpec.describe 'Special cases', tags do\n  around do |example|\n    RSpec.configuration.color = false\n    example.run\n    RSpec.configuration.color = true\n  end\n\n  it 'runs without color' do\n    expect(true).to be_truthy\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(36672);const o={},s=t.createContext(o);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);