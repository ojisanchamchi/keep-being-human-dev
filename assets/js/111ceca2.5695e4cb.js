"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24100],{65404:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var d=n(36672);const i={},s=d.createContext(i);function t(e){const r=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),d.createElement(s.Provider,{value:r},e.children)}},99464:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"rails/active_record/beginner/reading_records","title":"reading_records","description":"\ud83d\udd0d Read Records with find, find_by, and all","source":"@site/docs/rails/active_record/beginner/reading_records.md","sourceDirName":"rails/active_record/beginner","slug":"/rails/active_record/beginner/reading_records","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/reading_records","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/beginner/reading_records.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"querying_with_where","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/querying_with_where"},"next":{"title":"sorting_results","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/sorting_results"}}');var i=n(23420),s=n(65404);const t={},o=void 0,c={},a=[{value:"\ud83d\udd0d Read Records with <code>find</code>, <code>find_by</code>, and <code>all</code>",id:"-read-records-with-find-find_by-and-all",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.h2,{id:"-read-records-with-find-find_by-and-all",children:["\ud83d\udd0d Read Records with ",(0,i.jsx)(r.code,{children:"find"}),", ",(0,i.jsx)(r.code,{children:"find_by"}),", and ",(0,i.jsx)(r.code,{children:"all"})]}),"\n",(0,i.jsxs)(r.p,{children:["Active Record offers various methods to fetch data: ",(0,i.jsx)(r.code,{children:"find"})," raises an error if not found, ",(0,i.jsx)(r.code,{children:"find_by"})," returns ",(0,i.jsx)(r.code,{children:"nil"}),", and ",(0,i.jsx)(r.code,{children:"all"})," returns every record. Use the one that matches your error-handling needs."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"# Raises ActiveRecord::RecordNotFound if ID 1 doesn't exist\nuser = User.find(1)\n\n# Returns nil if no record matches\nuser = User.find_by(email: 'noone@example.com')\n\n# Fetches all records (returns an ActiveRecord::Relation)\nusers = User.all\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);