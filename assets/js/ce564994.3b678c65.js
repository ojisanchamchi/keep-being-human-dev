"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94380],{1881:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"ruby/hashes/expert/auto_vivification_nested_hashes","title":"auto_vivification_nested_hashes","description":"\ud83d\udc23 Auto\u2011Vivification of Nested Hashes","source":"@site/docs/ruby/hashes/expert/auto_vivification_nested_hashes.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/auto_vivification_nested_hashes","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/auto_vivification_nested_hashes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/auto_vivification_nested_hashes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_keyword_arg_forwarding","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/advanced_keyword_arg_forwarding"},"next":{"title":"chaining_transform_keys_values","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/chaining_transform_keys_values"}}');var n=s(23420),i=s(65404);const r={},o=void 0,c={},u=[{value:"\ud83d\udc23 Auto\u2011Vivification of Nested Hashes",id:"-autovivification-of-nested-hashes",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-autovivification-of-nested-hashes",children:"\ud83d\udc23 Auto\u2011Vivification of Nested Hashes"}),"\n",(0,n.jsx)(t.p,{children:"In languages like Perl, nested hash creation is automatic. You can mimic that in Ruby by setting a default proc on the root hash that generates deeper levels on\u2010the\u2010fly."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"auto_hash = Hash.new do |h, key|\n  h[key] = Hash.new(&h.default_proc)\nend\n\nauto_hash[:users][:alice][:visits] = 1\nputs auto_hash\n#=> { users: { alice: { visits: 1 } } }\n"})}),"\n",(0,n.jsxs)(t.p,{children:["This technique avoids manual checks (",(0,n.jsx)(t.code,{children:"h[:a] ||= {}"}),") and elegantly supports arbitrarily deep structures, perfect for accumulating stats or building dynamic trees at runtime."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var a=s(36672);const n={},i=a.createContext(n);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);