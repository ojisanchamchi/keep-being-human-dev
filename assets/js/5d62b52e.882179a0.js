"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62816],{60932:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks","title":"metadata_based_hooks","description":"\ud83c\udff7\ufe0f Dynamic Hook Application via Metadata","source":"@site/docs/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/expert","slug":"/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"around_each_instrumentation","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation"},"next":{"title":"prepend_hooks_module","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module"}}');var o=n(23420),s=n(65404);const i={},r=void 0,c={},d=[{value:"\ud83c\udff7\ufe0f Dynamic Hook Application via Metadata",id:"\ufe0f-dynamic-hook-application-via-metadata",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"\ufe0f-dynamic-hook-application-via-metadata",children:"\ud83c\udff7\ufe0f Dynamic Hook Application via Metadata"}),"\n",(0,o.jsxs)(a.p,{children:["Automatically apply setup or teardown logic based on example metadata using ",(0,o.jsx)(a.code,{children:"define_derived_metadata"})," and filtered hooks. This is powerful for large suites where tests require nuanced behavior without repetitive tag usage. Combine metadata inheritance with conditional hooks for maximum flexibility."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-ruby",children:"RSpec.configure do |config|\n  # Derive :db_clean => true for all example groups tagged :integration\n  config.define_derived_metadata(file_path: %r{/spec/integration/}) do |meta|\n    meta[:db_clean] = true\n  end\n\n  # Only run database cleaning around examples with :db_clean\n  config.around(:each, :db_clean) do |example|\n    DatabaseCleaner.cleaning do\n      example.run\n    end\n  end\nend\n\n# No need to tag explicitly; any spec under spec/integration/ is cleaned\nRSpec.describe 'External API Integration', type: :request do\n  it 'persists and cleans DB' do\n    expect(User.count).to eq(0)\n    User.create!(name: 'Test')\n    expect(User.count).to eq(1)\n  end\nend\n"})}),"\n",(0,o.jsx)(a.p,{children:"This technique offloads tagging boilerplate and ensures context-aware hooks without manual metadata on each example."})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>r});var t=n(36672);const o={},s=t.createContext(o);function i(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);