"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19497],{65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(36672);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},76592:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/secrets_and_credentials/expert/credentials_rotation_task","title":"credentials_rotation_task","description":"\ud83d\udd04 Automated Credentials Rotation Rake Task","source":"@site/docs/rails/secrets_and_credentials/expert/credentials_rotation_task.md","sourceDirName":"rails/secrets_and_credentials/expert","slug":"/rails/secrets_and_credentials/expert/credentials_rotation_task","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/expert/credentials_rotation_task","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/secrets_and_credentials/expert/credentials_rotation_task.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"aws_kms_credentials_provider","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/expert/aws_kms_credentials_provider"},"next":{"title":"multi_layer_credentials","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/expert/multi_layer_credentials"}}');var a=n(23420),s=n(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udd04 Automated Credentials Rotation Rake Task",id:"-automated-credentials-rotation-rake-task",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-automated-credentials-rotation-rake-task",children:"\ud83d\udd04 Automated Credentials Rotation Rake Task"}),"\n",(0,a.jsx)(t.p,{children:"Rotate your master key and re\u2011encrypt all credentials in one go via a Rake task. This ensures zero\u2011downtime key rollovers and audit logging."}),"\n",(0,a.jsxs)(t.p,{children:["In ",(0,a.jsx)(t.code,{children:"lib/tasks/credentials_rotate.rake"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"namespace :credentials do\n  desc 'Rotate Rails master key and re-encrypt all credentials'\n  task rotate: :environment do\n    old_key = Rails.application.master_key\n    new_key = SecureRandom.hex(32)\n\n    # Load existing configs\n    cred_path = Rails.root.join('config/credentials/production.yml.enc')\n    encrypted = File.binread(cred_path)\n    plaintext = ActiveSupport::MessageEncryptor.new([old_key].pack('H*')).decrypt_and_verify(encrypted)\n\n    # Write new master.key\n    File.write(Rails.root.join('config/credentials/production.key'), new_key)\n    puts \"\ud83d\udddd\ufe0f New master key written to config/credentials/production.key\"\n\n    # Re-encrypt credentials with new key\n    encryptor = ActiveSupport::MessageEncryptor.new([new_key].pack('H*'))\n    new_encrypted = encryptor.encrypt_and_sign(plaintext)\n    File.binwrite(cred_path, new_encrypted)\n    puts \"\ud83d\udd10 Credentials re-encrypted at #{cred_path}\"\n\n    # Commit changes (optional):\n    # system('git add config/credentials/production.key config/credentials/production.yml.enc')\n    # system('git commit -m \"Rotate credentials master key\"')\n  end\nend\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Run ",(0,a.jsx)(t.code,{children:"rails credentials:rotate RAILS_ENV=production"})," in CI or a secure host to generate a new ",(0,a.jsx)(t.code,{children:"production.key"})," and re-encrypt the credentials file, minimizing manual steps."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);