"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25033],{16309:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"ruby/rspec/advanced/dynamic_shared_context_metadata","title":"dynamic_shared_context_metadata","description":"\ud83d\udd04 Dynamic Shared Context with Metadata","source":"@site/docs/ruby/rspec/advanced/dynamic_shared_context_metadata.md","sourceDirName":"ruby/rspec/advanced","slug":"/ruby/rspec/advanced/dynamic_shared_context_metadata","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/dynamic_shared_context_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/advanced/dynamic_shared_context_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"composable_custom_matchers","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/composable_custom_matchers"},"next":{"title":"parameterized_testing","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/parameterized_testing"}}');var s=a(23420),d=a(65404);const r={},c=void 0,o={},i=[{value:"\ud83d\udd04 Dynamic Shared Context with Metadata",id:"-dynamic-shared-context-with-metadata",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-dynamic-shared-context-with-metadata",children:"\ud83d\udd04 Dynamic Shared Context with Metadata"}),"\n",(0,s.jsx)(t.p,{children:"Leverage RSpec\u2019s shared contexts combined with metadata filters to DRY up specs and apply setups conditionally. By tagging examples or groups, shared setup logic is only invoked where it makes sense, keeping unrelated tests fast and isolated."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# spec/support/shared_contexts.rb\nRSpec.shared_context 'api client setup', shared_context: :metadata do\n  let(:client) { ApiClient.new(base_url: ENV['API_URL']) }\n\n  before do |example|\n    # dynamically stub based on metadata\n    stub_request(:get, example.metadata[:endpoint])\n      .to_return(body: example.metadata[:response_body])\n  end\nend\n\n# spec/requests/users_spec.rb\ndescribe 'Users API', endpoint: '/users', response_body: '[{\"id\":1}]' do\n  include_context 'api client setup'\n\n  it 'fetches users successfully' do\n    expect(client.get('/users')).to include('id' => 1)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>c});var n=a(36672);const s={},d=n.createContext(s);function r(e){const t=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);