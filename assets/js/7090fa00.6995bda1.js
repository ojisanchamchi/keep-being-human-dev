"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52318],{65404:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(36672);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}},99157:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"ruby/arrays/expert/n_dimensional_array_generator.md","title":"n_dimensional_array_generator.md","description":"\ud83d\udcd0 N-dimensional Array Generator","source":"@site/docs/ruby/arrays/expert/n_dimensional_array_generator.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/n_dimensional_array_generator.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/n_dimensional_array_generator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/n_dimensional_array_generator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metaprogramming_dynamic_array_methods.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md"},"next":{"title":"parallel_map_with_threads.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/parallel_map_with_threads.md"}}');var t=n(23420),s=n(65404);const i={},o=void 0,d={},m=[{value:"\ud83d\udcd0 N-dimensional Array Generator",id:"-n-dimensional-array-generator",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-n-dimensional-array-generator",children:"\ud83d\udcd0 N-dimensional Array Generator"}),"\n",(0,t.jsx)(r.p,{children:"Recursively generate N-dimensional arrays with custom default values or computed contents. This pattern simplifies creation of multi-dimensional grids or tensors."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"def n_dimensional(dimensions, &block)\n  size, *rest = dimensions\n  Array.new(size) do |i|\n    rest.empty? ? block.call(i) : n_dimensional(rest, &block)\n  end\nend\n\n# Usage: 2x3x4 tensor with index value\ntensor = n_dimensional([2,3,4]) { |i| i }\np tensor[1][2][3]   # => 3\n"})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);