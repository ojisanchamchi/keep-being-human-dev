"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28303],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(36672);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}},74741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"ruby/exceptions/advanced/retry_with_exponential_backoff","title":"retry_with_exponential_backoff","description":"\ud83d\udd04 Retry with Exponential Backoff","source":"@site/docs/ruby/exceptions/advanced/retry_with_exponential_backoff.md","sourceDirName":"ruby/exceptions/advanced","slug":"/ruby/exceptions/advanced/retry_with_exponential_backoff","permalink":"/keep-being-human-dev/docs/ruby/exceptions/advanced/retry_with_exponential_backoff","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/advanced/retry_with_exponential_backoff.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"exception_notification_integration","permalink":"/keep-being-human-dev/docs/ruby/exceptions/advanced/exception_notification_integration"},"next":{"title":"ensure_usage","permalink":"/keep-being-human-dev/docs/ruby/exceptions/beginner/ensure_usage"}}');var r=n(23420),i=n(65404);const o={},s=void 0,c={},p=[{value:"\ud83d\udd04 Retry with Exponential Backoff",id:"-retry-with-exponential-backoff",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-retry-with-exponential-backoff",children:"\ud83d\udd04 Retry with Exponential Backoff"}),"\n",(0,r.jsx)(t.p,{children:"Implement resilient retry logic for transient failures (e.g., network calls) by combining rescue, dynamic sleep intervals, and retry. Exponential backoff reduces load on upstream services and increases success probability. Cap the backoff and number of attempts to avoid infinite loops."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"MAX_RETRIES = 5\nBASE_DELAY = 0.5\n\ndef fetch_remote_data(attempts = 0)\n  external_service.call\nrescue Net::OpenTimeout, Net::ReadTimeout => e\n  raise if attempts >= MAX_RETRIES\n  sleep(BASE_DELAY * (2 ** attempts))\n  fetch_remote_data(attempts + 1)\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"This pattern yields delays: 0.5s, 1s, 2s\u2026, up to your max attempts."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);