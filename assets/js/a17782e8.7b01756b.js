"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57670],{46803:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/strings/expert/advanced_named_captures","title":"advanced_named_captures","description":"\ud83e\udde9 Compose parsers with Regexp named captures","source":"@site/docs/ruby/strings/expert/advanced_named_captures.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/advanced_named_captures","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/advanced_named_captures","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/advanced_named_captures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"substring_replacement","permalink":"/keep-being-human-dev/docs/ruby/strings/beginner/substring_replacement"},"next":{"title":"binary_data_handling_string_b","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/binary_data_handling_string_b"}}');var s=t(23420),a=t(65404);const c={},d=void 0,i={},o=[{value:"\ud83e\udde9 Compose parsers with Regexp named captures",id:"-compose-parsers-with-regexp-named-captures",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-compose-parsers-with-regexp-named-captures",children:"\ud83e\udde9 Compose parsers with Regexp named captures"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby\u2019s named captures (",(0,s.jsx)(n.code,{children:"?<name>"}),") let you extract complex data in one pattern. You can nest or chain patterns and then retrieve results via ",(0,s.jsx)(n.code,{children:"MatchData#named_captures"})," for clean, self\u2011documenting code. This works wonders in DSL interpreters or log parsing."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'pattern = /\n  \\A(?<date>\\d{4}-\\d{2}-\\d{2})\\s+\n  \\[(?<level>INFO|ERROR)\\]\\s+\n  (?<msg>.+)\n\\z/x\nline = "2024-07-01 [ERROR] Disk full"\nmd = pattern.match(line)\nputs md.named_captures\n# => {"date"=>"2024-07-01", "level"=>"ERROR", "msg"=>"Disk full"}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var r=t(36672);const s={},a=r.createContext(s);function c(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);