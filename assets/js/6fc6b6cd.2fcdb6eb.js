"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96401],{65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var s=a(36672);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}},91783:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"rails/action_cable/advanced/graphql_subscriptions","title":"graphql_subscriptions","description":"\ud83d\udcc8 GraphQL Subscriptions via Action Cable","source":"@site/docs/rails/action_cable/advanced/graphql_subscriptions.md","sourceDirName":"rails/action_cable/advanced","slug":"/rails/action_cable/advanced/graphql_subscriptions","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/graphql_subscriptions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/advanced/graphql_subscriptions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chunked_streaming","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/chunked_streaming"},"next":{"title":"jwt_channel_authentication","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/jwt_channel_authentication"}}');var t=a(23420),i=a(65404);const r={},c=void 0,o={},u=[{value:"\ud83d\udcc8 GraphQL Subscriptions via Action Cable",id:"-graphql-subscriptions-via-action-cable",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-graphql-subscriptions-via-action-cable",children:"\ud83d\udcc8 GraphQL Subscriptions via Action Cable"}),"\n",(0,t.jsxs)(n.p,{children:["Leverage ",(0,t.jsx)(n.code,{children:"graphql-ruby"}),"\u2019s built-in Action Cable integration for real-time GraphQL subscriptions. This decouples your subscription logic from channels and uses your schema\u2019s pub/sub."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/channels/graphql_channel.rb\nclass GraphqlChannel < ApplicationCable::Channel\n  def subscribed\n    @subscriptions = []\n  end\n\n  def execute(data)\n    result = MySchema.execute(\n      query: data['query'],\n      variables: data['variables'],\n      context: { current_user: current_user, channel: self },\n      operation_name: data['operationName']\n    )\n    payload = { result: result.to_h, more: result.context[:subscription] }\n    transmit(payload)\n    @subscriptions << result.context[:subscription_id] if result.context[:subscription]\n  end\n\n  def unsubscribed\n    @subscriptions.each { |sid| MySchema.subscriptions.delete_subscription(sid) }\n  end\nend\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# config/schema.rb\nclass MySchema < GraphQL::Schema\n  mutation(Types::MutationType)\n  query(Types::QueryType)\n  subscription(Types::SubscriptionType)\n  use GraphQL::Subscriptions::ActionCableSubscriptions\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);