"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17328],{65404:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>c});var t=o(36672);const s={},r=t.createContext(s);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},72253:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/syntax/middle/symbol_to_proc","title":"symbol_to_proc","description":"\ud83d\udccc Converting Symbols to Procs","source":"@site/docs/ruby/syntax/middle/symbol_to_proc.md","sourceDirName":"ruby/syntax/middle","slug":"/ruby/syntax/middle/symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/symbol_to_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/middle/symbol_to_proc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"safe_navigation_operator","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/safe_navigation_operator"},"next":{"title":"tap_debugging","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/tap_debugging"}}');var s=o(23420),r=o(65404);const a={},c=void 0,i={},d=[{value:"\ud83d\udccc Converting Symbols to Procs",id:"-converting-symbols-to-procs",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-converting-symbols-to-procs",children:"\ud83d\udccc Converting Symbols to Procs"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"&:symbol"})," shorthand converts a symbol into a ",(0,s.jsx)(n.code,{children:"Proc"}),", making method calls in enumerables more readable. It's perfect for simple one\u2011method blocks."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'names = ["alice", "bob", "carol"]\n\n# Traditional block:\nupcased = names.map { |n| n.upcase }\n\n# Symbol to proc:\nupcased = names.map(&:upcase)\n# => ["ALICE", "BOB", "CAROL"]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);