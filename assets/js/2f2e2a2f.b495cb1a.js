"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[99127],{31109:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/arrays/advanced/pipeline_with_tap_then","title":"pipeline_with_tap_then","description":"\ud83d\udd17 Fluent Array Pipelines with then and tap","source":"@site/docs/ruby/arrays/advanced/pipeline_with_tap_then.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/pipeline_with_tap_then","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/pipeline_with_tap_then","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/pipeline_with_tap_then.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pattern_matching_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/pattern_matching_arrays"},"next":{"title":"selective_flatten","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/selective_flatten"}}');var r=t(23420),s=t(65404);const i={},d=void 0,c={},o=[{value:"\ud83d\udd17 Fluent Array Pipelines with <code>then</code> and <code>tap</code>",id:"-fluent-array-pipelines-with-then-and-tap",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-fluent-array-pipelines-with-then-and-tap",children:["\ud83d\udd17 Fluent Array Pipelines with ",(0,r.jsx)(n.code,{children:"then"})," and ",(0,r.jsx)(n.code,{children:"tap"})]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"tap"})," to insert side\u2011effects (e.g., logging or debugging) without breaking the method chain, and ",(0,r.jsx)(n.code,{children:"then"})," to transform the entire result at a given step. This keeps your pipeline readable and avoids temporary variables."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'result = [1,2,3,4]\n  .select(&:even?)\n  .tap { |evens| STDOUT.puts("Evens: #{evens.inspect}") }\n  .map { |n| n * n }\n  .then { |squares| squares.sum }\n# Logs "Evens: [2,4]" then returns 20\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var a=t(36672);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);