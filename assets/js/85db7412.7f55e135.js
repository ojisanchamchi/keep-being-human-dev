"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9064],{64604:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/xml/beginner/building_xml_with_nokogiri_builder","title":"building_xml_with_nokogiri_builder","description":"\u270d\ufe0f Building XML with Nokogiri::Builder","source":"@site/docs/ruby/xml/beginner/building_xml_with_nokogiri_builder.md","sourceDirName":"ruby/xml/beginner","slug":"/ruby/xml/beginner/building_xml_with_nokogiri_builder","permalink":"/keep-being-human-dev/docs/ruby/xml/beginner/building_xml_with_nokogiri_builder","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/xml/beginner/building_xml_with_nokogiri_builder.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"basic_parsing_with_rexml","permalink":"/keep-being-human-dev/docs/ruby/xml/beginner/basic_parsing_with_rexml"},"next":{"title":"parsing_xml_with_nokogiri","permalink":"/keep-being-human-dev/docs/ruby/xml/beginner/parsing_xml_with_nokogiri"}}');var o=n(23420),l=n(65404);const t={},s=void 0,u={},a=[{value:"\u270d\ufe0f Building XML with Nokogiri::XML::Builder",id:"\ufe0f-building-xml-with-nokogirixmlbuilder",level:2}];function d(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"\ufe0f-building-xml-with-nokogirixmlbuilder",children:"\u270d\ufe0f Building XML with Nokogiri::XML::Builder"}),"\n",(0,o.jsxs)(i.p,{children:["Nokogiri also allows you to construct XML documents programmatically with its ",(0,o.jsx)(i.code,{children:"XML::Builder"})," class. This is useful when you need to generate XML from Ruby objects. Below is an example creating a simple XML structure for a list of users."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ruby",children:"require 'nokogiri'\n\nbuilder = Nokogiri::XML::Builder.new(encoding: 'UTF-8') do |xml|\n  xml.users do\n    xml.user(id: 1) do\n      xml.name 'Alice'\n      xml.email 'alice@example.com'\n    end\n    xml.user(id: 2) do\n      xml.name 'Bob'\n      xml.email 'bob@example.com'\n    end\n  end\nend\n\nputs builder.to_xml\n# => <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n# <users>\n#   <user id=\"1\">\n#     <name>Alice</name>\n#     <email>alice@example.com</email>\n#   </user>\n#   <user id=\"2\">\n#     <name>Bob</name>\n#     <email>bob@example.com</email>\n#   </user>\n# </users>\n"})})]})}function m(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>s});var r=n(36672);const o={},l=r.createContext(o);function t(e){const i=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(l.Provider,{value:i},e.children)}}}]);