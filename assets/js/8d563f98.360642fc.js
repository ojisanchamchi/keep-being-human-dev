"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6878],{47561:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/devise/advanced/custom_password_strength_validator.md","title":"custom_password_strength_validator.md","description":"\ud83d\udd12 Custom Password Strength Validator","source":"@site/docs/gems/devise/advanced/custom_password_strength_validator.md.md","sourceDirName":"gems/devise/advanced","slug":"/gems/devise/advanced/custom_password_strength_validator.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/custom_password_strength_validator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/advanced/custom_password_strength_validator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scoped_comment_counter","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/scoped_comment_counter"},"next":{"title":"devise_jwt_integration.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/devise_jwt_integration.md"}}');var r=s(23420),n=s(65404);const d={},o=void 0,i={},c=[{value:"\ud83d\udd12 Custom Password Strength Validator",id:"-custom-password-strength-validator",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-custom-password-strength-validator",children:"\ud83d\udd12 Custom Password Strength Validator"}),"\n",(0,r.jsxs)(t.p,{children:["Devise\u2019s default password validation ensures presence and confirmation, but you can enforce complexity rules by adding a custom validator. Implement an ",(0,r.jsx)(t.code,{children:"ActiveModel::EachValidator"})," to check length, uppercase, and digit requirements, then hook it into your ",(0,r.jsx)(t.code,{children:"User"})," model. This provides consistent, reusable strength validation across your app."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# app/validators/password_strength_validator.rb\nclass PasswordStrengthValidator < ActiveModel::EachValidator\n  def validate_each(record, attribute, value)\n    return if value =~ /(?=.{8,})(?=.*\\d)(?=.*[A-Z])/ \n    record.errors.add attribute, 'must be at least 8 characters, include an uppercase letter and a digit'\n  end\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"Use it in the model:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# app/models/user.rb\ndevise :database_authenticatable, :registerable, ...\n\nvalidates :password, presence: true, password_strength: true, if: :password_required?\n"})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>o});var a=s(36672);const r={},n=a.createContext(r);function d(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);