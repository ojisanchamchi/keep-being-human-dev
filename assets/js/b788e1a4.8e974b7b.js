"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40999],{2747:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original","title":"wrap_original_with_and_wrap_original","description":"\ud83d\udd78\ufe0f Wrapping Original Implementation with andwraporiginal","source":"@site/docs/gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original.md","sourceDirName":"gems/rspec/mocks_and_stubs/expert","slug":"/gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"verifying_module_methods_with_class_double","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/verifying_module_methods_with_class_double"},"next":{"title":"instance_double_strict_interface","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface"}}');var t=i(23420),a=i(65404);const o={},s=void 0,l={},d=[{value:"\ud83d\udd78\ufe0f Wrapping Original Implementation with <code>and_wrap_original</code>",id:"\ufe0f-wrapping-original-implementation-with-and_wrap_original",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"\ufe0f-wrapping-original-implementation-with-and_wrap_original",children:["\ud83d\udd78\ufe0f Wrapping Original Implementation with ",(0,t.jsx)(n.code,{children:"and_wrap_original"})]}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"and_wrap_original"})," to intercept a real method, perform side\u2011effects or logging, and then delegate to the original implementation. This technique is invaluable for non\u2011intrusive instrumentation or measuring performance without rewriting the method under test."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class Notifier\n  def notify(user, message)\n    # complex external service call\n  end\nend\n\nRSpec.describe Notifier do\n  it 'logs before delegation via and_wrap_original' do\n    allow_any_instance_of(Notifier)\n      .to receive(:notify)\n      .and_wrap_original do |original, user, msg|\n        Rails.logger.info(\"Notifying User##{user.id} with '#{msg}'\")\n        original.call(user, msg)\n      end\n\n    user = double(:user, id: 42)\n    notifier = Notifier.new\n    notifier.notify(user, 'Hello')\n\n    expect(Rails.logger).to have_received(:info)\n      .with(\"Notifying User#42 with 'Hello'\")\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var r=i(36672);const t={},a=r.createContext(t);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);