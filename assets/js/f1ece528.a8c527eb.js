"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26416],{7633:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/strings/middle/scrub_invalid_bytes","title":"scrub_invalid_bytes","description":"\ud83e\uddf9 Cleanse Invalid Bytes with scrub","source":"@site/docs/ruby/strings/middle/scrub_invalid_bytes.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/scrub_invalid_bytes","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/scrub_invalid_bytes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/scrub_invalid_bytes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"regex_named_captures","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/regex_named_captures"},"next":{"title":"string_formatting_sprintf","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/string_formatting_sprintf"}}');var r=s(23420),i=s(65404);const a={},c=void 0,d={},o=[{value:"\ud83e\uddf9 Cleanse Invalid Bytes with scrub",id:"-cleanse-invalid-bytes-with-scrub",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-cleanse-invalid-bytes-with-scrub",children:"\ud83e\uddf9 Cleanse Invalid Bytes with scrub"}),"\n",(0,r.jsxs)(n.p,{children:["When reading user input or external data, invalid byte sequences can cause exceptions in string operations. ",(0,r.jsx)(n.code,{children:"String#scrub"})," replaces or removes invalid bytes according to your specified replacement, ensuring your string remains valid UTF-8 without manual rescanning."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'raw = "Hello \\xFF World".dup.force_encoding("UTF-8")\nclean = raw.scrub("\ufffd")\nputs clean  # => "Hello \ufffd World"\n# Remove invalid bytes entirely\nputs raw.scrub("")  # => "Hello  World"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(36672);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);