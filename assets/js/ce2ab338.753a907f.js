"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97840],{65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var s=a(36672);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}},92462:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/marshal/expert/marshal_custom_versioning","title":"marshal_custom_versioning","description":"\ud83d\udd27 Versioned Custom Marshaling","source":"@site/docs/ruby/marshal/expert/marshal_custom_versioning.md","sourceDirName":"ruby/marshal/expert","slug":"/ruby/marshal/expert/marshal_custom_versioning","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_custom_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/expert/marshal_custom_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"marshal_with_files","permalink":"/keep-being-human-dev/docs/ruby/marshal/beginner/marshal_with_files"},"next":{"title":"marshal_secure_compression","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_secure_compression"}}');var r=a(23420),t=a(65404);const o={},i=void 0,l={},d=[{value:"\ud83d\udd27 Versioned Custom Marshaling",id:"-versioned-custom-marshaling",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-versioned-custom-marshaling",children:"\ud83d\udd27 Versioned Custom Marshaling"}),"\n",(0,r.jsxs)(n.p,{children:["When evolving serialized formats, embed a version and implement ",(0,r.jsx)(n.code,{children:"_dump"}),"/",(0,r.jsx)(n.code,{children:"_load"})," to handle multiple layouts. This allows backward compatibility and graceful migration."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class Widget\n  CURRENT_VERSION = 2\n\n  def initialize(name, options = {})\n    @name    = name\n    @options = options\n  end\n\n  # Called by Marshal.dump\n  def _dump(level)\n    payload = { name: @name, opts: @options }\n    [CURRENT_VERSION, Marshal.dump(payload)].join(":")\n  end\n\n  # Called by Marshal.load\n  def self._load(str)\n    ver, data = str.split(":", 2)\n    obj     = allocate\n    hash    = Marshal.load(data)\n\n    case ver.to_i\n    when 1\n      # In v1, options were a flat hash\n      obj.instance_variable_set(:@name, hash[:name])\n      obj.instance_variable_set(:@options, hash[:opts] || {})\n    when 2\n      # v2 tweaks option format\n      obj.instance_variable_set(:@name, hash[:name].upcase)\n      obj.instance_variable_set(:@options, hash[:opts])\n    else\n      raise "Unsupported version: \\\\#{ver}"\n    end\n\n    obj\n  end\nend\n\n# Usage:\nw = Widget.new("test", enabled: true)\nbin = Marshal.dump(w)\nw2 = Marshal.load(bin)\n'})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);