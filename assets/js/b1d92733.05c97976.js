"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30094],{20525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"ruby/constants/beginner/freezing_constants_to_prevent_mutation","title":"freezing_constants_to_prevent_mutation","description":"\ud83d\udee1\ufe0f Freezing Constants to Prevent Mutation","source":"@site/docs/ruby/constants/beginner/freezing_constants_to_prevent_mutation.md","sourceDirName":"ruby/constants/beginner","slug":"/ruby/constants/beginner/freezing_constants_to_prevent_mutation","permalink":"/keep-being-human-dev/docs/ruby/constants/beginner/freezing_constants_to_prevent_mutation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/constants/beginner/freezing_constants_to_prevent_mutation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"defining_and_accessing_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/beginner/defining_and_accessing_constants"},"next":{"title":"naming_conventions_for_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/beginner/naming_conventions_for_constants"}}');var o=t(23420),r=t(65404);const a={},i=void 0,c={},u=[{value:"\ud83d\udee1\ufe0f Freezing Constants to Prevent Mutation",id:"\ufe0f-freezing-constants-to-prevent-mutation",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-freezing-constants-to-prevent-mutation",children:"\ud83d\udee1\ufe0f Freezing Constants to Prevent Mutation"}),"\n",(0,o.jsxs)(n.p,{children:["Constants can hold mutable objects like arrays or hashes. To avoid accidental modifications, use ",(0,o.jsx)(n.code,{children:"#freeze"})," so that attempts to change the object raise an error."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Without freezing\nROLES = ['admin', 'user']\nROLES << 'guest'\nputs ROLES.inspect  # => [\"admin\", \"user\", \"guest\"]\n\n# With freezing\nPERMISSIONS = { read: true, write: false }.freeze\nPERMISSIONS[:delete] = true\n# => RuntimeError: can't modify frozen Hash\n\n# You can also freeze nested objects\nSETTINGS = {\n  retries: 3,\n  backoff: [1, 2, 4]\n}.freeze\nSETTINGS[:backoff] << 8\n# => works unless you freeze the inner array too\nSETTINGS[:backoff].freeze\nSETTINGS[:backoff] << 8\n# => RuntimeError: can't modify frozen Array\n"})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(36672);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);