"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92333],{65404:(e,a,r)=>{r.d(a,{R:()=>n,x:()=>c});var t=r(36672);const s={},i=t.createContext(s);function n(e){const a=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),t.createElement(i.Provider,{value:a},e.children)}},91576:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>n,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"rails/security/expert/arel_safe_dynamic_queries","title":"arel_safe_dynamic_queries","description":"\ud83d\udcca Safe Dynamic Queries with Arel","source":"@site/docs/rails/security/expert/arel_safe_dynamic_queries.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/arel_safe_dynamic_queries","permalink":"/keep-being-human-dev/docs/rails/security/expert/arel_safe_dynamic_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/arel_safe_dynamic_queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"activestorage_s3_secure_upload","permalink":"/keep-being-human-dev/docs/rails/security/expert/activestorage_s3_secure_upload"},"next":{"title":"ci_dependency_audit","permalink":"/keep-being-human-dev/docs/rails/security/expert/ci_dependency_audit"}}');var s=r(23420),i=r(65404);const n={},c=void 0,l={},u=[{value:"\ud83d\udcca Safe Dynamic Queries with Arel",id:"-safe-dynamic-queries-with-arel",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-safe-dynamic-queries-with-arel",children:"\ud83d\udcca Safe Dynamic Queries with Arel"}),"\n",(0,s.jsx)(a.p,{children:"When building highly dynamic queries (e.g., multi-column search, dynamic filters), Arel lets you assemble SQL fragments without injection risk. It also plays nicely with ActiveRecord and your database adapter."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# dynamic filter params: { field: 'email', operator: 'matches', value: '%@example.com' }\ndef dynamic_scope(params)\n  table = Arel::Table.new(:users)\n  predicate = case params[:operator]\n              when 'eq'     then table[params[:field]].eq(params[:value])\n              when 'matches' then table[params[:field]].matches(params[:value])\n              end\n  User.where(predicate.to_sql)\nend\n"})}),"\n",(0,s.jsx)(a.p,{children:"This approach builds queries from typed Arel objects instead of interpolating strings, fully mitigating SQL injection."})]})}function d(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);