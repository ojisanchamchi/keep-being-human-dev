"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71490],{11903:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/action_cable/expert/jwt_authentication","title":"jwt_authentication","description":"\ud83d\udd12 Secure WebSockets with JWT Authentication at Connection","source":"@site/docs/rails/action_cable/expert/jwt_authentication.md","sourceDirName":"rails/action_cable/expert","slug":"/rails/action_cable/expert/jwt_authentication","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/jwt_authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/expert/jwt_authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fine_grained_authorization","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/fine_grained_authorization"},"next":{"title":"load_testing_action_cable","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/load_testing_action_cable"}}');var c=t(23420),o=t(65404);const i={},r=void 0,s={},l=[{value:"\ud83d\udd12 Secure WebSockets with JWT Authentication at Connection",id:"-secure-websockets-with-jwt-authentication-at-connection",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-secure-websockets-with-jwt-authentication-at-connection",children:"\ud83d\udd12 Secure WebSockets with JWT Authentication at Connection"}),"\n",(0,c.jsxs)(n.p,{children:["By overriding ",(0,c.jsx)(n.code,{children:"ApplicationCable::Connection"}),", you can authenticate clients with JWT and reject unauthorized WebSocket connections early. This ensures only valid users can subscribe to channels, and you can embed claims for fine\u2011grained access control."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    identified_by :current_user\n\n    def connect\n      token = request.params[:token]\n      payload, = JWT.decode(token, Rails.application.secrets.secret_key_base, true, algorithm: 'HS256')\n      self.current_user = User.find(payload['sub'])\n    rescue JWT::DecodeError, ActiveRecord::RecordNotFound\n      reject_unauthorized_connection\n    end\n  end\nend\n"})}),"\n",(0,c.jsx)(n.p,{children:"Clients must attach the token on connect:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-js",children:"// app/javascript/channels/consumer.js\nimport consumer from \"@rails/actioncable\"\n\nconsumer.createConsumer(`/cable?token=${localStorage.getItem('jwt')}`)\n"})}),"\n",(0,c.jsx)(n.p,{children:"This pattern centralizes authentication in a single place and prevents unauthorized consumption of resources."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var a=t(36672);const c={},o=a.createContext(c);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);