"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[49847],{8726:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/operators/middle/method_proc_shorthand","title":"method_proc_shorthand","description":"\ud83d\udce3 Method Proc Shorthand","source":"@site/docs/ruby/operators/middle/method_proc_shorthand.md","sourceDirName":"ruby/operators/middle","slug":"/ruby/operators/middle/method_proc_shorthand","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/method_proc_shorthand","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/middle/method_proc_shorthand.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flip_flop_operator","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/flip_flop_operator"},"next":{"title":"range_operator","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/range_operator"}}');var n=t(23420),s=t(65404);const a={},c=void 0,d={},i=[{value:"\ud83d\udce3 Method Proc Shorthand",id:"-method-proc-shorthand",level:2}];function h(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"-method-proc-shorthand",children:"\ud83d\udce3 Method Proc Shorthand"}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"&:method_name"})," shorthand converts a symbol to a proc, making collections transformations succinct. It's especially useful with ",(0,n.jsx)(o.code,{children:"map"}),", ",(0,n.jsx)(o.code,{children:"select"}),", and similar iterators."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:"names = ['alice', 'bob', 'carol']\n# Expand each string to uppercase\nnames.map(&:upcase) # => [\"ALICE\", \"BOB\", \"CAROL\"]\n\n# Check presence of key in hashes\nusers = [{active: true}, {active: false}]\nusers.select(&:_fetch) # not typical, but illustrates conversion\n"})})]})}function p(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},65404:(e,o,t)=>{t.d(o,{R:()=>a,x:()=>c});var r=t(36672);const n={},s=r.createContext(n);function a(e){const o=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);