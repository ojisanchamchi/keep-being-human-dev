"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71989],{16916:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"rails/logging/middle/broadcast_to_multiple_loggers","title":"broadcast_to_multiple_loggers","description":"\ud83d\udce4 Broadcast Logs to Multiple Destinations","source":"@site/docs/rails/logging/middle/broadcast_to_multiple_loggers.md","sourceDirName":"rails/logging/middle","slug":"/rails/logging/middle/broadcast_to_multiple_loggers","permalink":"/keep-being-human-dev/docs/rails/logging/middle/broadcast_to_multiple_loggers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/middle/broadcast_to_multiple_loggers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_record_sql_logging","permalink":"/keep-being-human-dev/docs/rails/logging/middle/active_record_sql_logging"},"next":{"title":"custom_log_formatter","permalink":"/keep-being-human-dev/docs/rails/logging/middle/custom_log_formatter"}}');var i=t(23420),r=t(65404);const s={},l=void 0,a={},g=[{value:"\ud83d\udce4 Broadcast Logs to Multiple Destinations",id:"-broadcast-logs-to-multiple-destinations",level:2}];function c(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.h2,{id:"-broadcast-logs-to-multiple-destinations",children:"\ud83d\udce4 Broadcast Logs to Multiple Destinations"}),"\n",(0,i.jsxs)(o.p,{children:["Rails lets you broadcast log output to several destinations (e.g., STDOUT and a file) using ",(0,i.jsx)(o.code,{children:"ActiveSupport::Logger.broadcast"}),". This is handy for combining real-time console output with persistent log files."]}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-ruby",children:'# config/environments/production.rb\nfile_logger = ActiveSupport::Logger.new("log/production_archive.log")\nconsole_logger = ActiveSupport::Logger.new(STDOUT)\nbroadcast_logger = ActiveSupport::Logger.new(console_logger)\nbroadcast_logger.extend(ActiveSupport::Logger.broadcast(file_logger))\n\nconfig.logger = ActiveSupport::TaggedLogging.new(broadcast_logger)\nconfig.log_level = :info\n'})}),"\n",(0,i.jsx)(o.p,{children:"Now each log line goes both to STDOUT and your archive file."})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,o,t)=>{t.d(o,{R:()=>s,x:()=>l});var n=t(36672);const i={},r=n.createContext(i);function s(e){const o=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);