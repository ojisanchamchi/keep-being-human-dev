"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25204],{65404:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>c});var n=i(36672);const r={},o=n.createContext(r);function s(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(o.Provider,{value:t},e.children)}},72165:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/models/expert/custom_dirty_tracking","title":"custom_dirty_tracking","description":"\ud83d\udd25 Customize Dirty Tracking for Virtual Attributes","source":"@site/docs/rails/models/expert/custom_dirty_tracking.md","sourceDirName":"rails/models/expert","slug":"/rails/models/expert/custom_dirty_tracking","permalink":"/keep-being-human-dev/docs/rails/models/expert/custom_dirty_tracking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/expert/custom_dirty_tracking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"composite_primary_keys","permalink":"/keep-being-human-dev/docs/rails/models/expert/composite_primary_keys"},"next":{"title":"custom_optimistic_locking","permalink":"/keep-being-human-dev/docs/rails/models/expert/custom_optimistic_locking"}}');var r=i(23420),o=i(65404);const s={},c=void 0,a={},d=[{value:"\ud83d\udd25 Customize Dirty Tracking for Virtual Attributes",id:"-customize-dirty-tracking-for-virtual-attributes",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-customize-dirty-tracking-for-virtual-attributes",children:"\ud83d\udd25 Customize Dirty Tracking for Virtual Attributes"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes you want to treat virtual attributes (not persisted in the DB) as part of the dirty tracking API. Override ",(0,r.jsx)(t.code,{children:"attribute_will_change!"})," and ",(0,r.jsx)(t.code,{children:"attribute_changed?"})," to hook into ActiveModel\u2019s dirty tracking for in\u2011memory attributes."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"class Invoice < ApplicationRecord\n  attr_accessor :discount_code\n\n  def discount_code=(val)\n    discount_code_will_change! unless val == @discount_code\n    @discount_code = val\n  end\n\n  def discount_code_changed?\n    attribute_changed?(:discount_code)\n  end\nend\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Now you get ",(0,r.jsx)(t.code,{children:"invoice.discount_code_changed?"}),", ",(0,r.jsx)(t.code,{children:"invoice.changes"}),", and ",(0,r.jsx)(t.code,{children:"invoice.save"})," won\u2019t persist it but will show you changed state for downstream logic."]})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);