"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48276],{4572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/net_http/expert/persistent_connection_pooling","title":"persistent_connection_pooling","description":"\ud83c\udfce\ufe0f Leverage Net::Persistent for Connection Pooling","source":"@site/docs/ruby/net_http/expert/persistent_connection_pooling.md","sourceDirName":"ruby/net_http/expert","slug":"/ruby/net_http/expert/persistent_connection_pooling","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/persistent_connection_pooling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/expert/persistent_connection_pooling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"post_json_request","permalink":"/keep-being-human-dev/docs/ruby/net_http/beginner/post_json_request"},"next":{"title":"retry_with_exponential_backoff","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/retry_with_exponential_backoff"}}');var s=n(23420),r=n(65404);const i={},c=void 0,p={},a=[{value:"\ud83c\udfce\ufe0f Leverage Net::HTTP::Persistent for Connection Pooling",id:"\ufe0f-leverage-nethttppersistent-for-connection-pooling",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-leverage-nethttppersistent-for-connection-pooling",children:"\ud83c\udfce\ufe0f Leverage Net::HTTP::Persistent for Connection Pooling"}),"\n",(0,s.jsxs)(t.p,{children:["By default, Net::HTTP opens and closes a TCP connection per request, which incurs high latency under load. Use the ",(0,s.jsx)(t.code,{children:"net-http-persistent"})," gem to maintain keep\u2011alive connections across threads or forks, dramatically reducing handshake overhead. You can configure idle timeouts, custom DNS resolvers, and per\u2011host connection pools."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'net/http/persistent'\n\nhttp = Net::HTTP::Persistent.new(name: 'my_app')\nhttp.idle_timeout = 30   # seconds to keep sockets alive\nhttp.pool_size    = 5    # max simultaneous connections\n\nuri = URI('https://api.example.com/data')\nresponse = http.request(uri) # reuses a live socket if available\nputs response.body\n"})}),"\n",(0,s.jsxs)(t.p,{children:["You can also set custom ",(0,s.jsx)(t.code,{children:"open_timeout"}),", ",(0,s.jsx)(t.code,{children:"read_timeout"}),", and override ",(0,s.jsx)(t.code,{children:"proxy_from_env"})," to automatically pick up system proxy settings."]})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(36672);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);