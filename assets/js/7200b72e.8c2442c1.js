"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32586],{50011:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/solid_queue/advanced/advanced_custom_middleware_integration.md","title":"advanced_custom_middleware_integration.md","description":"\ud83d\udee0\ufe0f Custom Middleware Integration","source":"@site/docs/gems/solid_queue/advanced/advanced_custom_middleware_integration.md.md","sourceDirName":"gems/solid_queue/advanced","slug":"/gems/solid_queue/advanced/advanced_custom_middleware_integration.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_custom_middleware_integration.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/advanced/advanced_custom_middleware_integration.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"html_attribute_customization","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/html_attribute_customization"},"next":{"title":"advanced_dynamic_worker_routing.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md"}}');var i=d(23420),t=d(65404);const o={},r=void 0,s={},c=[{value:"\ud83d\udee0\ufe0f Custom Middleware Integration",id:"\ufe0f-custom-middleware-integration",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-custom-middleware-integration",children:"\ud83d\udee0\ufe0f Custom Middleware Integration"}),"\n",(0,i.jsx)(n.p,{children:"SolidQueue allows you to inject custom logic at both client and server sides via middleware. This is useful for adding headers, tracing, or modifying payloads before enqueuing or executing jobs. Below is how you can register and implement your own middleware for advanced operation interception."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/solid_queue.rb\nSolidQueue.configure do |config|\n  # Add a middleware before jobs are published\n  config.client_middleware.use CustomHeaderMiddleware\n  # Add a middleware around job execution on the worker\n  config.server_middleware.use CustomLoggingMiddleware\nend\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# lib/middleware/custom_header_middleware.rb\nclass CustomHeaderMiddleware\n  def call(env, next_middleware)\n    env[:headers]['X-Custom-Header'] = 'MyApp/#{Time.now.to_i}'\n    next_middleware.call(env)\n  end\nend\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# lib/middleware/custom_logging_middleware.rb\nclass CustomLoggingMiddleware\n  def call(env, next_middleware)\n    start = Time.now\n    result = next_middleware.call(env)\n    Rails.logger.info("Job \\\\#{env[:job_id]} executed in \\\\#{Time.now - start}s")\n    result\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,d)=>{d.d(n,{R:()=>o,x:()=>r});var a=d(36672);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);