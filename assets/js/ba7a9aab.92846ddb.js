"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51527],{46810:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/models/advanced/using_arel_for_complex_queries","title":"using_arel_for_complex_queries","description":"\ud83d\udd0d Leveraging Arel for Complex Queries","source":"@site/docs/rails/models/advanced/using_arel_for_complex_queries.md","sourceDirName":"rails/models/advanced","slug":"/rails/models/advanced/using_arel_for_complex_queries","permalink":"/keep-being-human-dev/docs/rails/models/advanced/using_arel_for_complex_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/advanced/using_arel_for_complex_queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"postgres_enum_with_attribute_api","permalink":"/keep-being-human-dev/docs/rails/models/advanced/postgres_enum_with_attribute_api"},"next":{"title":"model_associations","permalink":"/keep-being-human-dev/docs/rails/models/beginner/model_associations"}}');var o=s(23420),r=s(65404);const a={},t=void 0,l={},c=[{value:"\ud83d\udd0d Leveraging Arel for Complex Queries",id:"-leveraging-arel-for-complex-queries",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-leveraging-arel-for-complex-queries",children:"\ud83d\udd0d Leveraging Arel for Complex Queries"}),"\n",(0,o.jsx)(n.p,{children:"When ActiveRecord scopes hit complexity limits, use Arel to build composable SQL expressions while still benefiting from parameterization and injection safety. Arel nodes can represent tables, columns, and SQL operators."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  def self.with_balance_and_recent_login(min_balance, days)\n    users = arel_table\n    login = Login.arel_table\n\n    join_condition = users[:id].eq(login[:user_id])\n    min_balance_condition = users[:balance].gteq(min_balance)\n    recent_login_condition = login[:created_at].gt(days.days.ago)\n\n    joins(users.join(login).on(join_condition).join_sources)\n      .where(min_balance_condition.and(recent_login_condition))\n  end\nend\n\n# Usage\ndef expensive_active_users\n  User.with_balance_and_recent_login(1000, 7)\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>t});var i=s(36672);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);