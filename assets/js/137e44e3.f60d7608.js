"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51911],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(36672);const a={},d=r.createContext(a);function o(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(d.Provider,{value:n},e.children)}},96556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/methods/advanced/forwarding_arguments","title":"forwarding_arguments","description":"\ud83d\udd04 Forwarding Arguments with Ruby 2.7+","source":"@site/docs/ruby/methods/advanced/forwarding_arguments.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/forwarding_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/forwarding_arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/forwarding_arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/dynamic_define_method"},"next":{"title":"memoization_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/memoization_with_arguments"}}');var a=t(23420),d=t(65404);const o={},s=void 0,i={},u=[{value:"\ud83d\udd04 Forwarding Arguments with Ruby 2.7+",id:"-forwarding-arguments-with-ruby-27",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-forwarding-arguments-with-ruby-27",children:"\ud83d\udd04 Forwarding Arguments with Ruby 2.7+"}),"\n",(0,a.jsxs)(n.p,{children:["Ruby\xa02.7+ introduced argument forwarding (",(0,a.jsx)(n.code,{children:"..."}),"), letting you delegate all positional, keyword, and block arguments transparently. This avoids tedious splat (",(0,a.jsx)(n.code,{children:"*args"}),") and double-splat (",(0,a.jsx)(n.code,{children:"**kwargs"}),") boilerplate and ensures future compatibility when you add new params."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'module Audit\n  def process(...)\n    puts "[Audit] Calling: #{__method__} with #{...}"\n    super(...)\n  end\nend\n\nclass Service\n  prepend Audit\n  def process(user, action:, **opts)\n    # complex logic here\n  end\nend\n\nService.new.process("bob", action: :login, ip: "127.0.0.1")\n'})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);