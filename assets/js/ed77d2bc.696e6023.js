"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[55133],{2163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>u,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/minitest/advanced/custom_minitest_plugin","title":"custom_minitest_plugin","description":"\ud83e\uddea Build a Custom Minitest Plugin","source":"@site/docs/ruby/minitest/advanced/custom_minitest_plugin.md","sourceDirName":"ruby/minitest/advanced","slug":"/ruby/minitest/advanced/custom_minitest_plugin","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/custom_minitest_plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/minitest/advanced/custom_minitest_plugin.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tap_chaining","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/tap_chaining"},"next":{"title":"custom_reporter_usage","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/custom_reporter_usage"}}');var s=t(23420),r=t(65404);const u={},o=void 0,a={},c=[{value:"\ud83e\uddea Build a Custom Minitest Plugin",id:"-build-a-custom-minitest-plugin",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-build-a-custom-minitest-plugin",children:"\ud83e\uddea Build a Custom Minitest Plugin"}),"\n",(0,s.jsxs)(n.p,{children:["Minitest plugins let you hook into the test runner lifecycle and add custom CLI flags, reporters, or behaviors. Create a file under ",(0,s.jsx)(n.code,{children:"minitest/plugins"})," and define ",(0,s.jsx)(n.code,{children:"Minitest.plugin_<name>_init"})," and ",(0,s.jsx)(n.code,{children:"Minitest.plugin_<name>_options"})," methods to register your plugin."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# minitest/plugins/trace_plugin.rb\nrequire \'minitest\'\n\ndef Minitest.plugin_trace_plugin_options(opts, _)\n  opts.on "--trace-tests", "Print each test name before running" do\n    @trace_tests = true\n  end\nend\n\ndef Minitest.plugin_trace_plugin_init(options)\n  return unless options[:trace_tests]\n  Minitest::Test.prepend(Module.new do\n    def before_setup\n      puts "Running: #{self.class}##{name}"\n      super\n    end\n  end)\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now you can run:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$ ruby -rminitest/autorun test/**/*_test.rb -- --trace-tests\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>o});var i=t(36672);const s={},r=i.createContext(s);function u(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);