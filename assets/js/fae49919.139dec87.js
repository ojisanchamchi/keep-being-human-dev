"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24719],{55580:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>g,toc:()=>l});const g=JSON.parse('{"id":"ruby/logging/advanced/silence_and_tagged_logging","title":"silence_and_tagged_logging","description":"\ud83c\udff7\ufe0f Contextual Tagging and Selective Silencing","source":"@site/docs/ruby/logging/advanced/silence_and_tagged_logging.md","sourceDirName":"ruby/logging/advanced","slug":"/ruby/logging/advanced/silence_and_tagged_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/silence_and_tagged_logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/advanced/silence_and_tagged_logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_log_formatter_with_metadata","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/custom_log_formatter_with_metadata"},"next":{"title":"structured_logging_with_lograge","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/structured_logging_with_lograge"}}');var a=t(23420),o=t(65404);const i={},r=void 0,s={},l=[{value:"\ud83c\udff7\ufe0f Contextual Tagging and Selective Silencing",id:"\ufe0f-contextual-tagging-and-selective-silencing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-contextual-tagging-and-selective-silencing",children:"\ud83c\udff7\ufe0f Contextual Tagging and Selective Silencing"}),"\n",(0,a.jsxs)(n.p,{children:["ActiveSupport::TaggedLogging helps you wrap logs with contextual tags, while the ",(0,a.jsx)(n.code,{children:"silence"})," method suppresses noise (e.g., asset requests) below a given severity. Combine both to keep logs focused."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# config/application.rb\nlogger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT))\nRails.logger = logger\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'# In a controller or service\nRails.logger.tagged("OrderID:#{order.id}", "User:#{current_user.id}") do\n  Rails.logger.info "Processing order"\n  # Temporarily silence DEBUG logs\n  Rails.logger.silence(Logger::WARN) do\n    Rails.logger.debug "This debug entry won\u2019t appear"\n  end\n  Rails.logger.warn "Potential risk detected"\nend\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var g=t(36672);const a={},o=g.createContext(a);function i(e){const n=g.useContext(o);return g.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),g.createElement(o.Provider,{value:n},e.children)}}}]);