"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89711],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(36672);const r={},c=s.createContext(r);function i(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(c.Provider,{value:n},e.children)}},73055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/sockets/beginner/tcp_server_basics","title":"tcp_server_basics","description":"\ud83d\ude80 Starting a Simple TCP Server","source":"@site/docs/ruby/sockets/beginner/tcp_server_basics.md","sourceDirName":"ruby/sockets/beginner","slug":"/ruby/sockets/beginner/tcp_server_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/tcp_server_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/beginner/tcp_server_basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tcp_client_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/tcp_client_basics"},"next":{"title":"udp_socket_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/udp_socket_basics"}}');var r=t(23420),c=t(65404);const i={},o=void 0,a={},l=[{value:"\ud83d\ude80 Starting a Simple TCP Server",id:"-starting-a-simple-tcp-server",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-starting-a-simple-tcp-server",children:"\ud83d\ude80 Starting a Simple TCP Server"}),"\n",(0,r.jsxs)(n.p,{children:["A basic TCP server in Ruby listens for incoming connections and handles each client one by one. Use the ",(0,r.jsx)(n.code,{children:"TCPServer"})," class to bind to a host and port, then call ",(0,r.jsx)(n.code,{children:"accept"})," inside a loop to await clients."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\n\nserver = TCPServer.new('localhost', 2000)\nputs \"Server running on localhost:2000\"\n\nloop do\n  client = server.accept        # Wait for a client to connect\n  client.puts \"Hello from Ruby TCP Server!\"\n  client.close                 # Disconnect after sending a message\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will send a greeting and then close the connection for each client that connects."})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);