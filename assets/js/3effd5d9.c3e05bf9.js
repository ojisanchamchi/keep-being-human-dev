"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24587],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(36672);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},97467:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"rails/security/expert/csp_with_nonces","title":"csp_with_nonces","description":"\ud83d\udee1\ufe0f Per-Request CSP Nonces","source":"@site/docs/rails/security/expert/csp_with_nonces.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/csp_with_nonces","permalink":"/keep-being-human-dev/docs/rails/security/expert/csp_with_nonces","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/csp_with_nonces.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"csp_violation_report_endpoint","permalink":"/keep-being-human-dev/docs/rails/security/expert/csp_violation_report_endpoint"},"next":{"title":"deep_parameter_sanitization","permalink":"/keep-being-human-dev/docs/rails/security/expert/deep_parameter_sanitization"}}');var r=t(23420),c=t(65404);const o={},i=void 0,a={},p=[{value:"\ud83d\udee1\ufe0f Per-Request CSP Nonces",id:"\ufe0f-per-request-csp-nonces",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-per-request-csp-nonces",children:"\ud83d\udee1\ufe0f Per-Request CSP Nonces"}),"\n",(0,r.jsxs)(n.p,{children:["To safely allow inline ",(0,r.jsx)(n.code,{children:"<script>"})," or ",(0,r.jsx)(n.code,{children:"<style>"})," tags without relaxing your entire CSP, generate a unique nonce per response. Attach it to both the policy and the tags in your layout, ensuring only your dynamic inline code runs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/content_security_policy.rb\nRails.application.config.content_security_policy do |policy|\n  policy.default_src :self\n  policy.script_src  :self, -> { \"'nonce-#{secure_random_nonce}'\" }\n  policy.style_src   :self, -> { \"'nonce-#{secure_random_nonce}'\" }\nend\n\n# app/helpers/application_helper.rb\nmodule ApplicationHelper\n  def secure_random_nonce\n    @secure_random_nonce ||= SecureRandom.base64(16)\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-erb",children:"\x3c!-- app/views/layouts/application.html.erb --\x3e\n<head>\n  <%= csrf_meta_tags %>\n  <%= csp_meta_tag %>\n  <script nonce=\"<%= secure_random_nonce %>\">console.log('Safe inline!');<\/script>\n</head>\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);