"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45238],{36541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"rails/active_record_migrations/middle/add_column_default_not_null","title":"add_column_default_not_null","description":"\ud83c\udd95 Add Columns with Default and NOT NULL","source":"@site/docs/rails/active_record_migrations/middle/add_column_default_not_null.md","sourceDirName":"rails/active_record_migrations/middle","slug":"/rails/active_record_migrations/middle/add_column_default_not_null","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/middle/add_column_default_not_null","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/middle/add_column_default_not_null.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"reversible_data_backfill","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/reversible_data_backfill"},"next":{"title":"add_index_options","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/middle/add_index_options"}}');var d=t(23420),l=t(65404);const r={},i=void 0,o={},s=[{value:"\ud83c\udd95 Add Columns with Default and NOT NULL",id:"-add-columns-with-default-and-not-null",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-add-columns-with-default-and-not-null",children:"\ud83c\udd95 Add Columns with Default and NOT NULL"}),"\n",(0,d.jsx)(n.p,{children:"When adding a new column to a large table, combining a default value with a NOT NULL constraint ensures existing rows are updated atomically and simplifies future queries. You can add the column with a default and null allowance, backfill data, then enforce NOT NULL in a separate step."}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'class AddStatusToOrders < ActiveRecord::Migration[6.1]\n  def up\n    add_column :orders, :status, :string, default: "pending", null: true\n    Order.update_all(status: "pending")\n    change_column_null :orders, :status, false\n  end\n\n  def down\n    remove_column :orders, :status\n  end\nend\n'})})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(36672);const d={},l=a.createContext(d);function r(e){const n=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),a.createElement(l.Provider,{value:n},e.children)}}}]);