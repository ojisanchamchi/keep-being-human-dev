"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95373],{7962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks","title":"metadata_filtered_hooks","description":"\ud83c\udfaf Conditional Hooks with Metadata Filters","source":"@site/docs/gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/middle","slug":"/gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"around_hooks_custom_setup","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/around_hooks_custom_setup"},"next":{"title":"shared_context_lifecycle","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle"}}');var s=n(23420),a=n(65404);const d={},c=void 0,r={},i=[{value:"\ud83c\udfaf Conditional Hooks with Metadata Filters",id:"-conditional-hooks-with-metadata-filters",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-conditional-hooks-with-metadata-filters",children:"\ud83c\udfaf Conditional Hooks with Metadata Filters"}),"\n",(0,s.jsxs)(t.p,{children:["Leverage metadata tags to run hooks only for specific examples or groups. This keeps your setup lightweight and targeted when you have mixed test types (e.g., ",(0,s.jsx)(t.code,{children:":js"}),", ",(0,s.jsx)(t.code,{children:":api"}),", or custom tags)."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"RSpec.configure do |config|\n  # Only run before hooks for examples tagged with :db_cleanup\n  config.before(:each, db_cleanup: true) do\n    DatabaseCleaner.start\n  end\n\n  config.after(:each, db_cleanup: true) do\n    DatabaseCleaner.clean\n  end\nend\n\nRSpec.describe UserAPI, db_cleanup: true do\n  it 'creates a user and cleans up the DB' do\n    post '/users', params: { name: 'Alice' }\n    expect(response.status).to eq(201)\n  end\nend\n\nRSpec.describe SomeOtherService do\n  # This spec won't trigger the DB cleanup hooks\n  it 'does a pure unit test' do\n    expect(1 + 1).to eq(2)\n  end\nend\n"})}),"\n",(0,s.jsx)(t.p,{children:"By scoping hooks with metadata, you avoid unnecessary overhead in specs that don\u2019t require database cleaning."})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var o=n(36672);const s={},a=o.createContext(s);function d(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);