"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66220],{58289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/openssl/middle/verify_certificate_chain","title":"verify_certificate_chain","description":"\ud83d\udcdc Verifying X.509 Certificate Chain","source":"@site/docs/ruby/openssl/middle/verify_certificate_chain.md","sourceDirName":"ruby/openssl/middle","slug":"/ruby/openssl/middle/verify_certificate_chain","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/verify_certificate_chain","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/middle/verify_certificate_chain.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_ssl_context","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/custom_ssl_context"},"next":{"title":"boolean_casting.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/boolean_casting.md"}}');var r=t(23420),a=t(65404);const c={},s=void 0,o={},d=[{value:"\ud83d\udcdc Verifying X.509 Certificate Chain",id:"-verifying-x509-certificate-chain",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-verifying-x509-certificate-chain",children:"\ud83d\udcdc Verifying X.509 Certificate Chain"}),"\n",(0,r.jsxs)(n.p,{children:["When connecting to TLS services or parsing certificates, you must verify trust chains. ",(0,r.jsx)(n.code,{children:"OpenSSL::X509::Store"})," lets you load CAs and verify a peer certificate."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\n# Load root CAs\nstore = OpenSSL::X509::Store.new\nstore.set_default_paths\n# Optionally add a custom CA\nstore.add_file('/path/to/your/ca_cert.pem')\n\n# Load peer certificate and any intermediates\ncert = OpenSSL::X509::Certificate.new(File.read('server_cert.pem'))\nchain = [OpenSSL::X509::Certificate.new(File.read('intermediate.pem'))]\n\n# Verify\nbegin\n  store.verify(cert, chain)\n  puts 'Certificate is valid and trusted.'\nrescue OpenSSL::X509::StoreError => e\n  warn \"Verification failed: #{e.message}\"\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>s});var i=t(36672);const r={},a=i.createContext(r);function c(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);