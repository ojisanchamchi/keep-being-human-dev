"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73809],{65404:(e,s,t)=>{t.d(s,{R:()=>a,x:()=>o});var n=t(36672);const r={},i=n.createContext(r);function a(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:s},e.children)}},86570:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"gems/devise/expert/jwt_stateless_api","title":"jwt_stateless_api","description":"\ud83d\udee1\ufe0f Stateless JWT Authentication for APIs","source":"@site/docs/gems/devise/expert/jwt_stateless_api.md","sourceDirName":"gems/devise/expert","slug":"/gems/devise/expert/jwt_stateless_api","permalink":"/keep-being-human-dev/docs/gems/devise/expert/jwt_stateless_api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/expert/jwt_stateless_api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_failure_app_handling","permalink":"/keep-being-human-dev/docs/gems/devise/expert/dynamic_failure_app_handling"},"next":{"title":"multi_tenant_authentication","permalink":"/keep-being-human-dev/docs/gems/devise/expert/multi_tenant_authentication"}}');var r=t(23420),i=t(65404);const a={},o=void 0,d={},c=[{value:"\ud83d\udee1\ufe0f Stateless JWT Authentication for APIs",id:"\ufe0f-stateless-jwt-authentication-for-apis",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"\ufe0f-stateless-jwt-authentication-for-apis",children:"\ud83d\udee1\ufe0f Stateless JWT Authentication for APIs"}),"\n",(0,r.jsxs)(s.p,{children:["Implement a fully stateless API by replacing Devise\u2019s session store with JWTs signed by your Rails secret. This tip describes how to override ",(0,r.jsx)(s.code,{children:"Devise::SessionsController"})," to issue access and refresh tokens, validate them, and handle revocation securely. Use ",(0,r.jsx)(s.code,{children:"jwt"})," and ",(0,r.jsx)(s.code,{children:"ActiveSupport::MessageVerifier"})," for signature and rotation."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"# app/controllers/users/sessions_controller.rb\nclass Users::SessionsController < Devise::SessionsController\n  skip_before_action :verify_signed_out_user\n\n  def create\n    user = User.find_by(email: params[:user][:email])\n    if user&.valid_password?(params[:user][:password])\n      tokens = JwtService.encode(user_id: user.id)\n      render json: tokens, status: :created\n    else\n      render json: {error: 'Invalid credentials'}, status: :unauthorized\n    end\n  end\nend\n\n# app/services/jwt_service.rb\nclass JwtService\n  SECRET = Rails.application.credentials.jwt_secret\n\n  def self.encode(payload)\n    exp = 15.minutes.from_now.to_i\n    token = JWT.encode(payload.merge(exp: exp), SECRET, 'HS256')\n    { access: token }\n  end\n\n  def self.decode(token)\n    decoded = JWT.decode(token, SECRET, true, algorithm: 'HS256')\n    decoded.first.symbolize_keys\n  rescue JWT::ExpiredSignature, JWT::DecodeError => e\n    raise UnauthorizedError, e.message\n  end\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);