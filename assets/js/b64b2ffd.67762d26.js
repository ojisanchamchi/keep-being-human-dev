"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45827],{38639:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/syntax/middle/hash_transform_methods","title":"hash_transform_methods","description":"\ud83d\udd04 Transforming Hash Keys and Values","source":"@site/docs/ruby/syntax/middle/hash_transform_methods.md","sourceDirName":"ruby/syntax/middle","slug":"/ruby/syntax/middle/hash_transform_methods","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/hash_transform_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/middle/hash_transform_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"frozen_string_literal","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/frozen_string_literal"},"next":{"title":"numbered_block_parameters","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/numbered_block_parameters"}}');var r=s(23420),a=s(65404);const o={},i=void 0,d={},m=[{value:"\ud83d\udd04 Transforming Hash Keys and Values",id:"-transforming-hash-keys-and-values",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-transforming-hash-keys-and-values",children:"\ud83d\udd04 Transforming Hash Keys and Values"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\u2019s ",(0,r.jsx)(n.code,{children:"transform_keys"})," and ",(0,r.jsx)(n.code,{children:"transform_values"})," let you map over a hash\u2019s structure without converting to arrays. These methods return new hashes, keeping the original intact."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'metrics = { "load time" => 3.5, "uptime" => 99.9 }\n\n# Normalize keys to symbols:\nsymbolized = metrics.transform_keys { |k| k.tr(" ", "_").to_sym }\n# => { load_time: 3.5, uptime: 99.9 }\n\n# Convert values to integers:\nrounded = metrics.transform_values(&:to_i)\n# => { "load time" => 3, "uptime" => 99 }\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(36672);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);