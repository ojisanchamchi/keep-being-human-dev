"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[91802],{47686:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/authentication_and_authorization/middle/policy_scope_index","title":"policy_scope_index","description":"\ud83d\udcdc Leverage policy_scope in Index Actions","source":"@site/docs/rails/authentication_and_authorization/middle/policy_scope_index.md","sourceDirName":"rails/authentication_and_authorization/middle","slug":"/rails/authentication_and_authorization/middle/policy_scope_index","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/middle/policy_scope_index","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/authentication_and_authorization/middle/policy_scope_index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"customize_redirects","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/middle/customize_redirects"},"next":{"title":"role_based_policies","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/middle/role_based_policies"}}');var t=i(23420),c=i(65404);const s={},a=void 0,r={},l=[{value:"\ud83d\udcdc Leverage policy_scope in Index Actions",id:"-leverage-policy_scope-in-index-actions",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-leverage-policy_scope-in-index-actions",children:"\ud83d\udcdc Leverage policy_scope in Index Actions"}),"\n",(0,t.jsxs)(n.p,{children:["Pundit's ",(0,t.jsx)(n.code,{children:"policy_scope"})," helps you filter records a user is allowed to view. Instead of fetching all records, use ",(0,t.jsx)(n.code,{children:"policy_scope"})," in your controller's ",(0,t.jsx)(n.code,{children:"index"})," action to apply the policy scope automatically."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class ArticlesController < ApplicationController\n  before_action :authenticate_user!\n  def index\n    # Only returns articles the user is authorized to see\n    @articles = policy_scope(Article)\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then define the scope in ",(0,t.jsx)(n.code,{children:"ArticlePolicy"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class ArticlePolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      if user.admin?\n        scope.all\n      else\n        scope.where(published: true)\n      end\n    end\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(36672);const t={},c=o.createContext(t);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);