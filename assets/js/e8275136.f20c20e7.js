"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87984],{56462:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/metaprogramming/expert/composable_concerns_like_active_support","title":"composable_concerns_like_active_support","description":"\ud83e\uddec Composable Concerns via Module#append_features","source":"@site/docs/ruby/metaprogramming/expert/composable_concerns_like_active_support.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/composable_concerns_like_active_support","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/composable_concerns_like_active_support","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/composable_concerns_like_active_support.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compile_time_code_generation_with_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/compile_time_code_generation_with_eval"},"next":{"title":"dsl_instance_eval_class_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dsl_instance_eval_class_eval"}}');var a=o(23420),s=o(65404);const r={},c=void 0,d={},i=[{value:"\ud83e\uddec Composable Concerns via Module#append_features",id:"-composable-concerns-via-moduleappend_features",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-composable-concerns-via-moduleappend_features",children:"\ud83e\uddec Composable Concerns via Module#append_features"}),"\n",(0,a.jsxs)(n.p,{children:["Emulate ActiveSupport::Concern by defining an ",(0,a.jsx)(n.code,{children:"included"})," hook to inject both instance and class methods in a clean, composable fashion. This pattern avoids naming collisions and simplifies dependencies between modules."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"module Concern\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def append_features(mod)\n      super\n      const_get(:ClassMethods).each do |m|\n        mod.define_singleton_method(m) { |*args| super(*args) }\n      end\n    end\n  end\nend\n\nmodule Auditable\n  include Concern\n\n  def record_change; puts 'Change recorded'; end\n\n  module ClassMethods\n    def audit_all; puts 'Auditing all records'; end\n  end\nend\n\nclass Record\n  include Auditable\nend\n\nRecord.new.record_change  # => \"Change recorded\"\nRecord.audit_all          # => \"Auditing all records\"\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(36672);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);