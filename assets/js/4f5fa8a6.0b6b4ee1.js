"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31502],{35906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/variables/expert/dynamic_constant_management_expert","title":"dynamic_constant_management_expert","description":"\ud83d\udd0c Dynamically Managing Constants for Plugin Architectures","source":"@site/docs/ruby/variables/expert/dynamic_constant_management_expert.md","sourceDirName":"ruby/variables/expert","slug":"/ruby/variables/expert/dynamic_constant_management_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/dynamic_constant_management_expert","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/expert/dynamic_constant_management_expert.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"binding_local_variable_manipulation_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/binding_local_variable_manipulation_expert"},"next":{"title":"thread_fiber_local_variables_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/thread_fiber_local_variables_expert"}}');var r=t(23420),s=t(65404);const i={},o=void 0,l={},c=[{value:"\ud83d\udd0c Dynamically Managing Constants for Plugin Architectures",id:"-dynamically-managing-constants-for-plugin-architectures",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-dynamically-managing-constants-for-plugin-architectures",children:"\ud83d\udd0c Dynamically Managing Constants for Plugin Architectures"}),"\n",(0,r.jsxs)(n.p,{children:["Building pluggable systems often requires defining, loading, or unloading modules at runtime. Use ",(0,r.jsx)(n.code,{children:"Module#const_set"}),", ",(0,r.jsx)(n.code,{children:"#const_get"}),", and ",(0,r.jsx)(n.code,{children:"#remove_const"})," to inject or evict constants safely under a namespace, enabling hot swapping or sandboxed plugin isolation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Dynamically define a plugin under MyApp::Plugins\nmodule MyApp; module Plugins; end; end\n\nMyApp::Plugins.const_set(:Logger, Class.new do\n  def self.log(msg)\n    puts "[LOG] #{msg}"\n  end\nend)\n\n# Use it\nMyApp::Plugins::Logger.log("Hello from plugin")\n\n# Unload it to free memory or reload\nMyApp::Plugins.send(:remove_const, :Logger)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(36672);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);