"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14805],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(36672);const d={},r=a.createContext(d);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),a.createElement(r.Provider,{value:n},e.children)}},65703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/metaprogramming/advanced/dynamic_delegator_generation","title":"dynamic_delegator_generation","description":"\ud83e\udde9 Generating delegators on the fly","source":"@site/docs/ruby/metaprogramming/advanced/dynamic_delegator_generation.md","sourceDirName":"ruby/metaprogramming/advanced","slug":"/ruby/metaprogramming/advanced/dynamic_delegator_generation","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dynamic_delegator_generation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/advanced/dynamic_delegator_generation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dynamic_define_method"},"next":{"title":"dynamic_singleton_methods","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dynamic_singleton_methods"}}');var d=t(23420),r=t(65404);const o={},i=void 0,s={},c=[{value:"\ud83e\udde9 Generating delegators on the fly",id:"-generating-delegators-on-the-fly",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-generating-delegators-on-the-fly",children:"\ud83e\udde9 Generating delegators on the fly"}),"\n",(0,d.jsxs)(n.p,{children:["Automate ",(0,d.jsx)(n.code,{children:"delegate"})," declarations by reading a list of methods and creating delegators via ",(0,d.jsx)(n.code,{children:"Module#define_method"})," and ",(0,d.jsx)(n.code,{children:"send"}),", customizing targets dynamically."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"module DynamicDelegator\n  def delegate_methods(target, *methods)\n    methods.each do |m|\n      define_method(m) { |*args| send(target).public_send(m, *args) }\n    end\n  end\nend\n\nclass Presenter\n  extend DynamicDelegator\n  delegate_methods :model, :name, :email\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(m,{...e})}):m(e)}}}]);