"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7585],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(36672);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},65451:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/benchmarking/middle/benchmark_results_formatting","title":"benchmark_results_formatting","description":"\ud83d\udcca Capturing and Formatting Benchmark Results","source":"@site/docs/ruby/benchmarking/middle/benchmark_results_formatting.md","sourceDirName":"ruby/benchmarking/middle","slug":"/ruby/benchmarking/middle/benchmark_results_formatting","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/middle/benchmark_results_formatting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/benchmarking/middle/benchmark_results_formatting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"benchmark_realtime","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/middle/benchmark_realtime"},"next":{"title":"benchmark_string_vs_interpolation","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/middle/benchmark_string_vs_interpolation"}}');var a=r(23420),s=r(65404);const i={},c=void 0,o={},m=[{value:"\ud83d\udcca Capturing and Formatting Benchmark Results",id:"-capturing-and-formatting-benchmark-results",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-capturing-and-formatting-benchmark-results",children:"\ud83d\udcca Capturing and Formatting Benchmark Results"}),"\n",(0,a.jsxs)(n.p,{children:["You can capture benchmarking results into a ",(0,a.jsx)(n.code,{children:"Benchmark::Tms"})," object using ",(0,a.jsx)(n.code,{children:"Benchmark.measure"})," and then format or log the values programmatically. This approach allows you to integrate performance data into reports or dashboards. Use the object's ",(0,a.jsx)(n.code,{children:"real"}),", ",(0,a.jsx)(n.code,{children:"utime"}),", and ",(0,a.jsx)(n.code,{children:"stime"})," attributes for custom display."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'benchmark'\n\nresult = Benchmark.measure { 1_000_000.times { |i| i**2 } }\nputs \"Real: #{result.real.round(4)}s, User: #{result.utime.round(4)}s, System: #{result.stime.round(4)}s\"\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);