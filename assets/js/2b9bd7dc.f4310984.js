"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73714],{13081:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/forms/expert/custom_form_builder","title":"custom_form_builder","description":"\ud83d\udee0\ufe0f Custom Form Builder for Unified Input DSL","source":"@site/docs/rails/forms/expert/custom_form_builder.md","sourceDirName":"rails/forms/expert","slug":"/rails/forms/expert/custom_form_builder","permalink":"/keep-being-human-dev/docs/rails/forms/expert/custom_form_builder","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/forms/expert/custom_form_builder.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_strong_parameters","permalink":"/keep-being-human-dev/docs/rails/forms/expert/advanced_strong_parameters"},"next":{"title":"dynamic_nested_forms","permalink":"/keep-being-human-dev/docs/rails/forms/expert/dynamic_nested_forms"}}');var o=t(23420),s=t(65404);const i={},a=void 0,d={},l=[{value:"\ud83d\udee0\ufe0f Custom Form Builder for Unified Input DSL",id:"\ufe0f-custom-form-builder-for-unified-input-dsl",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"\ufe0f-custom-form-builder-for-unified-input-dsl",children:"\ud83d\udee0\ufe0f Custom Form Builder for Unified Input DSL"}),"\n",(0,o.jsxs)(r.p,{children:["Create a centralized form builder to enforce consistent markup, error handling, and custom inputs across your app. By subclassing ",(0,o.jsx)(r.code,{children:"ActionView::Helpers::FormBuilder"}),", you can define helper methods (e.g., ",(0,o.jsx)(r.code,{children:"f.input_field"}),") that wrap labels, inputs, and error messages automatically."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"# app/helpers/unified_form_builder.rb\nclass UnifiedFormBuilder < ActionView::Helpers::FormBuilder\n  def input_field(attribute, **options)\n    label_html = label(attribute, class: 'form-label')\n    input_html = super(attribute, class: 'form-control', **options)\n    errors = @object.errors[attribute].map { |e| @template.content_tag(:div, e, class: 'invalid-feedback') }.join.html_safe\n    @template.content_tag(:div, class: \"mb-3 #{'has-error' if errors.present?}\") do\n      label_html + input_html + errors\n    end\n  end\nend\n\n# In ApplicationHelper\ndef unified_form_with(**options, &block)\n  options[:builder] = UnifiedFormBuilder\n  form_with(**options, &block)\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["Use ",(0,o.jsx)(r.code,{children:"unified_form_with model: @user"})," in your views to get consistent styling and error display."]})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(36672);const o={},s=n.createContext(o);function i(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);