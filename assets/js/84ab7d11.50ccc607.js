"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88669],{6343:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>b,frontMatter:()=>n,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/active_record_callbacks/expert/abort_before_destroy","title":"abort_before_destroy","description":"\u26a0\ufe0f Aborting Destructive Callbacks with throw(:abort)","source":"@site/docs/rails/active_record_callbacks/expert/abort_before_destroy.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/abort_before_destroy","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/abort_before_destroy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/abort_before_destroy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_blocks_in_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/beginner/using_blocks_in_callbacks"},"next":{"title":"around_commit_transaction","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/around_commit_transaction"}}');var a=r(23420),c=r(65404);const n={},s=void 0,i={},l=[{value:"\u26a0\ufe0f Aborting Destructive Callbacks with <code>throw(:abort)</code>",id:"\ufe0f-aborting-destructive-callbacks-with-throwabort",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h2,{id:"\ufe0f-aborting-destructive-callbacks-with-throwabort",children:["\u26a0\ufe0f Aborting Destructive Callbacks with ",(0,a.jsx)(t.code,{children:"throw(:abort)"})]}),"\n",(0,a.jsxs)(t.p,{children:["In ",(0,a.jsx)(t.code,{children:"before_destroy"})," or other ",(0,a.jsx)(t.code,{children:"before_*"})," callbacks, use ",(0,a.jsx)(t.code,{children:"throw(:abort)"})," to cancel the operation gracefully. Raise exceptions only when you need a full rollback; otherwise, ",(0,a.jsx)(t.code,{children:"throw(:abort)"})," is more efficient and idiomatic."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'class Project < ApplicationRecord\n  before_destroy :ensure_no_active_tasks\n\n  private\n\n  def ensure_no_active_tasks\n    if tasks.active.exists?\n      errors.add(:base, "Cannot destroy a project with active tasks")\n      throw(:abort)\n    end\n  end\nend\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Clients calling ",(0,a.jsx)(t.code,{children:"destroy"})," will get ",(0,a.jsx)(t.code,{children:"false"})," and have access to ",(0,a.jsx)(t.code,{children:"project.errors"}),". This pattern helps you enforce domain constraints without expensive exception handling."]})]})}function b(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>s});var o=r(36672);const a={},c=o.createContext(a);function n(e){const t=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),o.createElement(c.Provider,{value:t},e.children)}}}]);