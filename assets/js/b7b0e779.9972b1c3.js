"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4904],{65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(36672);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}},86204:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/fibers/beginner/what_is_a_fiber","title":"what_is_a_fiber","description":"\ud83d\ude80 What Is a Fiber?","source":"@site/docs/ruby/fibers/beginner/what_is_a_fiber.md","sourceDirName":"ruby/fibers/beginner","slug":"/ruby/fibers/beginner/what_is_a_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/what_is_a_fiber","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/beginner/what_is_a_fiber.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"simple_enumerator_with_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/simple_enumerator_with_fiber"},"next":{"title":"async_gem_integration","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_gem_integration"}}');var i=n(23420),s=n(65404);const a={},o=void 0,u={},c=[{value:"\ud83d\ude80 What Is a Fiber?",id:"-what-is-a-fiber",level:2}];function b(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"-what-is-a-fiber",children:"\ud83d\ude80 What Is a Fiber?"}),"\n",(0,i.jsx)(r.p,{children:"Fibers are lightweight concurrency primitives in Ruby that let you pause and resume execution at specific points. They behave like coroutines, allowing you to switch contexts explicitly without threads. Fibers are great for stepping through a sequence of operations where you control when to yield and resume execution."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:'fiber = Fiber.new do\n  puts "Inside Fiber"\n  Fiber.yield      # Pause here\n  puts "Resumed Fiber"\nend\n\nputs "Before resume"\nfiber.resume       # => "Inside Fiber"\nputs "Between resumes"\nfiber.resume       # => "Resumed Fiber"\n'})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(b,{...e})}):b(e)}}}]);