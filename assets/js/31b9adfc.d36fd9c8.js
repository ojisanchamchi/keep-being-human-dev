"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50450],{8254:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/websockets/middle/broadcast_to_user","title":"broadcast_to_user","description":"\ud83c\udfaf Targeted Broadcasting to a Specific User","source":"@site/docs/rails/websockets/middle/broadcast_to_user.md","sourceDirName":"rails/websockets/middle","slug":"/rails/websockets/middle/broadcast_to_user","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/broadcast_to_user","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/middle/broadcast_to_user.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_sentinel_scaling","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/redis_sentinel_scaling"},"next":{"title":"connection_authorization","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/connection_authorization"}}');var a=n(23420),r=n(65404);const o={},i=void 0,c={},d=[{value:"\ud83c\udfaf Targeted Broadcasting to a Specific User",id:"-targeted-broadcasting-to-a-specific-user",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-targeted-broadcasting-to-a-specific-user",children:"\ud83c\udfaf Targeted Broadcasting to a Specific User"}),"\n",(0,a.jsxs)(t.p,{children:["To send personalized updates, use ",(0,a.jsx)(t.code,{children:"stream_for"})," in your channel and ",(0,a.jsx)(t.code,{children:"broadcast_to"})," in your server-side code. This method isolates messages to a single user rather than broadcasting globally."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# app/channels/notification_channel.rb\nclass NotificationChannel < ApplicationCable::Channel\n  def subscribed\n    stream_for current_user\n  end\nend\n\n# app/controllers/notifications_controller.rb\nclass NotificationsController < ApplicationController\n  def create\n    @notification = Notification.create!(user: current_user, message: params[:message])\n    NotificationChannel.broadcast_to(current_user, {\n      message: @notification.message\n    })\n    head :ok\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(36672);const a={},r=s.createContext(a);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);