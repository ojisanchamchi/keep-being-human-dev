"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40849],{12840:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>g,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/logging/middle/custom_logger_formatter","title":"custom_logger_formatter","description":"\ud83d\udd8b\ufe0f Customize Logger::Formatter for Rich Output","source":"@site/docs/ruby/logging/middle/custom_logger_formatter.md","sourceDirName":"ruby/logging/middle","slug":"/ruby/logging/middle/custom_logger_formatter","permalink":"/keep-being-human-dev/docs/ruby/logging/middle/custom_logger_formatter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/middle/custom_logger_formatter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"structured_json_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/structured_json_logging"},"next":{"title":"json_structured_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/middle/json_structured_logging"}}');var n=r(23420),s=r(65404);const i={},g=void 0,u={},c=[{value:"\ud83d\udd8b\ufe0f Customize Logger::Formatter for Rich Output",id:"\ufe0f-customize-loggerformatter-for-rich-output",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"\ufe0f-customize-loggerformatter-for-rich-output",children:"\ud83d\udd8b\ufe0f Customize Logger::Formatter for Rich Output"}),"\n",(0,n.jsxs)(t.p,{children:["By subclassing ",(0,n.jsx)(t.code,{children:"Logger::Formatter"}),", you can inject additional metadata (like PID, thread ID, or service name) into every log entry. This ensures consistency across services without repeating code."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:'class CustomFormatter < Logger::Formatter\n  def call(severity, time, progname, msg)\n    pid = Process.pid\n    thread = Thread.current.object_id\n    "[#{time.utc.iso8601}] PID=#{pid} TID=#{thread} #{severity} #{progname}: #{msg}\\n"\n  end\nend\n\nlogger = Logger.new(\'log/production.log\')\nlogger.formatter = CustomFormatter.new\nlogger.progname = "MyApp"\nlogger.warn("Cache miss for key user_#{current_user.id}")\n'})}),"\n",(0,n.jsx)(t.p,{children:"This grants you full control over the log layout and content, making cross-referencing logs in distributed systems much easier."})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>g});var o=r(36672);const n={},s=o.createContext(n);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function g(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);