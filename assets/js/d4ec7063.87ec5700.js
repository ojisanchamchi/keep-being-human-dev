"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4323],{42004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/openssl/beginner/create_sha256_digest","title":"create_sha256_digest","description":"\ud83d\udee1\ufe0f Create a SHA256 Digest","source":"@site/docs/ruby/openssl/beginner/create_sha256_digest.md","sourceDirName":"ruby/openssl/beginner","slug":"/ruby/openssl/beginner/create_sha256_digest","permalink":"/keep-being-human-dev/docs/ruby/openssl/beginner/create_sha256_digest","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/beginner/create_sha256_digest.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"aes_encrypt_decrypt","permalink":"/keep-being-human-dev/docs/ruby/openssl/beginner/aes_encrypt_decrypt"},"next":{"title":"generate_rsa_key_pair","permalink":"/keep-being-human-dev/docs/ruby/openssl/beginner/generate_rsa_key_pair"}}');var r=n(23420),a=n(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udee1\ufe0f Create a SHA256 Digest",id:"\ufe0f-create-a-sha256-digest",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-create-a-sha256-digest",children:"\ud83d\udee1\ufe0f Create a SHA256 Digest"}),"\n",(0,r.jsx)(t.p,{children:"Checksums let you verify that data hasn\u2019t been tampered with. OpenSSL::Digest provides a simple interface to compute SHA256 hashes. You can get both raw and hex-encoded outputs depending on your needs."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'openssl'\n\ndata = 'The quick brown fox jumps over the lazy dog'\n\n# Initialize a SHA256 context\ndigest = OpenSSL::Digest::SHA256.new\n\n# Compute the hex-encoded digest\nhex_hash = digest.hexdigest(data)\nputs \"SHA256 (hex): #{hex_hash}\"\n\n# Compute the raw binary digest if needed\nraw_hash = digest.digest(data)\nputs \"SHA256 (raw bytes): #{raw_hash}\"  # not printable\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(36672);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);