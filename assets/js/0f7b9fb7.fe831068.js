"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13106],{65404:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>s});var n=t(36672);const c={},r=n.createContext(c);function i(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),n.createElement(r.Provider,{value:a},e.children)}},67840:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/chartkick/advanced/streaming_via_action_cable","title":"streaming_via_action_cable","description":"\ud83d\ude80 Real-Time Updates with ActionCable","source":"@site/docs/gems/chartkick/advanced/streaming_via_action_cable.md","sourceDirName":"gems/chartkick/advanced","slug":"/gems/chartkick/advanced/streaming_via_action_cable","permalink":"/keep-being-human-dev/docs/gems/chartkick/advanced/streaming_via_action_cable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/chartkick/advanced/streaming_via_action_cable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_axis_charts","permalink":"/keep-being-human-dev/docs/gems/chartkick/advanced/multi_axis_charts"},"next":{"title":"basic_line_chart","permalink":"/keep-being-human-dev/docs/gems/chartkick/beginner/basic_line_chart"}}');var c=t(23420),r=t(65404);const i={},s=void 0,o={},d=[{value:"\ud83d\ude80 Real-Time Updates with ActionCable",id:"-real-time-updates-with-actioncable",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.h2,{id:"-real-time-updates-with-actioncable",children:"\ud83d\ude80 Real-Time Updates with ActionCable"}),"\n",(0,c.jsxs)(a.p,{children:["Use ActionCable to push live data into your Chartkick charts so users see real\u2011time updates without a full page reload. Set up a channel to stream chart data and call ",(0,c.jsx)(a.code,{children:'Chartkick.charts["your-chart-id"].updateData'})," on every broadcast."]}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-ruby",children:'# app/channels/chart_data_channel.rb\ndef subscribed\n  stream_for "chart_data"\nend\n'})}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-javascript",children:'// app/javascript/channels/chart_data_channel.js\nimport { createConsumer } from "@rails/actioncable"\nimport Chartkick from "chartkick"\nimport "chartkick/chart.js"\n\nconst consumer = createConsumer()\nconsumer.subscriptions.create("ChartDataChannel", {\n  received(data) {\n    // Update the chart with new data\n    Chartkick.charts["realtime-chart"].updateData(data)\n  }\n})\n'})}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-erb",children:'\x3c!-- app/views/dashboard/index.html.erb --\x3e\n<%= line_chart [], id: "realtime-chart", height: "300px" %>\n'})}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-ruby",children:'# Anywhere in Rails (e.g., controller or background job)\nChartDataChannel.broadcast_to("chart_data", [{name: "Sales", data: {"2023-01-01" => 100, "2023-01-02" => 150}}])\n'})})]})}function h(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,c.jsx)(a,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);