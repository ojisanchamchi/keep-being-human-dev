"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15499],{18061:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"gems/counter_culture/middle/scoped_comment_counter","title":"scoped_comment_counter","description":"\ud83d\uddc3\ufe0f Scoped Counters with Conditions","source":"@site/docs/gems/counter_culture/middle/scoped_comment_counter.md","sourceDirName":"gems/counter_culture/middle","slug":"/gems/counter_culture/middle/scoped_comment_counter","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/scoped_comment_counter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/middle/scoped_comment_counter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multiple_counter_usage","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/multiple_counter_usage"},"next":{"title":"custom_password_strength_validator.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/custom_password_strength_validator.md"}}');var c=o(23420),s=o(65404);const r={},d=void 0,u={},a=[{value:"\ud83d\uddc3\ufe0f Scoped Counters with Conditions",id:"\ufe0f-scoped-counters-with-conditions",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\ufe0f-scoped-counters-with-conditions",children:"\ud83d\uddc3\ufe0f Scoped Counters with Conditions"}),"\n",(0,c.jsxs)(n.p,{children:["CounterCulture allows you to maintain counters using scopes, so you can count only the records matching a condition (e.g., only approved comments). This helps keep your data accurate and avoids adding complex SQL or manual callbacks. Simply pass a lambda to the ",(0,c.jsx)(n.code,{children:"scope"})," option and CounterCulture will apply it to each update."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\n\n  counter_culture :post,\n    column_name: Proc.new { |model| model.approved? ? 'approved_comments_count' : nil },\n    column_names: {\n      ['comments.approved = ?', true] => 'approved_comments_count'\n    }\nend\n\n# app/models/post.rb\nclass Post < ApplicationRecord\n  # ensure you have an integer column :approved_comments_count with default 0\nend\n"})}),"\n",(0,c.jsx)(n.p,{children:"In the migration you\u2019d add:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"class AddApprovedCommentsCountToPosts < ActiveRecord::Migration[6.1]\n  def change\n    add_column :posts, :approved_comments_count, :integer, default: 0, null: false\n    Post.find_each { |p| p.update_column(:approved_comments_count, p.comments.where(approved: true).count) }\n  end\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(i,{...e})}):i(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(36672);const c={},s=t.createContext(c);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);