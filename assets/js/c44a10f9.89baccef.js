"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57627],{7432:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/devise/expert/custom_warden_2fa","title":"custom_warden_2fa","description":"\ud83d\udd12 Custom Warden Strategy for Two-Factor Authentication","source":"@site/docs/gems/devise/expert/custom_warden_2fa.md","sourceDirName":"gems/devise/expert","slug":"/gems/devise/expert/custom_warden_2fa","permalink":"/keep-being-human-dev/docs/gems/devise/expert/custom_warden_2fa","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/expert/custom_warden_2fa.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"install_devise","permalink":"/keep-being-human-dev/docs/gems/devise/beginner/install_devise"},"next":{"title":"dynamic_failure_app_handling","permalink":"/keep-being-human-dev/docs/gems/devise/expert/dynamic_failure_app_handling"}}');var r=n(23420),s=n(65404);const o={},i=void 0,d={},c=[{value:"\ud83d\udd12 Custom Warden Strategy for Two-Factor Authentication",id:"-custom-warden-strategy-for-two-factor-authentication",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-custom-warden-strategy-for-two-factor-authentication",children:"\ud83d\udd12 Custom Warden Strategy for Two-Factor Authentication"}),"\n",(0,r.jsxs)(t.p,{children:["Enhance Devise by injecting a custom Warden strategy that enforces two-factor authentication (2FA) after the standard credential check. This approach intercepts the authentication flow at the Warden layer, allowing you to prompt for and verify a one\u2011time password (OTP) without patching Devise internals. You can leverage ",(0,r.jsx)(t.code,{children:"ROTP"})," or ",(0,r.jsx)(t.code,{children:"devise\u2011two_factor"})," for generating and validating the OTP."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/warden_2fa.rb\nWarden::Strategies.add(:two_factor) do\n  def valid?\n    user = User.find_by(email: params[:user][:email])\n    user&.valid_password?(params[:user][:password]) && params[:user][:otp_attempt]\n  end\n\n  def authenticate!\n    user = User.find_by(email: params[:user][:email])\n    if user&.validate_and_consume_otp!(params[:user][:otp_attempt])\n      success!(user)\n    else\n      fail!('Invalid two\u2011factor code')\n    end\n  end\nend\n\nDevise.setup do |config|\n  config.warden do |manager|\n    manager.default_strategies(scope: :user).unshift :two_factor\n  end\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(36672);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);