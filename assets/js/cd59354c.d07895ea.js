"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19111],{37962:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/variables/expert/binding_local_variable_manipulation_expert","title":"binding_local_variable_manipulation_expert","description":"\ud83e\udde0 Manipulating Local Variables with Binding for Metaprogramming","source":"@site/docs/ruby/variables/expert/binding_local_variable_manipulation_expert.md","sourceDirName":"ruby/variables/expert","slug":"/ruby/variables/expert/binding_local_variable_manipulation_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/binding_local_variable_manipulation_expert","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/expert/binding_local_variable_manipulation_expert.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"string_interpolation","permalink":"/keep-being-human-dev/docs/ruby/variables/beginner/string_interpolation"},"next":{"title":"dynamic_constant_management_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/dynamic_constant_management_expert"}}');var t=a(23420),r=a(65404);const o={},l=void 0,s={},c=[{value:"\ud83e\udde0 Manipulating Local Variables with Binding for Metaprogramming",id:"-manipulating-local-variables-with-binding-for-metaprogramming",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-manipulating-local-variables-with-binding-for-metaprogramming",children:"\ud83e\udde0 Manipulating Local Variables with Binding for Metaprogramming"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby 2.1+ introduced ",(0,t.jsx)(n.code,{children:"Binding#local_variable_get"})," and ",(0,t.jsx)(n.code,{children:"#local_variable_set"}),", which let you introspect and inject locals at runtime\u2014empowering DSLs and dynamic code transforms. You can seed a binding with variables, evaluate complex expressions in that scope, or even snapshot local values before/after block execution."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"b = binding\nb.local_variable_set(:user, 'Alice')\nresult = eval '\"User: #{user}\"', b   #=> \"User: Alice\"\n\n# Capture and modify existing locals:\ncount = 5\nb2 = binding\nputs b2.local_variable_get(:count)    #=> 5\nb2.local_variable_set(:count, 10)\nputs eval('count', b2)                #=> 10\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var i=a(36672);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);