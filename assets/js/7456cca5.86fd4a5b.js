"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70259],{35463:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"javascript/stimulus/advanced/mutation_observer_adapter","title":"mutation_observer_adapter","description":"\ud83d\udd75\ufe0f Mutation Observer Adapter","source":"@site/docs/javascript/stimulus/advanced/mutation_observer_adapter.md","sourceDirName":"javascript/stimulus/advanced","slug":"/javascript/stimulus/advanced/mutation_observer_adapter","permalink":"/keep-being-human-dev/docs/javascript/stimulus/advanced/mutation_observer_adapter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/stimulus/advanced/mutation_observer_adapter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lifecycle_frame_callbacks","permalink":"/keep-being-human-dev/docs/javascript/stimulus/advanced/lifecycle_frame_callbacks"},"next":{"title":"nested_controllers_target_delegation","permalink":"/keep-being-human-dev/docs/javascript/stimulus/advanced/nested_controllers_target_delegation"}}');var a=r(23420),s=r(65404);const o={},i=void 0,c={},u=[{value:"\ud83d\udd75\ufe0f Mutation Observer Adapter",id:"\ufe0f-mutation-observer-adapter",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\ufe0f-mutation-observer-adapter",children:"\ud83d\udd75\ufe0f Mutation Observer Adapter"}),"\n",(0,a.jsx)(t.p,{children:"When dealing with dynamic content inserted outside Stimulus\u2019s direct control, use a MutationObserver to notify Stimulus of new elements. Wrap the adapter logic so you can reuse it across multiple controllers."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:'// observer_adapter.js\nexport function observe(controller, callback) {\n  const observer = new MutationObserver(callback)\n  observer.observe(controller.element, { childList: true, subtree: true })\n}\n\n// usage in any controller\nimport { Controller } from "@hotwired/stimulus"\nimport { observe } from "../adapters/observer_adapter"\n\nexport default class extends Controller {\n  connect() {\n    observe(this, (mutations) => {\n      mutations.forEach((mutation) => {\n        // handle insertion\n      })\n    })\n  }\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(36672);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);