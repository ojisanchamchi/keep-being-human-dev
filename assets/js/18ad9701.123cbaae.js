"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32318],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(36672);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},79179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ruby/syntax/beginner/simple_conditionals","title":"simple_conditionals","description":"\ud83e\uddd0 Simple Conditionals","source":"@site/docs/ruby/syntax/beginner/simple_conditionals.md","sourceDirName":"ruby/syntax/beginner","slug":"/ruby/syntax/beginner/simple_conditionals","permalink":"/keep-being-human-dev/docs/ruby/syntax/beginner/simple_conditionals","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/beginner/simple_conditionals.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"iterating_with_each","permalink":"/keep-being-human-dev/docs/ruby/syntax/beginner/iterating_with_each"},"next":{"title":"string_interpolation","permalink":"/keep-being-human-dev/docs/ruby/syntax/beginner/string_interpolation"}}');var s=t(23420),o=t(65404);const r={},a=void 0,c={},l=[{value:"\ud83e\uddd0 Simple Conditionals",id:"-simple-conditionals",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-simple-conditionals",children:"\ud83e\uddd0 Simple Conditionals"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"if"}),", ",(0,s.jsx)(n.code,{children:"elsif"}),", and ",(0,s.jsx)(n.code,{children:"else"})," to execute code based on conditions. Conditionals help you control program flow easily. Ternary operators provide a compact alternative for simple branches."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'score = 85\nif score >= 90\n  puts "A"\nelsif score >= 80\n  puts "B"\nelse\n  puts "C"\nend\n\n# Ternary example\nputs score >= 50 ? "Pass" : "Fail"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);