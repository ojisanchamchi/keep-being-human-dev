"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[49735],{40406:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/method_missing/expert/caching_method_missing_responses","title":"caching_method_missing_responses","description":"\ud83e\udde0 Caching Dynamic Method Results Safely","source":"@site/docs/ruby/method_missing/expert/caching_method_missing_responses.md","sourceDirName":"ruby/method_missing/expert","slug":"/ruby/method_missing/expert/caching_method_missing_responses","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/caching_method_missing_responses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/expert/caching_method_missing_responses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_signature_handling","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/advanced_signature_handling"},"next":{"title":"dynamic_attributes_dsl","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/dynamic_attributes_dsl"}}');var i=t(23420),r=t(65404);const c={},a=void 0,o={},d=[{value:"\ud83e\udde0 Caching Dynamic Method Results Safely",id:"-caching-dynamic-method-results-safely",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-caching-dynamic-method-results-safely",children:"\ud83e\udde0 Caching Dynamic Method Results Safely"}),"\n",(0,i.jsxs)(n.p,{children:["For expensive dynamic lookups, implement a cache inside ",(0,i.jsx)(n.code,{children:"method_missing"})," to memoize results. Invalidate or expire entries carefully to avoid stale data. This pattern works well for on\u2011the\u2011fly computation of attributes from remote services or large data sources."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class RemoteAttributeFetcher\n  def initialize(client)\n    @client = client\n    @cache  = {}\n  end\n\n  def method_missing(name, *_args)\n    return super unless name.to_s.start_with?('fetch_')\n\n    @cache[name] ||= begin\n      attribute = name.to_s.sub('fetch_', '')\n      @client.get(attribute)  # potentially slow network call\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    name.to_s.start_with?('fetch_') || super\n  end\n\n  def clear_cache(method_name = nil)\n    if method_name\n      @cache.delete(method_name)\n    else\n      @cache.clear\n    end\n  end\nend\n\nfetcher = RemoteAttributeFetcher.new(api_client)\nfetcher.fetch_price   # cached on first call\nfetcher.clear_cache(:fetch_price)\nfetcher.fetch_price   # refetched from service\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(36672);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);