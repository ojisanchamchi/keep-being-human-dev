"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92096],{65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var s=r(36672);const n={},a=s.createContext(n);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},86652:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/factory_bot_rails/expert/transient_traits_dynamic_associations","title":"transient_traits_dynamic_associations","description":"\ud83d\ude80 Master Transient Attributes and Traits for Dynamic Associations","source":"@site/docs/gems/factory_bot_rails/expert/transient_traits_dynamic_associations.md","sourceDirName":"gems/factory_bot_rails/expert","slug":"/gems/factory_bot_rails/expert/transient_traits_dynamic_associations","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/transient_traits_dynamic_associations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/expert/transient_traits_dynamic_associations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_to_create_bulk_insert_strategy","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy"},"next":{"title":"association_strategies","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/association_strategies"}}');var n=r(23420),a=r(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\ude80 Master Transient Attributes and Traits for Dynamic Associations",id:"-master-transient-attributes-and-traits-for-dynamic-associations",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-master-transient-attributes-and-traits-for-dynamic-associations",children:"\ud83d\ude80 Master Transient Attributes and Traits for Dynamic Associations"}),"\n",(0,n.jsx)(t.p,{children:"When you need factories that adapt their associated records at runtime, transient attributes combined with traits are your go\u2011to tools. Transient attributes let you pass in parameters without persisting them, while traits allow grouping of related behavior. This pattern is invaluable for complex domain models (e.g., users with variable numbers of orders or structures with nested children)."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"FactoryBot.define do\n  factory :user do\n    name { Faker::Name.name }\n    transient do\n      orders_count { 3 }\n      with_profile { true }\n    end\n\n    trait :with_orders do\n      after(:create) do |user, evaluator|\n        create_list(:order, evaluator.orders_count, user: user)\n      end\n    end\n\n    trait :without_profile do\n      after(:build) { |user| user.profile = nil }\n    end\n\n    after(:create) do |user, evaluator|\n      if evaluator.with_profile\n        create(:profile, user: user)\n      end\n    end\n  end\nend\n\n# Usage examples:\ncreate(:user, :with_orders, orders_count: 5, with_profile: false)\n# => user with 5 orders but no profile\n\ncreate(:user, with_profile: true)\n# => user with default 3 orders and a profile\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);