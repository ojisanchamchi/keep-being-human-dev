"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9979],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var i=t(36672);const s={},a=i.createContext(s);function d(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(a.Provider,{value:n},e.children)}},75471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ruby/method_missing/middle/dsl_fallback_methods","title":"dsl_fallback_methods","description":"\ud83d\udee0\ufe0f Creating a Simple DSL with Fallback Methods","source":"@site/docs/ruby/method_missing/middle/dsl_fallback_methods.md","sourceDirName":"ruby/method_missing/middle","slug":"/ruby/method_missing/middle/dsl_fallback_methods","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dsl_fallback_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/middle/dsl_fallback_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transparent_proxy_forwarding","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/transparent_proxy_forwarding"},"next":{"title":"dynamic_delegation","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dynamic_delegation"}}');var s=t(23420),a=t(65404);const d={},o=void 0,r={},l=[{value:"\ud83d\udee0\ufe0f Creating a Simple DSL with Fallback Methods",id:"\ufe0f-creating-a-simple-dsl-with-fallback-methods",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-creating-a-simple-dsl-with-fallback-methods",children:"\ud83d\udee0\ufe0f Creating a Simple DSL with Fallback Methods"}),"\n",(0,s.jsx)(n.p,{children:"method_missing shines in DSL design by capturing arbitrary method calls and mapping them to configuration or commands. This pattern simplifies building expressive internal DSLs without predefining each method."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class SimpleConfig\n  def initialize\n    @settings = {}\n  end\n\n  def method_missing(name, *args)\n    key = name.to_s\n    if key.end_with?('=')\n      @settings[key.chomp('=')] = args.first\n    elsif @settings.key?(key)\n      @settings[key]\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    true\n  end\nend\n\nconfig = SimpleConfig.new\nenv = config\nenv.timeout = 30\nenv.timeout  # => 30\n"})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);