"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45838],{29829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/syntax/expert/infinite_enumerator","title":"infinite_enumerator","description":"\ud83d\ude80 Infinite Lazy Enumerators via Enumerator.produce","source":"@site/docs/ruby/syntax/expert/infinite_enumerator.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/infinite_enumerator","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/infinite_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/infinite_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"endless_method_definitions","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/endless_method_definitions"},"next":{"title":"keyword_arg_forwarding","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/keyword_arg_forwarding"}}');var o=t(23420),a=t(65404);const i={},s=void 0,u={},c=[{value:"\ud83d\ude80 Infinite Lazy Enumerators via <code>Enumerator.produce</code>",id:"-infinite-lazy-enumerators-via-enumeratorproduce",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-infinite-lazy-enumerators-via-enumeratorproduce",children:["\ud83d\ude80 Infinite Lazy Enumerators via ",(0,o.jsx)(n.code,{children:"Enumerator.produce"})]}),"\n",(0,o.jsxs)(n.p,{children:["Generate potentially infinite sequences lazily with ",(0,o.jsx)(n.code,{children:"Enumerator.produce"}),". This allows you to model streams (Fibonacci, counters) without recursion or manual loop constructs."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Fibonacci sequence\nfib = Enumerator.produce([0,1]) { |(a,b)| [b, a+b] }\np fib.take(10).map(&:first)\n# => [0,1,1,2,3,5,8,13,21,34]\n\n# Exponential backoff delays\ndelays = Enumerator.produce(1) { |n| n * 2 }\np delays.take(5) # => [1,2,4,8,16]\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(36672);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);