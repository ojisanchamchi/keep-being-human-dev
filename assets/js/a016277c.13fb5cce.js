"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63178],{45374:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/memoization_with_procs","title":"memoization_with_procs","description":"\ud83d\udcbe Memoization Strategies with Procs","source":"@site/docs/ruby/procs_and_lambdas/advanced/memoization_with_procs.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/memoization_with_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/memoization_with_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/memoization_with_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lambda_currying","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/lambda_currying"},"next":{"title":"proc_enumerable_chaining","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining"}}');var o=a(23420),i=a(65404);const s={},r=void 0,c={},d=[{value:"\ud83d\udcbe Memoization Strategies with Procs",id:"-memoization-strategies-with-procs",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-memoization-strategies-with-procs",children:"\ud83d\udcbe Memoization Strategies with Procs"}),"\n",(0,o.jsx)(n.p,{children:"Wrap expensive computations in a Proc and store results in a cache hash for on-demand evaluation. This approach decouples caching logic from business code, making it composable and testable."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"memoized = ->(f) {\n  cache = {}\n  ->(arg) {\n    cache[arg] ||= f.call(arg)\n  }\n}\n\n# Define an expensive function\nfib = ->(n) { n < 2 ? n : fib.call(n-1) + fib.call(n-2) }\n\n# Wrap with memoization\nfast_fib = memoized.call(fib)\nputs fast_fib.call(30)  # Runs quickly due to caching\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var t=a(36672);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);