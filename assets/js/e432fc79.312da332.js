"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56986],{57756:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/security/expert/deep_parameter_sanitization","title":"deep_parameter_sanitization","description":"\ud83d\udd12 Deep Parameter Sanitization","source":"@site/docs/rails/security/expert/deep_parameter_sanitization.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/deep_parameter_sanitization","permalink":"/keep-being-human-dev/docs/rails/security/expert/deep_parameter_sanitization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/deep_parameter_sanitization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"csp_with_nonces","permalink":"/keep-being-human-dev/docs/rails/security/expert/csp_with_nonces"},"next":{"title":"disable_xxe_parsing","permalink":"/keep-being-human-dev/docs/rails/security/expert/disable_xxe_parsing"}}');var r=a(23420),s=a(65404);const i={},o=void 0,c={},l=[{value:"\ud83d\udd12 Deep Parameter Sanitization",id:"-deep-parameter-sanitization",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-deep-parameter-sanitization",children:"\ud83d\udd12 Deep Parameter Sanitization"}),"\n",(0,r.jsx)(t.p,{children:"When dealing with highly nested JSON or complex form data, default strong parameters may miss malicious payloads in sub-hashes or arrays. Roll your own sanitizer by recursively filtering keys you explicitly allow and rejecting everything else. This ensures only the exact structure you expect reaches your models."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"class ApplicationController < ActionController::Base\n  before_action :sanitize_params!\n\n  private\n\n  def sanitize_params!\n    params.deep_transform_keys!(&:to_s)\n    params.replace(filter_hash(params.to_unsafe_h, allowed_structure))\n  end\n\n  def filter_hash(hash, structure)\n    hash.each_with_object({}) do |(key, value), memo|\n      next unless structure.key?(key.to_sym)\n      allowed = structure[key.to_sym]\n      memo[key] =\n        case value\n        when Hash then filter_hash(value, allowed)\n        when Array then value.map { |v| v.is_a?(Hash) ? filter_hash(v, allowed[:array]) : v }\n        else value\n        end\n    end\n  end\n\n  def allowed_structure\n    {\n      order: { customer_id: true, items: { array: { product_id: true, quantity: true } } }\n    }\n  end\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var n=a(36672);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);