"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57134],{47887:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"sql/postgresql/expert/partition_pruning_and_wise_joins","title":"partition_pruning_and_wise_joins","description":"\ud83d\udd0d Leverage Partition Pruning and Partition-Wise Joins","source":"@site/docs/sql/postgresql/expert/partition_pruning_and_wise_joins.md","sourceDirName":"sql/postgresql/expert","slug":"/sql/postgresql/expert/partition_pruning_and_wise_joins","permalink":"/keep-being-human-dev/docs/sql/postgresql/expert/partition_pruning_and_wise_joins","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/postgresql/expert/partition_pruning_and_wise_joins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_query_tuning","permalink":"/keep-being-human-dev/docs/sql/postgresql/expert/parallel_query_tuning"},"next":{"title":"postgres_fdw_foreign_data_wrapper","permalink":"/keep-being-human-dev/docs/sql/postgresql/expert/postgres_fdw_foreign_data_wrapper"}}');var r=t(23420),s=t(65404);const a={},o=void 0,p={},l=[{value:"\ud83d\udd0d Leverage Partition Pruning and Partition-Wise Joins",id:"-leverage-partition-pruning-and-partition-wise-joins",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-leverage-partition-pruning-and-partition-wise-joins",children:"\ud83d\udd0d Leverage Partition Pruning and Partition-Wise Joins"}),"\n",(0,r.jsxs)(n.p,{children:["Declarative partitioning can drastically speed up large-table joins by pruning irrelevant partitions early and enabling partition-wise join strategies. Ensure your ",(0,r.jsx)(n.code,{children:"WHERE"})," clauses align with partition keys, and the planner will eliminate partitions at planning time, reducing I/O."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Parent table\nCREATE TABLE events (\n  id serial PRIMARY KEY,\n  event_date date NOT NULL,\n  user_id int NOT NULL\n) PARTITION BY RANGE (event_date);\n\n-- Monthly partitions\nCREATE TABLE events_2023_01 PARTITION OF events\n  FOR VALUES FROM ('2023-01-01') TO ('2023-02-01');\n\n-- Pruned join\nEXPLAIN ANALYZE\nSELECT e.*, u.name\nFROM events e\nJOIN users u ON e.user_id = u.id\nWHERE e.event_date BETWEEN '2023-01-01' AND '2023-01-31';\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(36672);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);