"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79893],{65404:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var i=t(36672);const n={},s=i.createContext(n);function o(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(s.Provider,{value:r},e.children)}},80449:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"gems/redis/expert/redis_redlock_distributed_lock","title":"redis_redlock_distributed_lock","description":"\ud83d\udd12 Distributed Locks with Redlock Algorithm","source":"@site/docs/gems/redis/expert/redis_redlock_distributed_lock.md","sourceDirName":"gems/redis/expert","slug":"/gems/redis/expert/redis_redlock_distributed_lock","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_redlock_distributed_lock","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/expert/redis_redlock_distributed_lock.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_lua_atomic_operations","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_lua_atomic_operations"},"next":{"title":"redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_streams_event_sourcing"}}');var n=t(23420),s=t(65404);const o={},c=void 0,d={},l=[{value:"\ud83d\udd12 Distributed Locks with Redlock Algorithm",id:"-distributed-locks-with-redlock-algorithm",level:2}];function a(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-distributed-locks-with-redlock-algorithm",children:"\ud83d\udd12 Distributed Locks with Redlock Algorithm"}),"\n",(0,n.jsx)(r.p,{children:"Implement the Redlock algorithm to coordinate distributed locks safely across multiple Redis nodes. This ensures mutual exclusion in high-concurrency Rails clusters and graceful lock recovery."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# Gemfile\n# gem 'redis'\n# gem 'redlock'\n\n# config/initializers/redlock.rb\nrequire 'redlock'\n\nLOCK_MANAGER = Redlock::Client.new(\n  [ENV['REDIS_URL'], ENV['REDIS_URL_SECONDARY'], ENV['REDIS_URL_TERTIARY']],\n  retry_count: 3,\n  retry_delay: 200,\n  retry_jitter: 50\n)\n\n# app/services/critical_section_service.rb\nclass CriticalSectionService\n  LOCK_KEY = 'critical:section'\n  TTL = 5_000 # milliseconds\n\n  def perform\n    LOCK_MANAGER.lock(LOCK_KEY, TTL) do |lock_info|\n      raise 'Failed to acquire lock' unless lock_info\n      # Place business-critical code here\n      do_heavy_job\n    end\n  end\n\n  private\n\n  def do_heavy_job\n    # ...\n  end\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);