"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92441],{65404:(e,t,a)=>{a.d(t,{R:()=>n,x:()=>c});var o=a(36672);const r={},s=o.createContext(r);function n(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),o.createElement(s.Provider,{value:t},e.children)}},75911:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>n,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/factory_bot_rails/advanced/custom_factorybot_strategy","title":"custom_factorybot_strategy","description":"\ud83d\udd27 Custom FactoryBot Strategy Registration","source":"@site/docs/gems/factory_bot_rails/advanced/custom_factorybot_strategy.md","sourceDirName":"gems/factory_bot_rails/advanced","slug":"/gems/factory_bot_rails/advanced/custom_factorybot_strategy","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/custom_factorybot_strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/advanced/custom_factorybot_strategy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_polymorphic_traits","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/advanced_polymorphic_traits"},"next":{"title":"transient_dynamic_associations","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/transient_dynamic_associations"}}');var r=a(23420),s=a(65404);const n={},c=void 0,i={},d=[{value:"\ud83d\udd27 Custom FactoryBot Strategy Registration",id:"-custom-factorybot-strategy-registration",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-custom-factorybot-strategy-registration",children:"\ud83d\udd27 Custom FactoryBot Strategy Registration"}),"\n",(0,r.jsxs)(t.p,{children:["You can register your own build strategy to encapsulate complex setup logic beyond ",(0,r.jsx)(t.code,{children:":create"}),", ",(0,r.jsx)(t.code,{children:":build"}),", or ",(0,r.jsx)(t.code,{children:":attributes"}),". Custom strategies are especially useful when you need to cache, filter, or batch persist multiple factories."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'# config/initializers/factory_bot.rb\nFactoryBot.register_strategy(:cache_build, CacheBuildStrategy)\n\nclass CacheBuildStrategy\n  def initialize(klass)\n    @klass = klass\n  end\n\n  def association_reflection(_name, _overrides)\n    :build\n  end\n\n  def result(evaluation)\n    object = evaluation.object\n    Cache.write("factorybot/#{@klass}/#{object.id}", object)\n    object\n  end\nend\n\n# Usage:\nlet(:user) { FactoryBot.build(:user) }            # default :build\nlet(:cached_user) { FactoryBot.run_strategy(:cache_build, :user) }\n'})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);