"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72143],{60803:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/active_support/advanced/per_thread_registry","title":"per_thread_registry","description":"\ud83e\uddf5 Isolate Instances with ActiveSupport::PerThreadRegistry","source":"@site/docs/rails/active_support/advanced/per_thread_registry.md","sourceDirName":"rails/active_support/advanced","slug":"/rails/active_support/advanced/per_thread_registry","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/per_thread_registry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/advanced/per_thread_registry.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"notifications_instrumentation","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/notifications_instrumentation"},"next":{"title":"reloader_hooks","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/reloader_hooks"}}');var s=n(23420),a=n(65404);const i={},o=void 0,c={},d=[{value:"\ud83e\uddf5 Isolate Instances with ActiveSupport::PerThreadRegistry",id:"-isolate-instances-with-activesupportperthreadregistry",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-isolate-instances-with-activesupportperthreadregistry",children:"\ud83e\uddf5 Isolate Instances with ActiveSupport::PerThreadRegistry"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"ActiveSupport::PerThreadRegistry"})," to store thread-local singletons when integrating with thread\u2011pooled servers or background jobs. This ensures each thread gets its own instance of a resource (like an external API client) without global state conflicts. The registry lazily builds instances on first access."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# lib/api_client.rb\nclass APIClient\n  extend ActiveSupport::PerThreadRegistry\n\n  def self.build\n    new(endpoint: ENV['API_ENDPOINT'], token: ENV['API_TOKEN'])\n  end\n\n  def initialize(endpoint:, token:)\n    @endpoint = endpoint\n    @token = token\n  end\n\n  def get(path)\n    # perform HTTP call...\n  end\nend\n\n# Usage in any thread-safe context\nclient = APIClient.instance\nclient.get('/users')\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(36672);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);