"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13488],{35618:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"gems/webmock/middle/stub_dynamic_urls_regex","title":"stub_dynamic_urls_regex","description":"\ud83d\udd78 Stub Dynamic URLs with Regex Patterns","source":"@site/docs/gems/webmock/middle/stub_dynamic_urls_regex.md","sourceDirName":"gems/webmock/middle","slug":"/gems/webmock/middle/stub_dynamic_urls_regex","permalink":"/keep-being-human-dev/docs/gems/webmock/middle/stub_dynamic_urls_regex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/middle/stub_dynamic_urls_regex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"match_requests_by_headers","permalink":"/keep-being-human-dev/docs/gems/webmock/middle/match_requests_by_headers"},"next":{"title":"advanced_turbo_stream_targets","permalink":"/keep-being-human-dev/docs/javascript/hotwire/advanced/advanced_turbo_stream_targets"}}');var r=s(23420),a=s(65404);const i={},o=void 0,c={},u=[{value:"\ud83d\udd78 Stub Dynamic URLs with Regex Patterns",id:"-stub-dynamic-urls-with-regex-patterns",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-stub-dynamic-urls-with-regex-patterns",children:"\ud83d\udd78 Stub Dynamic URLs with Regex Patterns"}),"\n",(0,r.jsxs)(t.p,{children:["When your application makes HTTP calls to URLs that include dynamic segments\u2014like user IDs or timestamps\u2014you can use regular expressions in WebMock to stub them without enumerating every possible URL. This approach keeps your stubs concise and maintainable. Simply pass a Ruby ",(0,r.jsx)(t.code,{children:"Regexp"})," to ",(0,r.jsx)(t.code,{children:"stub_request"})," to match any URL fitting the pattern."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'require \'webmock/rspec\'\n\n# Stub any GET request to /users/<number>/details\nstub_request(:get, %r{https://api\\.example\\.com/users/\\d+/details})\n  .to_return(\n    status: 200,\n    body: \'{"id":123,"name":"John Doe"}\',\n    headers: { \'Content-Type\' => \'application/json\' }\n  )\n\n# Example call\nresponse = Net::HTTP.get(URI(\'https://api.example.com/users/456/details\'))\nputs response #=> {"id":123,"name":"John Doe"}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(36672);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);