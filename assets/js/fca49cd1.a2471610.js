"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31504],{65404:(e,o,r)=>{r.d(o,{R:()=>s,x:()=>p});var t=r(36672);const n={},i=t.createContext(n);function s(e){const o=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function p(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:o},e.children)}},86746:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>a,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/operators/middle/flip_flop_operator","title":"flip_flop_operator","description":"\u2696\ufe0f Flip-Flop Operator","source":"@site/docs/ruby/operators/middle/flip_flop_operator.md","sourceDirName":"ruby/operators/middle","slug":"/ruby/operators/middle/flip_flop_operator","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/flip_flop_operator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/middle/flip_flop_operator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"exponentiation_operator","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/exponentiation_operator"},"next":{"title":"method_proc_shorthand","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/method_proc_shorthand"}}');var n=r(23420),i=r(65404);const s={},p=void 0,a={},l=[{value:"\u2696\ufe0f Flip-Flop Operator",id:"\ufe0f-flip-flop-operator",level:2}];function d(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"\ufe0f-flip-flop-operator",children:"\u2696\ufe0f Flip-Flop Operator"}),"\n",(0,n.jsxs)(o.p,{children:["Ruby's rare flip-flop operator (",(0,n.jsx)(o.code,{children:".."})," or ",(0,n.jsx)(o.code,{children:"..."})," in boolean context) toggles state between two conditions. It\u2019s handy in line-based processing like parsing logs."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:"lines = %w[START a b END c d START x y END]\non = false\n\nlines.each do |line|\n  if (line == 'START')..(line == 'END')\n    puts \"Processing: #{line}\"\n  end\nend\n# Outputs lines from START through END twice\n"})})]})}function c(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);