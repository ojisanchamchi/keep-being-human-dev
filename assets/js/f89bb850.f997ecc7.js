"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15401],{39852:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks","title":"partial_spy_mocks","description":"\ud83d\udd0d Use Spies for Partial Mocks and Call Verification","source":"@site/docs/gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks.md","sourceDirName":"gems/rspec/mocks_and_stubs/advanced","slug":"/gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nested_doubles_for_complex_dependencies","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/nested_doubles_for_complex_dependencies"},"next":{"title":"sequential_return_values","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/sequential_return_values"}}');var a=n(23420),r=n(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udd0d Use Spies for Partial Mocks and Call Verification",id:"-use-spies-for-partial-mocks-and-call-verification",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"-use-spies-for-partial-mocks-and-call-verification",children:"\ud83d\udd0d Use Spies for Partial Mocks and Call Verification"}),"\n",(0,a.jsx)(s.p,{children:"Spies let you wrap real objects or doubles and selectively override behavior while still collecting call information. This is ideal for verifying side effects without fully stubbing implementation."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class Notifier\n  def send_alert(user)\n    # complex logic...\n    deliver(user)\n  end\n\n  def deliver(user)\n    # external service call\n  end\nend\n\nnotifier = spy(Notifie\xadr.new)\nallow(notifier).to receive(:deliver)\nnotifier.send_alert(user)\n\nexpect(notifier).to have_received(:deliver).with(user)\n"})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(36672);const a={},r=t.createContext(a);function i(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);