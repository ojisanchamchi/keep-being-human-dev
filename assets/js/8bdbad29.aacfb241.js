"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30275],{65404:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>p});var o=n(36672);const t={},s=o.createContext(t);function i(e){const r=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function p(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:r},e.children)}},79458:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>p,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/oop/expert/module_prepend_override","title":"module_prepend_override","description":"\ud83d\udee0\ufe0f Overriding with Module#prepend for AOP-like Wrappers","source":"@site/docs/ruby/oop/expert/module_prepend_override.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/module_prepend_override","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/module_prepend_override","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/module_prepend_override.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_missing_delegate","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/method_missing_delegate"},"next":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/scoped_refinements"}}');var t=n(23420),s=n(65404);const i={},p=void 0,d={},a=[{value:"\ud83d\udee0\ufe0f Overriding with Module#prepend for AOP-like Wrappers",id:"\ufe0f-overriding-with-moduleprepend-for-aop-like-wrappers",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"\ufe0f-overriding-with-moduleprepend-for-aop-like-wrappers",children:"\ud83d\udee0\ufe0f Overriding with Module#prepend for AOP-like Wrappers"}),"\n",(0,t.jsxs)(r.p,{children:["Use ",(0,t.jsx)(r.code,{children:"Module#prepend"})," to interpose behavior before or after existing methods, enabling Aspect-Oriented Programming patterns without altering the original method definitions directly."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'module Logging\n  def process(*args)\n    puts "[LOG] Starting process with #{args.inspect}"\n    result = super\n    puts "[LOG] Finished process: #{result.inspect}"\n    result\n  end\nend\n\nclass Job\n  prepend Logging\n\n  def process(data)\n    data.reverse\n  end\nend\n\nJob.new.process(\'ruby\')\n# [LOG] Starting process with ["ruby"]\n# [LOG] Finished process: "ybur"\n'})})]})}function c(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);