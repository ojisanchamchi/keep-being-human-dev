"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4548],{65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(36672);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},89087:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rails/security/beginner/validate_input_formats","title":"validate_input_formats","description":"\ud83d\udce6 Validate Input Formats in Models","source":"@site/docs/rails/security/beginner/validate_input_formats.md","sourceDirName":"rails/security/beginner","slug":"/rails/security/beginner/validate_input_formats","permalink":"/keep-being-human-dev/docs/rails/security/beginner/validate_input_formats","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/beginner/validate_input_formats.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"strong_parameters","permalink":"/keep-being-human-dev/docs/rails/security/beginner/strong_parameters"},"next":{"title":"active_record_encryption_rotation","permalink":"/keep-being-human-dev/docs/rails/security/expert/active_record_encryption_rotation"}}');var a=n(23420),i=n(65404);const s={},o=void 0,c={},l=[{value:"\ud83d\udce6 Validate Input Formats in Models",id:"-validate-input-formats-in-models",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-validate-input-formats-in-models",children:"\ud83d\udce6 Validate Input Formats in Models"}),"\n",(0,a.jsx)(t.p,{children:"Use built-in validators to enforce expected formats, such as email or phone number, at the model level to reject invalid data early."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  validates :email, presence: true, format: { with: URI::MailTo::EMAIL_REGEXP }\n  validates :username, length: { minimum: 3, maximum: 20 }, format: { with: /\\A[a-z0-9_]+\\z/i }\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);