"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92835],{65404:(e,r,a)=>{a.d(r,{R:()=>t,x:()=>l});var c=a(36672);const n={},s=c.createContext(n);function t(e){const r=c.useContext(s);return c.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),c.createElement(s.Provider,{value:r},e.children)}},93629:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"rails/active_record_callbacks/expert/prepend_callbacks","title":"prepend_callbacks","description":"\ud83d\udd04 Overriding Callback Order with prepend: true","source":"@site/docs/rails/active_record_callbacks/expert/prepend_callbacks.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/prepend_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/prepend_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/prepend_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memory_leak_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/memory_leak_callbacks"},"next":{"title":"rspec_callbacks_testing","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/rspec_callbacks_testing"}}');var n=a(23420),s=a(65404);const t={},l=void 0,i={},o=[{value:"\ud83d\udd04 Overriding Callback Order with <code>prepend: true</code>",id:"-overriding-callback-order-with-prepend-true",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h2,{id:"-overriding-callback-order-with-prepend-true",children:["\ud83d\udd04 Overriding Callback Order with ",(0,n.jsx)(r.code,{children:"prepend: true"})]}),"\n",(0,n.jsxs)(r.p,{children:["By default, subclasses append callbacks after parent callbacks. Use ",(0,n.jsx)(r.code,{children:"prepend: true"})," to ensure your callback runs before inherited ones. This is crucial when you need to enforce preconditions before any parent logic executes."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:'class BaseRecord < ApplicationRecord\n  before_save :log_save, prepend: true\n\n  private\n\n  def log_save\n    Rails.logger.info("BaseRecord saving: #{self.id}")\n  end\nend\n\nclass SpecialRecord < BaseRecord\n  before_save :validate_special, prepend: true\n\n  private\n\n  def validate_special\n    throw(:abort) unless special_flag?\n  end\nend\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Here, ",(0,n.jsx)(r.code,{children:"validate_special"})," runs before ",(0,n.jsx)(r.code,{children:"log_save"}),", even though ",(0,n.jsx)(r.code,{children:"log_save"})," is declared in the parent. This helps you compose complex callback stacks predictably."]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);