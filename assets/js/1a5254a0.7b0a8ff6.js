"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10260],{51676:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"gems/counter_culture/expert/multi_level_association_caching","title":"multi_level_association_caching","description":"\ud83d\udd17 Multi-Level Association Caching with Custom Scopes","source":"@site/docs/gems/counter_culture/expert/multi_level_association_caching.md","sourceDirName":"gems/counter_culture/expert","slug":"/gems/counter_culture/expert/multi_level_association_caching","permalink":"/keep-being-human-dev/docs/gems/counter_culture/expert/multi_level_association_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/expert/multi_level_association_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"batch_async_counter_updates","permalink":"/keep-being-human-dev/docs/gems/counter_culture/expert/batch_async_counter_updates"},"next":{"title":"multiple_counter_usage","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/multiple_counter_usage"}}');var c=t(23420),i=t(65404);const s={},a=void 0,r={},u=[{value:"\ud83d\udd17 Multi-Level Association Caching with Custom Scopes",id:"-multi-level-association-caching-with-custom-scopes",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-multi-level-association-caching-with-custom-scopes",children:"\ud83d\udd17 Multi-Level Association Caching with Custom Scopes"}),"\n",(0,c.jsxs)(n.p,{children:["CounterCulture shines when you need to cache counts through chains of associations, even with custom scopes and conditions. Here\u2019s how to maintain a count of ",(0,c.jsx)(n.strong,{children:"active"})," line items across an order\u2019s invoices."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# app/models/line_item.rb\nclass LineItem < ApplicationRecord\n  belongs_to :invoice\n\n  scope :active, -> { where(deleted_at: nil) }\n\n  counter_culture :invoice,\n    column_name: proc { |li| li.active? ? 'active_items_count' : nil },\n    column_names: {\n      ['invoices.status = ?', 'paid'] => 'active_items_on_paid_invoices_count'\n    },\n    column_name_only_on_destroy: { active: 'active_items_count' }\n\n  # propagate counts up to order\n  counter_culture :invoice, \n    column_name: 'active_items_count', \n    column_names: {\n      ['invoices.order_id IS NOT NULL', ''] => 'order.active_items_count'\n    },\n    touch: [:invoice, :order]\nend\n\n# app/models/invoice.rb\nclass Invoice < ApplicationRecord\n  belongs_to :order, counter_cache: true\n  has_many :line_items\nend\n"})}),"\n",(0,c.jsx)(n.p,{children:"This setup:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"Uses conditional hash mappings to maintain separate counters based on invoice state."}),"\n",(0,c.jsxs)(n.li,{children:["Chains a second counter to propagate from ",(0,c.jsx)(n.code,{children:"invoice"})," to ",(0,c.jsx)(n.code,{children:"order"}),", touching both records."]}),"\n",(0,c.jsxs)(n.li,{children:["Leverages ",(0,c.jsx)(n.code,{children:"column_name_only_on_destroy"})," to correctly decrement when items are soft-deleted."]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Such multi-level, scoped counters help you keep complex aggregates updated without manual SQL or callbacks."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(36672);const c={},i=o.createContext(c);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);