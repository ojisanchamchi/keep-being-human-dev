"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39216],{40972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/oop/expert/scoped_refinements","title":"scoped_refinements","description":"\ud83d\udd12 Scoped Refinements for Safe Monkey-Patching","source":"@site/docs/ruby/oop/expert/scoped_refinements.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/scoped_refinements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/scoped_refinements.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_prepend_override","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/module_prepend_override"},"next":{"title":"tracepoint_profiling","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/tracepoint_profiling"}}');var r=t(23420),s=t(65404);const i={},c=void 0,d={},a=[{value:"\ud83d\udd12 Scoped Refinements for Safe Monkey-Patching",id:"-scoped-refinements-for-safe-monkey-patching",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-scoped-refinements-for-safe-monkey-patching",children:"\ud83d\udd12 Scoped Refinements for Safe Monkey-Patching"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"Module#refine"})," to limit monkey-patching surface and avoid global side effects. Bound refinements only apply when explicitly activated, ensuring safer, localized modifications to core classes."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module StringEmojiRefinement\n  refine String do\n    def emojiize\n      gsub(/:smile:/, '\ud83d\ude04')\n    end\n  end\nend\n\nclass Chat\n  using StringEmojiRefinement\n\n  def send(message)\n    puts message.emojiize\n  end\nend\n\nChat.new.send('Hello :smile:')  # => Hello \ud83d\ude04\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(36672);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);