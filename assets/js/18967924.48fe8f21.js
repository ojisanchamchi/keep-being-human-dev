"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39267],{65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(36672);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},67698:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/file_io/expert/async_io_eventmachine","title":"async_io_eventmachine","description":"\u26a1\ufe0f Use Async I/O Libraries for Concurrent File Operations","source":"@site/docs/ruby/file_io/expert/async_io_eventmachine.md","sourceDirName":"ruby/file_io/expert","slug":"/ruby/file_io/expert/async_io_eventmachine","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/async_io_eventmachine","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/expert/async_io_eventmachine.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"write_with_block","permalink":"/keep-being-human-dev/docs/ruby/file_io/beginner/write_with_block"},"next":{"title":"atomic_file_write","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/atomic_file_write"}}');var t=i(23420),o=i(65404);const s={},a=void 0,c={},u=[{value:"\u26a1\ufe0f Use Async I/O Libraries for Concurrent File Operations",id:"\ufe0f-use-async-io-libraries-for-concurrent-file-operations",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-use-async-io-libraries-for-concurrent-file-operations",children:"\u26a1\ufe0f Use Async I/O Libraries for Concurrent File Operations"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby\u2019s native threads suffer from GIL constraints; for truly concurrent file I/O, adopt an evented framework such as ",(0,t.jsx)(n.code,{children:"async"})," or EventMachine with reactor-based file handling."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'async/io'\n\nAsync do |task|\n  file = Async::IO::File.new('big.log', 'r')\n  buffer = ''\n\n  while chunk = file.read(4096)\n    # offload CPU work to thread pool\n    task.async do |subtask|\n      parse_and_index(chunk)\n    end\n  end\n\n  file.close\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"This design achieves high throughput by overlapping async disk reads with CPU-bound parsing tasks, maximizing resource utilization."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);