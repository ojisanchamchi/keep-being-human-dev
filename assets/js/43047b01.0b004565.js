"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45482],{22330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/metaprogramming/middle/auto_timestamp_module","title":"auto_timestamp_module","description":"\u23f3 Injecting Timestamp Attributes","source":"@site/docs/ruby/metaprogramming/middle/auto_timestamp_module.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/auto_timestamp_module","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/auto_timestamp_module","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/auto_timestamp_module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ar_dynamic_scopes","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/ar_dynamic_scopes"},"next":{"title":"class_eval_dynamic_methods","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/class_eval_dynamic_methods"}}');var s=n(23420),i=n(65404);const r={},d=void 0,m={},o=[{value:"\u23f3 Injecting Timestamp Attributes",id:"-injecting-timestamp-attributes",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-injecting-timestamp-attributes",children:"\u23f3 Injecting Timestamp Attributes"}),"\n",(0,s.jsxs)(t.p,{children:["Dynamically add ",(0,s.jsx)(t.code,{children:"created_at"})," and ",(0,s.jsx)(t.code,{children:"updated_at"})," attributes with callbacks using a mixin. This pattern emulates ActiveRecord-like timestamping."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"module Timestampable\n  def self.included(base)\n    base.class_eval do\n      attr_accessor :created_at, :updated_at\n      define_method(:save) do\n        now = Time.now\n        self.created_at ||= now\n        self.updated_at = now\n        # actual persistence logic...\n      end\n    end\n  end\nend\n\nclass Record\n  include Timestampable\nend\n\nr = Record.new\nr.save\nputs r.created_at, r.updated_at  # => current times\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var a=n(36672);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);