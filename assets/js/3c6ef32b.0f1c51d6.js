"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32515],{65404:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(36672);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},75470:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"ruby/exceptions/middle/inline_rescue_in_method","title":"inline_rescue_in_method","description":"\u2699\ufe0f Using rescue in Method Definitions","source":"@site/docs/ruby/exceptions/middle/inline_rescue_in_method.md","sourceDirName":"ruby/exceptions/middle","slug":"/ruby/exceptions/middle/inline_rescue_in_method","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/inline_rescue_in_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/middle/inline_rescue_in_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ensure_for_cleanup","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/ensure_for_cleanup"},"next":{"title":"rescue_specific_exceptions","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/rescue_specific_exceptions"}}');var t=i(23420),r=i(65404);const o={},c=void 0,d={},u=[{value:"\u2699\ufe0f Using <code>rescue</code> in Method Definitions",id:"\ufe0f-using-rescue-in-method-definitions",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"\ufe0f-using-rescue-in-method-definitions",children:["\u2699\ufe0f Using ",(0,t.jsx)(n.code,{children:"rescue"})," in Method Definitions"]}),"\n",(0,t.jsxs)(n.p,{children:["You can append a ",(0,t.jsx)(n.code,{children:"rescue"})," clause directly to a method definition to handle errors gracefully and keep your code concise. This is ideal for simple fallback logic."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'def parse_integer(str)\n  Integer(str)\nrescue ArgumentError\n  nil  # return nil if parsing fails\nend\n\n# Usage:\nputs parse_integer("123")  # => 123\nputs parse_integer("abc")  # => nil\n'})}),"\n",(0,t.jsx)(n.p,{children:"This pattern keeps the happy path clear and isolates error handling in one place."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);