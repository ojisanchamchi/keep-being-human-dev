"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14607],{36808:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"rails/debugging/expert/remote_pry_docker_debug","title":"remote_pry_docker_debug","description":"\ud83c\udf10 Remote Pry Debugging in Docker","source":"@site/docs/rails/debugging/expert/remote_pry_docker_debug.md","sourceDirName":"rails/debugging/expert","slug":"/rails/debugging/expert/remote_pry_docker_debug","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/remote_pry_docker_debug","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/debugging/expert/remote_pry_docker_debug.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"notifications_inspector","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/notifications_inspector"},"next":{"title":"tracepoint_active_record_sql","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/tracepoint_active_record_sql"}}');var o=n(23420),i=n(65404);const s={},c=void 0,d={},a=[{value:"\ud83c\udf10 Remote Pry Debugging in Docker",id:"-remote-pry-debugging-in-docker",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-remote-pry-debugging-in-docker",children:"\ud83c\udf10 Remote Pry Debugging in Docker"}),"\n",(0,o.jsxs)(r.p,{children:["When your Rails app runs in Docker or Kubernetes, local ",(0,o.jsx)(r.code,{children:"binding.pry"})," won't attach. ",(0,o.jsx)(r.code,{children:"pry-remote"})," opens a TCP server inside the container\u2014just forward the port to your host and connect remotely."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"# Gemfile (development group)\ngem 'pry-remote'\n\n# In your code\ndef risky_method\n  require 'pry-remote'; binding.remote_pry\n  # execution pauses until you connect\n  do_critical_work\nend\n"})}),"\n",(0,o.jsx)(r.p,{children:"Start your container with port 9876 exposed:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"docker run -p 9876:9876 my-app:dev\n"})}),"\n",(0,o.jsx)(r.p,{children:"Then from your host shell:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"pry-remote --host 127.0.0.1 --port 9876\n"})}),"\n",(0,o.jsx)(r.p,{children:"You\u2019ll get a pry session in the exact context of your running container. No more guessing with logs across environments!"})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>c});var t=n(36672);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);