"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54121],{51842:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"gems/sidekiq/advanced/custom_retry_backoff","title":"custom_retry_backoff","description":"\ud83d\udd04 Custom Retry & Backoff Strategy","source":"@site/docs/gems/sidekiq/advanced/custom_retry_backoff.md","sourceDirName":"gems/sidekiq/advanced","slug":"/gems/sidekiq/advanced/custom_retry_backoff","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/custom_retry_backoff","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/advanced/custom_retry_backoff.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"batch_orchestration","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/batch_orchestration"},"next":{"title":"custom_server_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/custom_server_middleware"}}');var s=r(23420),o=r(65404);const a={},i=void 0,d={},c=[{value:"\ud83d\udd04 Custom Retry &amp; Backoff Strategy",id:"-custom-retry--backoff-strategy",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-custom-retry--backoff-strategy",children:"\ud83d\udd04 Custom Retry & Backoff Strategy"}),"\n",(0,s.jsxs)(t.p,{children:["Implement a fine\u2011tuned retry strategy by overriding ",(0,s.jsx)(t.code,{children:"sidekiq_retry_in"})," and using ",(0,s.jsx)(t.code,{children:"sidekiq_retries_exhausted"})," to handle dead jobs. This approach gives you complete control over retry intervals and custom notification logic when retries are exhausted."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'class PaymentWorker\n  include Sidekiq::Worker\n  sidekiq_options retry: 5\n\n  # Exponential backoff: 10s, 30s, 60s, etc.\n  sidekiq_retry_in do |count, exception|\n    (count**4) + 15\n  end\n\n  # Notify when all retries have failed\n  sidekiq_retries_exhausted do |msg, ex|\n    AlertService.notify("PaymentWorker failed after retries", msg: msg, error: ex)\n  end\n\n  def perform(order_id)\n    Order.find(order_id).process_payment!\n  end\nend\n'})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(36672);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);