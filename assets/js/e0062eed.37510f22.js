"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26586],{65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(36672);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}},76093:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/sockets/advanced/ssl_tls_with_openssl","title":"ssl_tls_with_openssl","description":"\ud83d\udd12 SSL/TLS Server with OpenSSL","source":"@site/docs/ruby/sockets/advanced/ssl_tls_with_openssl.md","sourceDirName":"ruby/sockets/advanced","slug":"/ruby/sockets/advanced/ssl_tls_with_openssl","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/ssl_tls_with_openssl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/advanced/ssl_tls_with_openssl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"non_blocking_io_select","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/non_blocking_io_select"},"next":{"title":"unix_socket_fd_passing","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/unix_socket_fd_passing"}}');var r=s(23420),c=s(65404);const o={},a=void 0,i={},l=[{value:"\ud83d\udd12 SSL/TLS Server with OpenSSL",id:"-ssltls-server-with-openssl",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-ssltls-server-with-openssl",children:"\ud83d\udd12 SSL/TLS Server with OpenSSL"}),"\n",(0,r.jsxs)(n.p,{children:["Wrapping plain TCP sockets with ",(0,r.jsx)(n.code,{children:"OpenSSL::SSL"})," transforms them into secure channels. Create an ",(0,r.jsx)(n.code,{children:"SSLContext"})," with your certificate and private key, then use ",(0,r.jsx)(n.code,{children:"OpenSSL::SSL::SSLServer"})," to accept encrypted connections. This setup ensures client/server handshake, encryption, and certificate validation automatically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\nrequire 'openssl'\n\nctx = OpenSSL::SSL::SSLContext.new\nctx.cert = OpenSSL::X509::Certificate.new(File.read('server.crt'))\nctx.key  = OpenSSL::PKey::RSA.new(File.read('server.key'))\n\ntcp_server = TCPServer.new('0.0.0.0', 4433)\nssl_server = OpenSSL::SSL::SSLServer.new(tcp_server, ctx)\n\nloop do\n  ssl_socket = ssl_server.accept\n  Thread.start(ssl_socket) do |ssock|\n    ssock.puts \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello over TLS\"\n    ssock.close\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On the client side, use ",(0,r.jsx)(n.code,{children:"OpenSSL::SSL::SSLSocket"})," to wrap a ",(0,r.jsx)(n.code,{children:"TCPSocket"})," and call ",(0,r.jsx)(n.code,{children:"connect"})," to perform the handshake."]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);