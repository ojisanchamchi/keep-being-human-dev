"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13152],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(36672);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},98329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/regex/middle/regexp_union","title":"regexp_union","description":"\u2699\ufe0f Build Dynamic Patterns with Regexp.union","source":"@site/docs/ruby/regex/middle/regexp_union.md","sourceDirName":"ruby/regex/middle","slug":"/ruby/regex/middle/regexp_union","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/regexp_union","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/middle/regexp_union.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"non_capturing_groups","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/non_capturing_groups"},"next":{"title":"split_with_regex","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/split_with_regex"}}');var i=t(23420),o=t(65404);const s={},a=void 0,d={},u=[{value:"\u2699\ufe0f Build Dynamic Patterns with Regexp.union",id:"\ufe0f-build-dynamic-patterns-with-regexpunion",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-build-dynamic-patterns-with-regexpunion",children:"\u2699\ufe0f Build Dynamic Patterns with Regexp.union"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Regexp.union"})," safely joins multiple strings or regexes into one giant pattern, escaping as needed and or-ing alternatives. Ideal for dynamic lists."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"keywords = ['if','else','while','for']\npattern = Regexp.union(keywords)\n'if (condition)'.scan(pattern)  # => [\"if\"]\n\n# Works with regexes too\ndates = [/\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);