"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45940],{6124:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/reflection/expert/dynamic_basicobject_proxy","title":"dynamic_basicobject_proxy","description":"\ud83c\udf00 Proxying Objects via BasicObject for Method Interception","source":"@site/docs/ruby/reflection/expert/dynamic_basicobject_proxy.md","sourceDirName":"ruby/reflection/expert","slug":"/ruby/reflection/expert/dynamic_basicobject_proxy","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/dynamic_basicobject_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/expert/dynamic_basicobject_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ast_manipulation","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/ast_manipulation"},"next":{"title":"granular_tracepoint_events","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/granular_tracepoint_events"}}');var o=n(23420),i=n(65404);const a={},s=void 0,c={},l=[{value:"\ud83c\udf00 Proxying Objects via BasicObject for Method Interception",id:"-proxying-objects-via-basicobject-for-method-interception",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-proxying-objects-via-basicobject-for-method-interception",children:"\ud83c\udf00 Proxying Objects via BasicObject for Method Interception"}),"\n",(0,o.jsx)(t.p,{children:"By subclassing BasicObject, you can build a transparent proxy that intercepts all messages, giving you full control over delegation and metadata collection. This is ideal for auditing, lazy loading, or context injection."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:'class InspectorProxy < BasicObject\n  def initialize(target)\n    @target = target\n  end\n  def method_missing(name, *args, &blk)\n    ::Kernel.puts "[INSPECT] Calling #{name} with #{args.inspect}"\n    result = @target.__send__(name, *args, &blk)\n    ::Kernel.puts "[INSPECT] Result: #{result.inspect}"\n    result\n  end\n  def respond_to?(sym, include_private=false)\n    @target.respond_to?(sym, include_private)\n  end\nend\n\n# Usage\ntarget = [1, 2, 3]\nproxy = InspectorProxy.new(target)\nproxy.push(4)    # Logs call and result\np proxy.sum     # => Logs and returns 10\n'})}),"\n",(0,o.jsx)(t.p,{children:"This approach uses no built\u2011in classes beyond BasicObject, ensuring every method goes through your interceptor before reaching the real object."})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(36672);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);