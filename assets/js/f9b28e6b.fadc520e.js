"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6109],{65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(36672);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}},74072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/blocks/advanced/retry_with_backoff","title":"retry_with_backoff","description":"\u23f1\ufe0f Custom Retry DSL with Blocks","source":"@site/docs/ruby/blocks/advanced/retry_with_backoff.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/retry_with_backoff","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/retry_with_backoff","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/retry_with_backoff.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proc_currying_and_composition","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/proc_currying_and_composition"},"next":{"title":"trampoline_optimization","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/trampoline_optimization"}}');var o=n(23420),a=n(65404);const s={},c=void 0,i={},d=[{value:"\u23f1\ufe0f Custom Retry DSL with Blocks",id:"\ufe0f-custom-retry-dsl-with-blocks",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"\ufe0f-custom-retry-dsl-with-blocks",children:"\u23f1\ufe0f Custom Retry DSL with Blocks"}),"\n",(0,o.jsx)(t.p,{children:"Create a retry mechanism with exponential backoff to wrap unstable operations. By passing a block, you can encapsulate any code and automatically retry on exceptions, improving resilience in external API calls or flaky services."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"def retry_on_error(times:, base_delay: 0.5)\n  attempts = 0\n  begin\n    yield\n  rescue StandardError => e\n    attempts += 1\n    raise if attempts > times\n    sleep(base_delay * (2**(attempts - 1)))\n    retry\n  end\nend\n\nretry_on_error(times: 3, base_delay: 1) do\n  # unstable operation\n  fetch_remote_data\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);