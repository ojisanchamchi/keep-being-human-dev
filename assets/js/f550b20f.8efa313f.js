"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[69637],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(36672);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},83632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"ruby/metaprogramming/expert/module_prepend_for_instrumentation","title":"module_prepend_for_instrumentation","description":"\ud83d\udd0d Instrumentation via Module#prepend","source":"@site/docs/ruby/metaprogramming/expert/module_prepend_for_instrumentation.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/module_prepend_for_instrumentation","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/module_prepend_for_instrumentation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/module_prepend_for_instrumentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"eigenclass_singleton_method_customization","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/eigenclass_singleton_method_customization"},"next":{"title":"performance_measurement_proxy","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/performance_measurement_proxy"}}');var o=t(23420),a=t(65404);const s={},i=void 0,d={},m=[{value:"\ud83d\udd0d Instrumentation via Module#prepend",id:"-instrumentation-via-moduleprepend",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-instrumentation-via-moduleprepend",children:"\ud83d\udd0d Instrumentation via Module#prepend"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"Module#prepend"})," to inject behavior before or after target methods without altering the original class. This approach ensures your instrumentation runs in the proper ancestor chain and can call ",(0,o.jsx)(n.code,{children:"super"})," to delegate to the original implementation."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'module MethodProfiler\n  def self.prepended(base)\n    base.instance_methods(false).each { |m| wrap_method(base, m) }\n  end\n\n  def self.wrap_method(base, method)\n    base.define_method(method) do |*args, &blk|\n      start = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n      result = super(*args, &blk)\n      duration = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start\n      puts "#{method} took #{duration.round(4)}s"\n      result\n    end\n  end\nend\n\nclass DataFetcher\n  def fetch; sleep(0.1); \'data\'; end\n  prepend MethodProfiler\nend\n\nDataFetcher.new.fetch  # Outputs: "fetch took 0.1001s"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);