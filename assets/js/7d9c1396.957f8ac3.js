"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7843],{9829:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"rails/benchmarking/expert/concurrent_ruby_benchmark","title":"concurrent_ruby_benchmark","description":"\ud83e\udd16 Benchmark Concurrent Operations with Concurrent Ruby","source":"@site/docs/rails/benchmarking/expert/concurrent_ruby_benchmark.md","sourceDirName":"rails/benchmarking/expert","slug":"/rails/benchmarking/expert/concurrent_ruby_benchmark","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/concurrent_ruby_benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/benchmarking/expert/concurrent_ruby_benchmark.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_support_notifications_metrics","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/active_support_notifications_metrics"},"next":{"title":"low_level_benchmarking","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/low_level_benchmarking"}}');var o=r(23420),c=r(65404);const a={},i=void 0,s={},u=[{value:"\ud83e\udd16 Benchmark Concurrent Operations with Concurrent Ruby",id:"-benchmark-concurrent-operations-with-concurrent-ruby",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-benchmark-concurrent-operations-with-concurrent-ruby",children:"\ud83e\udd16 Benchmark Concurrent Operations with Concurrent Ruby"}),"\n",(0,o.jsxs)(n.p,{children:["Benchmarking serial code can hide parallel bottlenecks in I/O or CPU\u2011bound tasks. Use ",(0,o.jsx)(n.code,{children:"concurrent-ruby"}),"\u2019s thread pools or futures to simulate real concurrent workloads and measure end\u2011to\u2011end throughput in a controlled environment."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'benchmark'\nrequire 'concurrent'\n\npool = Concurrent::FixedThreadPool.new(8)\ntasks = 1_000.times.map do\n  Concurrent::Future.execute(executor: pool) do\n    # Replace with real heavy I/O or CPU task\ndir = Dir.glob('/usr/share/dict/*').shuffle.first\n    File.read(dir)\n  end\nend\n\ntime = Benchmark.realtime { tasks.each(&:wait) }\npool.shutdown; pool.wait_for_termination\n\nputs \"Concurrent workload completed in #{(time*1000).round(2)}ms\"\n"})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(36672);const o={},c=t.createContext(o);function a(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);