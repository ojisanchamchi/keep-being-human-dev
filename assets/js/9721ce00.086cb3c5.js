"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40652],{65404:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>a});var r=t(36672);const i={},s=r.createContext(i);function u(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:u(e.components),r.createElement(s.Provider,{value:n},e.children)}},76661:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>u,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/enumerables/expert/infinite_sequence_produce","title":"infinite_sequence_produce","description":"\ud83d\udd04 Generating Infinite Sequences with Enumerator.produce","source":"@site/docs/ruby/enumerables/expert/infinite_sequence_produce.md","sourceDirName":"ruby/enumerables/expert","slug":"/ruby/enumerables/expert/infinite_sequence_produce","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/infinite_sequence_produce","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/expert/infinite_sequence_produce.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_based_enumerator","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/fiber_based_enumerator"},"next":{"title":"lazy_pipeline_scaling","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/lazy_pipeline_scaling"}}');var i=t(23420),s=t(65404);const u={},a=void 0,c={},o=[{value:"\ud83d\udd04 Generating Infinite Sequences with Enumerator.produce",id:"-generating-infinite-sequences-with-enumeratorproduce",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-generating-infinite-sequences-with-enumeratorproduce",children:"\ud83d\udd04 Generating Infinite Sequences with Enumerator.produce"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Enumerator.produce"})," (Ruby\xa02.7+) simplifies creation of infinite, stateful sequences without explicit fibers. Define a seed value and a block that returns the next state tuple. Combining with lazy methods you can slice, map, or zip infinite streams on demand."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# Fibonacci generator: returns [current, next] pair\nfib = Enumerator.produce([0, 1]) { |(a, b)| [b, a + b] }\n      .map(&:first)          # extract the first element of each state\n\np fib.take(10)            # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);