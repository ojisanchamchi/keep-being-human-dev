"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56441],{21287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"gems/flipper/advanced/consistent_percentage_rollout","title":"consistent_percentage_rollout","description":"\ud83c\udfaf Implement a Consistent Percentage Rollout","source":"@site/docs/gems/flipper/advanced/consistent_percentage_rollout.md","sourceDirName":"gems/flipper/advanced","slug":"/gems/flipper/advanced/consistent_percentage_rollout","permalink":"/keep-being-human-dev/docs/gems/flipper/advanced/consistent_percentage_rollout","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/flipper/advanced/consistent_percentage_rollout.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"timeouts_and_retries","permalink":"/keep-being-human-dev/docs/gems/faraday/middle/timeouts_and_retries"},"next":{"title":"custom_actor_groups","permalink":"/keep-being-human-dev/docs/gems/flipper/advanced/custom_actor_groups"}}');var o=t(23420),r=t(65404);const a={},i=void 0,c={},l=[{value:"\ud83c\udfaf Implement a Consistent Percentage Rollout",id:"-implement-a-consistent-percentage-rollout",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-implement-a-consistent-percentage-rollout",children:"\ud83c\udfaf Implement a Consistent Percentage Rollout"}),"\n",(0,o.jsx)(n.p,{children:"When rolling out to a subset of users, you want assignments to be consistent across sessions. By registering a custom gate that hashes an actor\u2019s unique identifier, you ensure deterministic inclusion in the rollout percentage."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/flipper.rb\nrequire 'digest'\n\nmodule Flipper\n  module Gates\n    class ConsistentPercentageOfActors < Gate\n      def name\n        :consistent_percentage_of_actors\n      end\n\n      def open?(value, actor)\n        return false unless actor&.flipper_id\n\n        # Hash actor ID into [0, 100)\n        bucket = Digest::MD5.hexdigest(actor.flipper_id).to_i(16) % 100\n        bucket < value.to_i\n      end\n    end\n  end\nend\n\nFlipper.register(Flipper::Gates::ConsistentPercentageOfActors.new)\n\n# Usage: roll out to 15% of users\nFlipper.enable(:new_dashboard, Flipper::Types::Integer.new(15), gate: :consistent_percentage_of_actors)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(36672);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);