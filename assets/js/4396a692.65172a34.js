"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40149],{65404:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var s=t(36672);const o={},i=s.createContext(o);function a(n){const e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),s.createElement(i.Provider,{value:e},n.children)}},74149:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"ruby/constants/expert/dynamic_constant_definition","title":"dynamic_constant_definition","description":"\ud83d\udee0\ufe0f Dynamic Constant Definition Using constset and constget","source":"@site/docs/ruby/constants/expert/dynamic_constant_definition.md","sourceDirName":"ruby/constants/expert","slug":"/ruby/constants/expert/dynamic_constant_definition","permalink":"/keep-being-human-dev/docs/ruby/constants/expert/dynamic_constant_definition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/constants/expert/dynamic_constant_definition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deep_freeze_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/expert/deep_freeze_constants"},"next":{"title":"config_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/middle/config_constants"}}');var o=t(23420),i=t(65404);const a={},c=void 0,d={},r=[{value:"\ud83d\udee0\ufe0f Dynamic Constant Definition Using <code>const_set</code> and <code>const_get</code>",id:"\ufe0f-dynamic-constant-definition-using-const_set-and-const_get",level:2}];function l(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h2,{id:"\ufe0f-dynamic-constant-definition-using-const_set-and-const_get",children:["\ud83d\udee0\ufe0f Dynamic Constant Definition Using ",(0,o.jsx)(e.code,{children:"const_set"})," and ",(0,o.jsx)(e.code,{children:"const_get"})]}),"\n",(0,o.jsxs)(e.p,{children:["You can define modules, classes, or any constants at runtime with ",(0,o.jsx)(e.code,{children:"Module.const_set"}),", which is invaluable for building plugin systems or DSLs. Pair it with ",(0,o.jsx)(e.code,{children:"Module.const_get"})," for lookup and instantiation without hardcoding names, enabling truly dynamic behavior. Remember to manage the namespace carefully to avoid collisions and consider removing unused constants to prevent memory leaks."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ruby",children:"module PluginLoader\n  def self.register(name, klass)\n    Plugins.const_set(name, klass)\n  end\n\n  def self.load(name)\n    klass = Plugins.const_get(name)\n    klass.new\n  end\nend\n\nmodule Plugins; end\n\n# Dynamically register a plugin\nPluginLoader.register('MyPlugin', Class.new do\n  def call\n    puts 'Hello from MyPlugin'\n  end\nend)\n\n# Later, load and use it\nPluginLoader.load('MyPlugin').call\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);