"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86648],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(36672);const r={},c=s.createContext(r);function o(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:t},e.children)}},75159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/openssl/expert/mutual_tls_with_sslcontext","title":"mutual_tls_with_sslcontext","description":"\ud83d\udd10 Mutual TLS with Custom SSLContext","source":"@site/docs/ruby/openssl/expert/mutual_tls_with_sslcontext.md","sourceDirName":"ruby/openssl/expert","slug":"/ruby/openssl/expert/mutual_tls_with_sslcontext","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/mutual_tls_with_sslcontext","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/expert/mutual_tls_with_sslcontext.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hardware_engine_pkcs11","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/hardware_engine_pkcs11"},"next":{"title":"streaming_aead_gcm_file_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/streaming_aead_gcm_file_encryption"}}');var r=n(23420),c=n(65404);const o={},i=void 0,a={},l=[{value:"\ud83d\udd10 Mutual TLS with Custom SSLContext",id:"-mutual-tls-with-custom-sslcontext",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-mutual-tls-with-custom-sslcontext",children:"\ud83d\udd10 Mutual TLS with Custom SSLContext"}),"\n",(0,r.jsxs)(t.p,{children:["In high-security environments, implementing mutual TLS (mTLS) ensures both client and server authenticate each other. You can use ",(0,r.jsx)(t.code,{children:"OpenSSL::SSL::SSLContext"})," to configure your own certificate paths, cipher suites, and verification callbacks for fine-grained control over handshake behavior."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'openssl'\nrequire 'socket'\n\ncontext = OpenSSL::SSL::SSLContext.new\ncontext.cert = OpenSSL::X509::Certificate.new(File.read('server.crt'))\ncontext.key  = OpenSSL::PKey::RSA.new(File.read('server.key'), 'passphrase')\ncontext.ca_file = 'ca_bundle.pem'\ncontext.verify_mode = OpenSSL::SSL::VERIFY_PEER | OpenSSL::SSL::VERIFY_FAIL_IF_NO_PEER_CERT\ncontext.verify_callback = lambda do |ok, store_context|\n  cert = store_context.current_cert\n  # Reject certificates that aren't signed by a specific issuer\n  ok && cert.issuer.to_s.include?('OU=TrustedCA')\nend\ncontext.ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384'\n\nserver = TCPServer.new(4433)\nssl_server = OpenSSL::SSL::SSLServer.new(server, context)\nssl_client = ssl_server.accept\nputs \"Client certificate: #{ssl_client.peer_cert.subject}\" if ssl_client.peer_cert\nssl_client.puts(\"Welcome, secure client!\")\nssl_client.close\n"})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);