"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18200],{42197:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rails/models/expert/arel_complex_subquery","title":"arel_complex_subquery","description":"\ud83e\udde9 Use Arel for Complex Subqueries","source":"@site/docs/rails/models/expert/arel_complex_subquery.md","sourceDirName":"rails/models/expert","slug":"/rails/models/expert/arel_complex_subquery","permalink":"/keep-being-human-dev/docs/rails/models/expert/arel_complex_subquery","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/expert/arel_complex_subquery.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"after_initialize_caching","permalink":"/keep-being-human-dev/docs/rails/models/expert/after_initialize_caching"},"next":{"title":"composite_primary_keys","permalink":"/keep-being-human-dev/docs/rails/models/expert/composite_primary_keys"}}');var o=s(23420),n=s(65404);const a={},i=void 0,l={},c=[{value:"\ud83e\udde9 Use Arel for Complex Subqueries",id:"-use-arel-for-complex-subqueries",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-use-arel-for-complex-subqueries",children:"\ud83e\udde9 Use Arel for Complex Subqueries"}),"\n",(0,o.jsx)(r.p,{children:"When you need to build highly dynamic or database\u2011agnostic queries inside a model, leverage Arel to compose queries safely. This approach ensures your subqueries or joins are escaped properly and can be manipulated programmatically."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"class Order < ApplicationRecord\n  # Find customers whose last order was above a threshold\n  def self.high_value_customers(amount)\n    orders = arel_table\n    subquery = orders\n      .project(orders[:customer_id])\n      .where(orders[:total_cents].gt(amount))\n      .order(orders[:created_at].desc)\n      .take(1)\n\n    where(id: Arel::Nodes::SqlLiteral.new(subquery.to_sql))\n  end\nend\n"})}),"\n",(0,o.jsxs)(r.p,{children:["This constructs the subquery in pure Arel and then injects its SQL safely into ActiveRecord's ",(0,o.jsx)(r.code,{children:"where"})," clause."]})]})}function d(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>i});var t=s(36672);const o={},n=t.createContext(o);function a(e){const r=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);