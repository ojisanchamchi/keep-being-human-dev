"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57405],{4588:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"ruby/operators/advanced/flip_flop_operator.md","title":"flip_flop_operator.md","description":"\u26a1 Flip-Flop Operator in Conditional Ranges","source":"@site/docs/ruby/operators/advanced/flip_flop_operator.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/flip_flop_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/flip_flop_operator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/flip_flop_operator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"endless_range_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/endless_range_operator.md"},"next":{"title":"operator_overloading.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/operator_overloading.md"}}');var t=r(23420),a=r(65404);const s={},d=void 0,p={},i=[{value:"\u26a1 Flip-Flop Operator in Conditional Ranges",id:"-flip-flop-operator-in-conditional-ranges",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-flip-flop-operator-in-conditional-ranges",children:"\u26a1 Flip-Flop Operator in Conditional Ranges"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby\u2019s flip-flop operator (",(0,t.jsx)(n.code,{children:"expr1..expr2"}),") toggles state when ",(0,t.jsx)(n.code,{children:"expr1"})," becomes truthy and resets when ",(0,t.jsx)(n.code,{children:"expr2"})," does. It\u2019s useful for processing blocks of text or lines between markers without extra state variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'data = ["start", "a", "b", "end", "x", "start", "y", "end"]\ndata.each do |line|\n  if (line == "start")..(line == "end")\n    puts line\n  end\nend\n# Output:\n# start\na\n# b\n# end\n# start\n# y\n# end\n'})})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var o=r(36672);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);