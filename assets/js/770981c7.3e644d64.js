"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[55975],{65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var n=r(36672);const s={},a=n.createContext(s);function i(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:t},e.children)}},83465:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/security/expert/rack_attack_dynamic_throttles","title":"rack_attack_dynamic_throttles","description":"\ud83d\udeab Dynamic Throttles & Blacklists with Rack::Attack","source":"@site/docs/rails/security/expert/rack_attack_dynamic_throttles.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/rack_attack_dynamic_throttles","permalink":"/keep-being-human-dev/docs/rails/security/expert/rack_attack_dynamic_throttles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/rack_attack_dynamic_throttles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"jwt_with_jwks_rotation","permalink":"/keep-being-human-dev/docs/rails/security/expert/jwt_with_jwks_rotation"},"next":{"title":"safe_redirect_whitelist","permalink":"/keep-being-human-dev/docs/rails/security/expert/safe_redirect_whitelist"}}');var s=r(23420),a=r(65404);const i={},c=void 0,o={},l=[{value:"\ud83d\udeab Dynamic Throttles &amp; Blacklists with Rack::Attack",id:"-dynamic-throttles--blacklists-with-rackattack",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-dynamic-throttles--blacklists-with-rackattack",children:"\ud83d\udeab Dynamic Throttles & Blacklists with Rack::Attack"}),"\n",(0,s.jsx)(t.p,{children:"For advanced DDOS and brute-force protection, use dynamic blocklists based on real-time metrics (e.g., burst spikes, malicious IP feeds). Combine throttles and blocklists for layered defense."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/rack_attack.rb\nclass Rack::Attack\n  # Block known bad IPs from external feed\n  blocklist('block bad IPs') do |req|\n    BadIpFeed.current.include?(req.ip)\n  end\n\n  # Throttle login attempts per IP\n  throttle('logins/ip', limit: 5, period: 20.seconds) do |req|\n    req.path == '/users/sign_in' && req.post? && req.ip\n  end\n\n  self.throttled_response = lambda do |env|\n    [429, {'Content-Type' => 'text/plain'}, [\"Throttled\\n\"]]\n  end\nend\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Reload your blocklist periodically and tune ",(0,s.jsx)(t.code,{children:"limit"}),"/",(0,s.jsx)(t.code,{children:"period"})," to your traffic patterns."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);