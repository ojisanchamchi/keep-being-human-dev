"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5903],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var o=s(36672);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}},93096:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/active_record_associations/advanced/association_extensions_module","title":"association_extensions_module","description":"\ud83d\udce6 Association Extensions for Custom Methods","source":"@site/docs/rails/active_record_associations/advanced/association_extensions_module.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/association_extensions_module","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/association_extensions_module","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/association_extensions_module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_callbacks_for_cache_invalidation","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation"},"next":{"title":"deep_nested_attributes_with_reject_if","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if"}}');var t=s(23420),a=s(65404);const i={},c=void 0,r={},d=[{value:"\ud83d\udce6 Association Extensions for Custom Methods",id:"-association-extensions-for-custom-methods",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-association-extensions-for-custom-methods",children:"\ud83d\udce6 Association Extensions for Custom Methods"}),"\n",(0,t.jsxs)(n.p,{children:["Extend ",(0,t.jsx)(n.code,{children:"has_many"})," associations with custom methods by passing a block or module. This encapsulates reusable logic directly on the association proxy, keeping controllers and models DRY."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/concerns/commentable_extensions.rb\nmodule CommentableExtensions\n  extend ActiveSupport::Concern\n\n  included do\n    has_many :comments do\n      def recent(limit = 5)\n        where('created_at > ?', 1.week.ago).limit(limit)\n      end\n    end\n  end\nend\n\nclass Article < ApplicationRecord\n  include CommentableExtensions\nend\n\n# Usage:\narticle.comments.recent(3)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);