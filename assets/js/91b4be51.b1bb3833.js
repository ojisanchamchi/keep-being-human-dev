"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88698],{65404:(e,a,r)=>{r.d(a,{R:()=>l,x:()=>s});var c=r(36672);const t={},n=c.createContext(t);function l(e){const a=c.useContext(n);return c.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),c.createElement(n.Provider,{value:a},e.children)}},71595:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"rails/active_record_callbacks/expert/memory_leak_callbacks","title":"memory_leak_callbacks","description":"\ud83d\udca1 Preventing Memory Leaks in Callback Procs","source":"@site/docs/rails/active_record_callbacks/expert/memory_leak_callbacks.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/memory_leak_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/memory_leak_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/memory_leak_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_callback_definitions","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/dynamic_callback_definitions"},"next":{"title":"prepend_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/prepend_callbacks"}}');var t=r(23420),n=r(65404);const l={},s=void 0,i={},o=[{value:"\ud83d\udca1 Preventing Memory Leaks in Callback Procs",id:"-preventing-memory-leaks-in-callback-procs",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-preventing-memory-leaks-in-callback-procs",children:"\ud83d\udca1 Preventing Memory Leaks in Callback Procs"}),"\n",(0,t.jsxs)(a.p,{children:["Avoid capturing large objects in callback closures, which can prevent garbage collection. Use ",(0,t.jsx)(a.code,{children:"class_attribute"})," or method references instead of inline Procs to minimize retained context."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"class Report < ApplicationRecord\n  class_attribute :notifier\n  self.notifier = ->(report_id) { ReportNotifier.notify(report_id) }\n\n  after_create -> { notifier.call(id) }\nend\n"})}),"\n",(0,t.jsx)(a.p,{children:"Here, the lambda only holds a reference to the class-level attribute, not each instance\u2019s full context. This pattern reduces memory footprint in long-lived application processes."})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);