"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35179],{20159:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/simple_form/expert/custom_js_widget_wrapper","title":"custom_js_widget_wrapper","description":"\ud83d\udee0\ufe0f Creating Custom Input Wrappers for JS Widgets","source":"@site/docs/gems/simple_form/expert/custom_js_widget_wrapper.md","sourceDirName":"gems/simple_form/expert","slug":"/gems/simple_form/expert/custom_js_widget_wrapper","permalink":"/keep-being-human-dev/docs/gems/simple_form/expert/custom_js_widget_wrapper","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/simple_form/expert/custom_js_widget_wrapper.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_formbuilder_macros","permalink":"/keep-being-human-dev/docs/gems/simple_form/expert/custom_formbuilder_macros"},"next":{"title":"dynamic_nested_associations","permalink":"/keep-being-human-dev/docs/gems/simple_form/expert/dynamic_nested_associations"}}');var s=t(23420),a=t(65404);const i={},o=void 0,p={},d=[{value:"\ud83d\udee0\ufe0f Creating Custom Input Wrappers for JS Widgets",id:"\ufe0f-creating-custom-input-wrappers-for-js-widgets",level:2}];function c(e){const r={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"\ufe0f-creating-custom-input-wrappers-for-js-widgets",children:"\ud83d\udee0\ufe0f Creating Custom Input Wrappers for JS Widgets"}),"\n",(0,s.jsx)(r.p,{children:"When you need to integrate a complex JavaScript-based widget (e.g., a date\u2011range picker) into your Rails forms, build a custom SimpleForm input and wrapper. This approach lets you encapsulate all markup, classes, and data attributes in one reusable component."}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["Create the custom input class under ",(0,s.jsx)(r.code,{children:"app/inputs/date_range_input.rb"}),":"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"# app/inputs/date_range_input.rb\nclass DateRangeInput < SimpleForm::Inputs::Base\n  def input(wrapper_options = nil)\n    merged = merge_wrapper_options(input_html_options, wrapper_options)\n    @builder.text_field(attribute_name, merged.merge(data: { controller: 'daterange', action: 'focus->daterange#open' }))\n  end\nend\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"2",children:["\n",(0,s.jsxs)(r.li,{children:["Configure a custom wrapper in ",(0,s.jsx)(r.code,{children:"config/initializers/simple_form.rb"}),":"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"SimpleForm.setup do |config|\n  config.wrappers :js_widget, tag: 'div', class: 'field js-widget', error_class: 'has-error' do |b|\n    b.use :label, class: 'widget-label'\n    b.wrapper tag: 'div', class: 'widget-input-container' do |ba|\n      ba.use :input\n      ba.use :error, wrap_with: { tag: 'span', class: 'widget-error' }\n    end\n    b.use :hint,  wrap_with: { tag: 'p', class: 'widget-hint' }\n  end\nend\n"})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsx)(r.li,{children:"Use it in your form:"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-erb",children:"<%= simple_form_for @report do |f| %>\n  <%= f.input :period, as: :date_range, wrapper: :js_widget, label: 'Report Period' %>\n  <%= f.button :submit %>\n<% end %>\n"})}),"\n",(0,s.jsx)(r.p,{children:"Now your date\u2011range picker will render with the correct markup and Stimulus hooks, fully isolated in a custom wrapper."})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(36672);const s={},a=n.createContext(s);function i(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);