"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56224],{65404:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var r=n(36672);const t={},o=r.createContext(t);function a(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:s},e.children)}},71188:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/json/beginner/json_parse_basics","title":"json_parse_basics","description":"\ud83d\udee0\ufe0f Parse JSON Strings into Ruby Objects","source":"@site/docs/ruby/json/beginner/json_parse_basics.md","sourceDirName":"ruby/json/beginner","slug":"/ruby/json/beginner/json_parse_basics","permalink":"/keep-being-human-dev/docs/ruby/json/beginner/json_parse_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/json/beginner/json_parse_basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"json_generate_basics","permalink":"/keep-being-human-dev/docs/ruby/json/beginner/json_generate_basics"},"next":{"title":"custom_json_serialization_for_complex_objects","permalink":"/keep-being-human-dev/docs/ruby/json/expert/custom_json_serialization_for_complex_objects"}}');var t=n(23420),o=n(65404);const a={},i=void 0,c={},u=[{value:"\ud83d\udee0\ufe0f Parse JSON Strings into Ruby Objects",id:"\ufe0f-parse-json-strings-into-ruby-objects",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"\ufe0f-parse-json-strings-into-ruby-objects",children:"\ud83d\udee0\ufe0f Parse JSON Strings into Ruby Objects"}),"\n",(0,t.jsxs)(s.p,{children:["Parsing JSON data is straightforward with Ruby\u2019s built-in ",(0,t.jsx)(s.code,{children:"json"})," library. First, require the library and then call ",(0,t.jsx)(s.code,{children:"JSON.parse"})," on a JSON-formatted string to convert it into native Ruby types (hashes, arrays, strings, etc.)."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'require \'json\'\n\njson_str = \'{"name":"Alice","age":30,"skills":["Ruby","JSON"]}\'\nparsed = JSON.parse(json_str)\nputs parsed.class            # => Hash\nputs parsed["name"]         # => "Alice"\nputs parsed["skills"][1]    # => "JSON"\n'})}),"\n",(0,t.jsxs)(s.p,{children:["You can pass the ",(0,t.jsx)(s.code,{children:"symbolize_names: true"})," option to ",(0,t.jsx)(s.code,{children:"JSON.parse"})," to convert keys to symbols for more idiomatic Ruby usage:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"parsed_sym = JSON.parse(json_str, symbolize_names: true)\nputs parsed_sym[:age]         # => 30\n"})})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);