"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27148],{29514:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>p,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"gems/bcrypt/expert/bcrypt_pepper_cost_configuration","title":"bcrypt_pepper_cost_configuration","description":"\ud83d\udd12 Configure Dynamic Cost and Pepper for Bcrypt","source":"@site/docs/gems/bcrypt/expert/bcrypt_pepper_cost_configuration.md","sourceDirName":"gems/bcrypt/expert","slug":"/gems/bcrypt/expert/bcrypt_pepper_cost_configuration","permalink":"/keep-being-human-dev/docs/gems/bcrypt/expert/bcrypt_pepper_cost_configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/bcrypt/expert/bcrypt_pepper_cost_configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bcrypt_legacy_migration","permalink":"/keep-being-human-dev/docs/gems/bcrypt/expert/bcrypt_legacy_migration"},"next":{"title":"bcrypt_custom_cost","permalink":"/keep-being-human-dev/docs/gems/bcrypt/middle/bcrypt_custom_cost"}}');var s=t(23420),o=t(65404);const c={},p=void 0,a={},i=[{value:"\ud83d\udd12 Configure Dynamic Cost and Pepper for Bcrypt",id:"-configure-dynamic-cost-and-pepper-for-bcrypt",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-configure-dynamic-cost-and-pepper-for-bcrypt",children:"\ud83d\udd12 Configure Dynamic Cost and Pepper for Bcrypt"}),"\n",(0,s.jsxs)(n.p,{children:["Combine a dynamic cost factor with a global pepper to strengthen your bcrypt hashes against GPU and rainbow\u2011table attacks. Use environment variables to adjust work factors per environment and inject a pepper via Devise or custom ",(0,s.jsx)(n.code,{children:"has_secure_password"})," overrides."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/bcrypt.rb\n\n# Set cost based on environment\nBCrypt::Engine.cost = if Rails.env.test?\n  BCrypt::Engine::MIN_COST\nelse\n  ENV.fetch('BCRYPT_COST', 12).to_i\nend\n\n# Devise pepper and stretches\nDevise.setup do |config|\n  config.stretches = Rails.env.test? ? 1 : ENV.fetch('DEVISE_STRETCHES', 12).to_i\n  config.pepper   = ENV.fetch('DEVISE_PEPPER')\nend\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  has_secure_password\n\n  # Override to append pepper\n  def password=(new_password)\n    @password = new_password\n    pepper = ENV.fetch('PASSWORD_PEPPER')\n    self.password_digest = BCrypt::Password.create(\n      \"#{new_password}#{pepper}\",\n      cost: BCrypt::Engine.cost\n    )\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>p});var r=t(36672);const s={},o=r.createContext(s);function c(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);