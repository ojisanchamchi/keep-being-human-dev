"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71504],{65404:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var t=o(36672);const d={},c=t.createContext(d);function i(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),t.createElement(c.Provider,{value:n},e.children)}},99351:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/strings/middle/encoding_force_encode","title":"encoding_force_encode","description":"\ud83d\udee0 Handle Encodings with force_encoding and encode","source":"@site/docs/ruby/strings/middle/encoding_force_encode.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/encoding_force_encode","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/encoding_force_encode","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/encoding_force_encode.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_gsub_blocks","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/dynamic_gsub_blocks"},"next":{"title":"heredoc_squiggly","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/heredoc_squiggly"}}');var d=o(23420),c=o(65404);const i={},r=void 0,s={},a=[{value:"\ud83d\udee0 Handle Encodings with force_encoding and encode",id:"-handle-encodings-with-force_encoding-and-encode",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-handle-encodings-with-force_encoding-and-encode",children:"\ud83d\udee0 Handle Encodings with force_encoding and encode"}),"\n",(0,d.jsxs)(n.p,{children:["When processing external data (files, network), you may encounter mismatched or invalid encodings. Use ",(0,d.jsx)(n.code,{children:"force_encoding"})," to tell Ruby how to interpret raw bytes, and ",(0,d.jsx)(n.code,{children:"encode"})," to convert strings safely between encodings. Combine with error-handling options to avoid exceptions."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'raw = File.read("data.txt", mode: "rb")\n# Assume the file is actually ISO-8859-1\ntext = raw.force_encoding("ISO-8859-1")\n# Convert to UTF-8, replacing invalid bytes\nutf8_text = text.encode("UTF-8", invalid: :replace, undef: :replace, replace: "?")\nputs utf8_text.encoding  # => #<Encoding:UTF-8>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);