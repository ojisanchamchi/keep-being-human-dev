"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8437],{8703:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>u,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/uri/advanced/custom_uri_scheme","title":"custom_uri_scheme","description":"\ud83c\udf10 Custom URI Scheme Handler","source":"@site/docs/ruby/uri/advanced/custom_uri_scheme.md","sourceDirName":"ruby/uri/advanced","slug":"/ruby/uri/advanced/custom_uri_scheme","permalink":"/keep-being-human-dev/docs/ruby/uri/advanced/custom_uri_scheme","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/uri/advanced/custom_uri_scheme.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_local_variables","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/thread_local_variables"},"next":{"title":"idn_support_punycode","permalink":"/keep-being-human-dev/docs/ruby/uri/advanced/idn_support_punycode"}}');var t=n(23420),a=n(65404);const u={},c=void 0,o={},i=[{value:"\ud83c\udf10 Custom URI Scheme Handler",id:"-custom-uri-scheme-handler",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"-custom-uri-scheme-handler",children:"\ud83c\udf10 Custom URI Scheme Handler"}),"\n",(0,t.jsxs)(s.p,{children:["By subclassing ",(0,t.jsx)(s.code,{children:"URI::Generic"}),", you can create custom URI schemes that integrate seamlessly with Ruby's ",(0,t.jsx)(s.code,{children:"URI"})," module. This allows you to parse, validate, and manipulate non-standard URIs without resorting to manual regex hacks."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"require 'uri'\n\nclass URI::MyApp < URI::Generic\n  def self.build(options = {})\n    super(options.merge(scheme: 'myapp'))\n  end\nend\n\n# Register the scheme so URI.parse recognizes it\nURI.scheme_list['MYAPP'] = URI::MyApp\n\nuri = URI.parse('myapp://user:pass@host:4567/path?foo=bar')\nputs uri.scheme   # => \"myapp\"\nputs uri.host     # => \"host\"\nputs uri.user     # => \"user\"\n"})})]})}function m(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>u,x:()=>c});var r=n(36672);const t={},a=r.createContext(t);function u(e){const s=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:u(e.components),r.createElement(a.Provider,{value:s},e.children)}}}]);