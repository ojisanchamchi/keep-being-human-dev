"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78734],{1710:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/method_missing/advanced/dsl_method_recording","title":"dsl_method_recording","description":"\ud83d\udee0\ufe0f Build a Fluent DSL with method_missing","source":"@site/docs/ruby/method_missing/advanced/dsl_method_recording.md","sourceDirName":"ruby/method_missing/advanced","slug":"/ruby/method_missing/advanced/dsl_method_recording","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/dsl_method_recording","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/advanced/dsl_method_recording.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"caching_missing_methods","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/caching_missing_methods"},"next":{"title":"lazy_association_proxy","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/lazy_association_proxy"}}');var i=s(23420),d=s(65404);const a={},o=void 0,r={},c=[{value:"\ud83d\udee0\ufe0f Build a Fluent DSL with method_missing",id:"\ufe0f-build-a-fluent-dsl-with-method_missing",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-build-a-fluent-dsl-with-method_missing",children:"\ud83d\udee0\ufe0f Build a Fluent DSL with method_missing"}),"\n",(0,i.jsx)(n.p,{children:"You can craft internal DSLs by capturing method calls, their arguments, and blocks to assemble custom behavior. Store calls in an array or build an AST, then evaluate them at once."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class QueryBuilder\n  def initialize\n    @clauses = []\n  end\n\n  def method_missing(name, *args, &block)\n    @clauses << { method: name, args: args }\n    self\n  end\n\n  def to_sql\n    @clauses.map { |c| \"#{c[:method].upcase} #{c[:args].join(', ')}\" }.join(' ')\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    true\n  end\nend\n\nqb = QueryBuilder.new\nsql = qb.select('*').from('users').where('age > 18').to_sql\n# => \"SELECT *, FROM users WHERE age > 18\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(36672);const i={},d=t.createContext(i);function a(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);