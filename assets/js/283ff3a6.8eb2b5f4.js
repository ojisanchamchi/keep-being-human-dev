"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9430],{64027:(e,t,c)=>{c.r(t),c.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/rspec/custom_matchers/expert/diffable_block_expectations.md","title":"diffable_block_expectations.md","description":"\ud83c\udfaf Leveraging diffable and Block Expectations for Rich Output","source":"@site/docs/gems/rspec/custom_matchers/expert/diffable_block_expectations.md.md","sourceDirName":"gems/rspec/custom_matchers/expert","slug":"/gems/rspec/custom_matchers/expert/diffable_block_expectations.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/diffable_block_expectations.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/custom_matchers/expert/diffable_block_expectations.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parameterized_custom_matcher","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/beginner/parameterized_custom_matcher"},"next":{"title":"dynamic_chaining_matchers.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md"}}');var s=c(23420),r=c(65404);const a={},o=void 0,i={},d=[{value:"\ud83c\udfaf Leveraging <code>diffable</code> and Block Expectations for Rich Output",id:"-leveraging-diffable-and-block-expectations-for-rich-output",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"-leveraging-diffable-and-block-expectations-for-rich-output",children:["\ud83c\udfaf Leveraging ",(0,s.jsx)(t.code,{children:"diffable"})," and Block Expectations for Rich Output"]}),"\n",(0,s.jsxs)(t.p,{children:["For assertions that involve large objects or side effects, combining ",(0,s.jsx)(t.code,{children:"diffable"})," and ",(0,s.jsx)(t.code,{children:"supports_block_expectations"})," in custom matchers enhances clarity by providing inline diffs and capturing exceptions. This technique gives you granular control over failure output and allows matchers to wrap code blocks for complex state changes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'# spec/support/matchers/change_database_record.rb\nRSpec::Matchers.define :change_database_record do |model_class, id|\n  supports_block_expectations\n  diffable\n\n  match do |block|\n    @record_before = model_class.find(id).attributes\n    block.call\n    @record_after = model_class.find(id).attributes\n    @record_before != @record_after\n  end\n\n  failure_message do |block|\n    "expected block to change #{model_class}##{id} attributes, but it didn\'t.\\n" +\n      "Before: #{@record_before.inspect}\\nAfter: #{@record_after.inspect}"\n  end\nend\n\n# Usage in a spec:\nexpect { user.update!(name: \'New\') }.to change_database_record(User, user.id)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,t,c)=>{c.d(t,{R:()=>a,x:()=>o});var n=c(36672);const s={},r=n.createContext(s);function a(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);