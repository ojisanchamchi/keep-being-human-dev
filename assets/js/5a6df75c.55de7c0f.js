"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90218],{7688:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/active_record_associations/advanced/preloading_with_aggregates","title":"preloading_with_aggregates","description":"\ud83d\ude80 Preloading Aggregated Data via Association","source":"@site/docs/rails/active_record_associations/advanced/preloading_with_aggregates.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/preloading_with_aggregates","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/preloading_with_aggregates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/preloading_with_aggregates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"polymorphic_counter_cache_optimization","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization"},"next":{"title":"self_referential_scopes","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/self_referential_scopes"}}');var t=s(23420),n=s(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\ude80 Preloading Aggregated Data via Association",id:"-preloading-aggregated-data-via-association",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-preloading-aggregated-data-via-association",children:"\ud83d\ude80 Preloading Aggregated Data via Association"}),"\n",(0,t.jsxs)(a.p,{children:["Leverage ",(0,t.jsx)(a.code,{children:"has_many"})," with a custom select to preload aggregated metrics (e.g., counts, sums) in a single query. This pattern avoids post-processing in Ruby and keeps your views snappy."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  has_many :orders\n  has_many :order_summaries,\n           -> { select('user_id, COUNT(*) AS total_orders, SUM(amount) AS total_spent').group('user_id') },\n           class_name: 'Order'\nend\n\nusers = User.includes(:order_summaries)\nusers.each do |u|\n  summary = u.order_summaries.first\n  puts \"#{u.name} placed #{summary.total_orders} orders worth $#{summary.total_spent}\"\nend\n"})})]})}function u(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>o});var r=s(36672);const t={},n=r.createContext(t);function i(e){const a=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(n.Provider,{value:a},e.children)}}}]);