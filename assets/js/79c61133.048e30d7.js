"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34472],{47408:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>r,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rails/active_record_associations/middle/polymorphic_association","title":"polymorphic_association","description":"\ud83e\udde9 Leveraging Polymorphic Associations for Flexible Relations","source":"@site/docs/rails/active_record_associations/middle/polymorphic_association.md","sourceDirName":"rails/active_record_associations/middle","slug":"/rails/active_record_associations/middle/polymorphic_association","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/polymorphic_association","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/middle/polymorphic_association.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inverse_of","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/inverse_of"},"next":{"title":"touch_option","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/touch_option"}}');var n=s(23420),a=s(65404);const t={},c=void 0,r={},l=[{value:"\ud83e\udde9 Leveraging Polymorphic Associations for Flexible Relations",id:"-leveraging-polymorphic-associations-for-flexible-relations",level:2}];function d(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"-leveraging-polymorphic-associations-for-flexible-relations",children:"\ud83e\udde9 Leveraging Polymorphic Associations for Flexible Relations"}),"\n",(0,n.jsxs)(o.p,{children:["Polymorphic associations let a model belong to more than one other model on a single association. This is useful for shared features like comments, attachments, or tags across various resources. Define a ",(0,n.jsx)(o.code,{children:"belongs_to :attachable, polymorphic: true"})," on the polymorphic model and use ",(0,n.jsx)(o.code,{children:"has_many :comments, as: :commentable"})," on each parent."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:"class Comment < ApplicationRecord\n  belongs_to :commentable, polymorphic: true\nend\n\nclass Article < ApplicationRecord\n  has_many :comments, as: :commentable, dependent: :destroy\nend\n\nclass Photo < ApplicationRecord\n  has_many :comments, as: :commentable, dependent: :destroy\nend\n"})})]})}function m(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,o,s)=>{s.d(o,{R:()=>t,x:()=>c});var i=s(36672);const n={},a=i.createContext(n);function t(e){const o=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),i.createElement(a.Provider,{value:o},e.children)}}}]);