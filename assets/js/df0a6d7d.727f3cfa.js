"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12767],{60490:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"ruby/metaprogramming/beginner/define_method_dynamic","title":"define_method_dynamic","description":"\ud83d\udee0\ufe0f Define Methods Dynamically with define_method","source":"@site/docs/ruby/metaprogramming/beginner/define_method_dynamic.md","sourceDirName":"ruby/metaprogramming/beginner","slug":"/ruby/metaprogramming/beginner/define_method_dynamic","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/define_method_dynamic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/beginner/define_method_dynamic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"const_missing_lazy_loading","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/const_missing_lazy_loading"},"next":{"title":"define_singleton_method_usage","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/define_singleton_method_usage"}}');var o=t(23420),d=t(65404);const a={},r=void 0,s={},m=[{value:"\ud83d\udee0\ufe0f Define Methods Dynamically with <code>define_method</code>",id:"\ufe0f-define-methods-dynamically-with-define_method",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"\ufe0f-define-methods-dynamically-with-define_method",children:["\ud83d\udee0\ufe0f Define Methods Dynamically with ",(0,o.jsx)(n.code,{children:"define_method"})]}),"\n",(0,o.jsxs)(n.p,{children:["Ruby\u2019s ",(0,o.jsx)(n.code,{children:"define_method"})," lets you create methods at runtime, giving you flexibility in API design. You can loop over a list of attributes or actions and generate methods in a DRY way. This is especially useful when you want similar behavior for multiple method names without repeating code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class GreetingBuilder\n  %i[hello goodbye].each do |method_name|\n    define_method(method_name) do |name|\n      "#{method_name.to_s.capitalize}, #{name}!"\n    end\n  end\nend\n\ngb = GreetingBuilder.new\nputs gb.hello("Alice")   # => "Hello, Alice!"\nputs gb.goodbye("Bob")   # => "Goodbye, Bob!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(36672);const o={},d=i.createContext(o);function a(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);