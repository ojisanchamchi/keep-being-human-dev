"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83805],{38551:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"ruby/blocks/middle/block_to_proc_conversion.md","title":"block_to_proc_conversion.md","description":"\ud83d\udd17 Convert Blocks to Proc Objects with &block","source":"@site/docs/ruby/blocks/middle/block_to_proc_conversion.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/block_to_proc_conversion.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/block_to_proc_conversion.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/block_to_proc_conversion.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"trampoline_pattern_with_procs","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/trampoline_pattern_with_procs"},"next":{"title":"chainable_methods_with_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/chainable_methods_with_blocks.md"}}');var n=t(23420),r=t(65404);const s={},i=void 0,l={},d=[{value:"\ud83d\udd17 Convert Blocks to <code>Proc</code> Objects with <code>&amp;block</code>",id:"-convert-blocks-to-proc-objects-with-block",level:2}];function a(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(o.h2,{id:"-convert-blocks-to-proc-objects-with-block",children:["\ud83d\udd17 Convert Blocks to ",(0,n.jsx)(o.code,{children:"Proc"})," Objects with ",(0,n.jsx)(o.code,{children:"&block"})]}),"\n",(0,n.jsxs)(o.p,{children:["Sometimes you need to store or pass a block around as a ",(0,n.jsx)(o.code,{children:"Proc"}),". Prefixing a method parameter with ",(0,n.jsx)(o.code,{children:"&"})," automatically converts the incoming block to a ",(0,n.jsx)(o.code,{children:"Proc"}),". You can then call, pass, or combine it with other procs seamlessly."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-ruby",children:"def repeat(n, &block)\n  n.times { block.call }\nend\n\nsay_hi = proc { puts 'Hi!' }\nrepeat(3, &say_hi)\n# Outputs:\n# Hi!\n# Hi!\n# Hi!\n"})})]})}function p(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},65404:(e,o,t)=>{t.d(o,{R:()=>s,x:()=>i});var c=t(36672);const n={},r=c.createContext(n);function s(e){const o=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),c.createElement(r.Provider,{value:o},e.children)}}}]);