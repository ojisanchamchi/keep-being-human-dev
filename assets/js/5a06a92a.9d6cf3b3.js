"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21614],{65404:(e,s,r)=>{r.d(s,{R:()=>d,x:()=>i});var n=r(36672);const t={},o=n.createContext(t);function d(e){const s=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(o.Provider,{value:s},e.children)}},83339:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"gems/redis/advanced/redis_redlock_distributed_locks","title":"redis_redlock_distributed_locks","description":"\ud83d\udd12 Use Redlock for Robust Distributed Locks","source":"@site/docs/gems/redis/advanced/redis_redlock_distributed_locks.md","sourceDirName":"gems/redis/advanced","slug":"/gems/redis/advanced/redis_redlock_distributed_locks","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_redlock_distributed_locks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/advanced/redis_redlock_distributed_locks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_pubsub_connection_pool","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_pubsub_connection_pool"},"next":{"title":"redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_streams_event_sourcing"}}');var t=r(23420),o=r(65404);const d={},i=void 0,c={},a=[{value:"\ud83d\udd12 Use Redlock for Robust Distributed Locks",id:"-use-redlock-for-robust-distributed-locks",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"-use-redlock-for-robust-distributed-locks",children:"\ud83d\udd12 Use Redlock for Robust Distributed Locks"}),"\n",(0,t.jsx)(s.p,{children:"Prevent race conditions across multiple Rails processes by implementing the Redlock algorithm on a Redis cluster. This ensures locks expire correctly and are automatically retried in case of failures."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"# Gemfile\ngem 'redlock'\n\n# config/initializers/redlock.rb\n$redlock = Redlock::Client.new(\n  [\n    { url: ENV['REDIS_URL'] }\n  ], retry_count: 3, retry_delay: 200\n)\n\n# Usage in a service\n$redlock.lock!(\"user:#{user.id}:sync\", 10_000) do |locked|\n  if locked\n    # perform critical operation\n    user.sync_with_external_system\n  else\n    Rails.logger.info \"Lock not acquired for user #{user.id}\"\n  end\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);