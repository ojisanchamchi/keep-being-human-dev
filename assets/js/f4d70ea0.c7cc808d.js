"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93088],{9820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"ruby/symbols/middle/dynamic_method_definition","title":"dynamic_method_definition","description":"\ud83d\udd27 Define Methods Dynamically with define_method and Symbols","source":"@site/docs/ruby/symbols/middle/dynamic_method_definition.md","sourceDirName":"ruby/symbols/middle","slug":"/ruby/symbols/middle/dynamic_method_definition","permalink":"/keep-being-human-dev/docs/ruby/symbols/middle/dynamic_method_definition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/middle/dynamic_method_definition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_garbage_collection_inspection","permalink":"/keep-being-human-dev/docs/ruby/symbols/expert/symbol_garbage_collection_inspection"},"next":{"title":"dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/symbols/middle/dynamic_method_invocation"}}');var i=t(23420),d=t(65404);const s={},a=void 0,c={},m=[{value:"\ud83d\udd27 Define Methods Dynamically with <code>define_method</code> and Symbols",id:"-define-methods-dynamically-with-define_method-and-symbols",level:2}];function r(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-define-methods-dynamically-with-define_method-and-symbols",children:["\ud83d\udd27 Define Methods Dynamically with ",(0,i.jsx)(n.code,{children:"define_method"})," and Symbols"]}),"\n",(0,i.jsxs)(n.p,{children:["Ruby\u2019s ",(0,i.jsx)(n.code,{children:"define_method"})," accepts a symbol (or string) name and block, letting you generate methods programmatically. Combined with symbols, you can DRY up repetitive getters/setters or build internal DSLs without manual method definitions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class Config\n  [:host, :port, :database].each do |attr|\n    define_method(attr) { @config[attr] }\n    define_method("#{attr}=") { |value| @config[attr] = value }\n  end\n\n  def initialize(config = {})\n    @config = config\n  end\nend\n\ncfg = Config.new(host: "localhost", port: 5432)\nputs cfg.host           # => "localhost"\ncfg.database = "my_db"\nputs cfg.database       # => "my_db"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(36672);const i={},d=o.createContext(i);function s(e){const n=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);