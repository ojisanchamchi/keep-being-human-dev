"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7933],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var r=a(36672);const s={},t=r.createContext(s);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(t.Provider,{value:n},e.children)}},92067:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/marshal/expert/marshal_secure_compression","title":"marshal_secure_compression","description":"\ud83d\udd12 Compressing, Encrypting and Whitelisting Marshal Payloads","source":"@site/docs/ruby/marshal/expert/marshal_secure_compression.md","sourceDirName":"ruby/marshal/expert","slug":"/ruby/marshal/expert/marshal_secure_compression","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_secure_compression","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/expert/marshal_secure_compression.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"marshal_custom_versioning","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_custom_versioning"},"next":{"title":"marshal_streaming_chunks","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_streaming_chunks"}}');var s=a(23420),t=a(65404);const i={},c=void 0,o={},l=[{value:"\ud83d\udd12 Compressing, Encrypting and Whitelisting Marshal Payloads",id:"-compressing-encrypting-and-whitelisting-marshal-payloads",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-compressing-encrypting-and-whitelisting-marshal-payloads",children:"\ud83d\udd12 Compressing, Encrypting and Whitelisting Marshal Payloads"}),"\n",(0,s.jsx)(n.p,{children:"Combine Zlib and OpenSSL to compress and encrypt serialized data, then safely load only permitted classes to mitigate injection risks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'zlib'\nrequire 'openssl'\nrequire 'stringio'\n\n# --- Serialization ---\nplain = Marshal.dump(your_object)\ncompressed = Zlib::Deflate.deflate(plain)\n\ncipher = OpenSSL::Cipher.new('aes-256-gcm').encrypt\ncipher.key = key = Cipher.random_key\niv = cipher.random_iv\ncipher.auth_data = ''\nencrypted = cipher.update(compressed) + cipher.final\nauth_tag = cipher.auth_tag\n\npayload = iv + auth_tag + encrypted\nFile.write('secure.dat', payload)\n# Store 'key' elsewhere securely\n\n# --- Deserialization ---\nbuf = File.binread('secure.dat')\niv, auth_tag, encrypted = buf[0...12], buf[12...28], buf[28..-1]\n\ndec = OpenSSL::Cipher.new('aes-256-gcm').decrypt\ndec.key = key\ndec.iv  = iv\ndec.auth_tag = auth_tag\ndec.auth_data = ''\ndecompressed = Zlib::Inflate.inflate(dec.update(encrypted) + dec.final)\n\n# Safe load with whitelisted classes (Ruby \u22652.7)\nallowed = [String, Symbol, Array, Hash, YourClass]\nstream = StringIO.new(decompressed)\nsafe_obj = Marshal.load(stream, permitted_classes: allowed)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);