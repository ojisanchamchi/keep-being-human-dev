"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80077],{50527:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"javascript/hotwire/advanced/streaming_large_payloads","title":"streaming_large_payloads","description":"\ud83d\udce1 Streaming Large Payloads via Turbo Streams","source":"@site/docs/javascript/hotwire/advanced/streaming_large_payloads.md","sourceDirName":"javascript/hotwire/advanced","slug":"/javascript/hotwire/advanced/streaming_large_payloads","permalink":"/keep-being-human-dev/docs/javascript/hotwire/advanced/streaming_large_payloads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/hotwire/advanced/streaming_large_payloads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stimulus_mutation_observer","permalink":"/keep-being-human-dev/docs/javascript/hotwire/advanced/stimulus_mutation_observer"},"next":{"title":"turbo_error_handling","permalink":"/keep-being-human-dev/docs/javascript/hotwire/advanced/turbo_error_handling"}}');var n=r(23420),s=r(65404);const o={},i=void 0,d={},c=[{value:"\ud83d\udce1 Streaming Large Payloads via Turbo Streams",id:"-streaming-large-payloads-via-turbo-streams",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"-streaming-large-payloads-via-turbo-streams",children:"\ud83d\udce1 Streaming Large Payloads via Turbo Streams"}),"\n",(0,n.jsx)(a.p,{children:"For large binary or text data, chunk and stream parts as separate Turbo Stream messages. This reduces jank and keeps UI responsive."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:"# controller\ndef download\n  response.headers['Content-Type'] = 'text/vnd.turbo-stream.html'\n  self.response_body = Enumerator.new do |y|\n    File.open(@big_file, 'r').each(1.kilobyte) do |chunk|\n      y << turbo_stream.append('output', chunk)\n    end\n  end\nend\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Turbo will append each chunk to your ",(0,n.jsx)(a.code,{children:"#output"})," container in near real\u2011time."]})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},65404:(e,a,r)=>{r.d(a,{R:()=>o,x:()=>i});var t=r(36672);const n={},s=t.createContext(n);function o(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);