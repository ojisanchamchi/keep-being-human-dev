"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74922],{50729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if","title":"deep_nested_attributes_with_reject_if","description":"\ud83c\udfd7 Deep Nested Attributes with Conditional Rejection","source":"@site/docs/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_extensions_module","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/association_extensions_module"},"next":{"title":"dynamic_associations_definition","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/dynamic_associations_definition"}}');var i=n(23420),a=n(65404);const r={},o=void 0,c={},d=[{value:"\ud83c\udfd7 Deep Nested Attributes with Conditional Rejection",id:"-deep-nested-attributes-with-conditional-rejection",level:2}];function _(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-deep-nested-attributes-with-conditional-rejection",children:"\ud83c\udfd7 Deep Nested Attributes with Conditional Rejection"}),"\n",(0,i.jsxs)(t.p,{children:["Control mass-assignment for deeply nested associations by using ",(0,i.jsx)(t.code,{children:"accepts_nested_attributes_for"})," with a ",(0,i.jsx)(t.code,{children:"reject_if"})," proc. This ensures only valid nested records are built or updated, preventing orphan or blank entries."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"class Project < ApplicationRecord\n  has_many :milestones\n  accepts_nested_attributes_for :milestones,\n                                allow_destroy: true,\n                                reject_if: ->(attrs) { attrs['name'].blank? }\nend\n\n# In controller\ndef project_params\n  params.require(:project).permit(:title,\n    milestones_attributes: [:id, :name, :due_date, :_destroy])\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(36672);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);