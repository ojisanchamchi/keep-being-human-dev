"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38536],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(36672);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},92055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/reflection/expert/ast_manipulation","title":"ast_manipulation","description":"\ud83d\udcdc Extracting and Manipulating AST via RubyVM","source":"@site/docs/ruby/reflection/expert/ast_manipulation.md","sourceDirName":"ruby/reflection/expert","slug":"/ruby/reflection/expert/ast_manipulation","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/ast_manipulation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/expert/ast_manipulation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"use_respond_to","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/use_respond_to"},"next":{"title":"dynamic_basicobject_proxy","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/dynamic_basicobject_proxy"}}');var a=t(23420),i=t(65404);const o={},c=void 0,s={},u=[{value:"\ud83d\udcdc Extracting and Manipulating AST via RubyVM",id:"-extracting-and-manipulating-ast-via-rubyvm",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-extracting-and-manipulating-ast-via-rubyvm",children:"\ud83d\udcdc Extracting and Manipulating AST via RubyVM"}),"\n",(0,a.jsx)(n.p,{children:"RubyVM::AbstractSyntaxTree allows you to introspect or transform code at the AST level. You can parse a method, alter its node tree, and recompile it\u2014enabling powerful DSLs or ahead\u2011of\u2011time optimizations."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'rubyvm'\nnode = RubyVM::AbstractSyntaxTree.parse(<<~RUBY)\ndef greet(name)\n  puts \"Hello, #{name}!\"\nend\nRUBY\n# Walk the AST to replace string interpolation with concatenation\ntransform! = lambda do |n|\n  if n.type == :DSTR\n    parts = n.children.map do |c|\n      c.type == :STR ? c.children[0].inspect : c.children[0].children[1]\n    end\n    new_code = parts.join(' + ')\n    return RubyVM::AbstractSyntaxTree.parse(new_code)\n  end\n  n.children.each_with_index { |ch, i| n.children[i] = transform!.call(ch) if ch.is_a?(RubyVM::AbstractSyntaxTree::Node) }\n  n\nend\nnew_node = transform!.call(node)\nputs new_node.inspect\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By recompiling ",(0,a.jsx)(n.code,{children:"new_node"}),", you can inject or remove constructs before execution, unlocking dynamic code transformations."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);