"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26370],{64442:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>r,contentTitle:()=>t,default:()=>_,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation","title":"association_callbacks_for_cache_invalidation","description":"\u2699\ufe0f Association Callbacks for Cache Invalidation","source":"@site/docs/rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/association_callbacks_for_cache_invalidation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"use_counter_cache","permalink":"/keep-being-human-dev/docs/rails/active_record/middle/use_counter_cache"},"next":{"title":"association_extensions_module","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/association_extensions_module"}}');var c=n(23420),o=n(65404);const s={},t=void 0,r={},d=[{value:"\u2699\ufe0f Association Callbacks for Cache Invalidation",id:"\ufe0f-association-callbacks-for-cache-invalidation",level:2}];function l(a){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...a.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(e.h2,{id:"\ufe0f-association-callbacks-for-cache-invalidation",children:"\u2699\ufe0f Association Callbacks for Cache Invalidation"}),"\n",(0,c.jsxs)(e.p,{children:["Use ",(0,c.jsx)(e.code,{children:"after_add"})," and ",(0,c.jsx)(e.code,{children:"before_remove"})," callbacks on associations to trigger side-effects like cache invalidation or notifications. This keeps related state in sync automatically when associations change."]}),"\n",(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{className:"language-ruby",children:"class Playlist < ApplicationRecord\n  has_many :songs,\n           after_add:    :invalidate_duration_cache,\n           before_remove: :invalidate_duration_cache\n\n  def invalidate_duration_cache(_song)\n    Rails.cache.delete([self, :total_duration])\n  end\nend\n\n# Now adding or removing songs auto-clears the cached total_duration\nplaylist.songs << Song.first\n"})})]})}function _(a={}){const{wrapper:e}={...(0,o.R)(),...a.components};return e?(0,c.jsx)(e,{...a,children:(0,c.jsx)(l,{...a})}):l(a)}},65404:(a,e,n)=>{n.d(e,{R:()=>s,x:()=>t});var i=n(36672);const c={},o=i.createContext(c);function s(a){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof a?a(e):{...e,...a}},[e,a])}function t(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(c):a.components||c:s(a.components),i.createElement(o.Provider,{value:e},a.children)}}}]);