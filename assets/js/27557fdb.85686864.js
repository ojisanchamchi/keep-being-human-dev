"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2337],{31452:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/numbers/advanced/numeric_clamp_bounds","title":"numeric_clamp_bounds","description":"\ud83d\udd12 Constraining Numbers with Numeric#clamp and Range Guards","source":"@site/docs/ruby/numbers/advanced/numeric_clamp_bounds.md","sourceDirName":"ruby/numbers/advanced","slug":"/ruby/numbers/advanced/numeric_clamp_bounds","permalink":"/keep-being-human-dev/docs/ruby/numbers/advanced/numeric_clamp_bounds","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/numbers/advanced/numeric_clamp_bounds.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"complex_rotations","permalink":"/keep-being-human-dev/docs/ruby/numbers/advanced/complex_rotations"},"next":{"title":"prime_factorization","permalink":"/keep-being-human-dev/docs/ruby/numbers/advanced/prime_factorization"}}');var t=a(23420),s=a(65404);const c={},u=void 0,i={},o=[{value:"\ud83d\udd12 Constraining Numbers with Numeric#clamp and Range Guards",id:"-constraining-numbers-with-numericclamp-and-range-guards",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-constraining-numbers-with-numericclamp-and-range-guards",children:"\ud83d\udd12 Constraining Numbers with Numeric#clamp and Range Guards"}),"\n",(0,t.jsx)(n.p,{children:"Numeric#clamp lets you enforce lower and upper bounds on any comparable numeric value. It simplifies validations and defaulting logic without conditionals. Works seamlessly with Integer, Float, and custom numeric types."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Basic usage\nx = 42\nputs x.clamp(0, 100)    # => 42\nputs (-10).clamp(0, 100) # => 0\n\n# Using a Range for bounds\nrange = 1..5\nx = 7\nputs x.clamp(range.begin, range.end)  # => 5\n\n# Floating-point constraints\nf = 1.234\nputs f.clamp(0.0, 1.0)   # => 1.0\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>u});var r=a(36672);const t={},s=r.createContext(t);function c(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);