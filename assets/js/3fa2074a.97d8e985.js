"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68359],{55406:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/set/beginner/basic_set_operations","title":"basic_set_operations","description":"\ud83d\udd04 Perform Union, Intersection, and Difference","source":"@site/docs/ruby/set/beginner/basic_set_operations.md","sourceDirName":"ruby/set/beginner","slug":"/ruby/set/beginner/basic_set_operations","permalink":"/keep-being-human-dev/docs/ruby/set/beginner/basic_set_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/set/beginner/basic_set_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"set_transitive_closure","permalink":"/keep-being-human-dev/docs/ruby/set/advanced/set_transitive_closure"},"next":{"title":"initialize_set","permalink":"/keep-being-human-dev/docs/ruby/set/beginner/initialize_set"}}');var r=t(23420),s=t(65404);const o={},c=void 0,a={},u=[{value:"\ud83d\udd04 Perform Union, Intersection, and Difference",id:"-perform-union-intersection-and-difference",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-perform-union-intersection-and-difference",children:"\ud83d\udd04 Perform Union, Intersection, and Difference"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby Sets come with operators for common mathematical operations: ",(0,r.jsx)(n.code,{children:"|"})," (union), ",(0,r.jsx)(n.code,{children:"&"})," (intersection), and ",(0,r.jsx)(n.code,{children:"-"})," (difference). These let you merge collections, find common elements, or subtract one set from another with minimal code."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'set'\n\na = Set.new([1, 2, 3])\nb = Set.new([3, 4, 5])\n\nunion        = a | b   # combine unique elements\nintersection = a & b   # elements in both\ndifference   = a - b   # elements in a not in b\n\nputs union.inspect        # => #<Set: {1, 2, 3, 4, 5}>\nputs intersection.inspect # => #<Set: {3}>\nputs difference.inspect   # => #<Set: {1, 2}>\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(36672);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);