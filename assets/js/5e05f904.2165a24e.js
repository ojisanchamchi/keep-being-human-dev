"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54999],{65404:(e,o,n)=>{n.d(o,{R:()=>c,x:()=>l});var t=n(36672);const r={},s=t.createContext(r);function c(e){const o=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(s.Provider,{value:o},e.children)}},84100:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>l,default:()=>b,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/blocks/expert/fiber_based_block_control_flow","title":"fiber_based_block_control_flow","description":"\ud83d\udd04 Fiber-Based Block Flow Control","source":"@site/docs/ruby/blocks/expert/fiber_based_block_control_flow.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/fiber_based_block_control_flow","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/fiber_based_block_control_flow","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/fiber_based_block_control_flow.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_define_method_with_block","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/dynamic_define_method_with_block"},"next":{"title":"internal_dsl_with_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/internal_dsl_with_instance_eval"}}');var r=n(23420),s=n(65404);const c={},l=void 0,i={},a=[{value:"\ud83d\udd04 Fiber-Based Block Flow Control",id:"-fiber-based-block-flow-control",level:2}];function d(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.h2,{id:"-fiber-based-block-flow-control",children:"\ud83d\udd04 Fiber-Based Block Flow Control"}),"\n",(0,r.jsxs)(o.p,{children:["Leverage ",(0,r.jsx)(o.code,{children:"Fiber"})," with blocks to create lightweight coroutines or generators that can pause and resume execution. This pattern simplifies stateful pipelines, infinite generators, and cooperative multitasking."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-ruby",children:"producer = Fiber.new do\n  x = 1\n  loop do\n    x *= 2\n    Fiber.yield x\n  end\nend\n\n# Pull next 5 values\n5.times { puts producer.resume } # => 2, 4, 8, 16, 32\n"})})]})}function b(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);