"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23314],{65404:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>r});var t=o(36672);const n={},i=t.createContext(n);function a(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(i.Provider,{value:s},e.children)}},67598:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_record_associations/beginner/belongs_to_association","title":"belongs_to_association","description":"\ud83d\udd17 Use belongs_to to Set Parent Relationships","source":"@site/docs/rails/active_record_associations/beginner/belongs_to_association.md","sourceDirName":"rails/active_record_associations/beginner","slug":"/rails/active_record_associations/beginner/belongs_to_association","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/beginner/belongs_to_association","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/beginner/belongs_to_association.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"through_association_with_conditions","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/through_association_with_conditions"},"next":{"title":"build_associated_records","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/beginner/build_associated_records"}}');var n=o(23420),i=o(65404);const a={},r=void 0,c={},d=[{value:"\ud83d\udd17 Use <code>belongs_to</code> to Set Parent Relationships",id:"-use-belongs_to-to-set-parent-relationships",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(s.h2,{id:"-use-belongs_to-to-set-parent-relationships",children:["\ud83d\udd17 Use ",(0,n.jsx)(s.code,{children:"belongs_to"})," to Set Parent Relationships"]}),"\n",(0,n.jsxs)(s.p,{children:["When a model holds the foreign key, use ",(0,n.jsx)(s.code,{children:"belongs_to"})," to declare its parent. This sets up methods to access and manipulate the associated parent record."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\nend\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Here, ",(0,n.jsx)(s.code,{children:"comment.post"})," returns the associated ",(0,n.jsx)(s.code,{children:"Post"})," object, and ",(0,n.jsx)(s.code,{children:"comment.post = new_post"})," updates the foreign key accordingly."]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);