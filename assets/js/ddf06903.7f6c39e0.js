"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17045],{62732:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/strings/expert/binary_data_handling_string_b","title":"binary_data_handling_string_b","description":"\ud83d\udee0 Optimize binary data handling with String#b","source":"@site/docs/ruby/strings/expert/binary_data_handling_string_b.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/binary_data_handling_string_b","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/binary_data_handling_string_b","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/binary_data_handling_string_b.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_named_captures","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/advanced_named_captures"},"next":{"title":"binary_parsing_with_unpack_pack","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/binary_parsing_with_unpack_pack"}}');var i=t(23420),r=t(65404);const s={},d=void 0,c={},o=[{value:"\ud83d\udee0 Optimize binary data handling with String#b",id:"-optimize-binary-data-handling-with-stringb",level:2}];function p(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:"-optimize-binary-data-handling-with-stringb",children:"\ud83d\udee0 Optimize binary data handling with String#b"}),"\n",(0,i.jsxs)(e.p,{children:["Ruby strings carry an associated encoding, which can lead to unwanted transcoding when working with raw bytes. Appending ",(0,i.jsx)(e.code,{children:".b"})," returns a binary-encoded copy (",(0,i.jsx)(e.code,{children:"ASCII-8BIT"}),"), bypassing Ruby\u2019s default UTF-8 checks. This is indispensable when interfacing with C extensions or handling packed protocol frames."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'data = File.read("image.png")       # => UTF-8 or ASCII-8BIT depending on source\nbinary = data.b                      # force ASCII-8BIT\nputs binary.encoding                # => #<Encoding:ASCII-8BIT>\n# Now you can safely manipulate `binary` without encoding transcoding\n'})})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(p,{...n})}):p(n)}},65404:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>d});var a=t(36672);const i={},r=a.createContext(i);function s(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);