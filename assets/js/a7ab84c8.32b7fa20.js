"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5403],{19194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/beginner/argument_matching_stub","title":"argument_matching_stub","description":"\ud83c\udfaf Use Argument Matchers in Stubs and Mocks","source":"@site/docs/gems/rspec/mocks_and_stubs/beginner/argument_matching_stub.md","sourceDirName":"gems/rspec/mocks_and_stubs/beginner","slug":"/gems/rspec/mocks_and_stubs/beginner/argument_matching_stub","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/argument_matching_stub","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/beginner/argument_matching_stub.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stub_private_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/stub_private_methods"},"next":{"title":"chain_method_stub","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/chain_method_stub"}}');var r=t(23420),i=t(65404);const c={},o=void 0,a={},d=[{value:"\ud83c\udfaf Use Argument Matchers in Stubs and Mocks",id:"-use-argument-matchers-in-stubs-and-mocks",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-use-argument-matchers-in-stubs-and-mocks",children:"\ud83c\udfaf Use Argument Matchers in Stubs and Mocks"}),"\n",(0,r.jsxs)(n.p,{children:["Argument matchers like ",(0,r.jsx)(n.code,{children:"anything"}),", ",(0,r.jsx)(n.code,{children:"kind_of"}),", or ",(0,r.jsx)(n.code,{children:"hash_including"})," let you flexibly specify which calls to stub or expect, without hardcoding exact values. This makes your tests less brittle and more readable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"notifier = double('Notifier')\nallow(notifier).to receive(:notify).with(kind_of(String), hash_including(id: 1))\n\nRSpec.describe Order do\n  it 'sends notification with order data' do\n    order = Order.new(id: 1)\n    order.notifier = notifier\n\n    order.complete\n\n    expect(notifier).to have_received(:notify).once\n  end\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var s=t(36672);const r={},i=s.createContext(r);function c(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);