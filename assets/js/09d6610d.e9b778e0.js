"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72139],{13815:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>a,frontMatter:()=>l,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"ruby/logging/expert/async_non_blocking_logger","title":"async_non_blocking_logger","description":"\ud83d\ude80 Asynchronous Non\u2011blocking Logger with Backpressure Control","source":"@site/docs/ruby/logging/expert/async_non_blocking_logger.md","sourceDirName":"ruby/logging/expert","slug":"/ruby/logging/expert/async_non_blocking_logger","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/async_non_blocking_logger","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/expert/async_non_blocking_logger.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"understanding_log_levels","permalink":"/keep-being-human-dev/docs/ruby/logging/beginner/understanding_log_levels"},"next":{"title":"correlation_id_propagation","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/correlation_id_propagation"}}');var s=o(23420),t=o(65404);const l={},u=void 0,c={},g=[{value:"\ud83d\ude80 Asynchronous Non\u2011blocking Logger with Backpressure Control",id:"-asynchronous-nonblocking-logger-with-backpressure-control",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-asynchronous-nonblocking-logger-with-backpressure-control",children:"\ud83d\ude80 Asynchronous Non\u2011blocking Logger with Backpressure Control"}),"\n",(0,s.jsxs)(n.p,{children:["When synchronous I/O becomes a bottleneck, implementing an async logger with a bounded buffer ensures your app doesn\u2019t block or exhaust memory under peak load. This example uses ",(0,s.jsx)(n.code,{children:"Concurrent::ArrayQueue"})," for buffering, a dedicated worker thread for writes, and simple backpressure by dropping oldest entries when full."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'concurrent'\nrequire 'logger'\n\nclass AsyncLogger\n  def initialize(log_dev, buffer_size: 10_000)\n    @queue    = Concurrent::ArrayQueue.new(buffer_size)\n    @logger   = Logger.new(log_dev)\n    @shutdown = Concurrent::Event.new\n\n    @worker = Thread.new do\n      until @shutdown.set? && @queue.empty?\n        if msg = @queue.pop(true) rescue nil\n          @logger << msg\n        else\n          sleep(0.01)\n        end\n      end\n    end\n  end\n\n  def <<(msg)\n    if @queue.full?\n      # Backpressure: drop oldest until space\n      @queue.pop while @queue.full?\n    end\n    @queue.push(msg)\n  end\n\n  def close\n    @shutdown.set\n    @worker.join\n    @logger.close\n  end\nend\n\n# Usage\nasync_logger = AsyncLogger.new(STDOUT)\nasync_logger << \"Heavy log message with data: #{payload.inspect}\\n\"\n# On shutdown\nasync_logger.close\n"})})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>u});var r=o(36672);const s={},t=r.createContext(s);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);