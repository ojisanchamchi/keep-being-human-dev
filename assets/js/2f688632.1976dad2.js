"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85148],{62440:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"ruby/yaml/middle/yaml_aliases_anchors","title":"yaml_aliases_anchors","description":"\u2693 Work with YAML Aliases and Anchors for DRY Configs","source":"@site/docs/ruby/yaml/middle/yaml_aliases_anchors.md","sourceDirName":"ruby/yaml/middle","slug":"/ruby/yaml/middle/yaml_aliases_anchors","permalink":"/keep-being-human-dev/docs/ruby/yaml/middle/yaml_aliases_anchors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/yaml/middle/yaml_aliases_anchors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"safe_load_yaml","permalink":"/keep-being-human-dev/docs/ruby/yaml/middle/safe_load_yaml"},"next":{"title":"expression_and_partial_indexes","permalink":"/keep-being-human-dev/docs/sql/general/advanced/expression_and_partial_indexes"}}');var r=n(23420),o=n(65404);const t={},d=void 0,l={},i=[{value:"\u2693 Work with YAML Aliases and Anchors for DRY Configs",id:"-work-with-yaml-aliases-and-anchors-for-dry-configs",level:2}];function c(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-work-with-yaml-aliases-and-anchors-for-dry-configs",children:"\u2693 Work with YAML Aliases and Anchors for DRY Configs"}),"\n",(0,r.jsxs)(a.p,{children:["YAML anchors (",(0,r.jsx)(a.code,{children:"&"}),") and aliases (",(0,r.jsx)(a.code,{children:"*"}),") let you avoid repetition by reusing shared mappings. Psych automatically merges aliases on load, but you can also preserve anchors on dump to generate DRY configuration files."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'require \'yaml\'\n\nyaml = <<~YAML\ndefaults: &defaults\n  adapter: postgresql\n  pool: 5\n\ndevelopment:\n  database: dev_db\n  <<: *defaults\n\nproduction:\n  database: prod_db\n  <<: *defaults\nYAML\n\ndata = YAML.load(yaml)\nputs data["development"]\n#=> {"adapter"=>"postgresql", "pool"=>5, "database"=>"dev_db"}\n\n# Dump back with anchors preserved\nputs YAML.dump(data)\n'})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>d});var s=n(36672);const r={},o=s.createContext(r);function t(e){const a=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);