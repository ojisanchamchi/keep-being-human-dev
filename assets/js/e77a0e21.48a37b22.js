"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[60205],{42817:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"rails/partials/advanced/collection_partial_caching.md","title":"collection_partial_caching.md","description":"\ud83d\uddc3\ufe0f Efficient Collection Partial Caching","source":"@site/docs/rails/partials/advanced/collection_partial_caching.md.md","sourceDirName":"rails/partials/advanced","slug":"/rails/partials/advanced/collection_partial_caching.md","permalink":"/keep-being-human-dev/docs/rails/partials/advanced/collection_partial_caching.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/partials/advanced/collection_partial_caching.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rails_models_transactions","permalink":"/keep-being-human-dev/docs/rails/models/middle/rails_models_transactions"},"next":{"title":"dynamic_view_path_overrides.md","permalink":"/keep-being-human-dev/docs/rails/partials/advanced/dynamic_view_path_overrides.md"}}');var i=t(23420),c=t(65404);const r={},l=void 0,o={},s=[{value:"\ud83d\uddc3\ufe0f Efficient Collection Partial Caching",id:"\ufe0f-efficient-collection-partial-caching",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h2,{id:"\ufe0f-efficient-collection-partial-caching",children:"\ud83d\uddc3\ufe0f Efficient Collection Partial Caching"}),"\n",(0,i.jsxs)(a.p,{children:["Rails can automatically cache each item in a collection when rendering a partial with ",(0,i.jsx)(a.code,{children:"cached: true"}),", dramatically reducing view rendering time for large lists. Use ",(0,i.jsx)(a.code,{children:"render"})," with the ",(0,i.jsx)(a.code,{children:"collection"})," and ",(0,i.jsx)(a.code,{children:"cached: true"})," options so that each element is cached by its model cache key. When any item changes, Rails will expire only that fragment instead of re-rendering the entire list."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-erb",children:"<%# app/views/products/index.html.erb %>\n<%= render partial: 'products/product', collection: @products, cached: true %>\n"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-erb",children:'<%# app/views/products/_product.html.erb %>\n<div class="product" id="product-<%= product.id %>">\n  <h2><%= product.name %></h2>\n  <p><%= product.description.truncate(100) %></p>\n</div>\n'})})]})}function p(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>l});var n=t(36672);const i={},c=n.createContext(i);function r(e){const a=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);