"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46961],{65404:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>a});var s=n(36672);const o={},r=s.createContext(o);function t(e){const i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:i},e.children)}},74153:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/active_record_associations/middle/inverse_of","title":"inverse_of","description":"\ud83d\ude80 Boost Performance with inverse_of","source":"@site/docs/rails/active_record_associations/middle/inverse_of.md","sourceDirName":"rails/active_record_associations/middle","slug":"/rails/active_record_associations/middle/inverse_of","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/inverse_of","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/middle/inverse_of.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"has_many_through","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/has_many_through"},"next":{"title":"polymorphic_association","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/polymorphic_association"}}');var o=n(23420),r=n(65404);const t={},a=void 0,c={},d=[{value:"\ud83d\ude80 Boost Performance with <code>inverse_of</code>",id:"-boost-performance-with-inverse_of",level:2}];function l(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.h2,{id:"-boost-performance-with-inverse_of",children:["\ud83d\ude80 Boost Performance with ",(0,o.jsx)(i.code,{children:"inverse_of"})]}),"\n",(0,o.jsxs)(i.p,{children:["Declaring ",(0,o.jsx)(i.code,{children:"inverse_of"})," helps Rails maintain in-memory object consistency and reduces unnecessary database queries. It lets associated objects know about each other without reloading, especially with bi-directional relations. This is invaluable when building or validating nested records."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ruby",children:"class Order < ApplicationRecord\n  has_many :line_items, inverse_of: :order\nend\n\nclass LineItem < ApplicationRecord\n  belongs_to :order, inverse_of: :line_items\nend\n\n# Now changes to line_items are reflected in order.line_items without extra queries.\n"})})]})}function u(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);