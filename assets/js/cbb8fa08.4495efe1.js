"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14717],{30744:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/classes_and_modules/expert/module_prepend_over_mixin","title":"module_prepend_over_mixin","description":"\ud83e\ude9d Choosing prepend Over Traditional Mixins for Override Safety","source":"@site/docs/ruby/classes_and_modules/expert/module_prepend_over_mixin.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/module_prepend_over_mixin","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/module_prepend_over_mixin","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/module_prepend_over_mixin.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"internal_dsl_included_hook","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/internal_dsl_included_hook"},"next":{"title":"namespaces_with_module_nesting","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/namespaces_with_module_nesting"}}');var i=r(23420),o=r(65404);const t={},d=void 0,a={},l=[{value:"\ud83e\ude9d Choosing <code>prepend</code> Over Traditional Mixins for Override Safety",id:"-choosing-prepend-over-traditional-mixins-for-override-safety",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-choosing-prepend-over-traditional-mixins-for-override-safety",children:["\ud83e\ude9d Choosing ",(0,i.jsx)(n.code,{children:"prepend"})," Over Traditional Mixins for Override Safety"]}),"\n",(0,i.jsx)(n.p,{children:"Prepending modules ensures your overrides are applied before any other inclusion, avoiding conflicts in large inheritance chains. This is especially valuable when multiple gems or plugins mix into the same class."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"module SafeNotifier\n  def notify(*args)\n    super if valid_notification?(*args)\n  end\nend\n\nclass NotificationService\n  prepend SafeNotifier\n  def notify(user, msg)\n    # send message\n  end\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"prepend"})," guarantees your safety check runs first, even if other modules also override ",(0,i.jsx)(n.code,{children:"notify"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>d});var s=r(36672);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);