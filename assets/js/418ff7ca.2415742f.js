"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12185],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(36672);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},88572:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"nosql/redis/expert/redis_lua_atomic_operations","title":"redis_lua_atomic_operations","description":"\ud83d\udee1\ufe0f Atomic Multi-key Operations with Lua Scripts","source":"@site/docs/nosql/redis/expert/redis_lua_atomic_operations.md","sourceDirName":"nosql/redis/expert","slug":"/nosql/redis/expert/redis_lua_atomic_operations","permalink":"/keep-being-human-dev/docs/nosql/redis/expert/redis_lua_atomic_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nosql/redis/expert/redis_lua_atomic_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_cluster_pipeline_optimization","permalink":"/keep-being-human-dev/docs/nosql/redis/expert/redis_cluster_pipeline_optimization"},"next":{"title":"redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/nosql/redis/expert/redis_streams_event_sourcing"}}');var r=n(23420),s=n(65404);const o={},a=void 0,c={},d=[{value:"\ud83d\udee1\ufe0f Atomic Multi-key Operations with Lua Scripts",id:"\ufe0f-atomic-multi-key-operations-with-lua-scripts",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-atomic-multi-key-operations-with-lua-scripts",children:"\ud83d\udee1\ufe0f Atomic Multi-key Operations with Lua Scripts"}),"\n",(0,r.jsxs)(t.p,{children:["Leverage Redis' built\u2011in Lua engine to execute complex, multi\u2011key operations atomically, avoiding race conditions in high\u2011concurrency environments. By preloading scripts with ",(0,r.jsx)(t.code,{children:"SCRIPT LOAD"})," and invoking them via ",(0,r.jsx)(t.code,{children:"EVALSHA"}),", you minimize network overhead and ensure deterministic execution. This approach is invaluable for token buckets, rate limiters, and distributed locks."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/redis.rb\n$redis = Redis.new(url: ENV.fetch(\"REDIS_URL\"))\n\n# lib/redis_scripts.rb\nmodule RedisScripts\n  LUA_TRANSFER = <<~LUA\n    local src, dest, amount = KEYS[1], KEYS[2], tonumber(ARGV[1])\n    if redis.call('GET', src) == false or tonumber(redis.call('GET', src)) < amount then\n      return {err = 'Insufficient funds'}\n    end\n    redis.call('DECRBY', src, amount)\n    redis.call('INCRBY', dest, amount)\n    return {ok = 'Transfer complete'}\n  LUA\n  SHA_TRANSFER = $redis.script(:load, LUA_TRANSFER)\nend\n\n# Usage\nresult = $redis.evalsha(RedisScripts::SHA_TRANSFER, keys: [\"account:1:balance\", \"account:2:balance\"], argv: [100])\nputs result # => \"Transfer complete\"\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);