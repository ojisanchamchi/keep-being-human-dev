"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22701],{58107:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/threads/beginner/thread_mutex_usage","title":"thread_mutex_usage","description":"\ud83d\udd12 Use Mutex to Prevent Race Conditions","source":"@site/docs/ruby/threads/beginner/thread_mutex_usage.md","sourceDirName":"ruby/threads/beginner","slug":"/ruby/threads/beginner/thread_mutex_usage","permalink":"/keep-being-human-dev/docs/ruby/threads/beginner/thread_mutex_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/beginner/thread_mutex_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_joining","permalink":"/keep-being-human-dev/docs/ruby/threads/beginner/thread_joining"},"next":{"title":"thread_passing_arguments","permalink":"/keep-being-human-dev/docs/ruby/threads/beginner/thread_passing_arguments"}}');var a=t(23420),s=t(65404);const o={},u=void 0,d={},i=[{value:"\ud83d\udd12 Use Mutex to Prevent Race Conditions",id:"-use-mutex-to-prevent-race-conditions",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-use-mutex-to-prevent-race-conditions",children:"\ud83d\udd12 Use Mutex to Prevent Race Conditions"}),"\n",(0,a.jsxs)(n.p,{children:["When multiple threads modify shared data, you can get unpredictable results. A ",(0,a.jsx)(n.code,{children:"Mutex"})," ensures only one thread at a time can run the critical section. Lock before the shared operation and unlock after."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\ncounter = 0\nmutex = Mutex.new\n\nthreads = 10.times.map do\n  Thread.new do\n    1000.times do\n      mutex.synchronize do\n        counter += 1\n      end\n    end\n  end\nend\n\nthreads.each(&:join)\nputs \"Final counter: #{counter}\"  # Should reliably be 10000\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>u});var r=t(36672);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);