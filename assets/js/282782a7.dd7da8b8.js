"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[29250],{20840:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/api_mode/middle/api_error_handling","title":"api_error_handling","description":"\ud83d\udea8 Centralize Error Handling in API Controllers","source":"@site/docs/rails/api_mode/middle/api_error_handling.md","sourceDirName":"rails/api_mode/middle","slug":"/rails/api_mode/middle/api_error_handling","permalink":"/keep-being-human-dev/docs/rails/api_mode/middle/api_error_handling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/api_mode/middle/api_error_handling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_json_responses","permalink":"/keep-being-human-dev/docs/rails/api_mode/expert/streaming_json_responses"},"next":{"title":"api_generators","permalink":"/keep-being-human-dev/docs/rails/api_mode/middle/api_generators"}}');var s=n(23420),i=n(65404);const t={},a=void 0,l={},d=[{value:"\ud83d\udea8 Centralize Error Handling in API Controllers",id:"-centralize-error-handling-in-api-controllers",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-centralize-error-handling-in-api-controllers",children:"\ud83d\udea8 Centralize Error Handling in API Controllers"}),"\n",(0,s.jsx)(r.p,{children:"Handle exceptions consistently by rescuing from errors in a base API controller. Define a custom error response format and ensure all controllers inherit from this base. This simplifies debugging and provides clear error messages to clients."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"# app/controllers/api_controller.rb\nclass ApiController < ActionController::API\n  rescue_from ActiveRecord::RecordNotFound, with: :render_not_found\n  rescue_from ActiveRecord::RecordInvalid, with: :render_unprocessable\n\n  private\n\n  def render_not_found(error)\n    render json: { error: error.message }, status: :not_found\n  end\n\n  def render_unprocessable(error)\n    render json: { errors: error.record.errors.full_messages }, status: :unprocessable_entity\n  end\nend\n\n# Other controllers inherit from ApiController\nclass Api::V1::PostsController < ApiController\n  # ...\nend\n"})})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var o=n(36672);const s={},i=o.createContext(s);function t(e){const r=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);