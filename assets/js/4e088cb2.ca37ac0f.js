"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46221],{65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(36672);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},86194:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_record/middle/transactions_and_rollback","title":"transactions_and_rollback","description":"\ud83d\udcbe Wrap Operations in Transactions","source":"@site/docs/rails/active_record/middle/transactions_and_rollback.md","sourceDirName":"rails/active_record/middle","slug":"/rails/active_record/middle/transactions_and_rollback","permalink":"/keep-being-human-dev/docs/rails/active_record/middle/transactions_and_rollback","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/middle/transactions_and_rollback.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pluck_and_select_optimization","permalink":"/keep-being-human-dev/docs/rails/active_record/middle/pluck_and_select_optimization"},"next":{"title":"upsert_records","permalink":"/keep-being-human-dev/docs/rails/active_record/middle/upsert_records"}}');var r=a(23420),s=a(65404);const o={},i=void 0,c={},d=[{value:"\ud83d\udcbe Wrap Operations in Transactions",id:"-wrap-operations-in-transactions",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-wrap-operations-in-transactions",children:"\ud83d\udcbe Wrap Operations in Transactions"}),"\n",(0,r.jsx)(n.p,{children:"Group multiple database changes in a transaction to ensure atomicity. If an exception occurs, all changes roll back automatically."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"ApplicationRecord.transaction do\n  order.update!(status: 'processing')\n  payment.charge!(amount)\n  shipment.create!(order: order)\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);