"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73762],{40399:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/openssl/expert/streaming_aead_gcm_file_encryption","title":"streaming_aead_gcm_file_encryption","description":"\ud83d\udcc2 Streaming Large File Encryption with AES\u2011GCM","source":"@site/docs/ruby/openssl/expert/streaming_aead_gcm_file_encryption.md","sourceDirName":"ruby/openssl/expert","slug":"/ruby/openssl/expert/streaming_aead_gcm_file_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/streaming_aead_gcm_file_encryption","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/expert/streaming_aead_gcm_file_encryption.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mutual_tls_with_sslcontext","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/mutual_tls_with_sslcontext"},"next":{"title":"aes_gcm_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/aes_gcm_encryption"}}');var i=t(23420),a=t(65404);const s={},c=void 0,o={},p=[{value:"\ud83d\udcc2 Streaming Large File Encryption with AES\u2011GCM",id:"-streaming-large-file-encryption-with-aesgcm",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-streaming-large-file-encryption-with-aesgcm",children:"\ud83d\udcc2 Streaming Large File Encryption with AES\u2011GCM"}),"\n",(0,i.jsxs)(n.p,{children:["When encrypting multi-gigabyte files, loading everything into memory is impractical. AES-GCM supports streaming through successive ",(0,i.jsx)(n.code,{children:"update"})," calls while preserving authentication data. This pattern yields chunked encryption with integrity checks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\ndef encrypt_stream(in_path, out_path, key, iv)\n  cipher = OpenSSL::Cipher.new('aes-256-gcm').encrypt\n  cipher.key = key\n  cipher.iv  = iv\n\n  File.open(in_path, 'rb') do |inp|\n    File.open(out_path, 'wb') do |out|\n      out.write(iv)   # store IV for decryption\n      loop do\n        chunk = inp.read(1024 * 64) or break\n        out.write(cipher.update(chunk))\n      end\n      out.write(cipher.final)\n      out.write(cipher.auth_tag)  # append tag at end\n    end\n  end\nend\n\n# Usage:\nkey = OpenSSL::Random.random_bytes(32)\niv  = OpenSSL::Random.random_bytes(12)\nencrypt_stream('large_input.dat', 'large_enc.bin', key, iv)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To decrypt, set ",(0,i.jsx)(n.code,{children:"cipher.decrypt"}),", reapply ",(0,i.jsx)(n.code,{children:"key"})," and ",(0,i.jsx)(n.code,{children:"iv"}),", call ",(0,i.jsx)(n.code,{children:"cipher.auth_tag="})," with the final tag, then stream ",(0,i.jsx)(n.code,{children:"update"})," and ",(0,i.jsx)(n.code,{children:"final"})," in the same chunked fashion."]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(36672);const i={},a=r.createContext(i);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);