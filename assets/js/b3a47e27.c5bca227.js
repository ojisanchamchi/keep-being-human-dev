"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70448],{3173:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"gems/redis/expert/redis_lua_atomic_operations","title":"redis_lua_atomic_operations","description":"\ud83e\uddf5 Atomic Operations with Redis Lua Scripts","source":"@site/docs/gems/redis/expert/redis_lua_atomic_operations.md","sourceDirName":"gems/redis/expert","slug":"/gems/redis/expert/redis_lua_atomic_operations","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_lua_atomic_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/expert/redis_lua_atomic_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_hyperloglog_unique_counts","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_hyperloglog_unique_counts"},"next":{"title":"redis_redlock_distributed_lock","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_redlock_distributed_lock"}}');var r=t(23420),s=t(65404);const o={},a=void 0,c={},l=[{value:"\ud83e\uddf5 Atomic Operations with Redis Lua Scripts",id:"-atomic-operations-with-redis-lua-scripts",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-atomic-operations-with-redis-lua-scripts",children:"\ud83e\uddf5 Atomic Operations with Redis Lua Scripts"}),"\n",(0,r.jsx)(n.p,{children:"Leverage Redis Lua scripting to bundle multiple operations into a single atomic round-trip, eliminating race conditions and reducing network latency. By writing your logic in Lua, you ensure the entire script executes as one transaction."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:"-- rate_limit.lua\nlocal key = KEYS[1]\nlocal limit = tonumber(ARGV[1])\nlocal now = tonumber(ARGV[2])\n\n-- Remove outdated entries\nredis.call('ZREMRANGEBYSCORE', key, 0, now - 60)\n\n-- Count current entries\nlocal count = redis.call('ZCARD', key)\nif count >= limit then\n  return 0\nend\n\n-- Add current timestamp\nredis.call('ZADD', key, now, now)\nredis.call('EXPIRE', key, 61)\nreturn 1\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/redis.rb\nREDIS = Redis.new(url: ENV.fetch('REDIS_URL'))\n\n# app/services/rate_limiter.rb\nclass RateLimiter\n  LUA = File.read(Rails.root.join('rate_limit.lua'))\n\n  def initialize(key, limit)\n    @key = key\n    @limit = limit\n  end\n\n  def allowed?\n    now = (Time.now.to_f * 1000).to_i\n    result = REDIS.eval(LUA, keys: [@key], argv: [@limit, now])\n    result == 1\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(36672);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);