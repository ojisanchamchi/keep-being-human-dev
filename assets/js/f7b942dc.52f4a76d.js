"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27088],{65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(36672);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},67884:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/enumerables/expert/merge_infinite_streams","title":"merge_infinite_streams","description":"\ud83d\udd00 Merging Infinite Sorted Streams with Enumerator and Fiber Orchestration","source":"@site/docs/ruby/enumerables/expert/merge_infinite_streams.md","sourceDirName":"ruby/enumerables/expert","slug":"/ruby/enumerables/expert/merge_infinite_streams","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/merge_infinite_streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/expert/merge_infinite_streams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_pipeline_scaling","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/lazy_pipeline_scaling"},"next":{"title":"each_with_object_hash_building","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/each_with_object_hash_building"}}');var i=r(23420),s=r(65404);const a={},o=void 0,d={},u=[{value:"\ud83d\udd00 Merging Infinite Sorted Streams with Enumerator and Fiber Orchestration",id:"-merging-infinite-sorted-streams-with-enumerator-and-fiber-orchestration",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-merging-infinite-sorted-streams-with-enumerator-and-fiber-orchestration",children:"\ud83d\udd00 Merging Infinite Sorted Streams with Enumerator and Fiber Orchestration"}),"\n",(0,i.jsxs)(n.p,{children:["Merge two (or more) infinite sorted ",(0,i.jsx)(n.code,{children:"Enumerator"})," streams by driving their fibers in lockstep. This pattern enables realtime, memory\u2010bounded merges in priority queues, event stream joins, or k\u2010way merges without materializing entire datasets."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"even = Enumerator.produce(0) { |n| n + 2 }\nodd  = Enumerator.produce(1) { |n| n + 2 }\n\nmerged = Enumerator.new do |y|\n  a, b = even.next, odd.next\n  loop do\n    if a < b\n      y << a; a = even.next\n    else\n      y << b; b = odd.next\n    end\n  end\nend\n\np merged.take(10)  # => [0,1,2,3,4,5,6,7,8,9]\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);