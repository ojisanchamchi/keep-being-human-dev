"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95699],{65404:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>o});var n=r(36672);const t={},d=n.createContext(t);function s(e){const a=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(d.Provider,{value:a},e.children)}},75024:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/curried_lambda","title":"curried_lambda","description":"\ud83d\udd17 Use Curried Lambdas for Partial Application","source":"@site/docs/ruby/procs_and_lambdas/middle/curried_lambda.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/curried_lambda","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/curried_lambda","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/curried_lambda.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"context_capture_proc","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/context_capture_proc"},"next":{"title":"error_handling_proc","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/error_handling_proc"}}');var t=r(23420),d=r(65404);const s={},o=void 0,i={},c=[{value:"\ud83d\udd17 Use Curried Lambdas for Partial Application",id:"-use-curried-lambdas-for-partial-application",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-use-curried-lambdas-for-partial-application",children:"\ud83d\udd17 Use Curried Lambdas for Partial Application"}),"\n",(0,t.jsxs)(a.p,{children:["Currying transforms a multi-argument lambda into a sequence of single-argument lambdas. This technique makes your code more modular and reusable by fixing some parameters ahead of time. Call ",(0,t.jsx)(a.code,{children:"curry"})," on a lambda and apply arguments step by step."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"multiply = ->(x, y, z) { x * y * z }.curry\nby_two   = multiply.call(2)\nby_two_and_three = by_two.call(3)\n\nputs by_two_and_three.call(4)  # 2 * 3 * 4 = 24\n"})})]})}function u(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);