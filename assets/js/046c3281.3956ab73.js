"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78496],{57682:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/rspec/expert/parametrized_shared_examples","title":"parametrized_shared_examples","description":"\ud83d\udd04 Advanced Parametrized Shared Examples","source":"@site/docs/gems/rspec/expert/parametrized_shared_examples.md","sourceDirName":"gems/rspec/expert","slug":"/gems/rspec/expert/parametrized_shared_examples","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/parametrized_shared_examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/expert/parametrized_shared_examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_testing_db_sharding","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/parallel_testing_db_sharding"},"next":{"title":"performance_profiling","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/performance_profiling"}}');var r=s(23420),n=s(65404);const d={},p=void 0,i={},c=[{value:"\ud83d\udd04 Advanced Parametrized Shared Examples",id:"-advanced-parametrized-shared-examples",level:2}];function o(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-advanced-parametrized-shared-examples",children:"\ud83d\udd04 Advanced Parametrized Shared Examples"}),"\n",(0,r.jsxs)(t.p,{children:["Leverage shared examples with ",(0,r.jsx)(t.code,{children:"let"})," and ",(0,r.jsx)(t.code,{children:"subject"})," overrides for highly parameterizable test suites. This technique avoids duplication when testing multiple class variants or configurations."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"RSpec.shared_examples 'an API endpoint' do |http_method, path, status|\n  subject { request.send(http_method, path) }\n\n  it \"responds with #{status}\" do\n    subject\n    expect(response).to have_http_status(status)\n  end\nend\n\nRSpec.describe 'Accounts API', type: :request do\n  include_examples 'an API endpoint', :get, '/api/accounts', :ok\n  include_examples 'an API endpoint', :post, '/api/accounts', :created\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>p});var a=s(36672);const r={},n=a.createContext(r);function d(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);