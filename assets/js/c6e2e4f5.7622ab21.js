"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90441],{9479:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/reflection/middle/instance_variable_inspection","title":"instance_variable_inspection","description":"\ud83d\udee0\ufe0f Inspect and Manipulate Instance Variables","source":"@site/docs/ruby/reflection/middle/instance_variable_inspection.md","sourceDirName":"ruby/reflection/middle","slug":"/ruby/reflection/middle/instance_variable_inspection","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/instance_variable_inspection","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/middle/instance_variable_inspection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_method_invocation"},"next":{"title":"introspect_methods","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/introspect_methods"}}');var a=i(23420),s=i(65404);const r={},c=void 0,o={},d=[{value:"\ud83d\udee0\ufe0f Inspect and Manipulate Instance Variables",id:"\ufe0f-inspect-and-manipulate-instance-variables",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-inspect-and-manipulate-instance-variables",children:"\ud83d\udee0\ufe0f Inspect and Manipulate Instance Variables"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"instance_variables"}),", ",(0,a.jsx)(n.code,{children:"instance_variable_get"}),", and ",(0,a.jsx)(n.code,{children:"instance_variable_set"})," to inspect or modify an object\u2019s state without exposing accessors. This is handy for serializers, object cloners, or debugging tools. Remember that altering internals can break invariants\u2014use with care."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class Session\n  def initialize(user_id)\n    @user_id = user_id\n    @data = {}\n  end\nend\n\nsession = Session.new(42)\n# List current instance variables\nsession.instance_variables  #=> [:@user_id, :@data]\n\n# Read and modify them dynamically\nuid = session.instance_variable_get(:@user_id)  #=> 42\nsession.instance_variable_set(:@data, { cart: [1,2,3] })\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var t=i(36672);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);