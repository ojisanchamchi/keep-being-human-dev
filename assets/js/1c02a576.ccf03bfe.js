"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[91624],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(36672);const o={},r=i.createContext(o);function d(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(r.Provider,{value:n},e.children)}},73906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ruby/define_method/middle/method_wrapper_logging","title":"method_wrapper_logging","description":"\ud83d\udd27 Method Call Logging","source":"@site/docs/ruby/define_method/middle/method_wrapper_logging.md","sourceDirName":"ruby/define_method/middle","slug":"/ruby/define_method/middle/method_wrapper_logging","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/method_wrapper_logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/middle/method_wrapper_logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_delegation","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/dynamic_delegation"},"next":{"title":"validation_helpers","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/validation_helpers"}}');var o=t(23420),r=t(65404);const d={},a=void 0,s={},l=[{value:"\ud83d\udd27 Method Call Logging",id:"-method-call-logging",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-method-call-logging",children:"\ud83d\udd27 Method Call Logging"}),"\n",(0,o.jsxs)(n.p,{children:["Wrap existing instance methods with custom behavior like logging without altering the original definitions. Using ",(0,o.jsx)(n.code,{children:"define_method"})," and ",(0,o.jsx)(n.code,{children:"alias_method"})," together lets you inject code before or after the original method runs."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class Service\n  def perform(task)\n    # original implementation\n    puts "Performing \\\\#{task}..."\n  end\n\n  # Inject logging around `perform`\n  original = instance_method(:perform)\n  define_method(:perform) do |task|\n    puts "[LOG] Starting perform(#{task})"\n    result = original.bind(self).call(task)\n    puts "[LOG] Finished perform(#{task})"\n    result\n  end\nend\n\nsvc = Service.new\nsvc.perform("cleanup")\n# [LOG] Starting perform(cleanup)\n# Performing cleanup...\n# [LOG] Finished perform(cleanup)\n'})}),"\n",(0,o.jsx)(n.p,{children:"This pattern lets you wrap or decorate methods at runtime while preserving the original implementation."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);