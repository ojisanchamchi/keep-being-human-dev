"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81176],{46452:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/configuration/middle/load_yaml_config","title":"load_yaml_config","description":"\ud83d\udcc2 Load Environment\u2011Specific YAML with config_for","source":"@site/docs/rails/configuration/middle/load_yaml_config.md","sourceDirName":"rails/configuration/middle","slug":"/rails/configuration/middle/load_yaml_config","permalink":"/keep-being-human-dev/docs/rails/configuration/middle/load_yaml_config","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/configuration/middle/load_yaml_config.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"environment_specific_config","permalink":"/keep-being-human-dev/docs/rails/configuration/middle/environment_specific_config"},"next":{"title":"console_custom_helpers","permalink":"/keep-being-human-dev/docs/rails/console/advanced/console_custom_helpers"}}');var c=i(23420),r=i(65404);const t={},a=void 0,s={},l=[{value:"\ud83d\udcc2 Load Environment\u2011Specific YAML with <code>config_for</code>",id:"-load-environmentspecific-yaml-with-config_for",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h2,{id:"-load-environmentspecific-yaml-with-config_for",children:["\ud83d\udcc2 Load Environment\u2011Specific YAML with ",(0,c.jsx)(n.code,{children:"config_for"})]}),"\n",(0,c.jsxs)(n.p,{children:["When you have complex settings in a YAML file (e.g., API credentials, feature toggles), use ",(0,c.jsx)(n.code,{children:"Rails.application.config_for"})," to load them per environment without extra parsing code. Place your YAML in ",(0,c.jsx)(n.code,{children:"config/"})," and call ",(0,c.jsx)(n.code,{children:"config_for"})," in an initializer or directly in your classes."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-yaml",children:"# config/services.yml\ndevelopment:\n  mailchimp_api_key: dev-abc123\nproduction:\n  mailchimp_api_key: prod-xyz789\n"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/services.rb\nSERVICE_CONFIG = Rails.application.config_for(:services)\n# Now SERVICE_CONFIG[:mailchimp_api_key] returns the correct key per ENV\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:"SERVICE_CONFIG"})," in your mailers or jobs to keep secrets out of code and reduce boilerplate."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var o=i(36672);const c={},r=o.createContext(c);function t(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);