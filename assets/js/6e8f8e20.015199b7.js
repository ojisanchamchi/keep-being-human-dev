"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34693],{65404:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>c});var a=n(36672);const t={},r=a.createContext(t);function s(e){const i=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(r.Provider,{value:i},e.children)}},65437:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/active_record/expert/association_cache_bidi","title":"association_cache_bidi","description":"\ud83d\udd04 Bidirectional Association Caching","source":"@site/docs/rails/active_record/expert/association_cache_bidi.md","sourceDirName":"rails/active_record/expert","slug":"/rails/active_record/expert/association_cache_bidi","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/association_cache_bidi","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/expert/association_cache_bidi.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"arel_complex_predicates","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/arel_complex_predicates"},"next":{"title":"bulk_upserts_insert_all","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/bulk_upserts_insert_all"}}');var t=n(23420),r=n(65404);const s={},c=void 0,o={},d=[{value:"\ud83d\udd04 Bidirectional Association Caching",id:"-bidirectional-association-caching",level:2}];function l(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-bidirectional-association-caching",children:"\ud83d\udd04 Bidirectional Association Caching"}),"\n",(0,t.jsx)(i.p,{children:"Cache inverse associations manually to prevent N+1 loads when traversing back-and-forth relations. This is critical for graph-processing workloads."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:"class Node < ApplicationRecord\n  has_many :out_edges, class_name: 'Edge', foreign_key: :source_id\n  has_many :in_edges,  class_name: 'Edge', foreign_key: :target_id\n\n  def preload_edges\n    Edge.where(source_id: id).or(Edge.where(target_id: id)).load\n    self\n  end\n\n  def neighbors\n    preload_edges\n    (out_edges.map(&:target) + in_edges.map(&:source)).uniq\n  end\nend\n"})})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);