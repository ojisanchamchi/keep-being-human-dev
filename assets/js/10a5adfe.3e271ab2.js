"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86514],{65404:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>d});var n=a(36672);const s={},r=n.createContext(s);function c(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(r.Provider,{value:t},e.children)}},76892:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>l,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"gems/rspec/advanced/shared_contexts_with_metadata","title":"shared_contexts_with_metadata","description":"\ud83d\uddc2\ufe0f Leverage Shared Contexts with Metadata","source":"@site/docs/gems/rspec/advanced/shared_contexts_with_metadata.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/shared_contexts_with_metadata","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/shared_contexts_with_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/shared_contexts_with_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_configuration_overrides","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/rspec_configuration_overrides"},"next":{"title":"verifying_partial_doubles","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/verifying_partial_doubles"}}');var s=a(23420),r=a(65404);const c={},d=void 0,i={},o=[{value:"\ud83d\uddc2\ufe0f Leverage Shared Contexts with Metadata",id:"\ufe0f-leverage-shared-contexts-with-metadata",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-leverage-shared-contexts-with-metadata",children:"\ud83d\uddc2\ufe0f Leverage Shared Contexts with Metadata"}),"\n",(0,s.jsxs)(t.p,{children:["Shared contexts can be conditionally included using metadata filters, reducing duplication for setup logic across groups. By tagging examples, you dynamically inject common ",(0,s.jsx)(t.code,{children:"let"}),", hooks, or helper methods only where needed. This keeps global setup lean and speeds up your test suite."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# spec/support/shared_contexts/api_helpers.rb\nRSpec.shared_context 'API client', :api_helper do\n  let(:api_client) { ApiClient.new(token: ENV['API_TOKEN']) }\n  before { api_client.authenticate }\nend\n\n# Usage in spec\nRSpec.describe 'External service', :api_helper do\n  it 'fetches user data' do\n    expect(api_client.fetch_user(1)).to include('id' => 1)\n  end\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);