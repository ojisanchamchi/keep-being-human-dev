"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80310],{11820:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/threads/advanced/graceful_thread_shutdown","title":"graceful_thread_shutdown","description":"\ud83d\uded1 Graceful Thread Shutdown and Resource Cleanup","source":"@site/docs/ruby/threads/advanced/graceful_thread_shutdown.md","sourceDirName":"ruby/threads/advanced","slug":"/ruby/threads/advanced/graceful_thread_shutdown","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/graceful_thread_shutdown","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/advanced/graceful_thread_shutdown.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tempfile_custom_extension_and_dir","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/middle/tempfile_custom_extension_and_dir"},"next":{"title":"prioritized_queue_and_conditionvariable","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/prioritized_queue_and_conditionvariable"}}');var a=t(23420),d=t(65404);const o={},s=void 0,c={},u=[{value:"\ud83d\uded1 Graceful Thread Shutdown and Resource Cleanup",id:"-graceful-thread-shutdown-and-resource-cleanup",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-graceful-thread-shutdown-and-resource-cleanup",children:"\ud83d\uded1 Graceful Thread Shutdown and Resource Cleanup"}),"\n",(0,a.jsxs)(n.p,{children:["Implement a shutdown flag and ",(0,a.jsx)(n.code,{children:"Thread#join"})," with timeout to stop workers cleanly, releasing DB connections or file handles in ",(0,a.jsx)(n.code,{children:"ensure"})," blocks."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class Worker\n  def initialize\n    @stop = false\n    @thread = Thread.new { work_loop }\n  end\n\n  def work_loop\n    until @stop\n      begin\n        # Process job\n        job = fetch_job\n        job.process\n      ensure\n        cleanup_resources\n      end\n    end\n  end\n\n  def shutdown(timeout: 5)\n    @stop = true\n    @thread.join(timeout)\n    unless @thread.stop?\n      # Force kill if unresponsive\n      @thread.kill\n    end\n  end\n\n  private\n\n  def fetch_job\n    # thread-safe fetch...\n  end\n\n  def cleanup_resources\n    # e.g., ActiveRecord::Base.clear_active_connections!\n  end\nend\n\n# Usage\nworker = Worker.new\n# ... later when application is shutting down:\nworker.shutdown(timeout: 10)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(36672);const a={},d=r.createContext(a);function o(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);