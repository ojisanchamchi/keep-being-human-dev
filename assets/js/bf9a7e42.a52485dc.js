"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75143],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(36672);const a={},c=s.createContext(a);function r(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(c.Provider,{value:t},e.children)}},85134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/rspec/advanced/filtering_by_custom_tags","title":"filtering_by_custom_tags","description":"\ud83c\udff7\ufe0f Filter Specs by Custom Metadata Tags","source":"@site/docs/gems/rspec/advanced/filtering_by_custom_tags.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/filtering_by_custom_tags","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/filtering_by_custom_tags","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/filtering_by_custom_tags.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_matcher_chainable","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/custom_matcher_chainable"},"next":{"title":"let_lazy_loaded_dependencies","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/let_lazy_loaded_dependencies"}}');var a=n(23420),c=n(65404);const r={},o=void 0,i={},d=[{value:"\ud83c\udff7\ufe0f Filter Specs by Custom Metadata Tags",id:"\ufe0f-filter-specs-by-custom-metadata-tags",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\ufe0f-filter-specs-by-custom-metadata-tags",children:"\ud83c\udff7\ufe0f Filter Specs by Custom Metadata Tags"}),"\n",(0,a.jsxs)(t.p,{children:["RSpec allows you to tag examples or groups with arbitrary metadata, then include or exclude them in your run. This is perfect for isolating slow or flaky tests without touching code. Use the ",(0,a.jsx)(t.code,{children:"--tag"})," CLI or configure filters in ",(0,a.jsx)(t.code,{children:"spec_helper.rb"})," to manage test execution dynamically."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# In spec files\nRSpec.describe 'Payment Gateway', :slow, priority: :high do\n  it 'processes large batch transactions' do\n    # long-running spec\n  end\nend\n\n# Run only high-priority specs\nspec/spec_helper.rb:\nRSpec.configure do |config|\n  config.filter_run_when_matching priority: :high\n  config.filter_run_excluding slow: true\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);