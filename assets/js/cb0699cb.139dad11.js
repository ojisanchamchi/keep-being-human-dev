"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38011],{65404:(e,n,c)=>{c.d(n,{R:()=>i,x:()=>s});var t=c(36672);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},99816:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/models/advanced/optimistic_locking_advanced","title":"optimistic_locking_advanced","description":"\ud83d\udd12 Advanced Optimistic Locking Usage","source":"@site/docs/rails/models/advanced/optimistic_locking_advanced.md","sourceDirName":"rails/models/advanced","slug":"/rails/models/advanced/optimistic_locking_advanced","permalink":"/keep-being-human-dev/docs/rails/models/advanced/optimistic_locking_advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/advanced/optimistic_locking_advanced.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"model_concerns_for_modular_logic","permalink":"/keep-being-human-dev/docs/rails/models/advanced/model_concerns_for_modular_logic"},"next":{"title":"parameterized_scopes_for_reusability","permalink":"/keep-being-human-dev/docs/rails/models/advanced/parameterized_scopes_for_reusability"}}');var o=c(23420),a=c(65404);const i={},s=void 0,r={},d=[{value:"\ud83d\udd12 Advanced Optimistic Locking Usage",id:"-advanced-optimistic-locking-usage",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-advanced-optimistic-locking-usage",children:"\ud83d\udd12 Advanced Optimistic Locking Usage"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"lock_version"})," to detect concurrent updates and implement retry logic. Wrap updates in transactions and handle ",(0,o.jsx)(n.code,{children:"ActiveRecord::StaleObjectError"})," to ensure data integrity under concurrency."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class Account < ApplicationRecord\n  # ensure lock_version column exists\nend\n\n# Service\ndef transfer_funds(from_account, to_account, amount)\n  Account.transaction do\n    from_account.lock!\n    to_account.lock!\n\n    from_account.balance -= amount\n    to_account.balance   += amount\n\n    from_account.save!\n    to_account.save!\n  end\nrescue ActiveRecord::StaleObjectError\n  retry\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);