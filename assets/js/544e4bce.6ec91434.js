"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10411],{1851:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/methods/advanced/prepend_for_method_wrapping","title":"prepend_for_method_wrapping","description":"\ud83e\udde9 Method Wrapping with Module#prepend","source":"@site/docs/ruby/methods/advanced/prepend_for_method_wrapping.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/prepend_for_method_wrapping","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/prepend_for_method_wrapping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/prepend_for_method_wrapping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_object_dispatch","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_object_dispatch"},"next":{"title":"refinements_local_method_override","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/refinements_local_method_override"}}');var o=t(23420),d=t(65404);const a={},s=void 0,c={},p=[{value:"\ud83e\udde9 Method Wrapping with <code>Module#prepend</code>",id:"-method-wrapping-with-moduleprepend",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-method-wrapping-with-moduleprepend",children:["\ud83e\udde9 Method Wrapping with ",(0,o.jsx)(n.code,{children:"Module#prepend"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"prepend"})," offers more predictable and safer method wrapping than ",(0,o.jsx)(n.code,{children:"alias_method_chain"}),". Prepending a module places its methods before the original, making super calls chain naturally."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'module PerformanceMonitor\n  def compute(x)\n    start = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n    result = super\n    duration = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start\n    puts "compute took #{duration.round(3)}s"\n    result\n  end\nend\n\nclass HeavyCalculator\n  prepend PerformanceMonitor\n\n  def compute(x)\n    sleep(0.2)\n    x * x\n  end\nend\n\nHeavyCalculator.new.compute(5)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(36672);const o={},d=r.createContext(o);function a(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);