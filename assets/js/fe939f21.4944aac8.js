"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30442],{65404:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var a=s(36672);const n={},i=a.createContext(n);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},99619:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>_,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/active_storage/middle/switching_active_storage_services","title":"switching_active_storage_services","description":"\ud83d\udd04 Switch Storage Services Dynamically","source":"@site/docs/rails/active_storage/middle/switching_active_storage_services.md","sourceDirName":"rails/active_storage/middle","slug":"/rails/active_storage/middle/switching_active_storage_services","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/switching_active_storage_services","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/middle/switching_active_storage_services.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"purging_unused_blobs_and_attachments","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/purging_unused_blobs_and_attachments"},"next":{"title":"validating_active_storage_attachments","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/validating_active_storage_attachments"}}');var n=s(23420),i=s(65404);const r={},c=void 0,o={},l=[{value:"\ud83d\udd04 Switch Storage Services Dynamically",id:"-switch-storage-services-dynamically",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-switch-storage-services-dynamically",children:"\ud83d\udd04 Switch Storage Services Dynamically"}),"\n",(0,n.jsx)(t.p,{children:"You can route uploads to different services (e.g., local vs. S3) per attachment or environment. This is handy for multi-tenant apps or feature flags."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"# config/storage.yml\nlocal:\n  service: Disk\n  root: <%= Rails.root.join(\"storage\") %>\n\ns3:\n  service: S3\n  bucket: my-app-bucket\n  access_key_id: <%= ENV['AWS_ACCESS_KEY_ID'] %>\n  secret_access_key: <%= ENV['AWS_SECRET_ACCESS_KEY'] %>\n  region: us-east-1\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"class Report < ApplicationRecord\n  has_one_attached :file\n\n  def upload_to_s3!\n    file.blob.update!(service_name: 's3')\n  end\nend\n"})}),"\n",(0,n.jsxs)(t.p,{children:["After calling ",(0,n.jsx)(t.code,{children:"upload_to_s3!"}),", the blob is moved to the S3 service on next access. This lets you retain local service for small files and S3 for large or permanent assets."]})]})}function _(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);