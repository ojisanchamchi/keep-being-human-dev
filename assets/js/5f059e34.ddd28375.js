"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84288],{17262:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"ruby/metaprogramming/beginner/alias_method_usage","title":"alias_method_usage","description":"\ud83d\udd00 Alias Methods with alias_method","source":"@site/docs/ruby/metaprogramming/beginner/alias_method_usage.md","sourceDirName":"ruby/metaprogramming/beginner","slug":"/ruby/metaprogramming/beginner/alias_method_usage","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/alias_method_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/beginner/alias_method_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unbound_method_binding","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/unbound_method_binding"},"next":{"title":"attr_accessor_metaprog","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/attr_accessor_metaprog"}}');var o=t(23420),r=t(65404);const s={},i=void 0,d={},m=[{value:"\ud83d\udd00 Alias Methods with <code>alias_method</code>",id:"-alias-methods-with-alias_method",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-alias-methods-with-alias_method",children:["\ud83d\udd00 Alias Methods with ",(0,o.jsx)(n.code,{children:"alias_method"})]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"alias_method"})," creates a copy of an existing method under a new name. This is handy if you want to wrap or override behavior but still call the original implementation."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class Logger\n  def log(msg)\n    puts "Log: #{msg}"\n  end\n\n  alias_method :original_log, :log\n\n  def log(msg)\n    puts "[#{Time.now}]"\n    original_log(msg)\n  end\nend\n\nLogger.new.log("System started")\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(36672);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);