"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75201],{52009:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"ruby/operators/advanced/symbol_to_proc.md","title":"symbol_to_proc.md","description":"\ud83d\udd04 Symbol-to-Proc for Concise Iteration","source":"@site/docs/ruby/operators/advanced/symbol_to_proc.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/symbol_to_proc.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/symbol_to_proc.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/symbol_to_proc.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"spaceship_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/spaceship_operator.md"},"next":{"title":"unary_operators.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/unary_operators.md"}}');var t=r(23420),s=r(65404);const a={},c=void 0,d={},i=[{value:"\ud83d\udd04 Symbol-to-Proc for Concise Iteration",id:"-symbol-to-proc-for-concise-iteration",level:2}];function p(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"-symbol-to-proc-for-concise-iteration",children:"\ud83d\udd04 Symbol-to-Proc for Concise Iteration"}),"\n",(0,t.jsxs)(o.p,{children:["The ",(0,t.jsx)(o.code,{children:"&:symbol"})," shorthand converts a symbol to a proc (",(0,t.jsx)(o.code,{children:"{ |obj| obj.symbol }"}),"), drastically reducing boilerplate in enumerable chains. Under the hood, Ruby calls ",(0,t.jsx)(o.code,{children:"to_proc"})," on the symbol."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:'users = [{name: "Alice"}, {name: "Bob"}, {name: "Eve"}]\nnames = users.map(&[:name].method(:[])) # Explicit proc from Array#[]\nputs names.inspect # => ["Alice", "Bob", "Eve"]\n\n# More common usage:\nwords = %w[one two three]\nlengths = words.map(&:length)\nputs lengths.inspect # => [3, 3, 5]\n'})})]})}function l(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},65404:(e,o,r)=>{r.d(o,{R:()=>a,x:()=>c});var n=r(36672);const t={},s=n.createContext(t);function a(e){const o=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:o},e.children)}}}]);