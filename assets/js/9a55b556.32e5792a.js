"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72109],{49376:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>m,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md","title":"metaprogramming_driven_matchers.md","description":"\ud83e\udde9 DRY Metaprogramming for Family of Matchers","source":"@site/docs/gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md.md","sourceDirName":"gems/rspec/custom_matchers/expert","slug":"/gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_chaining_matchers.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md"},"next":{"title":"chained_custom_matcher","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/middle/chained_custom_matcher"}}');var a=r(23420),s=r(65404);const m={},c=void 0,o={},i=[{value:"\ud83e\udde9 DRY Metaprogramming for Family of Matchers",id:"-dry-metaprogramming-for-family-of-matchers",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-dry-metaprogramming-for-family-of-matchers",children:"\ud83e\udde9 DRY Metaprogramming for Family of Matchers"}),"\n",(0,a.jsx)(t.p,{children:"When you have repetitive matcher patterns (e.g., attribute validations), generate them dynamically through metaprogramming to avoid boilerplate. This advanced technique loops over a configuration and defines multiple matchers in a single block, promoting maintainability and consistency across your suite."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'# spec/support/matchers/attribute_validators.rb\nVALIDATION_MATCHERS = {\n  validate_presence_of:   ->(attr) { "#{attr} must be present" },\n  validate_numericality_of: ->(attr) { "#{attr} must be a number" }\n}\n\nVALIDATION_MATCHERS.each do |matcher_name, message_proc|\n  RSpec::Matchers.define matcher_name do |attribute|\n    match do |model_instance|\n      model_instance.valid?\n      model_instance.errors[attribute].include?(message_proc.call(attribute))\n    end\n\n    failure_message do |model_instance|\n      "expected #{model_instance.class} to #{matcher_name} :#{attribute}, but got: \\\n       #{model_instance.errors[attribute].inspect}"\n    end\n  end\nend\n\n# Usage in a spec:\nexpect(Post.new).to validate_presence_of(:title)\nexpect(Post.new(word_count: \'five\')).to validate_numericality_of(:word_count)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>m,x:()=>c});var n=r(36672);const a={},s=n.createContext(a);function m(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:m(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);