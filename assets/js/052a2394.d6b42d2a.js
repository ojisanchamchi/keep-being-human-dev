"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95507],{65404:(e,s,a)=>{a.d(s,{R:()=>d,x:()=>i});var n=a(36672);const t={},r=n.createContext(t);function d(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(r.Provider,{value:s},e.children)}},86971:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"gems/rspec/shared_examples/middle/shared_examples_basic_usage","title":"shared_examples_basic_usage","description":"\ud83e\udde9 Use shared_examples to DRY common specs","source":"@site/docs/gems/rspec/shared_examples/middle/shared_examples_basic_usage.md","sourceDirName":"gems/rspec/shared_examples/middle","slug":"/gems/rspec/shared_examples/middle/shared_examples_basic_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/middle/shared_examples_basic_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/middle/shared_examples_basic_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parameterized_shared_examples_with_dynamic_classes","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes"},"next":{"title":"shared_examples_parameterized_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/middle/shared_examples_parameterized_usage"}}');var t=a(23420),r=a(65404);const d={},i=void 0,c={},o=[{value:"\ud83e\udde9 Use shared_examples to DRY common specs",id:"-use-shared_examples-to-dry-common-specs",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"-use-shared_examples-to-dry-common-specs",children:"\ud83e\udde9 Use shared_examples to DRY common specs"}),"\n",(0,t.jsxs)(s.p,{children:["When your specs contain repeated examples, extract them using ",(0,t.jsx)(s.code,{children:"shared_examples"})," to DRY up tests and improve maintainability. Define shared behavior once and reuse it across multiple describe blocks."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'# spec/support/shared_examples/user_validations.rb\nRSpec.shared_examples "a user with basic validations" do\n  it "is invalid without an email" do\n    subject.email = nil\n    expect(subject).not_to be_valid\n  end\n\n  it "is invalid without a password" do\n    subject.password = nil\n    expect(subject).not_to be_valid\n  end\nend\n\n# spec/models/admin_spec.rb\nRSpec.describe Admin, type: :model do\n  subject { build(:admin) }\n  it_behaves_like "a user with basic validations"\nend\n'})})]})}function m(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);