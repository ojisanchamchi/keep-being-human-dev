"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76365],{65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var s=r(36672);const t={},a=s.createContext(t);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},78689:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/json/expert/streaming_json_parsing_with_sc_handler","title":"streaming_json_parsing_with_sc_handler","description":"\ud83d\ude80 Streaming JSON Parsing with Oj::ScHandler for Low-Memory Processing","source":"@site/docs/ruby/json/expert/streaming_json_parsing_with_sc_handler.md","sourceDirName":"ruby/json/expert","slug":"/ruby/json/expert/streaming_json_parsing_with_sc_handler","permalink":"/keep-being-human-dev/docs/ruby/json/expert/streaming_json_parsing_with_sc_handler","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/json/expert/streaming_json_parsing_with_sc_handler.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"high_performance_json_parsing_with_oj","permalink":"/keep-being-human-dev/docs/ruby/json/expert/high_performance_json_parsing_with_oj"},"next":{"title":"customize_model_serialization","permalink":"/keep-being-human-dev/docs/ruby/json/middle/customize_model_serialization"}}');var t=r(23420),a=r(65404);const o={},i=void 0,c={},d=[{value:"\ud83d\ude80 Streaming JSON Parsing with Oj::ScHandler for Low-Memory Processing",id:"-streaming-json-parsing-with-ojschandler-for-low-memory-processing",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-streaming-json-parsing-with-ojschandler-for-low-memory-processing",children:"\ud83d\ude80 Streaming JSON Parsing with Oj::ScHandler for Low-Memory Processing"}),"\n",(0,t.jsxs)(n.p,{children:["For very large or continuous JSON streams (e.g., logs, message queues), you can implement ",(0,t.jsx)(n.code,{children:"Oj::ScHandler"})," to parse incrementally, emitting events or objects as they arrive. This avoids loading the entire document into memory and enables real\u2011time transformations or filtering:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'oj'\n\nclass EventHandler < Oj::ScHandler\n  def initialize\n    @stack = []\n  end\n\n  def hash_start\n    {}\n  end\n\n  def hash_end(obj)\n    process_record(obj) if @stack.empty? # top\u2011level hash\n  end\n\n  def array_start\n    []\n  end\n\n  def array_end(obj)\n    # handle arrays if streaming arrays\n    obj.each { |item| process_record(item) }\n  end\n\n  def hash_key(key)\n    @current_key = key\n  end\n\n  def add_value(value)\n    if @stack.empty?\n      @stack.push(value)\n    else\n      parent = @stack.last\n      if parent.is_a?(Array)\n        parent << value\n      else\n        parent[@current_key] = value\n      end\n    end\n  end\n\n  private\n\n  def process_record(record)\n    # complex transformation or queue submission\n    puts record.inspect\n  end\nend\n\n# Open an IO stream (e.g., a file, socket, or STDIN)\nhandler = EventHandler.new\nFile.open('streaming.json') do |f|\n  Oj.sc_parse(handler, f)\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"Leverage this pattern to build memory\u2011safe pipelines, custom aggregators, or integrate with message brokers."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);