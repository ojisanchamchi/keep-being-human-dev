"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48437],{11785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ruby/blocks/middle/chainable_methods_with_blocks.md","title":"chainable_methods_with_blocks.md","description":"\ud83d\udd0d Build Chainable APIs with tap and Custom Blocks","source":"@site/docs/ruby/blocks/middle/chainable_methods_with_blocks.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/chainable_methods_with_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/chainable_methods_with_blocks.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/chainable_methods_with_blocks.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"block_to_proc_conversion.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/block_to_proc_conversion.md"},"next":{"title":"check_block_presence.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/check_block_presence.md"}}');var s=t(23420),c=t(65404);const i={},d=void 0,a={},l=[{value:"\ud83d\udd0d Build Chainable APIs with <code>tap</code> and Custom Blocks",id:"-build-chainable-apis-with-tap-and-custom-blocks",level:2}];function r(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-build-chainable-apis-with-tap-and-custom-blocks",children:["\ud83d\udd0d Build Chainable APIs with ",(0,s.jsx)(n.code,{children:"tap"})," and Custom Blocks"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tap"})," yields the receiver to a block and returns it, letting you chain methods while inspecting or modifying state. This is ideal for builder patterns or setting up objects step by step."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class Configurator\n  attr_accessor :options\n\n  def initialize\n    @options = {}\n  end\n\n  def set(key, value)\n    options[key] = value\n    self\n  end\n\n  def configure\n    tap do |cfg|\n      yield(cfg)\n    end\n  end\nend\n\nconfig = Configurator.new.configure do |c|\n  c.set(:host, 'localhost').set(:port, 3000)\nend\n\nputs config.options\n# => {:host=>\"localhost\", :port=>3000}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var o=t(36672);const s={},c=o.createContext(s);function i(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);