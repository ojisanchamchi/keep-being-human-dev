"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83577],{48251:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/image_processing/expert/advanced_caching_strategies","title":"advanced_caching_strategies","description":"\ud83d\udd12 Advanced Caching Strategies with ActiveStorage","source":"@site/docs/gems/image_processing/expert/advanced_caching_strategies.md","sourceDirName":"gems/image_processing/expert","slug":"/gems/image_processing/expert/advanced_caching_strategies","permalink":"/keep-being-human-dev/docs/gems/image_processing/expert/advanced_caching_strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/image_processing/expert/advanced_caching_strategies.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"install_image_processing","permalink":"/keep-being-human-dev/docs/gems/image_processing/beginner/install_image_processing"},"next":{"title":"custom_mini_magick_operations","permalink":"/keep-being-human-dev/docs/gems/image_processing/expert/custom_mini_magick_operations"}}');var s=t(23420),i=t(65404);const r={},c=void 0,o={},d=[{value:"\ud83d\udd12 Advanced Caching Strategies with ActiveStorage",id:"-advanced-caching-strategies-with-activestorage",level:2}];function g(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-advanced-caching-strategies-with-activestorage",children:"\ud83d\udd12 Advanced Caching Strategies with ActiveStorage"}),"\n",(0,s.jsx)(a.p,{children:"To avoid reprocessing unchanged variants, integrate a custom cache key that reflects processing parameters and source metadata. This technique leverages Rails.cache or your CDN cache to instantly serve existing variants, reducing CPU cycles and I/O."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'class VariantCacheKey\n  def self.generate(io:, transformations:)\n    metadata = io.is_a?(String) ? File.mtime(io).to_i : io.metadata[:sha256]\n    params_digest = Digest::SHA256.hexdigest(transformations.sort.to_h.to_s)\n    "variant/#{metadata}/#{params_digest}"\n  end\nend\n\n# In your controller or ActiveJob\ntransformations = { resize: [800, 600], format: "webp", quality: 80 }\ncache_key = VariantCacheKey.generate(io: blob.download, transformations: transformations)\n\nvariant_url = Rails.cache.fetch(cache_key, expires_in: 1.week) do\n  blob.variant(**transformations).processed.service_url\nend\n\nrender json: { url: variant_url }\n'})})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>c});var n=t(36672);const s={},i=n.createContext(s);function r(e){const a=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);