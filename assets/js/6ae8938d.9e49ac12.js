"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58179],{20849:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"gems/chartkick/expert/sql_cte_aggregation_for_large_datasets","title":"sql_cte_aggregation_for_large_datasets","description":"\u26a1 High-Performance Aggregation via SQL CTEs","source":"@site/docs/gems/chartkick/expert/sql_cte_aggregation_for_large_datasets.md","sourceDirName":"gems/chartkick/expert","slug":"/gems/chartkick/expert/sql_cte_aggregation_for_large_datasets","permalink":"/keep-being-human-dev/docs/gems/chartkick/expert/sql_cte_aggregation_for_large_datasets","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/chartkick/expert/sql_cte_aggregation_for_large_datasets.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_realtime_updates_with_actioncable","permalink":"/keep-being-human-dev/docs/gems/chartkick/expert/dynamic_realtime_updates_with_actioncable"},"next":{"title":"ajax_refresh","permalink":"/keep-being-human-dev/docs/gems/chartkick/middle/ajax_refresh"}}');var r=n(23420),o=n(65404);const s={},i=void 0,c={},l=[{value:"\u26a1 High-Performance Aggregation via SQL CTEs",id:"-high-performance-aggregation-via-sql-ctes",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-high-performance-aggregation-via-sql-ctes",children:"\u26a1 High-Performance Aggregation via SQL CTEs"}),"\n",(0,r.jsx)(t.p,{children:"When dealing with millions of rows, offload heavy grouping and window functions to your database using Common Table Expressions (CTEs). This minimizes Ruby overhead and exploits DB indexes and parallelism."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# app/models/order.rb\ndef self.monthly_revenue\n  with_monthly AS (\n    select(\n      \"DATE_TRUNC('month', created_at) AS month\",\n      'SUM(amount) AS total'\n    ).from('orders').group('1')\n  )\n  .from('monthly as m').with(with_monthly: 'SELECT * FROM monthly')\n  .pluck('to_char(month, '\"'YYYY-MM'\"')', 'total')\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"In your controller/view, feed directly to Chartkick without further processing:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-erb",children:"<%= line_chart Order.monthly_revenue, points: false, library: { animation: { duration: 1500 } } %>\n"})})]})}function g(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(36672);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);