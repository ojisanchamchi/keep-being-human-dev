"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70884],{53973:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_storage/advanced/custom_variant_processor","title":"custom_variant_processor","description":"\ud83d\udee0 Custom Variant Processor","source":"@site/docs/rails/active_storage/advanced/custom_variant_processor.md","sourceDirName":"rails/active_storage/advanced","slug":"/rails/active_storage/advanced/custom_variant_processor","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/custom_variant_processor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/advanced/custom_variant_processor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_blob_analysis","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/custom_blob_analysis"},"next":{"title":"direct_upload_throttling","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/direct_upload_throttling"}}');var s=r(23420),o=r(65404);const n={},i=void 0,c={},d=[{value:"\ud83d\udee0 Custom Variant Processor",id:"-custom-variant-processor",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-custom-variant-processor",children:"\ud83d\udee0 Custom Variant Processor"}),"\n",(0,s.jsxs)(a.p,{children:["You can extend Active Storage\u2019s variant processing by registering custom processors. This is useful for adding watermarks, overlays, or other bespoke image transformations. Create a new processor class and register it in ",(0,s.jsx)(a.code,{children:"config/initializers/active_storage.rb"}),"."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'# app/lib/active_storage/processor/watermark_processor.rb\nmodule ActiveStorage\n  class Processor::WatermarkProcessor\n    def initialize(file, options = {})\n      @file = file\n      @watermark = options.fetch(:watermark_path)\n    end\n\n    def call\n      image = MiniMagick::Image.read(@file)\n      watermark = MiniMagick::Image.open(@watermark)\n      image = image.composite(watermark) do |c|\n        c.gravity "SouthEast"\n      end\n      image.to_blob\n    end\n  end\nend\n\n# config/initializers/active_storage.rb\nRails.application.config.active_storage.variant_processor = :mini_magick\nActiveStorage::Variant.module_eval do\n  register_processor :watermark, ActiveStorage::Processor::WatermarkProcessor\nend\n\n# Usage in a view:\n<%= image_tag user.avatar.variant(watermark: { watermark_path: Rails.root.join("app/assets/images/logo.png") }) %>\n'})})]})}function m(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,a,r)=>{r.d(a,{R:()=>n,x:()=>i});var t=r(36672);const s={},o=t.createContext(s);function n(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:n(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);