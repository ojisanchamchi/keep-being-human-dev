"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6182],{5408:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>u,default:()=>c,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/data_types/middle/hash_default_proc","title":"hash_default_proc","description":"\ud83c\udfaf Leverage Hash Default Values vs Default Procs","source":"@site/docs/ruby/data_types/middle/hash_default_proc.md","sourceDirName":"ruby/data_types/middle","slug":"/ruby/data_types/middle/hash_default_proc","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/hash_default_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/middle/hash_default_proc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"frozen_string_literals","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/frozen_string_literals"},"next":{"title":"optimize_hash_keys","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/optimize_hash_keys"}}');var n=t(23420),r=t(65404);const d={},u=void 0,o={},l=[{value:"\ud83c\udfaf Leverage Hash Default Values vs Default Procs",id:"-leverage-hash-default-values-vs-default-procs",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"-leverage-hash-default-values-vs-default-procs",children:"\ud83c\udfaf Leverage Hash Default Values vs Default Procs"}),"\n",(0,n.jsxs)(a.p,{children:["By default, a hash returns ",(0,n.jsx)(a.code,{children:"nil"})," for missing keys. You can provide a static default or a dynamic one via a proc\u2014but beware of mutable defaults."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:"# Static default value (shared object!)\nh = Hash.new([])\nh[:a] << 1\nputs h[:b]          # => [1]\nputs h[:a].object_id == h[:b].object_id  # => true\n\n# Dynamic default via proc (avoids sharing)\nh = Hash.new { |hash, key| hash[key] = [] }\nh[:a] << 1\nh[:b] << 2\nputs h              # => {:a=>[1], :b=>[2]}\n"})}),"\n",(0,n.jsx)(a.p,{children:"Use the proc form when you need separate mutable defaults per key, and the static form for simple immutable defaults."})]})}function c(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>d,x:()=>u});var s=t(36672);const n={},r=s.createContext(n);function d(e){const a=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function u(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(r.Provider,{value:a},e.children)}}}]);