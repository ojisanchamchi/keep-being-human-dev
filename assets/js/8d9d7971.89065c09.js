"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58860],{65404:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(36672);const o={},i=a.createContext(o);function s(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),a.createElement(i.Provider,{value:e},n.children)}},85934:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"sql/mysql/advanced/window_running_total","title":"window_running_total","description":"\ud83d\udcca Calculate Running Totals with Window Functions","source":"@site/docs/sql/mysql/advanced/window_running_total.md","sourceDirName":"sql/mysql/advanced","slug":"/sql/mysql/advanced/window_running_total","permalink":"/keep-being-human-dev/docs/sql/mysql/advanced/window_running_total","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/mysql/advanced/window_running_total.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transaction_isolation","permalink":"/keep-being-human-dev/docs/sql/mysql/advanced/transaction_isolation"},"next":{"title":"count_aggregate","permalink":"/keep-being-human-dev/docs/sql/mysql/beginner/count_aggregate"}}');var o=t(23420),i=t(65404);const s={},r=void 0,c={},d=[{value:"\ud83d\udcca Calculate Running Totals with Window Functions",id:"-calculate-running-totals-with-window-functions",level:2}];function l(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"-calculate-running-totals-with-window-functions",children:"\ud83d\udcca Calculate Running Totals with Window Functions"}),"\n",(0,o.jsx)(e.p,{children:"Window functions let you compute cumulative aggregates without self-joins or variables. For instance, you can get a running total of sales per user by partitioning by user_id and ordering by date. This approach is both concise and performant in MySQL 8+."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sql",children:"SELECT\n  order_id,\n  order_date,\n  SUM(amount) OVER (PARTITION BY user_id ORDER BY order_date) AS running_total\nFROM orders;\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}}}]);