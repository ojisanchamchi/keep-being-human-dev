"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90984],{35597:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/active_support/expert/concern_dependency_injection","title":"concern_dependency_injection","description":"\ud83e\udde9 Leverage ActiveSupport::Concern for Modular Dependencies","source":"@site/docs/rails/active_support/expert/concern_dependency_injection.md","sourceDirName":"rails/active_support/expert","slug":"/rails/active_support/expert/concern_dependency_injection","permalink":"/keep-being-human-dev/docs/rails/active_support/expert/concern_dependency_injection","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/expert/concern_dependency_injection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"callbacks_building_custom_chains","permalink":"/keep-being-human-dev/docs/rails/active_support/expert/callbacks_building_custom_chains"},"next":{"title":"custom_durations_with_precision","permalink":"/keep-being-human-dev/docs/rails/active_support/expert/custom_durations_with_precision"}}');var c=t(23420),o=t(65404);const s={},i=void 0,a={},d=[{value:"\ud83e\udde9 Leverage ActiveSupport::Concern for Modular Dependencies",id:"-leverage-activesupportconcern-for-modular-dependencies",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-leverage-activesupportconcern-for-modular-dependencies",children:"\ud83e\udde9 Leverage ActiveSupport::Concern for Modular Dependencies"}),"\n",(0,c.jsxs)(n.p,{children:["ActiveSupport::Concern simplifies module inclusion by managing dependencies and callbacks. Use ",(0,c.jsx)(n.code,{children:"included"})," blocks to inject behaviour and ensure load order. This allows you to break large services into composable concerns without manual ",(0,c.jsx)(n.code,{children:"super"})," calls."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"module Auditable\n  extend ActiveSupport::Concern\n\n  included do\n    before_save :record_changes\n  end\n\n  class_methods do\n    def audit_strategy(strategy)\n      cattr_accessor :strategy\n      self.strategy = strategy\n    end\n  end\n\n  private\n\n  def record_changes\n    strategy.log(self.changes)\n  end\nend\n\nclass Order\n  include Auditable\n  audit_strategy(MyCustomAuditor)\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(36672);const c={},o=r.createContext(c);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);