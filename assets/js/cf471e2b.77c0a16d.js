"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2857],{57250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/networking/expert/custom_tls_context","title":"custom_tls_context","description":"\ud83d\udd12 Advanced TLS Configuration with OpenSSL::SSLContext","source":"@site/docs/ruby/networking/expert/custom_tls_context.md","sourceDirName":"ruby/networking/expert","slug":"/ruby/networking/expert/custom_tls_context","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/custom_tls_context","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/expert/custom_tls_context.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tcp_server_example","permalink":"/keep-being-human-dev/docs/ruby/networking/beginner/tcp_server_example"},"next":{"title":"http2_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/http2_multiplexing"}}');var r=n(23420),s=n(65404);const i={},c=void 0,p={},u=[{value:"\ud83d\udd12 Advanced TLS Configuration with OpenSSL::SSL::SSLContext",id:"-advanced-tls-configuration-with-opensslsslsslcontext",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-advanced-tls-configuration-with-opensslsslsslcontext",children:"\ud83d\udd12 Advanced TLS Configuration with OpenSSL::SSL::SSLContext"}),"\n",(0,r.jsxs)(t.p,{children:["Fine-tune your TLS connections by customizing cipher suites, protocol versions, and certificate validation in ",(0,r.jsx)(t.code,{children:"OpenSSL::SSL::SSLContext"}),". This grants you control over security policies and SNI support for connecting to modern servers."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\nrequire 'openssl'\n\ncontext = OpenSSL::SSL::SSLContext.new(:TLSv1_2)\ncontext.verify_mode = OpenSSL::SSL::VERIFY_PEER\ncontext.ciphers = 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384'\ncontext.min_version = OpenSSL::SSL::TLS1_2_VERSION\ncontext.max_version = OpenSSL::SSL::TLS1_3_VERSION\ncontext.options |= OpenSSL::SSL::OP_NO_COMPRESSION\ncontext.verify_callback = proc do |preverify_ok, store_ctx|\n  # implement custom chain validation or HPKP pin checks\n  preverify_ok\nend\n\nuri = URI('https://secure.example.com/resource')\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nhttp.ssl_version = :TLSv1_2\nhttp.ssl_context = context\nhttp.start do |h|\n  resp = h.get(uri)\n  puts resp.body\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(36672);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);