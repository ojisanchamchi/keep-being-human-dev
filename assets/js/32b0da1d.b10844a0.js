"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56332],{24869:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>g,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"rails/logging/advanced/structured_json_logging","title":"structured_json_logging","description":"\ud83d\udce6 Structured JSON Logging","source":"@site/docs/rails/logging/advanced/structured_json_logging.md","sourceDirName":"rails/logging/advanced","slug":"/rails/logging/advanced/structured_json_logging","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/structured_json_logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/advanced/structured_json_logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sql_query_context_logging","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/sql_query_context_logging"},"next":{"title":"tagged_logging_context","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/tagged_logging_context"}}');var r=t(23420),a=t(65404);const s={},g=void 0,i={},c=[{value:"\ud83d\udce6 Structured JSON Logging",id:"-structured-json-logging",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-structured-json-logging",children:"\ud83d\udce6 Structured JSON Logging"}),"\n",(0,r.jsxs)(n.p,{children:["Emit logs in structured JSON to integrate seamlessly with ELK stack or Datadog. Use ",(0,r.jsx)(n.code,{children:"lograge"})," gem and a custom JSON formatter to produce one-event-per-request logs that are easily queryable and filterable downstream."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'lograge'\n\n# config/environments/production.rb\nRails.application.configure do\n  config.lograge.enabled = true\n  config.lograge.formatter = Lograge::Formatters::Json.new\n  config.lograge.custom_options = lambda do |event|\n    {\n      time: event.time.utc.iso8601,\n      params: event.payload[:params].except('controller','action','format','utf8'),\n      user_id: event.payload[:user_id]\n    }\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>g});var o=t(36672);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function g(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);