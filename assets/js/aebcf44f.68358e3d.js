"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75788],{1774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rails/active_storage/middle/purging_unused_blobs_and_attachments","title":"purging_unused_blobs_and_attachments","description":"\ud83e\uddf9 Purge Unused Blobs and Attachments","source":"@site/docs/rails/active_storage/middle/purging_unused_blobs_and_attachments.md","sourceDirName":"rails/active_storage/middle","slug":"/rails/active_storage/middle/purging_unused_blobs_and_attachments","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/purging_unused_blobs_and_attachments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/middle/purging_unused_blobs_and_attachments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"generating_and_displaying_variants","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/generating_and_displaying_variants"},"next":{"title":"switching_active_storage_services","permalink":"/keep-being-human-dev/docs/rails/active_storage/middle/switching_active_storage_services"}}');var s=t(23420),r=t(65404);const o={},d=void 0,i={},c=[{value:"\ud83e\uddf9 Purge Unused Blobs and Attachments",id:"-purge-unused-blobs-and-attachments",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-purge-unused-blobs-and-attachments",children:"\ud83e\uddf9 Purge Unused Blobs and Attachments"}),"\n",(0,s.jsx)(n.p,{children:"Over time, unused blobs can accumulate. Schedule background jobs to purge orphaned blobs and free up storage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# app/jobs/purge_unattached_blobs_job.rb\nclass PurgeUnattachedBlobsJob < ApplicationJob\n  queue_as :low\n\n  def perform\n    ActiveStorage::Blob.unattached.find_each do |blob|\n      blob.purge_later\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# config/schedule.rb (using whenever)\nevery 1.day do\n  runner "PurgeUnattachedBlobsJob.perform_later"\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"purge_later"})," runs deletion in the background to avoid blocking requests. Adjust scheduling to match your retention policy."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(36672);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);