"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[29633],{25762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"ruby/exceptions/expert/tracepoint_exception_monitoring","title":"tracepoint_exception_monitoring","description":"\ud83d\udd0d TracePoint-Based Exception Instrumentation","source":"@site/docs/ruby/exceptions/expert/tracepoint_exception_monitoring.md","sourceDirName":"ruby/exceptions/expert","slug":"/ruby/exceptions/expert/tracepoint_exception_monitoring","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/tracepoint_exception_monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/expert/tracepoint_exception_monitoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"exponential_backoff_retry_logic","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exponential_backoff_retry_logic"},"next":{"title":"ensure_for_cleanup","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/ensure_for_cleanup"}}');var i=t(23420),r=t(65404);const c={},a=void 0,s={},p=[{value:"\ud83d\udd0d TracePoint-Based Exception Instrumentation",id:"-tracepoint-based-exception-instrumentation",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-tracepoint-based-exception-instrumentation",children:"\ud83d\udd0d TracePoint-Based Exception Instrumentation"}),"\n",(0,i.jsxs)(n.p,{children:["Leverage ",(0,i.jsx)(n.code,{children:"TracePoint"})," to globally hook into exception raises and implement custom logging, metrics, or alerts without littering ",(0,i.jsx)(n.code,{children:"rescue"})," blocks throughout your application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'trace = TracePoint.new(:raise) do |tp|\n  exception  = tp.raised_exception\n  location   = "#{tp.path}:#{tp.lineno}"\n  metric_name = "exceptions.raised.#{exception.class.name.downcase}"\n\n  # Send to statsd or external monitoring\n  StatsD.increment(metric_name)\n  logger.error("Exception raised: #{exception.class} at #{location}\\n#{exception.message}")\nend\n\ntrace.enable\n\n# Your application code... any exception will be captured by the TracePoint hook\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Remember to disable the trace (",(0,i.jsx)(n.code,{children:"trace.disable"}),") in performance-critical sections."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var o=t(36672);const i={},r=o.createContext(i);function c(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);