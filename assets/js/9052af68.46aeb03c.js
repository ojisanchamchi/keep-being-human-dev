"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75298],{20981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"sql/sqlite/advanced/upsert_on_conflict","title":"upsert_on_conflict","description":"\ud83d\udd00 Use INSERT ... ON CONFLICT for Upserts","source":"@site/docs/sql/sqlite/advanced/upsert_on_conflict.md","sourceDirName":"sql/sqlite/advanced","slug":"/sql/sqlite/advanced/upsert_on_conflict","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/upsert_on_conflict","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/sqlite/advanced/upsert_on_conflict.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rtree_spatial_indexing","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/rtree_spatial_indexing"},"next":{"title":"wal_journal_mode","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/wal_journal_mode"}}');var r=t(23420),a=t(65404);const o={},i=void 0,c={},l=[{value:"\ud83d\udd00 Use INSERT ... ON CONFLICT for Upserts",id:"-use-insert--on-conflict-for-upserts",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-use-insert--on-conflict-for-upserts",children:"\ud83d\udd00 Use INSERT ... ON CONFLICT for Upserts"}),"\n",(0,r.jsxs)(n.p,{children:["SQLite\u2019s ",(0,r.jsx)(n.code,{children:"INSERT ... ON CONFLICT"})," clause allows you to insert rows or update them if a uniqueness constraint violation occurs. This approach reduces round trips by combining insert and update logic into one atomic statement. Use it to simplify upsert patterns and ensure data integrity under high-concurrency workloads."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Create table with unique constraint\nCREATE TABLE users (\n  id INTEGER PRIMARY KEY,\n  email TEXT UNIQUE,\n  name TEXT\n);\n\n-- Insert or update if email already exists\nINSERT INTO users (email, name)\nVALUES ('alice@example.com', 'Alice')\nON CONFLICT(email) DO UPDATE SET\n  name = excluded.name;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(36672);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);