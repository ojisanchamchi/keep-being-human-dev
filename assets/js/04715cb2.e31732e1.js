"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41935],{31802:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/matrix/expert/sparse_matrix_lazy_enumerator","title":"sparse_matrix_lazy_enumerator","description":"\ud83c\udf2a\ufe0f Handle Sparse Matrices with Lazy Enumerators and Hash Storage","source":"@site/docs/ruby/matrix/expert/sparse_matrix_lazy_enumerator.md","sourceDirName":"ruby/matrix/expert","slug":"/ruby/matrix/expert/sparse_matrix_lazy_enumerator","permalink":"/keep-being-human-dev/docs/ruby/matrix/expert/sparse_matrix_lazy_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/matrix/expert/sparse_matrix_lazy_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"matrix_initialization","permalink":"/keep-being-human-dev/docs/ruby/matrix/beginner/matrix_initialization"},"next":{"title":"matrix_basic_operations","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_basic_operations"}}');var t=a(23420),s=a(65404);const i={},o=void 0,l={},d=[{value:"\ud83c\udf2a\ufe0f Handle Sparse Matrices with Lazy Enumerators and Hash Storage",id:"\ufe0f-handle-sparse-matrices-with-lazy-enumerators-and-hash-storage",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-handle-sparse-matrices-with-lazy-enumerators-and-hash-storage",children:"\ud83c\udf2a\ufe0f Handle Sparse Matrices with Lazy Enumerators and Hash Storage"}),"\n",(0,t.jsxs)(n.p,{children:["When dealing with very large, mostly-empty matrices, a dense representation wastes memory and CPU cycles. You can craft a ",(0,t.jsx)(n.code,{children:"SparseMatrix"})," that stores only non-zero entries in a ",(0,t.jsx)(n.code,{children:"Hash"}),", and uses a ",(0,t.jsx)(n.code,{children:"Lazy"})," enumerator for operations like multiplication or transformations. This approach scales to millions of rows with minimal footprint."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class SparseMatrix\n  include Enumerable\n\n  def initialize(rows, cols)\n    @rows = rows; @cols = cols\n    @data = {}    # keys as [i,j], values as numeric\n  end\n\n  def []=(i, j, value)\n    if value.zero?\n      @data.delete([i,j])\n    else\n      @data[[i,j]] = value\n    end\n  end\n\n  def [](i, j)\n    @data.fetch([i,j], 0)\n  end\n\n  def each_entry\n    @data.each do |(i,j), v|\n      yield i, j, v\n    end\n  end\n\n  def multiply(other)\n    raise unless @cols == other.rows\n    result = SparseMatrix.new(@rows, other.cols)\n\n    each_entry.lazy.each do |i,j,v|\n      (0...other.cols).lazy.each do |k|\n        val = v * other[j, k]\n        next if val.zero?\n        result[i, k] = result[i, k] + val\n      end\n    end\n\n    result\n  end\nend\n\n# Usage:\nsm1 = SparseMatrix.new(1_000_000, 1_000_000)\nsm2 = SparseMatrix.new(1_000_000, 1_000_000)\n# Populate a tiny fraction of entries...\nsm1[0,42] = 3.14\nsm2[42,99] = 2.71\n\nproduct = sm1.multiply(sm2)\n# Only non-zero entries are iterated and stored\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(36672);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);