"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82872],{6406:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/regex/expert/regexp_union_optimization","title":"regexp_union_optimization","description":"\u26a1 Optimize Large Alternations with Regexp.union","source":"@site/docs/ruby/regex/expert/regexp_union_optimization.md","sourceDirName":"ruby/regex/expert","slug":"/ruby/regex/expert/regexp_union_optimization","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/regexp_union_optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/expert/regexp_union_optimization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"recursive_regex_for_nested","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/recursive_regex_for_nested"},"next":{"title":"stringscanner_iterative_scans","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/stringscanner_iterative_scans"}}');var i=t(23420),o=t(65404);const a={},s=void 0,p={},u=[{value:"\u26a1 Optimize Large Alternations with Regexp.union",id:"-optimize-large-alternations-with-regexpunion",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-optimize-large-alternations-with-regexpunion",children:"\u26a1 Optimize Large Alternations with Regexp.union"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Regexp.union"})," compiles multiple strings or regexes into a single optimized pattern, preventing exponential blow\u2011ups in alternations and improving maintainability."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'words = %w[apple banana cherry date]\npattern = Regexp.union(words)\n\np "I like banana pie".scan(pattern)  # => ["banana"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can mix subpatterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"pattern = Regexp.union(/dog/, /cat/, 'mouse')\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(36672);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);