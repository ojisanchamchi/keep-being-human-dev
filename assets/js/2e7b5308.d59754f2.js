"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16187],{35994:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ruby/arrays/advanced/custom_uniq","title":"custom_uniq","description":"\ud83c\udfaf Deduplicating with Custom Criteria using uniq","source":"@site/docs/ruby/arrays/advanced/custom_uniq.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/custom_uniq","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/custom_uniq","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/custom_uniq.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"combinatorics_with_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/combinatorics_with_arrays"},"next":{"title":"grouping_with_each_with_object","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/grouping_with_each_with_object"}}');var r=t(23420),a=t(65404);const s={},c=void 0,u={},o=[{value:"\ud83c\udfaf Deduplicating with Custom Criteria using <code>uniq</code>",id:"-deduplicating-with-custom-criteria-using-uniq",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-deduplicating-with-custom-criteria-using-uniq",children:["\ud83c\udfaf Deduplicating with Custom Criteria using ",(0,r.jsx)(n.code,{children:"uniq"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Array#uniq"})," can accept a block to determine uniqueness based on computed keys. This is powerful for de-duplicating complex objects or arrays by specific attributes. The method preserves the first occurrence of each key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"users = [\n  {id: 1, name: 'Alice'},\n  {id: 2, name: 'Bob'},\n  {id: 1, name: 'Alice Smith'}\n]\nunique = users.uniq { |u| u[:id] }\n# => [{id:1, name:'Alice'}, {id:2, name:'Bob'}]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var i=t(36672);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);