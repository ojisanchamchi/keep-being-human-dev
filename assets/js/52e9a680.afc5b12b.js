"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75501],{26096:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/strings/expert/in_memory_io_with_stringio","title":"in_memory_io_with_stringio","description":"\ud83d\udc1b Efficient in-memory IO with StringIO","source":"@site/docs/ruby/strings/expert/in_memory_io_with_stringio.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/in_memory_io_with_stringio","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/in_memory_io_with_stringio","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/in_memory_io_with_stringio.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"handle_invalid_bytes_with_scrub","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/handle_invalid_bytes_with_scrub"},"next":{"title":"override_dup_with_initialize_copy","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/override_dup_with_initialize_copy"}}');var r=n(23420),s=n(65404);const o={},c=void 0,a={},d=[{value:"\ud83d\udc1b Efficient in-memory IO with StringIO",id:"-efficient-in-memory-io-with-stringio",level:2}];function u(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"-efficient-in-memory-io-with-stringio",children:"\ud83d\udc1b Efficient in-memory IO with StringIO"}),"\n",(0,r.jsxs)(i.p,{children:[(0,r.jsx)(i.code,{children:"StringIO"})," emulates an IO object backed by a String. Instead of juggling indexes or slices, you can use familiar ",(0,r.jsx)(i.code,{children:"IO"})," methods (",(0,r.jsx)(i.code,{children:"read"}),", ",(0,r.jsx)(i.code,{children:"gets"}),", ",(0,r.jsx)(i.code,{children:"seek"}),") on raw data. This is ideal for streaming parsers or when you need IO-like semantics without disk overhead."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ruby",children:'require \'stringio\'\nstream = StringIO.new("line1\\nline2\\n")\nwhile chunk = stream.gets\n  puts "Chunk: #{chunk.chomp}"\nend\n# => Chunk: line1\n# => Chunk: line2\n'})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var t=n(36672);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);