"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27827],{63582:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"gems/webmock/beginner/verify_http_requests","title":"verify_http_requests","description":"\ud83d\udd0d Verify HTTP Requests","source":"@site/docs/gems/webmock/beginner/verify_http_requests.md","sourceDirName":"gems/webmock/beginner","slug":"/gems/webmock/beginner/verify_http_requests","permalink":"/keep-being-human-dev/docs/gems/webmock/beginner/verify_http_requests","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/beginner/verify_http_requests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stub_get_requests","permalink":"/keep-being-human-dev/docs/gems/webmock/beginner/stub_get_requests"},"next":{"title":"chunked_streaming_response","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/chunked_streaming_response"}}');var r=s(23420),o=s(65404);const i={},a=void 0,c={},u=[{value:"\ud83d\udd0d Verify HTTP Requests",id:"-verify-http-requests",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-verify-http-requests",children:"\ud83d\udd0d Verify HTTP Requests"}),"\n",(0,r.jsx)(t.p,{children:"After stubbing requests, you might want to ensure your application is making the correct HTTP calls. WebMock provides matchers to verify that a request was issued with the expected method, URL, body, or headers. Use these assertions to guarantee your code interacts with external services as intended."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# In your spec\n# Trigger the actions that make HTTP calls\ndo_something_that_makes_http_call\n\n# Verify the GET request was made once\nexpect(a_request(:get, 'https://api.example.com/users/1')).to have_been_made.once\n\n# Verify a POST with specific JSON body\nexpect(a_request(:post, 'https://api.example.com/users')\n  .with(\n    headers: { 'Content-Type' => 'application/json' },\n    body: { name: 'Alice' }.to_json\n  )).to have_been_made\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>a});var n=s(36672);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);