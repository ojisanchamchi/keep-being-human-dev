"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27134],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(36672);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},72022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/background_jobs/advanced/job_metrics","title":"job_metrics","description":"\ud83d\udcca Instrumenting Jobs with ActiveSupport::Notifications","source":"@site/docs/rails/background_jobs/advanced/job_metrics.md","sourceDirName":"rails/background_jobs/advanced","slug":"/rails/background_jobs/advanced/job_metrics","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/job_metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/advanced/job_metrics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"idempotent_jobs","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/idempotent_jobs"},"next":{"title":"rate_limiting_middleware","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/rate_limiting_middleware"}}');var s=n(23420),o=n(65404);const r={},a=void 0,c={},d=[{value:"\ud83d\udcca Instrumenting Jobs with ActiveSupport::Notifications",id:"-instrumenting-jobs-with-activesupportnotifications",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-instrumenting-jobs-with-activesupportnotifications",children:"\ud83d\udcca Instrumenting Jobs with ActiveSupport::Notifications"}),"\n",(0,s.jsxs)(t.p,{children:["Track job durations and failures by subscribing to the ",(0,s.jsx)(t.code,{children:"perform.active_job"})," event. Push metrics to your preferred monitoring system for real\u2011time insights."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/job_metrics.rb\nActiveSupport::Notifications.subscribe('perform.active_job') do |name, start, finish, id, payload|\n  duration_ms = (finish - start) * 1000\n  status = payload[:exception] ? 'error' : 'success'\n  StatsD.increment(\"jobs.#{payload[:job].class.name}.#{status}\")\n  StatsD.timing(\"jobs.#{payload[:job].class.name}.duration\", duration_ms)\nend\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Each job invocation emits metrics like ",(0,s.jsx)(t.code,{children:"jobs.ProcessOrderJob.success"})," and timing data, empowering performance tuning."]})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);