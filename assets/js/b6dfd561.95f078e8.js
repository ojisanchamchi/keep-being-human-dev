"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33771],{65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var c=s(36672);const a={},i=c.createContext(a);function t(e){const n=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),c.createElement(i.Provider,{value:n},e.children)}},77646:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"rails/caching/beginner/russian_doll_caching","title":"russian_doll_caching","description":"\ud83c\udf81 Russian Doll Caching","source":"@site/docs/rails/caching/beginner/russian_doll_caching.md","sourceDirName":"rails/caching/beginner","slug":"/rails/caching/beginner/russian_doll_caching","permalink":"/keep-being-human-dev/docs/rails/caching/beginner/russian_doll_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/beginner/russian_doll_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"low_level_cache_fetch","permalink":"/keep-being-human-dev/docs/rails/caching/beginner/low_level_cache_fetch"},"next":{"title":"view_fragment_caching","permalink":"/keep-being-human-dev/docs/rails/caching/beginner/view_fragment_caching"}}');var a=s(23420),i=s(65404);const t={},o=void 0,r={},l=[{value:"\ud83c\udf81 Russian Doll Caching",id:"-russian-doll-caching",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-russian-doll-caching",children:"\ud83c\udf81 Russian Doll Caching"}),"\n",(0,a.jsxs)(n.p,{children:["Russian doll caching composes nested fragments so that parent fragments don\u2019t need to be expired when a child changes. You simply wrap each nested element in its own ",(0,a.jsx)(n.code,{children:"cache"})," call, and Rails merges the keys automatically."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-erb",children:'<%# app/views/posts/_post.html.erb %>\n<% cache(post) do %>\n  <div class="post">\n    <h2><%= post.title %></h2>\n    <div class="comments">\n      <% post.comments.each do |comment| %>\n        <% cache(comment) do %>\n          <p><strong><%= comment.user %>:</strong> <%= comment.body %></p>\n        <% end %>\n      <% end %>\n    </div>\n  </div>\n<% end %>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);