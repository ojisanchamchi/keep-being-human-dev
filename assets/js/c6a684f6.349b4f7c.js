"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57061],{31734:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/proc_callback","title":"proc_callback","description":"\ud83d\udd04 Use Procs as Method Callbacks","source":"@site/docs/ruby/procs_and_lambdas/middle/proc_callback.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/proc_callback","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/proc_callback","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/proc_callback.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoization_lambda","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/memoization_lambda"},"next":{"title":"proc_lambda_conversion","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/proc_lambda_conversion"}}');var n=s(23420),o=s(65404);const r={},t=void 0,d={},l=[{value:"\ud83d\udd04 Use Procs as Method Callbacks",id:"-use-procs-as-method-callbacks",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"-use-procs-as-method-callbacks",children:"\ud83d\udd04 Use Procs as Method Callbacks"}),"\n",(0,n.jsxs)(a.p,{children:["Procs can be passed into methods to define custom behavior without requiring blocks. This is useful when you need to swap or store different callbacks dynamically. Simply accept a Proc parameter and call it inside your method using ",(0,n.jsx)(a.code,{children:"call"}),"."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:'def process_items(items, callback)\n  items.each { |item| callback.call(item) }\nend\n\nupcase_proc = Proc.new { |str| puts str.upcase }\nnumbers_proc = Proc.new { |n| puts n * 2 }\n\nprocess_items(["apple", "banana"], upcase_proc)\nprocess_items([1, 2, 3], numbers_proc)\n'})})]})}function p(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}},65404:(e,a,s)=>{s.d(a,{R:()=>r,x:()=>t});var c=s(36672);const n={},o=c.createContext(n);function r(e){const a=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),c.createElement(o.Provider,{value:a},e.children)}}}]);