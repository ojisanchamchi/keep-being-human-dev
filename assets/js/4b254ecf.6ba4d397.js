"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[65780],{34799:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/active_record_migrations/expert/multi_step_default_column_addition","title":"multi_step_default_column_addition","description":"\ud83d\udcbc Add Columns with Defaults in Multiple Steps to Avoid Table Rewrites","source":"@site/docs/rails/active_record_migrations/expert/multi_step_default_column_addition.md","sourceDirName":"rails/active_record_migrations/expert","slug":"/rails/active_record_migrations/expert/multi_step_default_column_addition","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/multi_step_default_column_addition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/expert/multi_step_default_column_addition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"disable_ddl_transaction_for_concurrent_index","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/disable_ddl_transaction_for_concurrent_index"},"next":{"title":"parallel_migrations_via_rake","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/parallel_migrations_via_rake"}}');var a=n(23420),r=n(65404);const o={},s=void 0,l={},d=[{value:"\ud83d\udcbc Add Columns with Defaults in Multiple Steps to Avoid Table Rewrites",id:"-add-columns-with-defaults-in-multiple-steps-to-avoid-table-rewrites",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-add-columns-with-defaults-in-multiple-steps-to-avoid-table-rewrites",children:"\ud83d\udcbc Add Columns with Defaults in Multiple Steps to Avoid Table Rewrites"}),"\n",(0,a.jsx)(t.p,{children:"Adding a non-null column with a default will rewrite the entire table. To avoid locks, split into three migrations:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"class AddActiveToUsersStep1 < ActiveRecord::Migration[6.1]\n  def change\n    add_column :users, :active, :boolean\n  end\nend\n\nclass BackfillActiveForUsersStep2 < ActiveRecord::Migration[6.1]\n  def up\n    User.reset_column_information\n    User.update_all(active: true)\n  end\n  def down; end\nend\n\nclass AddDefaultAndNotNullToActiveStep3 < ActiveRecord::Migration[6.1]\n  def change\n    change_column_default :users, :active, from: nil, to: true\n    change_column_null :users, :active, false\n  end\nend\n"})}),"\n",(0,a.jsx)(t.p,{children:"This approach ensures zero-downtime schema changes on large tables."})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var i=n(36672);const a={},r=i.createContext(a);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);