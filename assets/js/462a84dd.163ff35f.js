"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58346],{55209:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/operators/advanced/endless_range_operator.md","title":"endless_range_operator.md","description":"\ud83c\udf0a Endless Ranges for Infinite Sequences","source":"@site/docs/ruby/operators/advanced/endless_range_operator.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/endless_range_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/endless_range_operator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/endless_range_operator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"double_splat_args.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/double_splat_args.md"},"next":{"title":"flip_flop_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/flip_flop_operator.md"}}');var s=r(23420),a=r(65404);const o={},d=void 0,i={},c=[{value:"\ud83c\udf0a Endless Ranges for Infinite Sequences",id:"-endless-ranges-for-infinite-sequences",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-endless-ranges-for-infinite-sequences",children:"\ud83c\udf0a Endless Ranges for Infinite Sequences"}),"\n",(0,s.jsxs)(n.p,{children:["Endless ranges (",(0,s.jsx)(n.code,{children:"start.."}),") let you represent an unbounded interval starting at ",(0,s.jsx)(n.code,{children:"start"}),". They work with methods like ",(0,s.jsx)(n.code,{children:"take_while"}),", ",(0,s.jsx)(n.code,{children:"lazy"}),", or iteration protocols to generate or filter items without a fixed endpoint."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# Generate all integers from 10 upwards, filtering even ones\nevens = (10..).lazy.select(&:even?).first(5)\nputs evens.inspect # => [10, 12, 14, 16, 18]\n\n# Stream lines from STDIN until a blank line\nSTDIN.each_line.take_while { |line| !(line.strip.empty?) }.each do |l|\n  puts l.upcase\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(36672);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);