"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89809],{65404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>o});var s=r(36672);const c={},n=s.createContext(c);function a(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(n.Provider,{value:t},e.children)}},71833:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/rspec/middle/rspec_custom_matchers.md","title":"rspec_custom_matchers.md","description":"\ud83d\udee0\ufe0f Writing Custom Matchers for Readability","source":"@site/docs/ruby/rspec/middle/rspec_custom_matchers.md.md","sourceDirName":"ruby/rspec/middle","slug":"/ruby/rspec/middle/rspec_custom_matchers.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_custom_matchers.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/middle/rspec_custom_matchers.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_contexts_subject.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_contexts_subject.md"},"next":{"title":"rspec_let_vs_let_bang.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_let_vs_let_bang.md"}}');var c=r(23420),n=r(65404);const a={},o=void 0,i={},d=[{value:"\ud83d\udee0\ufe0f Writing Custom Matchers for Readability",id:"\ufe0f-writing-custom-matchers-for-readability",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"\ufe0f-writing-custom-matchers-for-readability",children:"\ud83d\udee0\ufe0f Writing Custom Matchers for Readability"}),"\n",(0,c.jsxs)(t.p,{children:["Custom matchers encapsulate complex assertions into human-readable DSLs, improving spec clarity and error messages. Define them in ",(0,c.jsx)(t.code,{children:"spec/support/matchers"})," and register in ",(0,c.jsx)(t.code,{children:"rails_helper.rb"}),". This approach decouples expectation logic from tests, making intent explicit."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"# spec/support/matchers/have_valid_factory.rb\nRSpec::Matchers.define :have_valid_factory do |factory|\n  match do |_|\n    build(factory).valid?\n  end\n  failure_message do |actual|\n    \"expected #{factory} to be valid, got errors: \"+ build(factory).errors.full_messages.join(', ')\n  end\nend\n\n# Usage\ndescribe User, type: :model do\n  it { is_expected.to have_valid_factory(:user) }\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(m,{...e})}):m(e)}}}]);