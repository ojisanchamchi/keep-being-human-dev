"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93552],{65404:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var r=n(36672);const i={},s=r.createContext(i);function l(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:t},e.children)}},87616:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/regex/middle/split_with_regex","title":"split_with_regex","description":"\ud83e\ude93 Use Regex for Flexible Splitting","source":"@site/docs/ruby/regex/middle/split_with_regex.md","sourceDirName":"ruby/regex/middle","slug":"/ruby/regex/middle/split_with_regex","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/split_with_regex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/middle/split_with_regex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"regexp_union","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/regexp_union"},"next":{"title":"around_hooks_time_travel_cleanup","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/around_hooks_time_travel_cleanup"}}');var i=n(23420),s=n(65404);const l={},o=void 0,d={},a=[{value:"\ud83e\ude93 Use Regex for Flexible Splitting",id:"-use-regex-for-flexible-splitting",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-use-regex-for-flexible-splitting",children:"\ud83e\ude93 Use Regex for Flexible Splitting"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"String#split"})," accepts a regex, enabling you to split on complex delimiters, capture parts of the delimiter, or omit empty fields."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'# Split on commas or semicolons\ndata = \'a,b;c,,d\' .split(/[,;]+/)   # => ["a","b","c","d"]\n\n# Keep delimiters in the result\ntokens = \'1+2-3\'.split(/([+-])/)\n# => ["1", "+", "2", "-", "3"]\n'})}),"\n",(0,i.jsx)(t.p,{children:"Regex-powered splits handle varied and repeated delimiters effortlessly."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);