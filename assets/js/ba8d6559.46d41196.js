"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4025],{16274:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>n,toc:()=>g});const n=JSON.parse('{"id":"rails/logging/advanced/custom_log_formatter","title":"custom_log_formatter","description":"\ud83d\udee0\ufe0f Custom Log Formatter","source":"@site/docs/rails/logging/advanced/custom_log_formatter.md","sourceDirName":"rails/logging/advanced","slug":"/rails/logging/advanced/custom_log_formatter","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/custom_log_formatter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/advanced/custom_log_formatter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"asynchronous_logging","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/asynchronous_logging"},"next":{"title":"lograge_logstash_integration","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/lograge_logstash_integration"}}');var r=o(23420),a=o(65404);const s={},i=void 0,c={},g=[{value:"\ud83d\udee0\ufe0f Custom Log Formatter",id:"\ufe0f-custom-log-formatter",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-custom-log-formatter",children:"\ud83d\udee0\ufe0f Custom Log Formatter"}),"\n",(0,r.jsxs)(t.p,{children:["Rails uses ",(0,r.jsx)(t.code,{children:"ActiveSupport::Logger::SimpleFormatter"})," by default, but you can implement a custom formatter to include timestamps, request IDs, or custom metadata. Define a subclass of ",(0,r.jsx)(t.code,{children:"Logger::Formatter"})," and hook it into your Rails middleware stack to gain full control over log output."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'# config/initializers/custom_logger.rb\nclass CustomLoggerFormatter < Logger::Formatter\n  def call(severity, timestamp, progname, msg)\n    request_id = Thread.current[:request_id] || "-"\n    formatted_time = timestamp.utc.strftime("%Y-%m-%dT%H:%M:%S.%6NZ")\n    "[#{formatted_time}] #{severity} (#{progname}) [RequestID:#{request_id}] : #{String === msg ? msg : msg.inspect}\\n"\n  end\nend\n\nRails.application.configure do\n  config.log_formatter = CustomLoggerFormatter.new\nend\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>i});var n=o(36672);const r={},a=n.createContext(r);function s(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);