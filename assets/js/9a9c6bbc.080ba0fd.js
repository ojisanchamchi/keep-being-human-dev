"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46156],{35441:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/proc_enumerable_chaining","title":"proc_enumerable_chaining","description":"\ud83d\udd17 Chaining Procs in Enumerable Pipelines","source":"@site/docs/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoization_with_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/memoization_with_procs"},"next":{"title":"proc_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_lambda_composition"}}');var s=a(23420),i=a(65404);const c={},o=void 0,t={},d=[{value:"\ud83d\udd17 Chaining Procs in Enumerable Pipelines",id:"-chaining-procs-in-enumerable-pipelines",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-chaining-procs-in-enumerable-pipelines",children:"\ud83d\udd17 Chaining Procs in Enumerable Pipelines"}),"\n",(0,s.jsx)(n.p,{children:"By converting methods and lambdas to Procs, you can build flexible, reusable pipelines for collections. Combine filtering, mapping, and reduction in a declarative style that\u2019s easy to test and modify."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Define reusable procs\nstrip  = ->(s) { s.strip }\nulcase = ->(s) { s.downcase }\nvalid  = ->(s) { s.match?(/^[a-z]+$/) }\n\nwords = [" Apple ", "Banana123", " carrot "]\n\n# Chain them with Symbol#to_proc and lambdas\nresult = words\n  .map(&strip)\n  .map(&ulcase)\n  .select(&valid)\n\nputs result.inspect  # => ["apple", "carrot"]\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var r=a(36672);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);