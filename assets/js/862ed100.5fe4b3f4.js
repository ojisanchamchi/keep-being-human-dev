"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[64211],{65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(36672);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},67468:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/method_missing/middle/forwarding_proxy","title":"forwarding_proxy","description":"\ud83e\udde9 Building a Forwarding Proxy","source":"@site/docs/ruby/method_missing/middle/forwarding_proxy.md","sourceDirName":"ruby/method_missing/middle","slug":"/ruby/method_missing/middle/forwarding_proxy","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/forwarding_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/middle/forwarding_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_delegation","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dynamic_delegation"},"next":{"title":"logging_undefined_calls","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/logging_undefined_calls"}}');var i=r(23420),s=r(65404);const o={},a=void 0,d={},u=[{value:"\ud83e\udde9 Building a Forwarding Proxy",id:"-building-a-forwarding-proxy",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-building-a-forwarding-proxy",children:"\ud83e\udde9 Building a Forwarding Proxy"}),"\n",(0,i.jsx)(n.p,{children:"Use method_missing to create a transparent proxy that intercepts method calls, adding behavior before/after forwarding. This pattern is handy for caching, security checks, or instrumentation around an object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class Proxy\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &block)\n    puts "Calling #{name} with \\\\#{args.inspect}"\n    result = @target.public_send(name, *args, &block)\n    puts "Result: \\\\#{result.inspect}"\n    result\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @target.respond_to?(name, include_private) || super\n  end\nend\n\narr = Proxy.new([1,2,3])\narr.push(4)\n# Output:\n# Calling push with [4]\n# Result: [1, 2, 3, 4]\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);