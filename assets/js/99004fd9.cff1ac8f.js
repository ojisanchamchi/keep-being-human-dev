"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[64266],{47330:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rails/controllers/expert/threading_parallel_requests","title":"threading_parallel_requests","description":"\u2699\ufe0f Parallelizing External API Calls with Threads","source":"@site/docs/rails/controllers/expert/threading_parallel_requests.md","sourceDirName":"rails/controllers/expert","slug":"/rails/controllers/expert/threading_parallel_requests","permalink":"/keep-being-human-dev/docs/rails/controllers/expert/threading_parallel_requests","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/expert/threading_parallel_requests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"strong_params_dynamic_filters","permalink":"/keep-being-human-dev/docs/rails/controllers/expert/strong_params_dynamic_filters"},"next":{"title":"action_caching","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/action_caching"}}');var s=n(23420),a=n(65404);const l={},i=void 0,o={},c=[{value:"\u2699\ufe0f Parallelizing External API Calls with Threads",id:"\ufe0f-parallelizing-external-api-calls-with-threads",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"\ufe0f-parallelizing-external-api-calls-with-threads",children:"\u2699\ufe0f Parallelizing External API Calls with Threads"}),"\n",(0,s.jsx)(r.p,{children:"Reduce overall latency by launching multiple external requests concurrently within your controller. Use Ruby threads and ensure proper exception handling and thread.join to synchronize results before rendering."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"class DashboardController < ApplicationController\n  def show\n    results = {}\n\n    threads = {\n      sales: Thread.new { results[:sales] = SalesApi.fetch_stats },\n      users: Thread.new { results[:users] = UserApi.fetch_overview }\n    }\n\n    threads.each { |_k, t| t.join }\n\n    render json: results\n  end\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>i});var t=n(36672);const s={},a=t.createContext(s);function l(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);