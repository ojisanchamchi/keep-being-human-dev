"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76195],{16665:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/versioning/middle/versioning_header","title":"versioning_header","description":"\ud83d\udee0\ufe0f Versioning via Custom Request Headers","source":"@site/docs/rails/versioning/middle/versioning_header.md","sourceDirName":"rails/versioning/middle","slug":"/rails/versioning/middle/versioning_header","permalink":"/keep-being-human-dev/docs/rails/versioning/middle/versioning_header","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/versioning/middle/versioning_header.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"versioned_autoload_paths","permalink":"/keep-being-human-dev/docs/rails/versioning/expert/versioned_autoload_paths"},"next":{"title":"versioning_namespaces","permalink":"/keep-being-human-dev/docs/rails/versioning/middle/versioning_namespaces"}}');var r=s(23420),o=s(65404);const t={},a=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Versioning via Custom Request Headers",id:"\ufe0f-versioning-via-custom-request-headers",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-versioning-via-custom-request-headers",children:"\ud83d\udee0\ufe0f Versioning via Custom Request Headers"}),"\n",(0,r.jsx)(n.p,{children:"Using headers lets you keep routes clean and change versions dynamically without URL changes. Clients specify their desired API version in a header, and you switch controllers accordingly."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/api/base_controller.rb\nclass Api::BaseController < ActionController::API\n  before_action :set_version_module\n\n  private\n\n  def set_version_module\n    version = request.headers['Accept-Version'] || 'v1'\n    self.class.module_eval { include \"Api::#{version.camelize}::Respondable\" }\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure clients send ",(0,r.jsx)(n.code,{children:"Accept-Version: v2"})," to hit V2 logic. You can fall back to a default if the header is missing."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(36672);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);