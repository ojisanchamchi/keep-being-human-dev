"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57024],{10800:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"gems/ransack/expert/postgres_full_text_search_predicate","title":"postgres_full_text_search_predicate","description":"\ud83d\udd0d Implement Full-Text Search Predicate with Postgres","source":"@site/docs/gems/ransack/expert/postgres_full_text_search_predicate.md","sourceDirName":"gems/ransack/expert","slug":"/gems/ransack/expert/postgres_full_text_search_predicate","permalink":"/keep-being-human-dev/docs/gems/ransack/expert/postgres_full_text_search_predicate","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/expert/postgres_full_text_search_predicate.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_whitelisting_ransackable_scopes","permalink":"/keep-being-human-dev/docs/gems/ransack/expert/dynamic_whitelisting_ransackable_scopes"},"next":{"title":"ransack_association_search","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_association_search"}}');var n=s(23420),a=s(65404);const c={},i=void 0,o={},l=[{value:"\ud83d\udd0d Implement Full-Text Search Predicate with Postgres",id:"-implement-full-text-search-predicate-with-postgres",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-implement-full-text-search-predicate-with-postgres",children:"\ud83d\udd0d Implement Full-Text Search Predicate with Postgres"}),"\n",(0,n.jsxs)(t.p,{children:["Leverage Postgres full-text search to deliver fast, ranked results directly through Ransack by defining a custom ",(0,n.jsx)(t.code,{children:":fts"})," predicate. This approach uses Postgres\u2019 ",(0,n.jsx)(t.code,{children:"to_tsvector"})," and ",(0,n.jsx)(t.code,{children:"plainto_tsquery"})," functions under the hood, allowing you to search across multiple columns efficiently."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/ransack.rb\nRansack.configure do |config|\n  config.add_predicate name: :fts,\n                        arel_predicate: :matches,\n                        formatter: proc { |v|\n                          Arel.sql(\n                            \"to_tsvector('english', users.title || ' ' || users.body) @@ plainto_tsquery('english', #{ActiveRecord::Base.connection.quote(v)})\"\n                          )\n                        },\n                        validator: proc { |v| v.present? },\n                        type: :string\nend\n"})}),"\n",(0,n.jsx)(t.p,{children:"Now you can run:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"Article.ransack(fts: 'full text search').result\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>i});var r=s(36672);const n={},a=r.createContext(n);function c(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);