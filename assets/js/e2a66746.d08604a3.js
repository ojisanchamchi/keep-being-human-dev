"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78168],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var a=n(36672);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},68436:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gems/image_processing/advanced/persistent_variant_cache","title":"persistent_variant_cache","description":"\ud83d\udcbe Persistent Variant Cache","source":"@site/docs/gems/image_processing/advanced/persistent_variant_cache.md","sourceDirName":"gems/image_processing/advanced","slug":"/gems/image_processing/advanced/persistent_variant_cache","permalink":"/keep-being-human-dev/docs/gems/image_processing/advanced/persistent_variant_cache","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/image_processing/advanced/persistent_variant_cache.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_watermark_processor","permalink":"/keep-being-human-dev/docs/gems/image_processing/advanced/custom_watermark_processor"},"next":{"title":"streaming_variants","permalink":"/keep-being-human-dev/docs/gems/image_processing/advanced/streaming_variants"}}');var s=n(23420),i=n(65404);const r={},c=void 0,o={},d=[{value:"\ud83d\udcbe Persistent Variant Cache",id:"-persistent-variant-cache",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-persistent-variant-cache",children:"\ud83d\udcbe Persistent Variant Cache"}),"\n",(0,s.jsx)(t.p,{children:"Recomputing the same variant on each request wastes CPU. Use a deterministic cache directory keyed by processing parameters so you only touch disk when parameters change. This pattern works outside ActiveStorage or to complement its built\u2010in caching."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'digest'\n\ndef cached_variant(source_path, width:, height:, format: 'jpg')\n  key = Digest::SHA1.hexdigest([source_path, width, height, format].join(':'))\n  cache_dir = Rails.root.join('tmp', 'image_processing_cache')\n  FileUtils.mkdir_p(cache_dir)\n  cached_path = cache_dir.join(\"#{key}.#{format}\")\n\n  return cached_path if File.exist?(cached_path)\n\n  ImageProcessing::MiniMagick\n    .source(source_path)\n    .resize_to_limit(width, height)\n    .convert(format)\n    .call(destination: cached_path.to_s)\n\n  cached_path\nend\n\n# Usage\nvariant_path = cached_variant(\n  user.avatar.path,\n  width: 800,\n  height: 600,\n  format: 'png'\n)\nsend_file variant_path, type: 'image/png', disposition: 'inline'\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);