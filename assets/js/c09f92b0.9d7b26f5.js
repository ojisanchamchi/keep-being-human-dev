"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41876],{3549:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/sessions_and_cookies/middle/rolling_session_expiration","title":"rolling_session_expiration","description":"\u23f0 Configure Rolling Session Expiration","source":"@site/docs/rails/sessions_and_cookies/middle/rolling_session_expiration.md","sourceDirName":"rails/sessions_and_cookies/middle","slug":"/rails/sessions_and_cookies/middle/rolling_session_expiration","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/middle/rolling_session_expiration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/sessions_and_cookies/middle/rolling_session_expiration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"session_secret_rotation","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/session_secret_rotation"},"next":{"title":"store_cart_in_session","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/middle/store_cart_in_session"}}');var o=n(23420),r=n(65404);const t={},a=void 0,l={},c=[{value:"\u23f0 Configure Rolling Session Expiration",id:"-configure-rolling-session-expiration",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"-configure-rolling-session-expiration",children:"\u23f0 Configure Rolling Session Expiration"}),"\n",(0,o.jsxs)(s.p,{children:["To improve security, implement a rolling session expiration by updating the expiry time on each request. Use a controller callback to reset ",(0,o.jsx)(s.code,{children:"session[:expires_at]"}),", and wipe the session when it has expired. This ensures active users stay logged in, while idle sessions automatically expire."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:'class ApplicationController < ActionController::Base\n  before_action :refresh_session_expiry\n\n  private\n\n  def refresh_session_expiry\n    session[:expires_at] ||= 30.minutes.from_now\n    if Time.current > session[:expires_at]\n      reset_session\n      redirect_to new_session_path, alert: "Your session has expired."\n    else\n      # Extend expiration on activity\n      session[:expires_at] = 30.minutes.from_now\n    end\n  end\nend\n'})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>a});var i=n(36672);const o={},r=i.createContext(o);function t(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);