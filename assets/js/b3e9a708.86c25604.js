"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82592],{13529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/metaprogramming/beginner/dynamic_send","title":"dynamic_send","description":"\ud83d\ude80 Dynamic Method Invocation with send","source":"@site/docs/ruby/metaprogramming/beginner/dynamic_send.md","sourceDirName":"ruby/metaprogramming/beginner","slug":"/ruby/metaprogramming/beginner/dynamic_send","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/dynamic_send","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/beginner/dynamic_send.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"define_singleton_method_usage","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/define_singleton_method_usage"},"next":{"title":"eval_usage","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/eval_usage"}}');var i=t(23420),o=t(65404);const r={},s=void 0,d={},c=[{value:"\ud83d\ude80 Dynamic Method Invocation with <code>send</code>",id:"-dynamic-method-invocation-with-send",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-dynamic-method-invocation-with-send",children:["\ud83d\ude80 Dynamic Method Invocation with ",(0,i.jsx)(n.code,{children:"send"})]}),"\n",(0,i.jsxs)(n.p,{children:["Ruby\u2019s ",(0,i.jsx)(n.code,{children:"send"})," method allows you to call any method by name (symbol or string) at runtime. It\u2019s helpful for delegating or mapping user input to internal methods safely. Use ",(0,i.jsx)(n.code,{children:"public_send"})," to respect visibility rules if you want to avoid invoking private methods."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class Calculator\n  def add(a, b); a + b; end\n  def multiply(a, b); a * b; end\nend\n\ncalc = Calculator.new\noperation = :add\nputs calc.send(operation, 2, 3)         # => 5\n# Or safer:\nputs calc.public_send(:multiply, 4, 5)   # => 20\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(36672);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);