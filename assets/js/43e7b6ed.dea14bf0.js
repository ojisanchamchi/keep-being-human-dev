"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2603],{54455:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/xml/expert/nokogiri_builder_namespaces_schema","title":"nokogiri_builder_namespaces_schema","description":"\ud83d\udd27 Build Namespaced XML with Nokogiri::Builder and Schema Compliance","source":"@site/docs/ruby/xml/expert/nokogiri_builder_namespaces_schema.md","sourceDirName":"ruby/xml/expert","slug":"/ruby/xml/expert/nokogiri_builder_namespaces_schema","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_builder_namespaces_schema","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/xml/expert/nokogiri_builder_namespaces_schema.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_sax_handler_performance","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/custom_sax_handler_performance"},"next":{"title":"nokogiri_xml_reader_streaming","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_xml_reader_streaming"}}');var r=i(23420),o=i(65404);const s={},t=void 0,c={},d=[{value:"\ud83d\udd27 Build Namespaced XML with Nokogiri::XML::Builder and Schema Compliance",id:"-build-namespaced-xml-with-nokogirixmlbuilder-and-schema-compliance",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-build-namespaced-xml-with-nokogirixmlbuilder-and-schema-compliance",children:"\ud83d\udd27 Build Namespaced XML with Nokogiri::XML::Builder and Schema Compliance"}),"\n",(0,r.jsxs)(n.p,{children:["To generate complex, multi-namespace XML that must pass XSD validation, leverage ",(0,r.jsx)(n.code,{children:"Nokogiri::XML::Builder"})," and cache your schema object for reuse. This approach ensures correct prefixes, attributes, and performance when building thousands of documents per second."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'nokogiri'\n\n# Cache XSD for validation\nXSD = Nokogiri::XML::Schema(File.read('invoice_schema.xsd'))\n\ndocument = Nokogiri::XML::Builder.new(encoding: 'UTF-8') do |xml|\n  xml['inv'].Invoice('xmlns:inv' => 'http://example.com/invoice',\n                     'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance',\n                     'xsi:schemaLocation' => 'http://example.com/invoice invoice_schema.xsd') do\n    xml['inv'].Header do\n      xml['inv'].InvoiceNumber 'INV-2024-001'\n      xml['inv'].Date          Time.now.iso8601\n    end\n    xml['inv'].LineItems do\n      xml['inv'].Item(id: '1001') do\n        xml['inv'].Description 'Expert Ruby Tips Book'\n        xml['inv'].Quantity    2\n        xml['inv'].UnitPrice   '49.99'\n      end\n    end\n  end\nend.doc\n\n# Validate and raise on errors\ndiagnostics = XSD.validate(document)\nraise \"Invalid XML: #{diagnostics.map(&:message).join('; ')}\" unless diagnostics.empty?\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>t});var a=i(36672);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);