"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4799],{65404:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>c});var o=a(36672);const s={},i=o.createContext(s);function r(n){const e=o.useContext(i);return o.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(i.Provider,{value:e},n.children)}},98522:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>t,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/ransack/middle/ransack_group_or_conditions","title":"ransack_group_or_conditions","description":"\ud83d\udd00 Grouping Conditions and Using OR Predicates","source":"@site/docs/gems/ransack/middle/ransack_group_or_conditions.md","sourceDirName":"gems/ransack/middle","slug":"/gems/ransack/middle/ransack_group_or_conditions","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_group_or_conditions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/middle/ransack_group_or_conditions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ransack_association_search","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_association_search"},"next":{"title":"ransack_sort_pagination","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_sort_pagination"}}');var s=a(23420),i=a(65404);const r={},c=void 0,t={},d=[{value:"\ud83d\udd00 Grouping Conditions and Using OR Predicates",id:"-grouping-conditions-and-using-or-predicates",level:2}];function l(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"-grouping-conditions-and-using-or-predicates",children:"\ud83d\udd00 Grouping Conditions and Using OR Predicates"}),"\n",(0,s.jsxs)(e.p,{children:["Ransack allows you to group multiple conditions and combine them with OR logic using ",(0,s.jsx)(e.code,{children:"_any"})," or by manually constructing groups. This is ideal for advanced filters where you want records matching any of several criteria."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-erb",children:'<%= search_form_for @q do |f| %>\n  <%= f.label :combinator, "Match" %>\n  <%= f.select :combinator, [["All (AND)", "and"], ["Any (OR)", "or"]] %>\n\n  <div>\n    <%= f.label :name_cont, "Name contains" %>\n    <%= f.text_field :name_cont %>\n  </div>\n  <div>\n    <%= f.label :email_cont, "Email contains" %>\n    <%= f.text_field :email_cont %>\n  </div>\n\n  <%= f.submit "Search" %>\n<% end %>\n'})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ruby",children:"# In model (e.g., User)\ndef self.ransackable_attributes(auth_object = nil)\n  super + %w[combinator]\nend\n\ndef self.ransackable_scopes(auth_object = nil)\n  %i[combined_search]\nend\n\ndef self.combined_search(combinator, name_cont, email_cont)\n  scope = all\n  matcher = combinator == 'or' ? :or : :and\n  conditions = []\n  conditions << where('name ILIKE ?', \"%#{name_cont}%\") if name_cont.present?\n  conditions << where('email ILIKE ?', \"%#{email_cont}%\") if email_cont.present?\n\n  conditions.reduce { |acc, cond| acc.public_send(matcher, cond) }\nend\n"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ruby",children:"# In controller\n@q = User.ransack(params[:q]).result.extending(User)\n@users = @q.combined_search(\n  params.dig(:q, :combinator),\n  params.dig(:q, :name_cont),\n  params.dig(:q, :email_cont)\n)\n"})}),"\n",(0,s.jsx)(e.p,{children:"With this setup you let users switch between AND/OR logic dynamically and build complex grouped searches."})]})}function m(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}}}]);