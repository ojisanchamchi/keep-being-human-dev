"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73635],{21900:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"ruby/classes_and_modules/expert/included_class_macros","title":"included_class_macros","description":"\ud83e\uddec Crafting Custom Class Macros via included and class_eval","source":"@site/docs/ruby/classes_and_modules/expert/included_class_macros.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/included_class_macros","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/included_class_macros","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/included_class_macros.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"forwardable_delegation","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/forwardable_delegation"},"next":{"title":"internal_dsl_included_hook","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/internal_dsl_included_hook"}}');var d=n(23420),c=n(65404);const o={},t=void 0,l={},r=[{value:"\ud83e\uddec Crafting Custom Class Macros via <code>included</code> and <code>class_eval</code>",id:"-crafting-custom-class-macros-via-included-and-class_eval",level:2}];function i(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h2,{id:"-crafting-custom-class-macros-via-included-and-class_eval",children:["\ud83e\uddec Crafting Custom Class Macros via ",(0,d.jsx)(s.code,{children:"included"})," and ",(0,d.jsx)(s.code,{children:"class_eval"})]}),"\n",(0,d.jsxs)(s.p,{children:["Combine ",(0,d.jsx)(s.code,{children:"included"})," with ",(0,d.jsx)(s.code,{children:"class_eval"})," to define custom DSL methods on host classes. This approach powers frameworks that provide declarative APIs like ",(0,d.jsx)(s.code,{children:"validates"})," or ",(0,d.jsx)(s.code,{children:"has_many"}),"."]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ruby",children:"module ActsAsSortable\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def acts_as_sortable(field)\n      class_eval do\n        scope :sorted, -> { order(field => :asc) }\n      end\n    end\n  end\nend\n\nclass Item < ApplicationRecord\n  include ActsAsSortable\n  acts_as_sortable :position\nend\n"})}),"\n",(0,d.jsx)(s.p,{children:"This pattern cleanly injects scopes or methods based on macro arguments."})]})}function u(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(i,{...e})}):i(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>t});var a=n(36672);const d={},c=a.createContext(d);function o(e){const s=a.useContext(c);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),a.createElement(c.Provider,{value:s},e.children)}}}]);