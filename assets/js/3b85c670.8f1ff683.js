"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23379],{34480:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>i,frontMatter:()=>r,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"ruby/rspec/advanced/composable_custom_matchers","title":"composable_custom_matchers","description":"\ud83e\udde9 Composable Custom Matchers for Complex Expectations","source":"@site/docs/ruby/rspec/advanced/composable_custom_matchers.md","sourceDirName":"ruby/rspec/advanced","slug":"/ruby/rspec/advanced/composable_custom_matchers","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/composable_custom_matchers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/advanced/composable_custom_matchers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"around_hooks_time_travel_cleanup","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/around_hooks_time_travel_cleanup"},"next":{"title":"dynamic_shared_context_metadata","permalink":"/keep-being-human-dev/docs/ruby/rspec/advanced/dynamic_shared_context_metadata"}}');var o=s(23420),a=s(65404);const r={},c=void 0,d={},p=[{value:"\ud83e\udde9 Composable Custom Matchers for Complex Expectations",id:"-composable-custom-matchers-for-complex-expectations",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-composable-custom-matchers-for-complex-expectations",children:"\ud83e\udde9 Composable Custom Matchers for Complex Expectations"}),"\n",(0,o.jsx)(t.p,{children:"Build reusable, chainable matchers to express multi-step assertions clearly. Custom matchers can wrap existing ones and accept parameters, making your specs more descriptive and reducing boilerplate."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# spec/support/matchers/have_json_attributes.rb\nRSpec::Matchers.define :have_json_attributes do |**expected|\n  match do |response|\n    json = JSON.parse(response.body)\n    expected.all? { |k, v| json[k.to_s] == v }\n  end\n\n  chain :with_status do |status|\n    @status = status\n  end\n\n  match_when_negated do |response|;\n    false\n  end\n\n  failure_message do |response|\n    \"expected #{response.body} to have #{expected} with status #{@status}\"\n  end\nend\n\n# spec/controllers/posts_controller_spec.rb\ndescribe PostsController do\n  describe 'GET #show' do\n    before { get :show, params: {id: 1} }\n\n    it 'returns correct JSON and status' do\n      expect(response).to have_json_attributes(id: 1, title: 'Hello').with_status(200)\n    end\n  end\nend\n"})})]})}function i(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(36672);const o={},a=n.createContext(o);function r(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);