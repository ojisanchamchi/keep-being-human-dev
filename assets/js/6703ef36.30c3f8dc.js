"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50743],{50249:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/debugging/expert/tracepoint_active_record_sql","title":"tracepoint_active_record_sql","description":"\ud83d\udee0 TracePoint for Live SQL Inspection","source":"@site/docs/rails/debugging/expert/tracepoint_active_record_sql.md","sourceDirName":"rails/debugging/expert","slug":"/rails/debugging/expert/tracepoint_active_record_sql","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/tracepoint_active_record_sql","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/debugging/expert/tracepoint_active_record_sql.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"remote_pry_docker_debug","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/remote_pry_docker_debug"},"next":{"title":"active_record_explain_queries","permalink":"/keep-being-human-dev/docs/rails/debugging/middle/active_record_explain_queries"}}');var r=t(23420),o=t(65404);const a={},c=void 0,s={},d=[{value:"\ud83d\udee0 TracePoint for Live SQL Inspection",id:"-tracepoint-for-live-sql-inspection",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-tracepoint-for-live-sql-inspection",children:"\ud83d\udee0 TracePoint for Live SQL Inspection"}),"\n",(0,r.jsxs)(n.p,{children:["TracePoint enables you to hook deeply into the Ruby VM and inspect every call to your database adapter. By listening to the ",(0,r.jsx)(n.code,{children:":call"})," event on ",(0,r.jsx)(n.code,{children:"AbstractAdapter#execute"}),", you can live-log, filter, or even pause for inspection whenever a query runs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# config/initializers/sql_trace.rb\nTracePoint.new(:call) do |tp|\n  if tp.defined_class == ActiveRecord::ConnectionAdapters::AbstractAdapter && tp.method_id == :execute\n    sql, name = tp.binding.local_variable_get(:sql), tp.binding.local_variable_get(:name)\n    Rails.logger.debug("[TRACE_SQL] ")\n    Rails.logger.debug(sql)\n    # Pause into byebug if you see an N+1 risk\n    binding.break if sql =~ /SELECT.*FROM.*WHERE.*IN \\(.*\\)/\n  end\nend.enable\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After restarting, every SQL execution will pass through this TracePoint. You can inspect ",(0,r.jsx)(n.code,{children:"tp.binding"})," to dive into variables, or conditionally pause execution with ",(0,r.jsx)(n.code,{children:"binding.break"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(36672);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);