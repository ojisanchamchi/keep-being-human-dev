"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16912],{65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var t=a(36672);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},97748:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rails/active_record_validations/advanced/database_uniqueness_enforcement","title":"database_uniqueness_enforcement","description":"\ud83d\udcbe Enforcing Uniqueness at Database Level","source":"@site/docs/rails/active_record_validations/advanced/database_uniqueness_enforcement.md","sourceDirName":"rails/active_record_validations/advanced","slug":"/rails/active_record_validations/advanced/database_uniqueness_enforcement","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/database_uniqueness_enforcement","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_validations/advanced/database_uniqueness_enforcement.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_validator_class","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/custom_validator_class"},"next":{"title":"dynamic_validations","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/dynamic_validations"}}');var s=a(23420),i=a(65404);const r={},c=void 0,d={},o=[{value:"\ud83d\udcbe Enforcing Uniqueness at Database Level",id:"-enforcing-uniqueness-at-database-level",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-enforcing-uniqueness-at-database-level",children:"\ud83d\udcbe Enforcing Uniqueness at Database Level"}),"\n",(0,s.jsxs)(n.p,{children:["Model validations can race; always back them with a unique DB index. Wrap creates in a transaction and rescue ",(0,s.jsx)(n.code,{children:"ActiveRecord::RecordNotUnique"})," to handle concurrent inserts gracefully."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# db/migrate/XXXXXXXXXXXXXX_add_unique_index_to_users_email.rb\ntclass AddUniqueIndexToUsersEmail < ActiveRecord::Migration[6.1]\n  def change\n    add_index :users, :email, unique: true\n  end\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  validates :email, uniqueness: true\nend\n\n# Usage\nbegin\n  User.create!(email: 'dup@example.com')\nrescue ActiveRecord::RecordNotUnique => e\n  # handle duplicate entry\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);