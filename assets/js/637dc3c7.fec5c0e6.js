"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20967],{65069:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"ruby/blocks/expert/context_switch_with_instance_exec","title":"context_switch_with_instance_exec","description":"\u2699\ufe0f Context Switching with instance_exec","source":"@site/docs/ruby/blocks/expert/context_switch_with_instance_exec.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/context_switch_with_instance_exec","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/context_switch_with_instance_exec","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/context_switch_with_instance_exec.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"capture_and_rebind_block_context","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/capture_and_rebind_block_context"},"next":{"title":"curry_and_compose_procs","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/curry_and_compose_procs"}}');var s=n(23420),i=n(65404);const o={},r=void 0,a={},u=[{value:"\u2699\ufe0f Context Switching with instance_exec",id:"\ufe0f-context-switching-with-instance_exec",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-context-switching-with-instance_exec",children:"\u2699\ufe0f Context Switching with instance_exec"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"instance_exec"})," runs a block under a given object\u2019s context, granting access to private methods and internal state. This is invaluable for metaprogramming, test doubles, and injecting behavior into sealed classes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"class DynamicContext\n  def initialize(value)\n    @value = value\n  end\n\n  private\n\n  def compute\n    @value * 3\n  end\nend\n\nblock = -> { compute + @value }\ncontext = DynamicContext.new(5)\nresult = context.instance_exec(&block) # => 20\nputs result\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var c=n(36672);const s={},i=c.createContext(s);function o(e){const t=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),c.createElement(i.Provider,{value:t},e.children)}}}]);