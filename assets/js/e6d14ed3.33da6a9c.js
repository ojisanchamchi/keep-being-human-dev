"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22685],{65404:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>i});var r=a(36672);const s={},t=r.createContext(s);function d(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(t.Provider,{value:n},e.children)}},77828:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/yaml/advanced/streaming_yaml_parsing","title":"streaming_yaml_parsing","description":"\ud83d\udd04 Stream Large YAML with Psych::Parser and Handler","source":"@site/docs/ruby/yaml/advanced/streaming_yaml_parsing.md","sourceDirName":"ruby/yaml/advanced","slug":"/ruby/yaml/advanced/streaming_yaml_parsing","permalink":"/keep-being-human-dev/docs/ruby/yaml/advanced/streaming_yaml_parsing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/yaml/advanced/streaming_yaml_parsing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"secure_yaml_safe_load","permalink":"/keep-being-human-dev/docs/ruby/yaml/advanced/secure_yaml_safe_load"},"next":{"title":"dump_to_yaml","permalink":"/keep-being-human-dev/docs/ruby/yaml/beginner/dump_to_yaml"}}');var s=a(23420),t=a(65404);const d={},i=void 0,c={},l=[{value:"\ud83d\udd04 Stream Large YAML with Psych::Parser and Handler",id:"-stream-large-yaml-with-psychparser-and-handler",level:2}];function o(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-stream-large-yaml-with-psychparser-and-handler",children:"\ud83d\udd04 Stream Large YAML with Psych::Parser and Handler"}),"\n",(0,s.jsxs)(n.p,{children:["When working with huge or streaming YAML documents, loading everything at once can blow up memory. By subclassing ",(0,s.jsx)(n.code,{children:"Psych::Handler"})," and feeding chunks to ",(0,s.jsx)(n.code,{children:"Psych::Parser"}),", you can react to each event (mapping, sequence, scalar) as it happens and discard data you don\u2019t need."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'yaml'\nrequire 'psych'\n\nclass MyHandler < Psych::Handler\n  def initialize\n    @path = []\n  end\n\n  def start_mapping(anchor, tag, implicit, style)\n    @path.push({})\n  end\n\n  def scalar(value, anchor, tag, plain, quoted, style)\n    # Called for every scalar; you can filter by @path state\n    puts \"Scalar at #{@path.size}: #{value.inspect}\"\n  end\n\n  def end_mapping\n    finished = @path.pop\n    # Process or save the 'finished' mapping if needed\n  end\nend\n\nhandler = MyHandler.new\nparser  = Psych::Parser.new(handler)\n\nFile.open('huge.yml', 'r') do |f|\n  f.each_line { |line| parser.parse(line) }\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);