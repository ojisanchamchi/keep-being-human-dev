"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72647],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(36672);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}},80378:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"javascript/stimulus/expert/state_machine","title":"state_machine","description":"\ud83c\udf9b\ufe0f Embed a State Machine in a Controller","source":"@site/docs/javascript/stimulus/expert/state_machine.md","sourceDirName":"javascript/stimulus/expert","slug":"/javascript/stimulus/expert/state_machine","permalink":"/keep-being-human-dev/docs/javascript/stimulus/expert/state_machine","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/stimulus/expert/state_machine.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"server_sent_events","permalink":"/keep-being-human-dev/docs/javascript/stimulus/expert/server_sent_events"},"next":{"title":"threejs_integration","permalink":"/keep-being-human-dev/docs/javascript/stimulus/expert/threejs_integration"}}');var s=n(23420),i=n(65404);const r={},o=void 0,c={},l=[{value:"\ud83c\udf9b\ufe0f Embed a State Machine in a Controller",id:"\ufe0f-embed-a-state-machine-in-a-controller",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-embed-a-state-machine-in-a-controller",children:"\ud83c\udf9b\ufe0f Embed a State Machine in a Controller"}),"\n",(0,s.jsxs)(t.p,{children:["Implement a finite state machine directly inside a Stimulus controller for complex UI workflows. Use a library like XState or a minimal custom machine to manage transitions in ",(0,s.jsx)(t.code,{children:"@action"})," handlers."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { Controller } from \"@hotwired/stimulus\"\nimport { createMachine, interpret } from \"xstate\"\n\nexport default class extends Controller {\n  initialize() {\n    const toggleMachine = createMachine({\n      id: 'toggle',\n      initial: 'off',\n      states: {\n        off: { on: { TOGGLE: 'on' } },\n        on: { on: { TOGGLE: 'off' } }\n      }\n    })\n    this.service = interpret(toggleMachine)\n      .onTransition(state => this.updateUI(state.value))\n      .start()\n  }\n\n  updateUI(state) {\n    this.element.dataset.state = state\n  }\n\n  onToggle() {\n    this.service.send('TOGGLE')\n  }\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);