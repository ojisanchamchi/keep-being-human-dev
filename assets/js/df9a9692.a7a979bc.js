"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85243],{65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>i});var s=a(36672);const t={},r=s.createContext(t);function c(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},68197:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"gems/ransack/expert/dynamic_whitelisting_ransackable_scopes","title":"dynamic_whitelisting_ransackable_scopes","description":"\ud83d\udd12 Secure Dynamic Scopes and Attributes with Ransackable Whitelisting","source":"@site/docs/gems/ransack/expert/dynamic_whitelisting_ransackable_scopes.md","sourceDirName":"gems/ransack/expert","slug":"/gems/ransack/expert/dynamic_whitelisting_ransackable_scopes","permalink":"/keep-being-human-dev/docs/gems/ransack/expert/dynamic_whitelisting_ransackable_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/expert/dynamic_whitelisting_ransackable_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"complex_arel_ransacker_full_name","permalink":"/keep-being-human-dev/docs/gems/ransack/expert/complex_arel_ransacker_full_name"},"next":{"title":"postgres_full_text_search_predicate","permalink":"/keep-being-human-dev/docs/gems/ransack/expert/postgres_full_text_search_predicate"}}');var t=a(23420),r=a(65404);const c={},i=void 0,o={},l=[{value:"\ud83d\udd12 Secure Dynamic Scopes and Attributes with Ransackable Whitelisting",id:"-secure-dynamic-scopes-and-attributes-with-ransackable-whitelisting",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-secure-dynamic-scopes-and-attributes-with-ransackable-whitelisting",children:"\ud83d\udd12 Secure Dynamic Scopes and Attributes with Ransackable Whitelisting"}),"\n",(0,t.jsxs)(n.p,{children:["Protect your search surfaces by dynamically whitelisting only safe attributes and scopes based on the current user\u2019s role. Override ",(0,t.jsx)(n.code,{children:"ransackable_attributes"})," and ",(0,t.jsx)(n.code,{children:"ransackable_scopes"})," to prevent injection of unintended filters in multi-tenant or admin contexts."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/application_record.rb\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  def self.ransackable_attributes(auth_object = nil)\n    base = %w[id name created_at]\n    # allow email and role filtering only for admins\n    base += %w[email role] if auth_object&.admin?\n    base\n  end\n\n  def self.ransackable_scopes(auth_object = nil)\n    scopes = []\n    # only superadmins get to scope by organization\n    scopes << :by_organization if auth_object&.superadmin?\n    scopes\n  end\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  scope :by_organization, ->(org_id) { where(organization_id: org_id) }\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now in your controller you can pass ",(0,t.jsx)(n.code,{children:"current_user"})," as the auth object to lock down filters:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"@q = User.ransack(params[:q], auth_object: current_user)\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);