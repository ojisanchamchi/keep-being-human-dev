"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88160],{65404:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>u});var t=n(36672);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function u(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}},80612:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>u,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"gems/factory_bot_rails/middle/unique_sequences","title":"unique_sequences","description":"\ud83d\ude80 Leverage Sequences for Unique Attributes","source":"@site/docs/gems/factory_bot_rails/middle/unique_sequences.md","sourceDirName":"gems/factory_bot_rails/middle","slug":"/gems/factory_bot_rails/middle/unique_sequences","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/unique_sequences","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/middle/unique_sequences.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_strategies","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/association_strategies"},"next":{"title":"use_traits","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/use_traits"}}');var r=n(23420),i=n(65404);const a={},u=void 0,o={},c=[{value:"\ud83d\ude80 Leverage Sequences for Unique Attributes",id:"-leverage-sequences-for-unique-attributes",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"-leverage-sequences-for-unique-attributes",children:"\ud83d\ude80 Leverage Sequences for Unique Attributes"}),"\n",(0,r.jsx)(s.p,{children:"Sequences are perfect for generating unique values in attributes like emails or identifiers. They increment on each use, ensuring you never hit a uniqueness validation error in tests."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:'# spec/factories/users.rb\nFactoryBot.define do\n  factory :user do\n    sequence(:email) { |n| "user#{n}@example.com" }\n    password { "password123" }\n  end\nend\n\n# Usage in specs\nuser1 = create(:user)         # email => "user1@example.com"\nuser2 = create(:user)         # email => "user2@example.com"\n'})})]})}function l(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);