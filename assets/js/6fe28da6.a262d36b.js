"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15079],{65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var t=a(36672);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},86376:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/hashes/advanced/hash_to_proc","title":"hash_to_proc","description":"\ud83d\udd17 Converting a Hash to a Proc for Flexible Calls","source":"@site/docs/ruby/hashes/advanced/hash_to_proc.md","sourceDirName":"ruby/hashes/advanced","slug":"/ruby/hashes/advanced/hash_to_proc","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/hash_to_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/advanced/hash_to_proc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hash_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/hash_pattern_matching"},"next":{"title":"indifferent_access","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/indifferent_access"}}');var s=a(23420),o=a(65404);const r={},c=void 0,i={},d=[{value:"\ud83d\udd17 Converting a Hash to a Proc for Flexible Calls",id:"-converting-a-hash-to-a-proc-for-flexible-calls",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-converting-a-hash-to-a-proc-for-flexible-calls",children:"\ud83d\udd17 Converting a Hash to a Proc for Flexible Calls"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby 2.6+ lets you use ",(0,s.jsx)(n.code,{children:"Hash#to_proc"})," to expand key/value pairs into method arguments. This is great for injecting defaults or constructing keyword args dynamically."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'def greet(name:, greeting:)\n  "#{greeting}, #{name}!"\nend\n\noptions = { name: \'Sam\', greeting: \'Hello\' }\n\n# Expand options via to_proc\n[options].map(&Hash.to_proc(:greet))\n# => ["Hello, Sam!"]\n\n# Or with kwargs directly\ngreet(**options)\n# => "Hello, Sam!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);