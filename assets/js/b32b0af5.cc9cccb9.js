"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15160],{11206:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>m});const o=JSON.parse('{"id":"gems/rspec/expert/custom_composable_matchers","title":"custom_composable_matchers","description":"\ud83e\udde9 Define Composable Custom Matchers","source":"@site/docs/gems/rspec/expert/custom_composable_matchers.md","sourceDirName":"gems/rspec/expert","slug":"/gems/rspec/expert/custom_composable_matchers","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/custom_composable_matchers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/expert/custom_composable_matchers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_const_mocking","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/advanced_const_mocking"},"next":{"title":"custom_formatters","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/custom_formatters"}}');var c=t(23420),n=t(65404);const r={},a=void 0,i={},m=[{value:"\ud83e\udde9 Define Composable Custom Matchers",id:"-define-composable-custom-matchers",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(s.h2,{id:"-define-composable-custom-matchers",children:"\ud83e\udde9 Define Composable Custom Matchers"}),"\n",(0,c.jsx)(s.p,{children:"Creating your own matchers with RSpec::Matchers.define gives you full control over failure messages, chainable methods, and optimized matching logic. Use this approach to encapsulate repeated domain-specific assertions into reusable, composable building blocks."}),"\n",(0,c.jsx)(s.pre,{children:(0,c.jsx)(s.code,{className:"language-ruby",children:'# spec/support/matchers/have_valid_invoice.rb\nRSpec::Matchers.define :have_valid_invoice do\n  chain(:for_customer) do |customer|\n    @customer = customer\n  end\n\n  match do |invoice|\n    invoice.customer == @customer && invoice.items.all?(&:valid?)\n  end\n\n  failure_message do |invoice|\n    "expected invoice ##{invoice.id} to be valid for customer #{@customer.id}, " \\\n    "but got errors: #{invoice.errors.full_messages.join(\', \')}"\n  end\nend\n\n# Usage in spec\nexpect(invoice).to have_valid_invoice.for_customer(customer)\n'})})]})}function p(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,c.jsx)(s,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var o=t(36672);const c={},n=o.createContext(c);function r(e){const s=o.useContext(n);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),o.createElement(n.Provider,{value:s},e.children)}}}]);