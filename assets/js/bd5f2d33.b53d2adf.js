"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13560],{65404:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>l});var c=n(36672);const i={},r=c.createContext(i);function t(e){const a=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),c.createElement(r.Provider,{value:a},e.children)}},71629:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"rails/active_record_callbacks/expert/dynamic_callback_definitions","title":"dynamic_callback_definitions","description":"\u2728 Dynamically Defining Callbacks via Metaprogramming","source":"@site/docs/rails/active_record_callbacks/expert/dynamic_callback_definitions.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/dynamic_callback_definitions","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/dynamic_callback_definitions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/dynamic_callback_definitions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"conditional_chain_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/conditional_chain_callbacks"},"next":{"title":"memory_leak_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/memory_leak_callbacks"}}');var i=n(23420),r=n(65404);const t={},l=void 0,s={},o=[{value:"\u2728 Dynamically Defining Callbacks via Metaprogramming",id:"-dynamically-defining-callbacks-via-metaprogramming",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h2,{id:"-dynamically-defining-callbacks-via-metaprogramming",children:"\u2728 Dynamically Defining Callbacks via Metaprogramming"}),"\n",(0,i.jsx)(a.p,{children:"For models that share similar callback sequences with slight variations, define callbacks in a metaprogrammed loop. This centralizes logic and reduces boilerplate."}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-ruby",children:'module Trackable\n  def self.included(base)\n    base.class_eval do\n      %i[create update destroy].each do |action|\n        send("after_#{action}") do\n          TrackingService.track(self, action)\n        end\n      end\n    end\n  end\nend\n\nclass Article < ApplicationRecord\n  include Trackable\nend\n'})}),"\n",(0,i.jsxs)(a.p,{children:["This approach generates ",(0,i.jsx)(a.code,{children:"after_create"}),", ",(0,i.jsx)(a.code,{children:"after_update"}),", and ",(0,i.jsx)(a.code,{children:"after_destroy"})," callbacks automatically, ensuring consistent behavior across models."]})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);