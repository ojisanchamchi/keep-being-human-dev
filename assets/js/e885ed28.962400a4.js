"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48236],{65404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var t=s(36672);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}},97671:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/metaprogramming/expert/advanced_method_missing_respond_to","title":"advanced_method_missing_respond_to","description":"\ud83d\udc8e Advanced methodmissing with respondto_missing?","source":"@site/docs/ruby/metaprogramming/expert/advanced_method_missing_respond_to.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/advanced_method_missing_respond_to","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/advanced_method_missing_respond_to","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/advanced_method_missing_respond_to.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"simple_dsl_blocks","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/simple_dsl_blocks"},"next":{"title":"chainable_dsl_with_lambdas","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/chainable_dsl_with_lambdas"}}');var i=s(23420),o=s(65404);const r={},d=void 0,a={},m=[{value:"\ud83d\udc8e Advanced method_missing with respond_to_missing?",id:"-advanced-method_missing-with-respond_to_missing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-advanced-method_missing-with-respond_to_missing",children:"\ud83d\udc8e Advanced method_missing with respond_to_missing?"}),"\n",(0,i.jsxs)(n.p,{children:["Combine ",(0,i.jsx)(n.code,{children:"method_missing"})," and ",(0,i.jsx)(n.code,{children:"respond_to_missing?"})," to create dynamic dispatchers while preserving introspection. Always override ",(0,i.jsx)(n.code,{children:"respond_to_missing?"})," to reflect the capabilities your ",(0,i.jsx)(n.code,{children:"method_missing"})," supports."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class FlexibleHash\n  def initialize\n    @data = {}\n  end\n\n  def method_missing(name, *args)\n    key = name.to_s.gsub(/=$/, '').to_sym\n    if name.to_s.end_with?('=')\n      @data[key] = args.first\n    elsif @data.key?(key)\n      @data[key]\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    key = name.to_s.sub(/=$/, '').to_sym\n    @data.key?(key) || super\n  end\nend\n\nh = FlexibleHash.new\nh.foo = 'bar'\nputs h.foo       # => \"bar\"\nputs h.respond_to?(:foo)  # => true\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);