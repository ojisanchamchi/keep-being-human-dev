"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58748],{65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var d=s(36672);const o={},a=d.createContext(o);function t(e){const n=d.useContext(a);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),d.createElement(a.Provider,{value:n},e.children)}},98424:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>r,frontMatter:()=>t,metadata:()=>d,toc:()=>u});const d=JSON.parse('{"id":"ruby/classes_and_modules/advanced/self_included_hook","title":"self_included_hook","description":"\u2699\ufe0f Using included Hook to Extend Class Methods","source":"@site/docs/ruby/classes_and_modules/advanced/self_included_hook.md","sourceDirName":"ruby/classes_and_modules/advanced","slug":"/ruby/classes_and_modules/advanced/self_included_hook","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/self_included_hook","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/advanced/self_included_hook.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prepend_vs_include","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/prepend_vs_include"},"next":{"title":"using_refinements","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/using_refinements"}}');var o=s(23420),a=s(65404);const t={},c=void 0,l={},u=[{value:"\u2699\ufe0f Using <code>included</code> Hook to Extend Class Methods",id:"\ufe0f-using-included-hook-to-extend-class-methods",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"\ufe0f-using-included-hook-to-extend-class-methods",children:["\u2699\ufe0f Using ",(0,o.jsx)(n.code,{children:"included"})," Hook to Extend Class Methods"]}),"\n",(0,o.jsxs)(n.p,{children:["Modules can automatically add both instance and class methods to classes on inclusion by defining ",(0,o.jsx)(n.code,{children:"self.included"}),". This lets you group related behaviors in one place."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'module Auditable\n  def self.included(base)\n    base.extend(ClassMethods)\n  end\n\n  module ClassMethods\n    def audit_logs\n      @logs ||= []\n    end\n  end\n\n  def log_change(msg)\n    self.class.audit_logs << msg\n  end\nend\n\nclass User\n  include Auditable\nend\n\nUser.new.log_change("created")\np User.audit_logs # => ["created"]\n'})})]})}function r(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}}}]);