"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73382],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(36672);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},87951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/strings/middle/nested_interpolation","title":"nested_interpolation","description":"\ud83c\udfaf Use Nested Interpolation for Dynamic Values","source":"@site/docs/ruby/strings/middle/nested_interpolation.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/nested_interpolation","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/nested_interpolation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/nested_interpolation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mutable_string_concatenation","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/mutable_string_concatenation"},"next":{"title":"percent_string_literals","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/percent_string_literals"}}');var i=t(23420),r=t(65404);const o={},a=void 0,d={},l=[{value:"\ud83c\udfaf Use Nested Interpolation for Dynamic Values",id:"-use-nested-interpolation-for-dynamic-values",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-use-nested-interpolation-for-dynamic-values",children:"\ud83c\udfaf Use Nested Interpolation for Dynamic Values"}),"\n",(0,i.jsx)(n.p,{children:"Nested interpolation lets you embed method calls or complex expressions directly into strings for clarity and conciseness. This approach avoids manual concatenation and ensures values are evaluated at runtime. It\u2019s especially handy when you need formatted dates, upcased names, or computed values inline."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'name = "Alice"\ngreeting = "Hello, #{name.upcase}! Today is #{Time.now.strftime(\'%A\')}"\nputs greeting\n# => "Hello, ALICE! Today is Monday"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);