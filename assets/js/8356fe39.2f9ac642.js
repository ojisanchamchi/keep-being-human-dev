"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81722],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(36672);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},99246:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/yaml/advanced/custom_yaml_serialization","title":"custom_yaml_serialization","description":"\ud83e\udde9 Custom Object Serialization with Psych Tags","source":"@site/docs/ruby/yaml/advanced/custom_yaml_serialization.md","sourceDirName":"ruby/yaml/advanced","slug":"/ruby/yaml/advanced/custom_yaml_serialization","permalink":"/keep-being-human-dev/docs/ruby/yaml/advanced/custom_yaml_serialization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/yaml/advanced/custom_yaml_serialization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parse_xml_with_namespaces","permalink":"/keep-being-human-dev/docs/ruby/xml/middle/parse_xml_with_namespaces"},"next":{"title":"secure_yaml_safe_load","permalink":"/keep-being-human-dev/docs/ruby/yaml/advanced/secure_yaml_safe_load"}}');var s=a(23420),o=a(65404);const i={},r=void 0,c={},d=[{value:"\ud83e\udde9 Custom Object Serialization with Psych Tags",id:"-custom-object-serialization-with-psych-tags",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-custom-object-serialization-with-psych-tags",children:"\ud83e\udde9 Custom Object Serialization with Psych Tags"}),"\n",(0,s.jsxs)(n.p,{children:["Psych lets you define custom YAML tags and hook into ",(0,s.jsx)(n.code,{children:"encode_with"})," and ",(0,s.jsx)(n.code,{children:"init_with"})," to control exactly how your objects are dumped and loaded. This is invaluable when you need to preserve object identity, custom metadata, or integrate with other systems expecting specific YAML structures."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'yaml'\n\nclass Person\n  attr_accessor :name, :age\n\n  # Called when dumping to YAML\n  def encode_with(coder)\n    coder.tag = '!person'\n    coder['name'] = name\n    coder['age']  = age\n  end\n\n  # Called when loading from YAML\n  def init_with(coder)\n    @name = coder['name']\n    @age  = coder['age']\n  end\nend\n\nperson = Person.new\nperson.name = 'Alice'\nperson.age  = 30\n\n# Dump with custom tag\nyaml = person.to_yaml\nputs yaml\n# => --- !person\n#    name: Alice\n#    age: 30\n\n# Load back into Person\nloaded = YAML.load(yaml)\nputs loaded.class  # => Person\nputs loaded.name   # => \"Alice\"\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);