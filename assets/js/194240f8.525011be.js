"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85177],{39683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"ruby/constants/advanced/reload_constants_remove_const","title":"reload_constants_remove_const","description":"\ud83d\udd27 Hot-Reloading Constants with remove_const and load","source":"@site/docs/ruby/constants/advanced/reload_constants_remove_const.md","sourceDirName":"ruby/constants/advanced","slug":"/ruby/constants/advanced/reload_constants_remove_const","permalink":"/keep-being-human-dev/docs/ruby/constants/advanced/reload_constants_remove_const","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/constants/advanced/reload_constants_remove_const.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_constants_via_const_set","permalink":"/keep-being-human-dev/docs/ruby/constants/advanced/dynamic_constants_via_const_set"},"next":{"title":"defining_and_accessing_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/beginner/defining_and_accessing_constants"}}');var s=t(23420),a=t(65404);const c={},d=void 0,r={},i=[{value:"\ud83d\udd27 Hot-Reloading Constants with <code>remove_const</code> and <code>load</code>",id:"-hot-reloading-constants-with-remove_const-and-load",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-hot-reloading-constants-with-remove_const-and-load",children:["\ud83d\udd27 Hot-Reloading Constants with ",(0,s.jsx)(n.code,{children:"remove_const"})," and ",(0,s.jsx)(n.code,{children:"load"})]}),"\n",(0,s.jsxs)(n.p,{children:["In development or REPL scenarios, you can unload and reload constants to pick up code changes without restarting the process. Use ",(0,s.jsx)(n.code,{children:"Module#remove_const"})," followed by ",(0,s.jsx)(n.code,{children:"load"})," to refresh a class or module definition, but beware of stale references elsewhere."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"module DataModels\n  def self.reload_model(name)\n    const_name = name.to_sym\n    remove_const(const_name) if const_defined?(const_name)\n    load \"data_models/#{name.downcase}.rb\"\n  end\nend\n\n# After editing data_models/user.rb, run:\nDataModels.reload_model('User')\n# Now DataModels::User is the updated class\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var o=t(36672);const s={},a=o.createContext(s);function c(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);