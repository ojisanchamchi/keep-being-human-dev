"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12144],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(36672);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},84191:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls","title":"dynamic_pundit_scope_with_rls","description":"\ud83d\udee1\ufe0f Leverage Pundit Scopes with Postgres Row-Level Security","source":"@site/docs/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls.md","sourceDirName":"rails/authentication_and_authorization/expert","slug":"/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"cancancan_ability_caching_preload","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/cancancan_ability_caching_preload"},"next":{"title":"graphql_jwt_pundit_integration","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration"}}');var a=n(23420),o=n(65404);const r={},s=void 0,c={},d=[{value:"\ud83d\udee1\ufe0f Leverage Pundit Scopes with Postgres Row-Level Security",id:"\ufe0f-leverage-pundit-scopes-with-postgres-row-level-security",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\ufe0f-leverage-pundit-scopes-with-postgres-row-level-security",children:"\ud83d\udee1\ufe0f Leverage Pundit Scopes with Postgres Row-Level Security"}),"\n",(0,a.jsxs)(t.p,{children:["Combining Pundit\u2019s ",(0,a.jsx)(t.code,{children:"Scope"})," objects with Postgres RLS pushes authorization logic into the database, eliminating N+1 policy checks and preventing accidental bypasses. You can define RLS policies that mirror your Pundit scopes, then use a minimal scope in Ruby to apply any dynamic filters."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"-- db/migrate/20240101000000_add_rls_to_projects.rb\nenable_extension 'pgcrypto';\n\nenable_row_level_security 'projects';\n\nCREATE POLICY user_projects_policy ON projects\n  USING (owner_id = current_setting('app.current_user_id')::uuid);\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# app/policies/project_policy.rb\nclass ProjectPolicy < ApplicationPolicy\n  class Scope < Scope\n    def resolve\n      # Set the current_user in Postgres and let RLS do the heavy lifting\n      ActiveRecord::Base.connection.execute(\n        \"SET app.current_user_id = '#{user.id}'\"\n      )\n      scope.all\n    end\n  end\nend\n"})}),"\n",(0,a.jsx)(t.p,{children:"This offloads filtering into the database, scales to millions of rows, and ensures policy constraints are enforced even in complex SQL joins or background jobs."})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);