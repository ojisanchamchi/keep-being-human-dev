"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87044],{65404:(e,r,i)=>{i.d(r,{R:()=>s,x:()=>c});var n=i(36672);const a={},t=n.createContext(a);function s(e){const r=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(t.Provider,{value:r},e.children)}},71577:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/compression/advanced/creating_tar_gz_archives","title":"creating_tar_gz_archives","description":"\ud83d\udce6 Creating Tar.gz Archives with Archive::Minitar and Zlib","source":"@site/docs/ruby/compression/advanced/creating_tar_gz_archives.md","sourceDirName":"ruby/compression/advanced","slug":"/ruby/compression/advanced/creating_tar_gz_archives","permalink":"/keep-being-human-dev/docs/ruby/compression/advanced/creating_tar_gz_archives","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/compression/advanced/creating_tar_gz_archives.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"singleton_class_methods","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/singleton_class_methods"},"next":{"title":"streaming_large_file_compression","permalink":"/keep-being-human-dev/docs/ruby/compression/advanced/streaming_large_file_compression"}}');var a=i(23420),t=i(65404);const s={},c=void 0,o={},d=[{value:"\ud83d\udce6 Creating Tar.gz Archives with Archive::Tar::Minitar and Zlib",id:"-creating-targz-archives-with-archivetarminitar-and-zlib",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-creating-targz-archives-with-archivetarminitar-and-zlib",children:"\ud83d\udce6 Creating Tar.gz Archives with Archive::Tar::Minitar and Zlib"}),"\n",(0,a.jsxs)(r.p,{children:["To bundle multiple files or directories into a single compressed archive while preserving permissions and metadata, combine ",(0,a.jsx)(r.code,{children:"Archive::Tar::Minitar"})," with ",(0,a.jsx)(r.code,{children:"Zlib::GzipWriter"}),". This allows you to stream\u2011create a ",(0,a.jsx)(r.code,{children:".tar.gz"})," with minimal disk I/O and no intermediate archive file on disk."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"require 'zlib'\nrequire 'archive/tar/minitar'\ninclude Archive::Tar\n\nsources = ['dir1', 'file2.txt', 'dir3']\noutput = 'archive_bundle.tar.gz'\n\nZlib::GzipWriter.open(output, Zlib::BEST_COMPRESSION) do |gzip|\n  Minitar::Writer.open(gzip) do |tar|\n    sources.each do |path|\n      if File.directory?(path)\n        Minitar.pack_dir(path, tar)\n      else\n        Minitar.pack_file(path, tar)\n      end\n    end\n  end\nend\n"})}),"\n",(0,a.jsxs)(r.p,{children:["To extract, reverse the process using ",(0,a.jsx)(r.code,{children:"Zlib::GzipReader"})," piped into ",(0,a.jsx)(r.code,{children:"Minitar::Reader.unpack"}),", enabling advanced Ruby apps to manage archives entirely in memory or over network streams."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);