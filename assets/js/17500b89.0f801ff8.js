"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[60247],{14328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"ruby/methods/middle/splat_and_double_splat","title":"splat_and_double_splat","description":"\ud83d\udd27 Using Splat and Double Splat for Variable Arguments","source":"@site/docs/ruby/methods/middle/splat_and_double_splat.md","sourceDirName":"ruby/methods/middle","slug":"/ruby/methods/middle/splat_and_double_splat","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/splat_and_double_splat","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/middle/splat_and_double_splat.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"public_send_vs_send","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/public_send_vs_send"},"next":{"title":"symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/symbol_to_proc"}}');var a=n(23420),o=n(65404);const r={},d=void 0,l={},u=[{value:"\ud83d\udd27 Using Splat and Double Splat for Variable Arguments",id:"-using-splat-and-double-splat-for-variable-arguments",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-using-splat-and-double-splat-for-variable-arguments",children:"\ud83d\udd27 Using Splat and Double Splat for Variable Arguments"}),"\n",(0,a.jsxs)(t.p,{children:["When you need to accept an arbitrary number of positional or keyword arguments, use the splat (",(0,a.jsx)(t.code,{children:"*args"}),") and double splat (",(0,a.jsx)(t.code,{children:"**kwargs"}),") operators. This keeps your methods flexible and forwards arguments easily to other calls."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"def log_event(event, *messages, **metadata)\n  timestamp = Time.now\n  puts \"[#{timestamp}] \" + messages.join(', ')\n  metadata.each { |key, value| puts \"#{key}: #{value}\" }\nend\n\nlog_event(\n  'user_signup',\n  'Started signup', 'Completed confirmation',\n  user_id: 123, plan: 'pro'\n)\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var s=n(36672);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);