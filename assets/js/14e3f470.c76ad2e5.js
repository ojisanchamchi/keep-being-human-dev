"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94387],{65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(36672);const o={},r=s.createContext(o);function i(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},93234:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"rails/websockets/expert/prometheus_monitoring","title":"prometheus_monitoring","description":"\ud83d\udee0\ufe0f Instrumenting WebSocket Metrics with Prometheus","source":"@site/docs/rails/websockets/expert/prometheus_monitoring.md","sourceDirName":"rails/websockets/expert","slug":"/rails/websockets/expert/prometheus_monitoring","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/prometheus_monitoring","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/expert/prometheus_monitoring.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"jwt_connection_authentication","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/jwt_connection_authentication"},"next":{"title":"redis_sentinel_scaling","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/redis_sentinel_scaling"}}');var o=n(23420),r=n(65404);const i={},c=void 0,a={},u=[{value:"\ud83d\udee0\ufe0f Instrumenting WebSocket Metrics with Prometheus",id:"\ufe0f-instrumenting-websocket-metrics-with-prometheus",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"\ufe0f-instrumenting-websocket-metrics-with-prometheus",children:"\ud83d\udee0\ufe0f Instrumenting WebSocket Metrics with Prometheus"}),"\n",(0,o.jsx)(t.p,{children:"Integrate Prometheus to monitor ActionCable connections, message rates, and latencies. Expose metrics via a Rack endpoint and use custom subscribers to record channel events."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/prometheus_cable.rb\nrequire 'prometheus/client'\n\nPROM = Prometheus::Client.registry\nconnections_gauge = PROM.gauge(:action_cable_connections, 'Active ActionCable connections')\nmessages_counter = PROM.counter(:action_cable_messages, 'Total messages processed', labels: [:channel])\n\nActiveSupport::Notifications.subscribe('action_cable.subscribe') { |_| connections_gauge.increment }\nActiveSupport::Notifications.subscribe('action_cable.unsubscribe') { |_| connections_gauge.decrement }\nActiveSupport::Notifications.subscribe('action_cable.broadcast') do |_, _, _, _, payload|\n  messages_counter.increment(labels: { channel: payload[:channel] })\nend\n"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# config/routes.rb\nmount Prometheus::Client::Rack::Exporter, at: '/metrics'\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now Prometheus can scrape ",(0,o.jsx)(t.code,{children:"/metrics"})," to track real-time WebSocket usage and diagnose performance bottlenecks."]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);