"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62107],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(36672);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},86443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/regex/beginner/string_match_method","title":"string_match_method","description":"\ud83e\udd1d Using String#match","source":"@site/docs/ruby/regex/beginner/string_match_method.md","sourceDirName":"ruby/regex/beginner","slug":"/ruby/regex/beginner/string_match_method","permalink":"/keep-being-human-dev/docs/ruby/regex/beginner/string_match_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/beginner/string_match_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"regex_options","permalink":"/keep-being-human-dev/docs/ruby/regex/beginner/regex_options"},"next":{"title":"advanced_lookaround_combinations","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/advanced_lookaround_combinations"}}');var s=t(23420),o=t(65404);const i={},a=void 0,c={},u=[{value:"\ud83e\udd1d Using String#match",id:"-using-stringmatch",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-using-stringmatch",children:"\ud83e\udd1d Using String#match"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"String#match"})," returns a ",(0,s.jsx)(n.code,{children:"MatchData"})," object when a pattern matches, giving you details about captures. If there\u2019s no match, it returns ",(0,s.jsx)(n.code,{children:"nil"}),", allowing you to chain methods or inspect groups."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'result = "user@example.com".match(/(\\w+)@(\\w+\\.\\w+)/)\nif result\n  puts "Username: #{result[1]}"\n  puts "Domain: #{result[2]}"\nelse\n  puts "Invalid email format"\nend\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);