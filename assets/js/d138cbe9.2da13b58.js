"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44454],{65404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var i=r(36672);const s={},n=i.createContext(s);function a(e){const t=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(n.Provider,{value:t},e.children)}},74997:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/security/expert/safe_redirect_whitelist","title":"safe_redirect_whitelist","description":"\ud83c\udfc1 Whitelisted Safe Redirects","source":"@site/docs/rails/security/expert/safe_redirect_whitelist.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/safe_redirect_whitelist","permalink":"/keep-being-human-dev/docs/rails/security/expert/safe_redirect_whitelist","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/safe_redirect_whitelist.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rack_attack_dynamic_throttles","permalink":"/keep-being-human-dev/docs/rails/security/expert/rack_attack_dynamic_throttles"},"next":{"title":"strict_cors_dynamic_origins","permalink":"/keep-being-human-dev/docs/rails/security/expert/strict_cors_dynamic_origins"}}');var s=r(23420),n=r(65404);const a={},c=void 0,o={},d=[{value:"\ud83c\udfc1 Whitelisted Safe Redirects",id:"-whitelisted-safe-redirects",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-whitelisted-safe-redirects",children:"\ud83c\udfc1 Whitelisted Safe Redirects"}),"\n",(0,s.jsxs)(t.p,{children:["Open redirect vulnerabilities let attackers phish your users by redirecting to malicious domains. Always verify that any dynamic ",(0,s.jsx)(t.code,{children:"redirect_to"})," target is on your approved list or a local path."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  before_action :verify_safe_redirect, only: :redirect_action\n\n  private\n\n  def redirect_action\n    redirect_to params[:next]\n  end\n\n  def verify_safe_redirect\n    uri = URI.parse(params[:next].to_s)\n    hosts = ['your-trusted-site.com', request.host]\n\n    unless (uri.host.nil? && uri.path.start_with?('/')) || hosts.include?(uri.host)\n      render status: :forbidden, plain: 'Unsafe redirect blocked'\n    end\n  rescue URI::InvalidURIError\n    head :bad_request\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);