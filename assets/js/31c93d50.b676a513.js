"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25613],{14264:(e,c,n)=>{n.r(c),n.d(c,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/active_record/advanced/optimistic_locking_for_concurrency","title":"optimistic_locking_for_concurrency","description":"\u23f1 Optimistic Locking for Concurrency","source":"@site/docs/rails/active_record/advanced/optimistic_locking_for_concurrency.md","sourceDirName":"rails/active_record/advanced","slug":"/rails/active_record/advanced/optimistic_locking_for_concurrency","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/optimistic_locking_for_concurrency","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/advanced/optimistic_locking_for_concurrency.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_database_sharding","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/multi_database_sharding"},"next":{"title":"using_arel_for_complex_joins","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/using_arel_for_complex_joins"}}');var r=n(23420),i=n(65404);const t={},a=void 0,s={},d=[{value:"\u23f1 Optimistic Locking for Concurrency",id:"-optimistic-locking-for-concurrency",level:2}];function l(e){const c={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.h2,{id:"-optimistic-locking-for-concurrency",children:"\u23f1 Optimistic Locking for Concurrency"}),"\n",(0,r.jsxs)(c.p,{children:["Prevent race conditions on high\u2011traffic records by enabling optimistic locking. Rails auto\u2011increments a ",(0,r.jsx)(c.code,{children:"lock_version"})," column on each update."]}),"\n",(0,r.jsx)(c.pre,{children:(0,r.jsx)(c.code,{className:"language-ruby",children:'class Document < ApplicationRecord; end\n# Migration: add_column :documents, :lock_version, :integer, default: 0, null: false\n\ndoc = Document.find(1)\ndoc.update!(title: "New Title")\n\n# If two processes load and save the same record, ActiveRecord::StaleObjectError is raised on conflict.\n'})})]})}function u(e={}){const{wrapper:c}={...(0,i.R)(),...e.components};return c?(0,r.jsx)(c,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,c,n)=>{n.d(c,{R:()=>t,x:()=>a});var o=n(36672);const r={},i=o.createContext(r);function t(e){const c=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(c):{...c,...e}},[c,e])}function a(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(i.Provider,{value:c},e.children)}}}]);