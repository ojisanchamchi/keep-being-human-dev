"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[42407],{65404:(e,r,n)=>{n.d(r,{R:()=>p,x:()=>s});var t=n(36672);const o={},i=t.createContext(o);function p(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:p(e.components),t.createElement(i.Provider,{value:r},e.children)}},90767:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>a,frontMatter:()=>p,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/profiling/middle/ruby_prof_cpu","title":"ruby_prof_cpu","description":"\ud83d\udd0d CPU Profiling with ruby\u2011prof","source":"@site/docs/ruby/profiling/middle/ruby_prof_cpu.md","sourceDirName":"ruby/profiling/middle","slug":"/ruby/profiling/middle/ruby_prof_cpu","permalink":"/keep-being-human-dev/docs/ruby/profiling/middle/ruby_prof_cpu","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/profiling/middle/ruby_prof_cpu.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memory_profiler_usage","permalink":"/keep-being-human-dev/docs/ruby/profiling/middle/memory_profiler_usage"},"next":{"title":"stackprof_sampling","permalink":"/keep-being-human-dev/docs/ruby/profiling/middle/stackprof_sampling"}}');var o=n(23420),i=n(65404);const p={},s=void 0,u={},l=[{value:"\ud83d\udd0d CPU Profiling with ruby\u2011prof",id:"-cpu-profiling-with-rubyprof",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-cpu-profiling-with-rubyprof",children:"\ud83d\udd0d CPU Profiling with ruby\u2011prof"}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"ruby-prof"})," gem provides detailed call graphs and flat profiles showing time spent in each method. Start it before the code under test, stop it afterward, then choose a printer (flat, graph, call tree) to generate results. Filter out noise via ",(0,o.jsx)(r.code,{children:"min_percent"})," to focus on hotspots."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"require 'ruby-prof'\n\nRubyProf.start\n# Code you want to profile\ndo_heavy_processing\n\nresult = RubyProf.stop\nprinter = RubyProf::GraphHtmlPrinter.new(result)\nprinter.print(File.open('profile.html', 'w'), min_percent: 2)\n"})})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);