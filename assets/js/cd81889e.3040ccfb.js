"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86105],{55798:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_support/advanced/json_encoder_customization","title":"json_encoder_customization","description":"\ud83d\uddc4\ufe0f Customize JSON Serialization Behavior","source":"@site/docs/rails/active_support/advanced/json_encoder_customization.md","sourceDirName":"rails/active_support/advanced","slug":"/rails/active_support/advanced/json_encoder_customization","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/json_encoder_customization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/advanced/json_encoder_customization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deprecation_management","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/deprecation_management"},"next":{"title":"nested_hash_transformations","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/nested_hash_transformations"}}');var a=o(23420),i=o(65404);const s={},r=void 0,c={},d=[{value:"\ud83d\uddc4\ufe0f Customize JSON Serialization Behavior",id:"\ufe0f-customize-json-serialization-behavior",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-customize-json-serialization-behavior",children:"\ud83d\uddc4\ufe0f Customize JSON Serialization Behavior"}),"\n",(0,a.jsxs)(n.p,{children:["ActiveSupport::JSON handles encoding of core Ruby types, but you can tweak how special cases are serialized. For instance, encode ",(0,a.jsx)(n.code,{children:"BigDecimal"})," as strings to preserve precision in JavaScript clients. You can also define custom encode/decode for your own classes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# In an initializer (e.g., config/initializers/json_encoding.rb)\nActiveSupport::JSON::Encoding.encode_big_decimal_as_string = true\n\n# Custom encoder for a domain object\nActiveSupport::JSON::Encoding.json_encoder.define_singleton_method(:encode) do |value|\n  if value.is_a?(Money)\n    { amount: value.cents, currency: value.currency.iso_code }.to_json\n  else\n    super(value)\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var t=o(36672);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);