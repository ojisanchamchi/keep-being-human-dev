"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50356],{42346:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/syntax/expert/eigenclass_dsl","title":"eigenclass_dsl","description":"\ud83d\udd25 Eigenclass DSL Patterns with class << self","source":"@site/docs/ruby/syntax/expert/eigenclass_dsl.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/eigenclass_dsl","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/eigenclass_dsl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/eigenclass_dsl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/dynamic_define_method"},"next":{"title":"endless_method_definitions","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/endless_method_definitions"}}');var i=n(23420),r=n(65404);const a={},l=void 0,d={},c=[{value:"\ud83d\udd25 Eigenclass DSL Patterns with <code>class &lt;&lt; self</code>",id:"-eigenclass-dsl-patterns-with-class--self",level:2}];function o(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h2,{id:"-eigenclass-dsl-patterns-with-class--self",children:["\ud83d\udd25 Eigenclass DSL Patterns with ",(0,i.jsx)(s.code,{children:"class << self"})]}),"\n",(0,i.jsxs)(s.p,{children:["Elevate your DSLs by defining class\u2011level methods directly in the eigenclass. Combine with ",(0,i.jsx)(s.code,{children:"method_missing"})," or ",(0,i.jsx)(s.code,{children:"respond_to_missing?"})," for a fluid interface that feels native to the domain."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'class QueryBuilder\n  class << self\n    def select(*fields)\n      @fields = fields\n      self\n    end\n\n    def from(table)\n      @table = table\n      self\n    end\n\n    def to_sql\n      "SELECT #{[@fields.join(\', \')]} FROM #{@table};"\n    end\n  end\nend\n\nputs QueryBuilder.select(:id, :name).from(:users).to_sql\n# => "SELECT id, name FROM users;"\n'})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(36672);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);