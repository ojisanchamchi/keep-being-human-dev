"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68227],{65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(36672);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}},67330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"ruby/method_missing/expert/dynamic_attributes_dsl","title":"dynamic_attributes_dsl","description":"\ud83d\udee0\ufe0f Dynamic Attributes DSL with method_missing","source":"@site/docs/ruby/method_missing/expert/dynamic_attributes_dsl.md","sourceDirName":"ruby/method_missing/expert","slug":"/ruby/method_missing/expert/dynamic_attributes_dsl","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/dynamic_attributes_dsl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/expert/dynamic_attributes_dsl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"caching_method_missing_responses","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/caching_method_missing_responses"},"next":{"title":"transparent_proxy_forwarding","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/transparent_proxy_forwarding"}}');var i=n(23420),r=n(65404);const a={},o=void 0,d={},m=[{value:"\ud83d\udee0\ufe0f Dynamic Attributes DSL with method_missing",id:"\ufe0f-dynamic-attributes-dsl-with-method_missing",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\ufe0f-dynamic-attributes-dsl-with-method_missing",children:"\ud83d\udee0\ufe0f Dynamic Attributes DSL with method_missing"}),"\n",(0,i.jsxs)(t.p,{children:["Leverage ",(0,i.jsx)(t.code,{children:"method_missing"})," to build a concise DSL for dynamically defined attributes, avoiding boilerplate getters and setters. Pair it with ",(0,i.jsx)(t.code,{children:"respond_to_missing?"})," to maintain compatibility with reflection and tools like Rails\u2019 form builders. This approach is ideal for classes where attributes are defined at runtime from external schemas or configuration."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"class DynamicModel\n  def initialize(attributes = {})\n    @attributes = attributes\n  end\n\n  def method_missing(name, *args, &block)\n    attr_name = name.to_s.chomp(\"=\")\n\n    if name.to_s.end_with?('=')\n      @attributes[attr_name] = args.first\n    elsif @attributes.key?(name.to_s)\n      @attributes[name.to_s]\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    attr_name = name.to_s.chomp(\"=\")\n    @attributes.key?(attr_name) || super\n  end\nend\n\nuser = DynamicModel.new('first_name' => 'Alice')\nuser.last_name = 'Smith'      # sets @attributes['last_name']\nputs user.first_name         # => \"Alice\"\nputs user.respond_to?(:age)  # => false\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);