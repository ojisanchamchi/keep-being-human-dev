"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15315],{64984:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/arrays/expert/lazy_infinite_enumerator.md","title":"lazy_infinite_enumerator.md","description":"\ud83c\udf00 Lazy Infinite Enumerator","source":"@site/docs/ruby/arrays/expert/lazy_infinite_enumerator.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/lazy_infinite_enumerator.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/lazy_infinite_enumerator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/lazy_infinite_enumerator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deep_freeze_immutable_arrays.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/deep_freeze_immutable_arrays.md"},"next":{"title":"memoized_inject.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/memoized_inject.md"}}');var a=r(23420),i=r(65404);const o={},s=void 0,u={},m=[{value:"\ud83c\udf00 Lazy Infinite Enumerator",id:"-lazy-infinite-enumerator",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-lazy-infinite-enumerator",children:"\ud83c\udf00 Lazy Infinite Enumerator"}),"\n",(0,a.jsx)(n.p,{children:"Use Enumerator::Lazy to work with infinite or very large sequences without consuming excessive memory. Chain transformations and terminate early when a stopping condition is met."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# Generate an infinite sequence of Fibonacci numbers lazily\nenumerator = Enumerator.producer do |y|\n  a, b = [0, 1]\n  loop do\n    y << a\n    a, b = b, a + b\n  end\nend.lazy\n\n# Take the first 10 even Fibonacci numbers\nevens = enumerator.select(&:even?).first(10)\nputs evens\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(36672);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);