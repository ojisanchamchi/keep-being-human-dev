"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30985],{65404:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(36672);const i={},r=n.createContext(i);function o(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:s},e.children)}},74496:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"ruby/minitest/middle/custom_assertion_helpers","title":"custom_assertion_helpers","description":"\u2728 Define Custom Assertion Helpers","source":"@site/docs/ruby/minitest/middle/custom_assertion_helpers.md","sourceDirName":"ruby/minitest/middle","slug":"/ruby/minitest/middle/custom_assertion_helpers","permalink":"/keep-being-human-dev/docs/ruby/minitest/middle/custom_assertion_helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/minitest/middle/custom_assertion_helpers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"assertion_matchers_refutations","permalink":"/keep-being-human-dev/docs/ruby/minitest/middle/assertion_matchers_refutations"},"next":{"title":"parallel_test_execution","permalink":"/keep-being-human-dev/docs/ruby/minitest/middle/parallel_test_execution"}}');var i=t(23420),r=t(65404);const o={},a=void 0,d={},u=[{value:"\u2728 Define Custom Assertion Helpers",id:"-define-custom-assertion-helpers",level:2}];function c(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"-define-custom-assertion-helpers",children:"\u2728 Define Custom Assertion Helpers"}),"\n",(0,i.jsx)(s.p,{children:"When you find yourself repeating complex checks, extract them into helper methods. This keeps tests readable and centralizes logic for easier updates."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'module CustomAssertions\n  def assert_uuid_format(value)\n    uuid_regex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n    assert_match uuid_regex, value, "Expected #{value} to be a valid UUID"\n  end\nend\n\nclass ApiResponseTest < Minitest::Test\n  include CustomAssertions\n\n  def test_user_id_is_uuid\n    id = ApiClient.fetch_user_id(42)\n    assert_uuid_format id\n  end\nend\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Place ",(0,i.jsx)(s.code,{children:"CustomAssertions"})," in ",(0,i.jsx)(s.code,{children:"test/test_helpers"})," and require it in ",(0,i.jsx)(s.code,{children:"test_helper.rb"})," to reuse across test classes."]})]})}function l(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);