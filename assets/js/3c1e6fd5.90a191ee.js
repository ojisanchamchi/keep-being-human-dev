"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[49066],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(36672);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},99608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/metaprogramming/beginner/respond_to_missing","title":"respond_to_missing","description":"\u2705 Support Introspection with respondtomissing?","source":"@site/docs/ruby/metaprogramming/beginner/respond_to_missing.md","sourceDirName":"ruby/metaprogramming/beginner","slug":"/ruby/metaprogramming/beginner/respond_to_missing","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/respond_to_missing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/beginner/respond_to_missing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_included_hook","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/module_included_hook"},"next":{"title":"simple_dsl_blocks","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/beginner/simple_dsl_blocks"}}');var s=t(23420),o=t(65404);const i={},a=void 0,d={},p=[{value:"\u2705 Support Introspection with <code>respond_to_missing?</code>",id:"-support-introspection-with-respond_to_missing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-support-introspection-with-respond_to_missing",children:["\u2705 Support Introspection with ",(0,s.jsx)(n.code,{children:"respond_to_missing?"})]}),"\n",(0,s.jsxs)(n.p,{children:["After implementing ",(0,s.jsx)(n.code,{children:"method_missing"}),", override ",(0,s.jsx)(n.code,{children:"respond_to_missing?"})," so ",(0,s.jsx)(n.code,{children:"respond_to?"})," works as expected. This maintains compatibility with libraries and tools that check method presence."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class Proxy\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &blk)\n    @target.send(name, *args, &blk)\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @target.respond_to?(name, include_private)\n  end\nend\n\narr = Proxy.new([1,2,3])\nputs arr.respond_to?(:push)  # => true\narr.push(4)\nputs arr.inspect             # => [1,2,3,4]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);