"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86561],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(36672);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},69400:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join","title":"waiting_for_threads_join","description":"\ud83d\udd04 Wait for Threads with join","source":"@site/docs/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join.md","sourceDirName":"ruby/concurrency_and_mutexes/beginner","slug":"/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"shared_counter_with_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex"},"next":{"title":"fair_fifo_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex"}}');var o=r(23420),s=r(65404);const i={},a=void 0,c={},u=[{value:"\ud83d\udd04 Wait for Threads with <code>join</code>",id:"-wait-for-threads-with-join",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-wait-for-threads-with-join",children:["\ud83d\udd04 Wait for Threads with ",(0,o.jsx)(n.code,{children:"join"})]}),"\n",(0,o.jsxs)(n.p,{children:["After spawning threads for concurrent work, call ",(0,o.jsx)(n.code,{children:"Thread#join"})," to wait for them to finish before proceeding. This ensures shared resources remain consistent once all threads complete."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'require \'thread\'\n\nmutex = Mutex.new\nresults = []\n\nthreads = 4.times.map do |i|\n  Thread.new do\n    sleep(rand * 0.1)  # simulate work\n    mutex.synchronize { results << "Result from thread #{i}" }\n  end\nend\n\n# Wait for all threads to finish\threads.each(&:join)\nputs results  # => ["Result from thread 0", "Result from thread 1", ...]\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);