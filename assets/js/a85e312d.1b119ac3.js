"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[91107],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(36672);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},76586:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ruby/methods/expert/refinements_scope_control","title":"refinements_scope_control","description":"\ud83d\udee1\ufe0f Scoped Monkey Patching with Refinements","source":"@site/docs/ruby/methods/expert/refinements_scope_control.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/refinements_scope_control","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/refinements_scope_control","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/refinements_scope_control.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pattern_matching_params","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/pattern_matching_params"},"next":{"title":"unbound_method_binding","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/unbound_method_binding"}}');var o=t(23420),r=t(65404);const i={},c=void 0,d={},a=[{value:"\ud83d\udee1\ufe0f Scoped Monkey Patching with Refinements",id:"\ufe0f-scoped-monkey-patching-with-refinements",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-scoped-monkey-patching-with-refinements",children:"\ud83d\udee1\ufe0f Scoped Monkey Patching with Refinements"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"refine"})," and ",(0,o.jsx)(n.code,{children:"using"})," to apply monkey patches only within specific lexical scopes, preventing global pollution. This allows safe extensions of core classes for limited contexts such as testing or DSLs."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'module StringExtensions\n  refine String do\n    def shout\n      upcase + "!"\n    end\n  end\nend\n\nusing StringExtensions\nputs "hello".shout  # => "HELLO!"\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# Outside the refinements scope, `shout` is undefined:\nputs "world".respond_to?(:shout)  # => false\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);