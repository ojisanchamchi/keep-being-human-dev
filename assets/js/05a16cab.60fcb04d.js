"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92312],{13741:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/strings/expert/override_dup_with_initialize_copy","title":"override_dup_with_initialize_copy","description":"\ud83c\udfaf Customize cloning via initialize_copy","source":"@site/docs/ruby/strings/expert/override_dup_with_initialize_copy.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/override_dup_with_initialize_copy","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/override_dup_with_initialize_copy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/override_dup_with_initialize_copy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"in_memory_io_with_stringio","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/in_memory_io_with_stringio"},"next":{"title":"reuse_string_buffers_replace","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/reuse_string_buffers_replace"}}');var r=n(23420),s=n(65404);const o={},c=void 0,a={},u=[{value:"\ud83c\udfaf Customize cloning via initialize_copy",id:"-customize-cloning-via-initialize_copy",level:2}];function l(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"-customize-cloning-via-initialize_copy",children:"\ud83c\udfaf Customize cloning via initialize_copy"}),"\n",(0,r.jsxs)(i.p,{children:["By overriding ",(0,r.jsx)(i.code,{children:"initialize_copy"}),", you gain full control over how ",(0,r.jsx)(i.code,{children:"dup"})," and ",(0,r.jsx)(i.code,{children:"clone"})," behave for your string subclass. You can sanitize content, reset internal caches, or share buffers conditionally. This is a powerful hook when building DSL-backed string types."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ruby",children:'class MyString < String\n  def initialize_copy(orig)\n    super\n    # strip trailing whitespace on clone\n    self.replace(self.rstrip)\n    # clear any custom cache\n    @metadata = {}\n  end\nend\n\ns1 = MyString.new("hello   ")\ns2 = s1.dup\nputs s2.inspect  # => "hello"\n'})})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var t=n(36672);const r={},s=t.createContext(r);function o(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);