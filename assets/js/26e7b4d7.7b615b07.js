"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93158],{44189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"gems/flipper/expert/custom_instrumentation_statsd","title":"custom_instrumentation_statsd","description":"\ud83d\ude80 Custom Flipper Instrumentation for Real-time Metrics","source":"@site/docs/gems/flipper/expert/custom_instrumentation_statsd.md","sourceDirName":"gems/flipper/expert","slug":"/gems/flipper/expert/custom_instrumentation_statsd","permalink":"/keep-being-human-dev/docs/gems/flipper/expert/custom_instrumentation_statsd","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/flipper/expert/custom_instrumentation_statsd.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flipper_setup","permalink":"/keep-being-human-dev/docs/gems/flipper/beginner/flipper_setup"},"next":{"title":"multi_region_adapter","permalink":"/keep-being-human-dev/docs/gems/flipper/expert/multi_region_adapter"}}');var r=n(23420),i=n(65404);const a={},o=void 0,p={},u=[{value:"\ud83d\ude80 Custom Flipper Instrumentation for Real-time Metrics",id:"-custom-flipper-instrumentation-for-real-time-metrics",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-custom-flipper-instrumentation-for-real-time-metrics",children:"\ud83d\ude80 Custom Flipper Instrumentation for Real-time Metrics"}),"\n",(0,r.jsxs)(t.p,{children:["You can swap Flipper's default instrumenter to push gate evaluation events to external systems like StatsD, enabling real-time monitoring and alerting. By injecting a custom lambda or Proc into ",(0,r.jsx)(t.code,{children:"config.instrumenter"}),", you capture each gate evaluation along with metadata and duration, sending metrics with tags for deeper analytics. This approach scales in distributed environments and integrates with existing observability stacks."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/flipper.rb\nrequire 'statsd'\n\nstatsd = Statsd.new('statsd.myhost', 8125)\n\nFlipper.configure do |config|\n  config.adapter { Flipper::Adapters::Redis.new(Redis.new) }\n\n  config.instrumenter = lambda do |event_name, duration, payload|\n    feature = payload[:feature_name]\n    result  = payload[:result]\n    statsd.increment('flipper.gate.%s' % event_name, tags: ['feature:%s' % feature, 'result:%s' % result])\n    statsd.timing('flipper.gate.%s.duration' % event_name, duration, tags: ['feature:%s' % feature])\n  end\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(36672);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);