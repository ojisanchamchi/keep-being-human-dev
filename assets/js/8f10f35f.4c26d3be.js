"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28174],{50330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"gems/webmock/expert/chunked_streaming_response","title":"chunked_streaming_response","description":"\ud83d\udce1 Simulate Chunked Streaming Responses","source":"@site/docs/gems/webmock/expert/chunked_streaming_response.md","sourceDirName":"gems/webmock/expert","slug":"/gems/webmock/expert/chunked_streaming_response","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/chunked_streaming_response","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/expert/chunked_streaming_response.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"verify_http_requests","permalink":"/keep-being-human-dev/docs/gems/webmock/beginner/verify_http_requests"},"next":{"title":"dynamic_request_block_stub","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/dynamic_request_block_stub"}}');var r=t(23420),o=t(65404);const c={},a=void 0,u={},i=[{value:"\ud83d\udce1 Simulate Chunked Streaming Responses",id:"-simulate-chunked-streaming-responses",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-simulate-chunked-streaming-responses",children:"\ud83d\udce1 Simulate Chunked Streaming Responses"}),"\n",(0,r.jsx)(n.p,{children:"Stub chunked HTTP responses to test streaming or long-polling clients. WebMock can yield each chunk via an Enumerator, allowing you to verify how your application handles partial reads, timeouts, or slow connections."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'webmock\'\ninclude WebMock::API\n\nWebMock.disable_net_connect!\n\n# Stub chunked streaming response\nstub_request(:get, "https://example.com/stream")\n  .to_return(\n    status: 200,\n    headers: { \'Transfer-Encoding\' => \'chunked\', \'Content-Type\' => \'text/plain\' },\n    body: Enumerator.new do |y|\n      ["chunk1\\n", "chunk2\\n", "chunk3\\n"].each do |chunk|\n        sleep 0.1\n        y << chunk\n      end\n    end\n  )\n\n# Client code to consume the stream\nuri = URI("https://example.com/stream")\nNet::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n  http.request_get(uri.request_uri) do |response|\n    response.read_body do |fragment|\n      puts "Received fragment: #{fragment}"\n    end\n  end\nend\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(36672);const r={},o=s.createContext(r);function c(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);