"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[36822],{24455:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>g,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/logging/beginner/understanding_log_levels","title":"understanding_log_levels","description":"\ud83d\udd22 Understanding Log Levels","source":"@site/docs/ruby/logging/beginner/understanding_log_levels.md","sourceDirName":"ruby/logging/beginner","slug":"/ruby/logging/beginner/understanding_log_levels","permalink":"/keep-being-human-dev/docs/ruby/logging/beginner/understanding_log_levels","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/beginner/understanding_log_levels.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"log_rotation","permalink":"/keep-being-human-dev/docs/ruby/logging/beginner/log_rotation"},"next":{"title":"async_non_blocking_logger","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/async_non_blocking_logger"}}');var t=r(23420),s=r(65404);const l={},g=void 0,i={},a=[{value:"\ud83d\udd22 Understanding Log Levels",id:"-understanding-log-levels",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-understanding-log-levels",children:"\ud83d\udd22 Understanding Log Levels"}),"\n",(0,t.jsxs)(n.p,{children:["Logger supports five main severity levels (DEBUG, INFO, WARN, ERROR, FATAL) plus UNKNOWN. By setting ",(0,t.jsx)(n.code,{children:"logger.level"}),", you control which messages get printed: messages with a severity lower than the set level are ignored. This helps filter noise and focus on important events."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'logger'\n\nlogger = Logger.new('application.log')\nlogger.level = Logger::WARN\n\nlogger.debug('This will not appear')  # below WARN\nlogger.warn('Disk space low!')         # appears in log\nlogger.error('Unhandled exception!')   # appears in log\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>g});var o=r(36672);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function g(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);