"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[69908],{18588:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/api_mode/advanced/custom_rack_middleware_injection","title":"custom_rack_middleware_injection","description":"\ud83d\udd27 Custom Rack Middleware Injection","source":"@site/docs/rails/api_mode/advanced/custom_rack_middleware_injection.md","sourceDirName":"rails/api_mode/advanced","slug":"/rails/api_mode/advanced/custom_rack_middleware_injection","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/custom_rack_middleware_injection","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/api_mode/advanced/custom_rack_middleware_injection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_jsonapi_serializer","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/advanced_jsonapi_serializer"},"next":{"title":"header_based_api_versioning","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/header_based_api_versioning"}}');var t=a(23420),r=a(65404);const o={},s=void 0,d={},c=[{value:"\ud83d\udd27 Custom Rack Middleware Injection",id:"-custom-rack-middleware-injection",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-custom-rack-middleware-injection",children:"\ud83d\udd27 Custom Rack Middleware Injection"}),"\n",(0,t.jsxs)(n.p,{children:["In API mode applications, you can fine\u2011tune request handling by injecting your own Rack middleware. This is useful for custom metrics, request correlation (e.g., X\u2011Request\u2011ID), or advanced rate\u2011limiting. Create the middleware under ",(0,t.jsx)(n.code,{children:"lib/"})," and then insert it into the stack in ",(0,t.jsx)(n.code,{children:"config/application.rb"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# lib/middleware/request_logger.rb\nmodule Middleware\n  class RequestLogger\n    def initialize(app)\n      @app = app\n    end\n\n    def call(env)\n      start = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n      status, headers, response = @app.call(env)\n      duration = (Process.clock_gettime(Process::CLOCK_MONOTONIC) - start) * 1000\n      Rails.logger.info \"[RequestLogger] #{env['REQUEST_METHOD']} #{env['PATH_INFO']} took #{duration.round(2)}ms\"\n      [status, headers, response]\n    end\n  end\nend\n\n# config/application.rb\nmodule YourApi\n  class Application < Rails::Application\n    config.load_defaults 7.0\n    config.eager_load_paths << Rails.root.join('lib/middleware')\n\n    # Insert before ActionDispatch::Executor to capture full request timing\n    config.middleware.insert_before ActionDispatch::Executor, Middleware::RequestLogger\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var i=a(36672);const t={},r=i.createContext(t);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);