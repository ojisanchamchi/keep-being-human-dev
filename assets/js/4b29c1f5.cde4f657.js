"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94321],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var t=s(36672);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},92720:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/classes_and_modules/expert/refinements_scoped_monkey_patches","title":"refinements_scoped_monkey_patches","description":"\ud83d\udee0\ufe0f Using Refinements to Scope Monkey Patches","source":"@site/docs/ruby/classes_and_modules/expert/refinements_scoped_monkey_patches.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/refinements_scoped_monkey_patches","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/refinements_scoped_monkey_patches","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/refinements_scoped_monkey_patches.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proxy_method_missing","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/proxy_method_missing"},"next":{"title":"singleton_class_metaprogramming","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/singleton_class_metaprogramming"}}');var o=s(23420),r=s(65404);const i={},a=void 0,c={},d=[{value:"\ud83d\udee0\ufe0f Using Refinements to Scope Monkey Patches",id:"\ufe0f-using-refinements-to-scope-monkey-patches",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-using-refinements-to-scope-monkey-patches",children:"\ud83d\udee0\ufe0f Using Refinements to Scope Monkey Patches"}),"\n",(0,o.jsxs)(n.p,{children:["Refinements allow you to apply monkey patches in a limited scope, preventing global side effects. This is particularly useful when you need to alter behavior for a specific library or component without affecting the entire application. You can define refinements in a module and selectively activate them with ",(0,o.jsx)(n.code,{children:"using"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'module StringExtensions\n  refine String do\n    def shout\n      upcase + "!!!"\n    end\n  end\nend\n\nclass Greeter\n  using StringExtensions\n\n  def greet(name)\n    puts "Hello, #{name.shout}"  # Only works here\n  end\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Outside ",(0,o.jsx)(n.code,{children:"Greeter"}),", ",(0,o.jsx)(n.code,{children:"String#shout"})," remains untouched, preserving global stability."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);