"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45569],{58652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/testing/expert/event_driven_testing","title":"event_driven_testing","description":"\ud83d\udd14 Assert Business Events with ActiveSupport::Notifications","source":"@site/docs/rails/testing/expert/event_driven_testing.md","sourceDirName":"rails/testing/expert","slug":"/rails/testing/expert/event_driven_testing","permalink":"/keep-being-human-dev/docs/rails/testing/expert/event_driven_testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/testing/expert/event_driven_testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_json_schema_matcher","permalink":"/keep-being-human-dev/docs/rails/testing/expert/custom_json_schema_matcher"},"next":{"title":"mutant_integration","permalink":"/keep-being-human-dev/docs/rails/testing/expert/mutant_integration"}}');var i=n(23420),r=n(65404);const o={},a=void 0,c={},d=[{value:"\ud83d\udd14 Assert Business Events with ActiveSupport::Notifications",id:"-assert-business-events-with-activesupportnotifications",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-assert-business-events-with-activesupportnotifications",children:"\ud83d\udd14 Assert Business Events with ActiveSupport::Notifications"}),"\n",(0,i.jsx)(t.p,{children:"Test that your domain publishes exactly the events you expect by subscribing and collecting payloads. This is crucial for event-driven architectures and background workers."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"RSpec.describe OrderProcessor, type: :model do\n  it 'emits payment.completed with correct payload' do\n    events = []\n    subscriber = ActiveSupport::Notifications.subscribe('payment.completed') do |*args|\n      event = ActiveSupport::Notifications::Event.new(*args)\n      events << event.payload\n    end\n\n    OrderProcessor.new(order).process_payment\n\n    expect(events).to include(\n      hash_including(order_id: order.id, total: order.total_amount)\n    )\n  ensure\n    ActiveSupport::Notifications.unsubscribe(subscriber)\n  end\nend\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can also assert timing (duration) or nested instrumentation by inspecting ",(0,i.jsx)(t.code,{children:"event.duration"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(36672);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);