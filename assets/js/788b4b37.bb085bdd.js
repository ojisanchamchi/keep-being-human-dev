"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46976],{2819:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/faker/advanced/seed_reproducibility","title":"seed_reproducibility","description":"\ud83d\udd04 Seeding Faker for Reproducible Tests","source":"@site/docs/gems/faker/advanced/seed_reproducibility.md","sourceDirName":"gems/faker/advanced","slug":"/gems/faker/advanced/seed_reproducibility","permalink":"/keep-being-human-dev/docs/gems/faker/advanced/seed_reproducibility","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faker/advanced/seed_reproducibility.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multilingual_data","permalink":"/keep-being-human-dev/docs/gems/faker/advanced/multilingual_data"},"next":{"title":"faker_in_tests","permalink":"/keep-being-human-dev/docs/gems/faker/beginner/faker_in_tests"}}');var s=r(23420),t=r(65404);const d={},i=void 0,o={},c=[{value:"\ud83d\udd04 Seeding Faker for Reproducible Tests",id:"-seeding-faker-for-reproducible-tests",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-seeding-faker-for-reproducible-tests",children:"\ud83d\udd04 Seeding Faker for Reproducible Tests"}),"\n",(0,s.jsxs)(n.p,{children:["By default Faker uses a global RNG, resulting in different outputs each run. For deterministic test data, set ",(0,s.jsx)(n.code,{children:"Faker::Config.random"})," or call ",(0,s.jsx)(n.code,{children:"Faker::Config.seed"}),". You can even seed per\u2011thread for parallel tests. This ensures the same sequence of values for each seed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# spec/support/faker_seed.rb\nRSpec.configure do |config|\n  config.before(:suite) do\n    Faker::Config.random = Random.new(20231010) # fixed seed\n  end\nend\n\n# In a parallel test:\nthread1 = Thread.new do\n  Faker::Config.random = Random.new(1)\n  puts Faker::Name.name  # always same within this thread\nend\nthread2 = Thread.new do\n  Faker::Config.random = Random.new(2)\n  puts Faker::Name.name\nend\nthread1.join; thread2.join\n"})}),"\n",(0,s.jsx)(n.p,{children:"Using a fixed seed eliminates flaky data\u2011driven tests and makes debugging data easier across CI runs."})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>d,x:()=>i});var a=r(36672);const s={},t=a.createContext(s);function d(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);