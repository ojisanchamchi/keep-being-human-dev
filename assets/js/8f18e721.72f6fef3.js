"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87101],{26484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/enumerables/advanced/chunk_while_dynamic_grouping","title":"chunk_while_dynamic_grouping","description":"\u2699\ufe0f Group Based on Dynamic Conditions with chunk_while","source":"@site/docs/ruby/enumerables/advanced/chunk_while_dynamic_grouping.md","sourceDirName":"ruby/enumerables/advanced","slug":"/ruby/enumerables/advanced/chunk_while_dynamic_grouping","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/chunk_while_dynamic_grouping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/advanced/chunk_while_dynamic_grouping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"safe_directory_creation_with_fileutils","permalink":"/keep-being-human-dev/docs/ruby/directory_management/middle/safe_directory_creation_with_fileutils"},"next":{"title":"each_with_object_stateful_accumulation","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/each_with_object_stateful_accumulation"}}');var a=t(23420),c=t(65404);const o={},s=void 0,r={},u=[{value:"\u2699\ufe0f Group Based on Dynamic Conditions with chunk_while",id:"\ufe0f-group-based-on-dynamic-conditions-with-chunk_while",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-group-based-on-dynamic-conditions-with-chunk_while",children:"\u2699\ufe0f Group Based on Dynamic Conditions with chunk_while"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"chunk_while"})," groups consecutive elements as long as the block returns true. This is ideal for splitting a sequence based on comparisons with the next element, such as contiguous runs or custom thresholds."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"numbers = [1, 2, 3, 5, 6, 8, 9, 10]\ngroups = numbers.chunk_while { |i, j| j - i == 1 }.to_a\n# => [[1, 2, 3], [5, 6], [8, 9, 10]]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var i=t(36672);const a={},c=i.createContext(a);function o(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);