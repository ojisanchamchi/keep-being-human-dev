"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4272],{13351:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/active_storage/expert/mirror_service_fallback","title":"mirror_service_fallback","description":"\ud83d\udd00 Advanced Mirror Service Configuration","source":"@site/docs/rails/active_storage/expert/mirror_service_fallback.md","sourceDirName":"rails/active_storage/expert","slug":"/rails/active_storage/expert/mirror_service_fallback","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/mirror_service_fallback","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/expert/mirror_service_fallback.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_pdf_page_count_analyzer","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/custom_pdf_page_count_analyzer"},"next":{"title":"resumable_multipart_upload","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/resumable_multipart_upload"}}');var a=n(23420),i=n(65404);const t={},s=void 0,c={},l=[{value:"\ud83d\udd00 Advanced Mirror Service Configuration",id:"-advanced-mirror-service-configuration",level:2}];function d(e){const r={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-advanced-mirror-service-configuration",children:"\ud83d\udd00 Advanced Mirror Service Configuration"}),"\n",(0,a.jsx)(r.p,{children:"Leverage Active Storage\u2019s mirror service to write uploads to multiple backends with automatic failover. This ensures your files are durably stored across primary and mirror services, and you can dynamically choose or fall back to alternative stores at runtime."}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["Configure your ",(0,a.jsx)(r.code,{children:"config/storage.yml"}),":"]}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:"mirror:\n  service: Mirror\n  primary: amazon\n  mirrors:\n    - google\n    - local\n\namazon:\n  service: S3\n  bucket: <%= ENV['S3_BUCKET'] %>\n  ...\n\ngoogle:\n  service: GCS\n  bucket: <%= ENV['GCS_BUCKET'] %>\n\nlocal:\n  service: Disk\n  root: <%= Rails.root.join(\"storage\") %>\n"})}),"\n",(0,a.jsxs)(r.ol,{start:"2",children:["\n",(0,a.jsx)(r.li,{children:"Attach using the mirror service in your model or controller:"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"class Document < ApplicationRecord\n  has_one_attached :file, service: :mirror\nend\n\n# Runtime override or fallback:\ndocument.file.blob.open(tmp_io: true) do |io|\n  # On error reading from Primary, fallback to first mirror\nrescue => e\n  document.file.blob.service_for_direct_upload(service: :google)\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>s});var o=n(36672);const a={},i=o.createContext(a);function t(e){const r=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);