"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59320],{56941:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"rails/benchmarking/advanced/sql_query_notifications","title":"sql_query_notifications","description":"\u26a1\ufe0f Capture SQL Queries with ActiveSupport::Notifications","source":"@site/docs/rails/benchmarking/advanced/sql_query_notifications.md","sourceDirName":"rails/benchmarking/advanced","slug":"/rails/benchmarking/advanced/sql_query_notifications","permalink":"/keep-being-human-dev/docs/rails/benchmarking/advanced/sql_query_notifications","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/benchmarking/advanced/sql_query_notifications.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rack_mini_profiler_programmatic","permalink":"/keep-being-human-dev/docs/rails/benchmarking/advanced/rack_mini_profiler_programmatic"},"next":{"title":"benchmark_bm","permalink":"/keep-being-human-dev/docs/rails/benchmarking/beginner/benchmark_bm"}}');var r=i(23420),s=i(65404);const a={},o=void 0,c={},u=[{value:"\u26a1\ufe0f Capture SQL Queries with ActiveSupport::Notifications",id:"\ufe0f-capture-sql-queries-with-activesupportnotifications",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-capture-sql-queries-with-activesupportnotifications",children:"\u26a1\ufe0f Capture SQL Queries with ActiveSupport::Notifications"}),"\n",(0,r.jsxs)(n.p,{children:["Leverage ",(0,r.jsx)(n.code,{children:"ActiveSupport::Notifications"})," to subscribe to ",(0,r.jsx)(n.code,{children:"sql.active_record"})," events and measure both count and duration of SQL calls inside a block. This helps pinpoint N+1 queries and slow joins within a single benchmark."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'benchmark'\n\nsubscriber = ActiveSupport::Notifications.subscribe('sql.active_record') do |*args|\n  event = ActiveSupport::Notifications::Event.new(*args)\n  puts \"SQL (#{event.duration.round(1)}ms): #{event.payload[:sql]}\"\nend\n\ntime = Benchmark.measure do\n  User.includes(:posts).each { |u| u.posts.size }\nend\n\nActiveSupport::Notifications.unsubscribe(subscriber)\nputs \"Total Time: #{time.real.round(2)}s\"\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(36672);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);