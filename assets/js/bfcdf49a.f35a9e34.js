"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61846],{2632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/strings/middle/percent_string_literals","title":"percent_string_literals","description":"\ud83c\udd9a Choose %q/%Q for Flexible Quoting","source":"@site/docs/ruby/strings/middle/percent_string_literals.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/percent_string_literals","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/percent_string_literals","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/percent_string_literals.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nested_interpolation","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/nested_interpolation"},"next":{"title":"regex_named_captures","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/regex_named_captures"}}');var r=n(23420),i=n(65404);const o={},c=void 0,d={},l=[{value:"\ud83c\udd9a Choose %q/%Q for Flexible Quoting",id:"-choose-qq-for-flexible-quoting",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-choose-qq-for-flexible-quoting",children:"\ud83c\udd9a Choose %q/%Q for Flexible Quoting"}),"\n",(0,r.jsxs)(t.p,{children:["Using ",(0,r.jsx)(t.code,{children:"%q"})," (",(0,r.jsx)(t.code,{children:"single-quoted"}),") and ",(0,r.jsx)(t.code,{children:"%Q"})," (",(0,r.jsx)(t.code,{children:"double-quoted"}),") string literals lets you avoid backslashes when your string contains lots of quotes. You can pick any delimiter pair (",(0,r.jsx)(t.code,{children:"()"}),", ",(0,r.jsx)(t.code,{children:"[]"}),", ",(0,r.jsx)(t.code,{children:"{}"}),", ",(0,r.jsx)(t.code,{children:"<>"}),", or custom). ",(0,r.jsx)(t.code,{children:"%Q"})," supports interpolation and escape sequences, while ",(0,r.jsx)(t.code,{children:"%q"})," treats its content literally."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'path = %q(/home/user/projects)\nputs path               # => "/home/user/projects"\nmessage = %Q|He said, "It\\\'s OK"|\nputs message            # => "He said, \\"It\'s OK\\""\ninterpolated = %Q{Now: #{Time.now.hour}:00}\nputs interpolated\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(36672);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);