"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74528],{65404:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var r=i(36672);const s={},o=r.createContext(s);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},70850:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/compression/expert/streaming_chunked_gzip_compression","title":"streaming_chunked_gzip_compression","description":"\ud83d\ude80 Streaming Chunked Gzip Compression","source":"@site/docs/ruby/compression/expert/streaming_chunked_gzip_compression.md","sourceDirName":"ruby/compression/expert","slug":"/ruby/compression/expert/streaming_chunked_gzip_compression","permalink":"/keep-being-human-dev/docs/ruby/compression/expert/streaming_chunked_gzip_compression","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/compression/expert/streaming_chunked_gzip_compression.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"create_zip_archive","permalink":"/keep-being-human-dev/docs/ruby/compression/beginner/create_zip_archive"},"next":{"title":"file_compression_gzip","permalink":"/keep-being-human-dev/docs/ruby/compression/middle/file_compression_gzip"}}');var s=i(23420),o=i(65404);const t={},c=void 0,p={},a=[{value:"\ud83d\ude80 Streaming Chunked Gzip Compression",id:"-streaming-chunked-gzip-compression",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-streaming-chunked-gzip-compression",children:"\ud83d\ude80 Streaming Chunked Gzip Compression"}),"\n",(0,s.jsxs)(n.p,{children:["When compressing very large files, loading the entire file into memory can lead to OOM errors. By streaming chunks through ",(0,s.jsx)(n.code,{children:"Zlib::GzipWriter"}),", you can compress data on-the-fly with constant memory usage. This also lets you tune the compression level and Gzip header metadata for finer control."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'zlib'\n\nCHUNK_SIZE = 16 * 1024  # 16KB per chunk\n\ndef compress_stream(input_path, output_path, level: Zlib::BEST_COMPRESSION)\n  File.open(input_path, 'rb') do |infile|\n    File.open(output_path, 'wb') do |outfile|\n      gz = Zlib::GzipWriter.new(outfile, level)\n      # Customize Gzip header\n      gz.orig_name = File.basename(input_path)\n      gz.mtime = File.mtime(input_path).to_i\n\n      while (chunk = infile.read(CHUNK_SIZE))\n        gz.write(chunk)\n      end\n\n      gz.close\n    end\n  end\nend\n\n# Usage:\ncompress_stream('huge_video.mp4', 'huge_video.mp4.gz')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Tip: Use ",(0,s.jsx)(n.code,{children:"CHUNK_SIZE"})," in powers of two to align with disk block sizes. Increasing ",(0,s.jsx)(n.code,{children:"level"})," improves compression ratio at cost of CPU, so benchmark for your hardware."]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);