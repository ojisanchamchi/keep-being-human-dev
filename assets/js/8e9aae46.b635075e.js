"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23336],{53545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"gems/redis/middle/distributed_lock_redlock","title":"distributed_lock_redlock","description":"\ud83d\udd12 Implement Distributed Locks with Redlock","source":"@site/docs/gems/redis/middle/distributed_lock_redlock.md","sourceDirName":"gems/redis/middle","slug":"/gems/redis/middle/distributed_lock_redlock","permalink":"/keep-being-human-dev/docs/gems/redis/middle/distributed_lock_redlock","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/middle/distributed_lock_redlock.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_streams_event_sourcing"},"next":{"title":"fragment_caching_redis","permalink":"/keep-being-human-dev/docs/gems/redis/middle/fragment_caching_redis"}}');var r=n(23420),s=n(65404);const c={},d=void 0,o={},l=[{value:"\ud83d\udd12 Implement Distributed Locks with Redlock",id:"-implement-distributed-locks-with-redlock",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-implement-distributed-locks-with-redlock",children:"\ud83d\udd12 Implement Distributed Locks with Redlock"}),"\n",(0,r.jsx)(t.p,{children:"Use the redlock-rb gem to coordinate distributed locks across multiple processes. This ensures only one process can enter a critical section at a time, preventing race conditions in jobs or background workers."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# Gemfile\ngem 'redlock'\n\n# app/services/critical_section.rb\nclass CriticalSection\n  LOCK_MANAGER = Redlock::Client.new([ENV['REDIS_URL']])\n\n  def perform\n    LOCK_MANAGER.lock!('lock:critical_section', 2000) do\n      # critical code that must not run concurrently\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>d});var i=n(36672);const r={},s=i.createContext(r);function c(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);