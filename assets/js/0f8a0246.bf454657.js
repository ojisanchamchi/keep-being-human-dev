"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5656],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(36672);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},83559:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/json/advanced/streaming_large_json_with_oj_schandler","title":"streaming_large_json_with_oj_schandler","description":"\ud83d\udce6 Streaming Large JSON Parsing with Oj ScHandler","source":"@site/docs/ruby/json/advanced/streaming_large_json_with_oj_schandler.md","sourceDirName":"ruby/json/advanced","slug":"/ruby/json/advanced/streaming_large_json_with_oj_schandler","permalink":"/keep-being-human-dev/docs/ruby/json/advanced/streaming_large_json_with_oj_schandler","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/json/advanced/streaming_large_json_with_oj_schandler.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"high_performance_parsing_with_oj","permalink":"/keep-being-human-dev/docs/ruby/json/advanced/high_performance_parsing_with_oj"},"next":{"title":"json_file_io","permalink":"/keep-being-human-dev/docs/ruby/json/beginner/json_file_io"}}');var t=a(23420),s=a(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udce6 Streaming Large JSON Parsing with Oj ScHandler",id:"-streaming-large-json-parsing-with-oj-schandler",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-streaming-large-json-parsing-with-oj-schandler",children:"\ud83d\udce6 Streaming Large JSON Parsing with Oj ScHandler"}),"\n",(0,t.jsx)(n.p,{children:"When working with enormous JSON files that can\u2019t fit into memory, use Oj::ScHandler for event-driven streaming. Implement callback methods to process elements as they arrive, avoiding full in-memory deserialization."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'oj'\n\nclass MyHandler < Oj::ScHandler\n  def initialize\n    @stack = []\n  end\n\n  def hash_start\n    @stack.push({})\n  end\n\n  def array_start\n    @stack.push([])\n  end\n\n  def add_value(value)\n    container = @stack.last\n    if container.is_a?(Array)\n      container << value\n    else\n      key, = @current_key_pair\n      container[key] = value\n    end\n  end\n\n  def hash_end\n    value = @stack.pop\n    add_value(value)\n  end\n\n  # ... implement other callbacks: array_end, add_value, hash_start etc.\nend\n\n# Stream parse in chunks\nhandler = MyHandler.new\nparser = Oj::ScParser.new(handler)\nFile.open('huge_data.json') do |file|\n  while chunk = file.read(8 * 1024) # 8KB chunks\n    parser << chunk\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);