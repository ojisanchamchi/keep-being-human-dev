"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34177],{52959:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/threads/expert/thread_safe_lru_cache_with_monitor","title":"thread_safe_lru_cache_with_monitor","description":"\ud83d\uddc2\ufe0f Create a High-Performance Thread-Safe LRU Cache Using Monitor","source":"@site/docs/ruby/threads/expert/thread_safe_lru_cache_with_monitor.md","sourceDirName":"ruby/threads/expert","slug":"/ruby/threads/expert/thread_safe_lru_cache_with_monitor","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_safe_lru_cache_with_monitor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/expert/thread_safe_lru_cache_with_monitor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_pool_with_sized_queue","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_pool_with_sized_queue"},"next":{"title":"timeout_handling_with_thread_handle_interrupt","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/timeout_handling_with_thread_handle_interrupt"}}');var a=t(23420),i=t(65404);const o={},d=void 0,s={},c=[{value:"\ud83d\uddc2\ufe0f Create a High-Performance Thread-Safe LRU Cache Using Monitor",id:"\ufe0f-create-a-high-performance-thread-safe-lru-cache-using-monitor",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-create-a-high-performance-thread-safe-lru-cache-using-monitor",children:"\ud83d\uddc2\ufe0f Create a High-Performance Thread-Safe LRU Cache Using Monitor"}),"\n",(0,a.jsxs)(n.p,{children:["For a high-throughput shared cache with eviction, implement an LRU cache using a hash and a doubly-linked list behind ",(0,a.jsx)(n.code,{children:"MonitorMixin"}),". This avoids full-collection locks and supports reentrant calls."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'require \'monitor\'\n\nclass LRUCache\n  include MonitorMixin\n\n  Node = Struct.new(:key, :value, :prev, :next)\n\n  def initialize(max_size)\n    super()  # init MonitorMixin\n    @max_size = max_size\n    @map      = {}\n    @head     = Node.new(nil, nil)\n    @tail     = Node.new(nil, nil)\n    @head.next = @tail\n    @tail.prev = @head\n  end\n\n  def get(key)\n    synchronize do\n      node = @map[key] or return nil\n      remove(node)\n      insert_front(node)\n      node.value\n    end\n  end\n\n  def set(key, value)\n    synchronize do\n      if (node = @map[key])\n        node.value = value\n        remove(node)\n        insert_front(node)\n      else\n        node = Node.new(key, value)\n        @map[key] = node\n        insert_front(node)\n        evict if @map.size > @max_size\n      end\n    end\n  end\n\n  private\n\n  def remove(node)\n    node.prev.next = node.next\n    node.next.prev = node.prev\n  end\n\n  def insert_front(node)\n    node.next       = @head.next\n    node.prev       = @head\n    @head.next.prev = node\n    @head.next      = node\n  end\n\n  def evict\n    lru = @tail.prev\n    remove(lru)\n    @map.delete(lru.key)\n  end\nend\n\n# Usage\ncache = LRUCache.new(100)\nthreads = 10.times.map do |i|\n  Thread.new do\n    key = "item_#{i % 50}"\n    cache.set(key, "value_#{i}")\n    puts cache.get(key)\n  end\nend\nthreads.each(&:join)\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.code,{children:"MonitorMixin"})," ensures reentrancy and fairness, while the internal list structure delivers constant-time get/set and eviction."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var r=t(36672);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);