"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19358],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(36672);const a={},r=o.createContext(a);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},86750:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"ruby/blocks/advanced/trampoline_optimization","title":"trampoline_optimization","description":"\ud83d\udc38 Trampoline Optimization to Avoid Stack Overflow","source":"@site/docs/ruby/blocks/advanced/trampoline_optimization.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/trampoline_optimization","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/trampoline_optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/trampoline_optimization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"retry_with_backoff","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/retry_with_backoff"},"next":{"title":"block_parameters","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/block_parameters"}}');var a=t(23420),r=t(65404);const i={},c=void 0,l={},s=[{value:"\ud83d\udc38 Trampoline Optimization to Avoid Stack Overflow",id:"-trampoline-optimization-to-avoid-stack-overflow",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-trampoline-optimization-to-avoid-stack-overflow",children:"\ud83d\udc38 Trampoline Optimization to Avoid Stack Overflow"}),"\n",(0,a.jsx)(n.p,{children:"Implement a trampoline to convert recursive calls into loops, preventing deep recursion from blowing the stack. Each step returns a Proc, which the trampoline repeatedly calls until completion."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"def trampoline(f)\n  loop do\n    result = f.call\n    return result unless result.is_a?(Proc)\n    f = result\n  end\nend\n\nfactorial = ->(n, acc = 1) do\n  if n.zero?\n    acc\n  else\n    -> { factorial.call(n - 1, acc * n) }\n  end\nend\n\np trampoline(-> { factorial.call(10000) }) #=> huge number without stack overflow\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);