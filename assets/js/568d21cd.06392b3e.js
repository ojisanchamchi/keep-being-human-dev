"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86560],{14312:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/define_method/middle/dynamic_accessors","title":"dynamic_accessors","description":"\ud83d\udd8b\ufe0f Dynamic Accessors","source":"@site/docs/ruby/define_method/middle/dynamic_accessors.md","sourceDirName":"ruby/define_method/middle","slug":"/ruby/define_method/middle/dynamic_accessors","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/dynamic_accessors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/middle/dynamic_accessors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"preserve_method_metadata","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/preserve_method_metadata"},"next":{"title":"dynamic_delegation","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/dynamic_delegation"}}');var s=t(23420),d=t(65404);const i={},c=void 0,r={},o=[{value:"\ud83d\udd8b\ufe0f Dynamic Accessors",id:"\ufe0f-dynamic-accessors",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-dynamic-accessors",children:"\ud83d\udd8b\ufe0f Dynamic Accessors"}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"define_method"})," to generate attribute readers and writers on the fly, reducing boilerplate for simple data objects. This is especially handy when you don\u2019t know the attributes at class-definition time."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'class DataObject\n  def initialize(attrs = {})\n    attrs.each do |name, value|\n      self.class.define_method(name) { instance_variable_get("@#{name}") }\n      self.class.define_method("#{name}=") { |val| instance_variable_set("@#{name}", val) }\n      send("#{name}=", value)\n    end\n  end\nend\n\nobj = DataObject.new(name: "Alice", age: 30)\nputs obj.name  # => "Alice"\nobj.age = 31\nputs obj.age   # => 31\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here, you iterate over a hash of attributes and define getters/setters dynamically, keeping your class definition DRY."})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(36672);const s={},d=a.createContext(s);function i(e){const n=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);