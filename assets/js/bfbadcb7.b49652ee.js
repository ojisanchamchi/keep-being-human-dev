"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45914],{18669:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/enumerables/expert/dynamic_slice_when","title":"dynamic_slice_when","description":"\u2702\ufe0f Dynamic Grouping with Enumerable#slice_when for On-the-Fly Segmentation","source":"@site/docs/ruby/enumerables/expert/dynamic_slice_when.md","sourceDirName":"ruby/enumerables/expert","slug":"/ruby/enumerables/expert/dynamic_slice_when","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/dynamic_slice_when","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/expert/dynamic_slice_when.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_enumerable_deep_traversal","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/custom_enumerable_deep_traversal"},"next":{"title":"fiber_based_enumerator","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/fiber_based_enumerator"}}');var s=t(23420),a=t(65404);const i={},o=void 0,c={},u=[{value:"\u2702\ufe0f Dynamic Grouping with Enumerable#slice_when for On-the-Fly Segmentation",id:"\ufe0f-dynamic-grouping-with-enumerableslice_when-for-on-the-fly-segmentation",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-dynamic-grouping-with-enumerableslice_when-for-on-the-fly-segmentation",children:"\u2702\ufe0f Dynamic Grouping with Enumerable#slice_when for On-the-Fly Segmentation"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"slice_when"})," to split a sequence whenever a custom predicate between consecutive elements is true. This technique shines for log segmentation, time\u2010series bursts, or record boundary detection without buffering entire arrays."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"data = [1,1,2,2,2,3,4,4,5]\ngroups = data.slice_when { |prev, curr| prev != curr }.to_a\n# => [[1,1],[2,2,2],[3],[4,4],[5]]\n\n# Example: group timestamps by >5s gap\ntimestamps = [0,1,2,10,11,20,21]\ngroups = timestamps.slice_when { |a,b| b - a > 5 }.to_a\n# => [[0,1,2],[10,11],[20,21]]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(36672);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);