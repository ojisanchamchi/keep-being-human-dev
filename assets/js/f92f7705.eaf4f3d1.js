"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63439],{65404:(e,a,n)=>{n.d(a,{R:()=>t,x:()=>c});var i=n(36672);const l={},r=i.createContext(l);function t(e){const a=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:a},e.children)}},81130:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>c,default:()=>b,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/variables/advanced/dynamic_local_variables","title":"dynamic_local_variables","description":"\ud83d\udd0d Dynamic Local Variables with Binding","source":"@site/docs/ruby/variables/advanced/dynamic_local_variables.md","sourceDirName":"ruby/variables/advanced","slug":"/ruby/variables/advanced/dynamic_local_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/dynamic_local_variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/advanced/dynamic_local_variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_instance_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/dynamic_instance_variables"},"next":{"title":"thread_local_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/thread_local_variables"}}');var l=n(23420),r=n(65404);const t={},c=void 0,s={},d=[{value:"\ud83d\udd0d Dynamic Local Variables with Binding",id:"-dynamic-local-variables-with-binding",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h2,{id:"-dynamic-local-variables-with-binding",children:"\ud83d\udd0d Dynamic Local Variables with Binding"}),"\n",(0,l.jsxs)(a.p,{children:["Ruby's ",(0,l.jsx)(a.code,{children:"Binding"})," object allows introspection and manipulation of local variables at runtime, which is invaluable for metaprogramming and live debugging. You can retrieve, set, and even define new local variables dynamically using ",(0,l.jsx)(a.code,{children:"local_variable_*"})," methods and ",(0,l.jsx)(a.code,{children:"eval"}),". This approach enables on\u2011the\u2011fly adjustments to scope without redefining methods."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-ruby",children:'def demo_binding\n  x = 1\n  b = binding\n\n  # List existing locals\n  p b.local_variables            # => [:x]\n\n  # Define a new local variable `y`\n  b.local_variable_set(:y, 2)\n  p b.eval("x + y")            # => 3\n\n  # Create and retrieve another\n  b.eval("z = x * y")\n  p b.local_variable_get(:z)     # => 2\nend\n\ndemo_binding\n'})})]})}function b(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);