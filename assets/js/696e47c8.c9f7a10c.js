"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[67677],{38766:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"rails/encryption/expert/active_record_attribute_encryption","title":"active_record_attribute_encryption","description":"\ud83c\udff7\ufe0f Customize Per-Attribute Encryption in ActiveRecord","source":"@site/docs/rails/encryption/expert/active_record_attribute_encryption.md","sourceDirName":"rails/encryption/expert","slug":"/rails/encryption/expert/active_record_attribute_encryption","permalink":"/keep-being-human-dev/docs/rails/encryption/expert/active_record_attribute_encryption","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/encryption/expert/active_record_attribute_encryption.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rails_credentials","permalink":"/keep-being-human-dev/docs/rails/encryption/beginner/rails_credentials"},"next":{"title":"authenticated_encryption_with_aad","permalink":"/keep-being-human-dev/docs/rails/encryption/expert/authenticated_encryption_with_aad"}}');var r=t(23420),c=t(65404);const o={},a=void 0,s={},p=[{value:"\ud83c\udff7\ufe0f Customize Per-Attribute Encryption in ActiveRecord",id:"\ufe0f-customize-per-attribute-encryption-in-activerecord",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-customize-per-attribute-encryption-in-activerecord",children:"\ud83c\udff7\ufe0f Customize Per-Attribute Encryption in ActiveRecord"}),"\n",(0,r.jsx)(n.p,{children:"Rails 7+ natively supports per-attribute encryption with deterministic or random schemes. You can tailor encryption on a per-model basis, enabling features like case-insensitive lookups via deterministic encryption or full confidentiality with random nonces."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    config.active_record.encryption.primary_key = Rails.application.credentials.db_encryption[:primary_key]\n    config.active_record.encryption.deterministic_key = Rails.application.credentials.db_encryption[:deterministic_key]\n    config.active_record.encryption.support_unencrypted_data = false\n  end\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  # Deterministic encryption for lookups (e.g., find_by)\n  encrypts :email, deterministic: true, downcase: true\n\n  # Random (non-deterministic) encryption for sensitive blobs\n  encrypts :session_token, deterministic: false\nend\n\n# Migration to rotate existing data\nclass RotateUserEmailEncryption < ActiveRecord::Migration[7.0]\n  disable_ddl_transaction!\n  def up\n    say_with_time "Re-encrypting user emails with new key" do\n      User.find_each(batch_size: 1000) do |user|\n        user.update_column(:email, user.email)\n      end\n    end\n  end\nend\n'})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(36672);const r={},c=i.createContext(r);function o(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);