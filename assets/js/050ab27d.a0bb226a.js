"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6774],{42601:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/caching/expert/localcache_with_remote_store","title":"localcache_with_remote_store","description":"\ud83d\udd75\ufe0f Compose LocalCache with Remote Store for Ultra-Fast Reads","source":"@site/docs/rails/caching/expert/localcache_with_remote_store.md","sourceDirName":"rails/caching/expert","slug":"/rails/caching/expert/localcache_with_remote_store","permalink":"/keep-being-human-dev/docs/rails/caching/expert/localcache_with_remote_store","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/expert/localcache_with_remote_store.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"http_conditional_get","permalink":"/keep-being-human-dev/docs/rails/caching/expert/http_conditional_get"},"next":{"title":"race_condition_ttl","permalink":"/keep-being-human-dev/docs/rails/caching/expert/race_condition_ttl"}}');var c=r(23420),a=r(65404);const s={},n=void 0,i={},l=[{value:"\ud83d\udd75\ufe0f Compose LocalCache with Remote Store for Ultra-Fast Reads",id:"\ufe0f-compose-localcache-with-remote-store-for-ultra-fast-reads",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"\ufe0f-compose-localcache-with-remote-store-for-ultra-fast-reads",children:"\ud83d\udd75\ufe0f Compose LocalCache with Remote Store for Ultra-Fast Reads"}),"\n",(0,c.jsxs)(t.p,{children:["Use ",(0,c.jsx)(t.code,{children:"ActiveSupport::Cache::Strategy::LocalCache"})," in front of your remote cache to ensure each request hits the remote store only once per key, then serves subsequent reads from thread-local memory."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:'# config/initializers/cache_strategy.rb\nremote_store = ActiveSupport::Cache.lookup_store(:mem_cache_store, "localhost:11211", namespace: "my_app_v1")\nlocal_plus_remote = ActiveSupport::Cache::Strategy::LocalCache.new(remote_store)\nRails.application.config.cache_store = local_plus_remote\n\n# In a controller or model\nRails.cache.fetch("user:#{current_user.id}") { current_user.to_h }\n# Subsequent reads in the same request are served from LocalCache\n'})}),"\n",(0,c.jsx)(t.p,{children:"This pattern drastically reduces round trips to your cache node, especially in views or service objects that repeatedly access the same keys."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>n});var o=r(36672);const c={},a=o.createContext(c);function s(e){const t=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);