"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53554],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var a=t(36672);const s={},i=a.createContext(s);function d(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(i.Provider,{value:n},e.children)}},66714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/hashes/middle/invert_handle_duplicates","title":"invert_handle_duplicates","description":"\u267b\ufe0f Inverting a Hash and Handling Duplicate Values","source":"@site/docs/ruby/hashes/middle/invert_handle_duplicates.md","sourceDirName":"ruby/hashes/middle","slug":"/ruby/hashes/middle/invert_handle_duplicates","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/invert_handle_duplicates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/middle/invert_handle_duplicates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fetch_with_default_block","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/fetch_with_default_block"},"next":{"title":"merge_with_block","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/merge_with_block"}}');var s=t(23420),i=t(65404);const d={},r=void 0,c={},l=[{value:"\u267b\ufe0f Inverting a Hash and Handling Duplicate Values",id:"\ufe0f-inverting-a-hash-and-handling-duplicate-values",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-inverting-a-hash-and-handling-duplicate-values",children:"\u267b\ufe0f Inverting a Hash and Handling Duplicate Values"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Hash#invert"})," swaps keys and values but loses duplicates. To preserve all keys with the same value, you can ",(0,s.jsx)(n.code,{children:"each_with_object"})," to group them into arrays."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"h = { a: 1, b: 2, c: 1 }\n# Simple invert loses duplicates:\nh.invert\n# => { 1 => :c, 2 => :b }\n\n# Group keys by their values:\ngrouped = h.each_with_object(Hash.new { |hsh, k| hsh[k] = [] }) do |(k, v), acc|\n  acc[v] << k\nend\n# => { 1 => [:a, :c], 2 => [:b] }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);