"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24261],{65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var r=n(36672);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}},93788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/minitest/expert/parallel_test_sharding","title":"parallel_test_sharding","description":"\u26a1 Parallel Test Execution and Sharding","source":"@site/docs/ruby/minitest/expert/parallel_test_sharding.md","sourceDirName":"ruby/minitest/expert","slug":"/ruby/minitest/expert/parallel_test_sharding","permalink":"/keep-being-human-dev/docs/ruby/minitest/expert/parallel_test_sharding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/minitest/expert/parallel_test_sharding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_test_generation","permalink":"/keep-being-human-dev/docs/ruby/minitest/expert/dynamic_test_generation"},"next":{"title":"property_based_with_rantly","permalink":"/keep-being-human-dev/docs/ruby/minitest/expert/property_based_with_rantly"}}');var s=n(23420),a=n(65404);const i={},l=void 0,o={},c=[{value:"\u26a1 Parallel Test Execution and Sharding",id:"-parallel-test-execution-and-sharding",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-parallel-test-execution-and-sharding",children:"\u26a1 Parallel Test Execution and Sharding"}),"\n",(0,s.jsxs)(t.p,{children:["Leverage test-level parallelism and custom sharding logic to run large suites across multiple cores or CI nodes. Use ",(0,s.jsx)(t.code,{children:"parallelize_me!"})," in Rails, or manually fork processes for pure Ruby."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# test/test_helper.rb\nrequire 'parallel_tests'\n\nclass ActiveSupport::TestCase\n  # automatically splits tests into N shards\n  parallelize(workers: ENV.fetch('TEST_WORKERS', 4).to_i)\nend\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In CI, set ",(0,s.jsx)(t.code,{children:"TEST_WORKERS"})," per node and specify ",(0,s.jsx)(t.code,{children:"TEST_ENV_NUMBER"})," to pick a shard:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# On Node 1\nTEST_WORKERS=4 TEST_ENV_NUMBER=1 bundle exec rake test\n# On Node 2\nTEST_WORKERS=4 TEST_ENV_NUMBER=2 bundle exec rake test\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);