"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33713],{63791:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/reflection/beginner/dynamic_method_invocation","title":"dynamic_method_invocation","description":"\u2699\ufe0f Dynamically Invoke Methods with send","source":"@site/docs/ruby/reflection/beginner/dynamic_method_invocation.md","sourceDirName":"ruby/reflection/beginner","slug":"/ruby/reflection/beginner/dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/dynamic_method_invocation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/beginner/dynamic_method_invocation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tracepoint_method_tracing","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/tracepoint_method_tracing"},"next":{"title":"inspect_instance_variables","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/inspect_instance_variables"}}');var o=t(23420),c=t(65404);const s={},r=void 0,a={},d=[{value:"\u2699\ufe0f Dynamically Invoke Methods with <code>send</code>",id:"\ufe0f-dynamically-invoke-methods-with-send",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"\ufe0f-dynamically-invoke-methods-with-send",children:["\u2699\ufe0f Dynamically Invoke Methods with ",(0,o.jsx)(n.code,{children:"send"})]}),"\n",(0,o.jsxs)(n.p,{children:["Ruby\u2019s ",(0,o.jsx)(n.code,{children:"send"})," (or ",(0,o.jsx)(n.code,{children:"public_send"}),") lets you call a method by name at runtime, enabling flexible and dynamic behavior. This is particularly useful when the exact method to call isn\u2019t known until execution."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'method_name = :upcase\ntext = "hello"\nresult = text.send(method_name)\nputs result  #=> "HELLO"\n\n# public_send respects method visibility (won\u2019t call private methods)\ntext.public_send(:upcase)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"public_send"})," for safer reflective calls that respect method visibility constraints."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(36672);const o={},c=i.createContext(o);function s(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);