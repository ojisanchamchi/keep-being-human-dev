"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[11930],{30017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>i,frontMatter:()=>o,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"gems/httparty/advanced/custom_httparty_parser","title":"custom_httparty_parser","description":"\ud83d\ude80 Custom Response Parser for HTTParty","source":"@site/docs/gems/httparty/advanced/custom_httparty_parser.md","sourceDirName":"gems/httparty/advanced","slug":"/gems/httparty/advanced/custom_httparty_parser","permalink":"/keep-being-human-dev/docs/gems/httparty/advanced/custom_httparty_parser","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/httparty/advanced/custom_httparty_parser.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"model_geocoding_setup","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/model_geocoding_setup"},"next":{"title":"httparty_with_retry","permalink":"/keep-being-human-dev/docs/gems/httparty/advanced/httparty_with_retry"}}');var s=n(23420),a=n(65404);const o={},c=void 0,d={},p=[{value:"\ud83d\ude80 Custom Response Parser for HTTParty",id:"-custom-response-parser-for-httparty",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-custom-response-parser-for-httparty",children:"\ud83d\ude80 Custom Response Parser for HTTParty"}),"\n",(0,s.jsx)(t.p,{children:"HTTParty allows you to override its default parsers to handle non-standard APIs or convert response keys to your preferred format. By defining a custom parser, you can automatically transform snake_case keys to camelCase (or vice versa), strip unwanted metadata, or parse unusual content types."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'httparty'\n\nclass CustomParser\n  def self.call(body, format)\n    json = JSON.parse(body)\n    # Convert all keys to snake_case\n    transform_keys = ->(obj) do\n      case obj\n      when Array\n        obj.map(&transform_keys)\n      when Hash\n        obj.each_with_object({}) do |(k, v), memo|\n          new_key = k.gsub(/([A-Z])/, '_\\\\1').downcase\n          memo[new_key] = transform_keys.call(v)\n        end\n      else\n        obj\n      end\n    end\n    transform_keys.call(json)\n  end\nend\n\nclass MyClient\n  include HTTParty\n  base_uri 'https://api.example.com'\n  parser CustomParser\n\n  def fetch_data\n    self.class.get('/data.json')\n  end\nend\n\nclient = MyClient.new\np client.fetch_data # => keys are now snake_case\n"})})]})}function i(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(36672);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);