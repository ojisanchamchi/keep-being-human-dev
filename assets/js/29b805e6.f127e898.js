"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94158],{57774:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>s});const c=JSON.parse('{"id":"ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md","title":"deadlock_prevention.md","description":"\ud83d\udee1 Deadlock Prevention with Ordered Locks and try_lock","source":"@site/docs/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md.md","sourceDirName":"ruby/concurrency_and_mutexes/advanced","slug":"/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"condition_variable_coordination.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md"},"next":{"title":"double_checked_locking.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md"}}');var d=o(23420),r=o(65404);const t={},a=void 0,i={},s=[{value:"\ud83d\udee1 Deadlock Prevention with Ordered Locks and try_lock",id:"-deadlock-prevention-with-ordered-locks-and-try_lock",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-deadlock-prevention-with-ordered-locks-and-try_lock",children:"\ud83d\udee1 Deadlock Prevention with Ordered Locks and try_lock"}),"\n",(0,d.jsxs)(n.p,{children:["When multiple locks may be acquired in different parts of code, enforce a global lock order or use ",(0,d.jsx)(n.code,{children:"try_lock"})," with back-off to avoid deadlocks. Ordering ensures threads acquire locks predictably."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"lock_a = Mutex.new\nlock_b = Mutex.new\n\ndef safe_operation(lock1, lock2)\n  # Always lock in the same order\n  first, second = [lock1, lock2].sort_by(&:object_id)\n\n  if first.try_lock\n    begin\n      if second.try_lock\n        begin\n          # critical section using both locks\n          yield\n        ensure\n          second.unlock\n        end\n      else\n        # couldn't get second lock, back off\n        sleep(0.001)\n      end\n    ensure\n      first.unlock\n    end\n  else\n    # couldn't get first lock, back off\n    sleep(0.001)\n  end\nend\n\nthreads = 10.times.map do\n  Thread.new do\n    100.times do |i|\n      safe_operation(lock_a, lock_b) do\n        # perform work\n        puts \"Thread #{Thread.current.object_id} at iteration #{i}\"\n      end\n    end\n  end\nend\nthreads.each(&:join)\n"})}),"\n",(0,d.jsxs)(n.p,{children:["By sorting locks by ",(0,d.jsx)(n.code,{children:"object_id"})," and using ",(0,d.jsx)(n.code,{children:"try_lock"}),", you ensure consistent ordering and non-blocking retries, effectively preventing deadlock."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var c=o(36672);const d={},r=c.createContext(d);function t(e){const n=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),c.createElement(r.Provider,{value:n},e.children)}}}]);