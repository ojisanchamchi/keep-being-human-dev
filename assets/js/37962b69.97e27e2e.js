"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1243],{51553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"ruby/metaprogramming/middle/method_missing_fallback","title":"method_missing_fallback","description":"\ud83d\udd0d Fallback Handling with method_missing","source":"@site/docs/ruby/metaprogramming/middle/method_missing_fallback.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/method_missing_fallback","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/method_missing_fallback","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/method_missing_fallback.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hook_method_added","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/hook_method_added"},"next":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/scoped_refinements"}}');var a=t(23420),s=t(65404);const r={},o=void 0,d={},m=[{value:"\ud83d\udd0d Fallback Handling with method_missing",id:"-fallback-handling-with-method_missing",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-fallback-handling-with-method_missing",children:"\ud83d\udd0d Fallback Handling with method_missing"}),"\n",(0,a.jsxs)(n.p,{children:["Implement ",(0,a.jsx)(n.code,{children:"method_missing"})," to catch undefined messages and handle them gracefully. This is useful for delegating calls, building dynamic proxies, or offering more informative errors. Remember to also override ",(0,a.jsx)(n.code,{children:"respond_to_missing?"})," to ensure compatibility."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'class Proxy\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &block)\n    if @target.respond_to?(name)\n      @target.public_send(name, *args, &block)\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @target.respond_to?(name) || super\n  end\nend\n\nproxy = Proxy.new([1, 2, 3])\nproxy.map(&:to_s)  # => ["1", "2", "3"]\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(36672);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);