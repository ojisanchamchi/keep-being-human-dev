"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54376],{15543:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"ruby/hashes/expert/dynamic_struct_from_hash","title":"dynamic_struct_from_hash","description":"\ud83c\udfd7\ufe0f Dynamic Struct Generation from Hash Keys","source":"@site/docs/ruby/hashes/expert/dynamic_struct_from_hash.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/dynamic_struct_from_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/dynamic_struct_from_hash","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/dynamic_struct_from_hash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_deep_merge_with_conflicts","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/custom_deep_merge_with_conflicts"},"next":{"title":"identity_vs_equality_key_comparison","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/identity_vs_equality_key_comparison"}}');var r=t(23420),a=t(65404);const c={},o=void 0,i={},h=[{value:"\ud83c\udfd7\ufe0f Dynamic Struct Generation from Hash Keys",id:"\ufe0f-dynamic-struct-generation-from-hash-keys",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"\ufe0f-dynamic-struct-generation-from-hash-keys",children:"\ud83c\udfd7\ufe0f Dynamic Struct Generation from Hash Keys"}),"\n",(0,r.jsxs)(s.p,{children:["For performance\u2010sensitive cases, converting hashes to ",(0,r.jsx)(s.code,{children:"Struct"})," offers faster dot\u2010notation access. Dynamically generate and cache classes based on key sets:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"module StructCache\n  @cache = {}\n\n  def self.from_hash(hash)\n    keys = hash.keys.sort\n    klass = @cache[keys] ||= Struct.new(*keys)\n    klass.new(*keys.map { |k| hash[k] })\n  end\nend\n\ndata = { id: 1, name: 'Eve', age: 28 }\nuser = StructCache.from_hash(data)\n\nputs user.name  #=> \"Eve\"\n"})}),"\n",(0,r.jsx)(s.p,{children:"This yields near\u2010Struct performance for repeated access patterns and avoids creating new classes for identical key sets."})]})}function d(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>o});var n=t(36672);const r={},a=n.createContext(r);function c(e){const s=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);