"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17559],{62862:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/strings/middle/string_slicing_ranges","title":"string_slicing_ranges","description":"\u2702\ufe0f Slice Strings Using Ranges and Negative Indices","source":"@site/docs/ruby/strings/middle/string_slicing_ranges.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/string_slicing_ranges","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/string_slicing_ranges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/string_slicing_ranges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"string_formatting_sprintf","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/string_formatting_sprintf"},"next":{"title":"symbol_dynamic_memoization","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_dynamic_memoization"}}');var t=s(23420),r=s(65404);const a={},c=void 0,o={},d=[{value:"\u2702\ufe0f Slice Strings Using Ranges and Negative Indices",id:"\ufe0f-slice-strings-using-ranges-and-negative-indices",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-slice-strings-using-ranges-and-negative-indices",children:"\u2702\ufe0f Slice Strings Using Ranges and Negative Indices"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby\u2019s Range-based slicing lets you extract substrings succinctly by specifying start and end indices or lengths. You can even use negative indices to count from the end, which avoids manual ",(0,t.jsx)(n.code,{children:"length"})," calculations. This makes your code cleaner and more intention-revealing."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'text = "Hello, World!"\n# From index 7 to 11 (inclusive)\nputs text[7..11]       # => "World"\n# First five characters\nputs text[0,5]         # => "Hello"\n# Last six characters\nputs text[-6,6]        # => "World!"\n'})})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(36672);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);