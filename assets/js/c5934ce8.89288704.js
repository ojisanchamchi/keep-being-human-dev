"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41039],{9781:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/classes_and_modules/expert/dynamic_method_generation","title":"dynamic_method_generation","description":"\u2699\ufe0f Dynamic Method Generation via define_method","source":"@site/docs/ruby/classes_and_modules/expert/dynamic_method_generation.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/dynamic_method_generation","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/dynamic_method_generation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/dynamic_method_generation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"const_missing_dynamic_resolution","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/const_missing_dynamic_resolution"},"next":{"title":"forwardable_delegation","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/forwardable_delegation"}}');var o=t(23420),s=t(65404);const r={},d=void 0,i={},c=[{value:"\u2699\ufe0f Dynamic Method Generation via <code>define_method</code>",id:"\ufe0f-dynamic-method-generation-via-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"\ufe0f-dynamic-method-generation-via-define_method",children:["\u2699\ufe0f Dynamic Method Generation via ",(0,o.jsx)(n.code,{children:"define_method"})]}),"\n",(0,o.jsx)(n.p,{children:"Generate methods at runtime based on metadata, reducing boilerplate and enabling flexible APIs. By iterating over a list of attributes or actions, you can produce customized methods without repetitive code."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class APIClient\n  %i[get post put delete].each do |http_verb|\n    define_method(http_verb) do |path, params={}|\n      request(http_verb, path, params)\n    end\n  end\n\n  private\n  def request(verb, path, params)\n    # perform HTTP call\n  end\nend\n"})}),"\n",(0,o.jsx)(n.p,{children:"This approach adapts easily when verbs or actions change, keeping your class DRY."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var a=t(36672);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);