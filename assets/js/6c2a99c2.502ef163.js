"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86004],{45301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"rails/middleware/middle/testing_middleware_integration","title":"testing_middleware_integration","description":"\ud83e\uddea Test Middleware in Isolation","source":"@site/docs/rails/middleware/middle/testing_middleware_integration.md","sourceDirName":"rails/middleware/middle","slug":"/rails/middleware/middle/testing_middleware_integration","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/testing_middleware_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/middle/testing_middleware_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"middleware_insertion_points","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/middleware_insertion_points"},"next":{"title":"bulk_upsert_with_upsert_all","permalink":"/keep-being-human-dev/docs/rails/models/advanced/bulk_upsert_with_upsert_all"}}');var r=n(23420),i=n(65404);const a={},d=void 0,o={},l=[{value:"\ud83e\uddea Test Middleware in Isolation",id:"-test-middleware-in-isolation",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-test-middleware-in-isolation",children:"\ud83e\uddea Test Middleware in Isolation"}),"\n",(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.code,{children:"Rack::MockRequest"})," to verify your middleware behaves correctly without booting the full Rails app. It helps you assert headers, status codes, or response modifications."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# spec/middleware/request_logger_spec.rb\nrequire 'rack/mock'\nrequire_relative '../../app/middleware/request_logger'\n\nRSpec.describe RequestLogger do\n  let(:app) { ->(env) { [200, {'Content-Type' => 'text/plain'}, ['OK']] } }\n  let(:middleware) { RequestLogger.new(app) }\n  let(:request) { Rack::MockRequest.new(middleware) }\n\n  it 'returns the downstream status and response' do\n    response = request.get('/test?foo=bar')\n    expect(response.status).to eq(200)\n    expect(response.body).to eq('OK')\n  end\nend\n"})}),"\n",(0,r.jsxs)(t.p,{children:["You can also stub ",(0,r.jsx)(t.code,{children:"Rails.logger"})," to assert that log messages are generated as expected."]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var s=n(36672);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);