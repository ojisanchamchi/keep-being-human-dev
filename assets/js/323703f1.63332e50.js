"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[802],{45963:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/enumerables/advanced/lazy_enumerators_infinite_streams","title":"lazy_enumerators_infinite_streams","description":"\ud83c\udf00 Harness Lazy Enumerators for Infinite Streams","source":"@site/docs/ruby/enumerables/advanced/lazy_enumerators_infinite_streams.md","sourceDirName":"ruby/enumerables/advanced","slug":"/ruby/enumerables/advanced/lazy_enumerators_infinite_streams","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/lazy_enumerators_infinite_streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/advanced/lazy_enumerators_infinite_streams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"external_iterators_enum_for","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/external_iterators_enum_for"},"next":{"title":"slice_when_custom_breaks","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/slice_when_custom_breaks"}}');var t=a(23420),s=a(65404);const i={},o=void 0,u={},c=[{value:"\ud83c\udf00 Harness Lazy Enumerators for Infinite Streams",id:"-harness-lazy-enumerators-for-infinite-streams",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-harness-lazy-enumerators-for-infinite-streams",children:"\ud83c\udf00 Harness Lazy Enumerators for Infinite Streams"}),"\n",(0,t.jsxs)(n.p,{children:["Enumerators in Ruby can be made lazy to handle potentially infinite sequences without exhausting memory. Using ",(0,t.jsx)(n.code,{children:"Enumerator.new"})," and ",(0,t.jsx)(n.code,{children:"lazy"}),", you can define streams like the Fibonacci sequence and retrieve only as many elements as you need on demand."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"fib = Enumerator.new do |y|\n  a, b = 0, 1\n  loop do\n    y << a\n    a, b = b, a + b\n  end\nend.lazy\n\np fib.take(10).to_a\n# => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(36672);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);