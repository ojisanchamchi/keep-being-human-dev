"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96913],{59341:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/blocks/middle/control_flow_within_blocks.md","title":"control_flow_within_blocks.md","description":"\ud83d\udd12 Short-Circuit Iterators with break, next, and return","source":"@site/docs/ruby/blocks/middle/control_flow_within_blocks.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/control_flow_within_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/control_flow_within_blocks.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/control_flow_within_blocks.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"check_block_presence.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/check_block_presence.md"},"next":{"title":"custom_each_iterator.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/custom_each_iterator.md"}}');var o=t(23420),c=t(65404);const i={},s=void 0,d={},a=[{value:"\ud83d\udd12 Short-Circuit Iterators with <code>break</code>, <code>next</code>, and <code>return</code>",id:"-short-circuit-iterators-with-break-next-and-return",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-short-circuit-iterators-with-break-next-and-return",children:["\ud83d\udd12 Short-Circuit Iterators with ",(0,o.jsx)(n.code,{children:"break"}),", ",(0,o.jsx)(n.code,{children:"next"}),", and ",(0,o.jsx)(n.code,{children:"return"})]}),"\n",(0,o.jsxs)(n.p,{children:["Blocks can control the flow of their enclosing method differently depending on context. Use ",(0,o.jsx)(n.code,{children:"break"})," to exit an iterator, ",(0,o.jsx)(n.code,{children:"next"})," to skip, or ",(0,o.jsx)(n.code,{children:"return"})," to exit the entire method. Understand these semantics to avoid surprises."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'def find_first_even(array)\n  array.each do |n|\n    return n if n.even?\n  end\n  nil\nend\n\nputs find_first_even([1,3,4,5])\n# => 4\n\n[1,2,3].each do |n|\n  next unless n.even?\n  puts "Found even: #{n}"\n  break\nend\n# => Found even: 2\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(36672);const o={},c=r.createContext(o);function i(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);