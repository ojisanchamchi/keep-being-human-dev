"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41154],{43166:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/arrays/expert/metaprogramming_dynamic_array_methods.md","title":"metaprogramming_dynamic_array_methods.md","description":"\ud83e\udde9 Metaprogramming Dynamic Array Methods","source":"@site/docs/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoized_inject.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/memoized_inject.md"},"next":{"title":"n_dimensional_array_generator.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/n_dimensional_array_generator.md"}}');var t=n(23420),m=n(65404);const o={},i=void 0,s={},d=[{value:"\ud83e\udde9 Metaprogramming Dynamic Array Methods",id:"-metaprogramming-dynamic-array-methods",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,m.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-metaprogramming-dynamic-array-methods",children:"\ud83e\udde9 Metaprogramming Dynamic Array Methods"}),"\n",(0,t.jsx)(r.p,{children:"Dynamically define bespoke array transformations using metaprogramming. Generate methods for common filters at runtime to reduce boilerplate and tailor performance."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'module DynamicFilters\n  %w[even odd prime].each do |filter|\n    define_method("select_#{filter}") do\n      select { |n| n.send("#{filter}?") }\n    end\n  end\nend\n\nclass Array\n  include DynamicFilters\nend\n\n# Usage\np [1,2,3,4,5].select_prime   # => [2,3,5]\n'})})]})}function p(e={}){const{wrapper:r}={...(0,m.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>i});var a=n(36672);const t={},m=a.createContext(t);function o(e){const r=a.useContext(m);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(m.Provider,{value:r},e.children)}}}]);