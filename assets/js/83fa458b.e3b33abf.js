"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33428],{49720:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>i,frontMatter:()=>u,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/enumerables/expert/custom_enumerable_deep_traversal","title":"custom_enumerable_deep_traversal","description":"\ud83c\udfed Building Custom Enumerable Classes for Complex Data Structures","source":"@site/docs/ruby/enumerables/expert/custom_enumerable_deep_traversal.md","sourceDirName":"ruby/enumerables/expert","slug":"/ruby/enumerables/expert/custom_enumerable_deep_traversal","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/custom_enumerable_deep_traversal","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/expert/custom_enumerable_deep_traversal.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transform_with_map","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/transform_with_map"},"next":{"title":"dynamic_slice_when","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/dynamic_slice_when"}}');var a=r(23420),s=r(65404);const u={},l=void 0,c={},o=[{value:"\ud83c\udfed Building Custom Enumerable Classes for Complex Data Structures",id:"-building-custom-enumerable-classes-for-complex-data-structures",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-building-custom-enumerable-classes-for-complex-data-structures",children:"\ud83c\udfed Building Custom Enumerable Classes for Complex Data Structures"}),"\n",(0,a.jsxs)(n.p,{children:["Implementing ",(0,a.jsx)(n.code,{children:"each"})," in your own class unlocks the full power of ",(0,a.jsx)(n.code,{children:"Enumerable"}),"\u2014",(0,a.jsx)(n.code,{children:"map"}),", ",(0,a.jsx)(n.code,{children:"select"}),", ",(0,a.jsx)(n.code,{children:"group_by"}),", and more. Here\u2019s an example of depth\u2010first traversal over a nested hash tree. You can now call any Enumerable method directly on your class, making your API clean and idiomatic."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class DeepFinder\n  include Enumerable\n\n  def initialize(tree)\n    @tree = tree\n  end\n\n  def each\n    stack = [@tree]\n    until stack.empty?\n      node = stack.pop\n      yield node[:value]\n      stack.concat(node[:children]) if node[:children]\n    end\n  end\nend\n\n# Usage\ntree = { value: 1, children: [ { value: 2 }, { value: 3, children: [ { value: 4 } ] } ] }\nfinder = DeepFinder.new(tree)\nputs finder.select { |v| v.odd? }  # => [1, 3]\n"})})]})}function i(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>u,x:()=>l});var t=r(36672);const a={},s=t.createContext(a);function u(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:u(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);