"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33942],{65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(36672);const i={},o=t.createContext(i);function a(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:r},e.children)}},73972:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/numbers/expert/expert_prime_enumeration","title":"expert_prime_enumeration","description":"\ud83c\udfb2 Efficient Prime Enumeration with Pollard\u2019s Rho","source":"@site/docs/ruby/numbers/expert/expert_prime_enumeration.md","sourceDirName":"ruby/numbers/expert","slug":"/ruby/numbers/expert/expert_prime_enumeration","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_prime_enumeration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/numbers/expert/expert_prime_enumeration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"expert_ffi_math_library","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_ffi_math_library"},"next":{"title":"expert_rational_complex","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_rational_complex"}}');var i=n(23420),o=n(65404);const a={},s=void 0,u={},c=[{value:"\ud83c\udfb2 Efficient Prime Enumeration with Pollard\u2019s Rho",id:"-efficient-prime-enumeration-with-pollards-rho",level:2}];function p(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"-efficient-prime-enumeration-with-pollards-rho",children:"\ud83c\udfb2 Efficient Prime Enumeration with Pollard\u2019s Rho"}),"\n",(0,i.jsxs)(r.p,{children:["For cryptographic or number\u2010theory tasks, Ruby\u2019s ",(0,i.jsx)(r.code,{children:"Prime"})," can be slow on huge numbers. Implement Pollard\u2019s Rho and wrap it in a lazy ",(0,i.jsx)(r.code,{children:"Enumerator"})," to factor or test large integers on demand without blocking your main thread."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"require 'prime'\n\ndef pollards_rho(n)\n  return n if n.even?\n  x, y, d = 2, 2, 1\n  f = ->(v){ (v*v + 1) % n }\n  until d != 1\n    x = f[x]\n    y = f[f[y]]\n    d = (x - y).abs.gcd(n)\n  end\n  d == n ? nil : d\nend\n\n# Lazy prime factorization\nPrime.lazy.select { |p| p > 2 }.first(100)       # first 100 odd primes\nfactor = pollards_rho(10**18 + 3)                # factor a 64-bit-ish composite\nputs \"Found factor: #{factor}\" if factor\n"})})]})}function m(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);