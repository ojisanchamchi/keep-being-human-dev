"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3886],{65404:(e,t,r)=>{r.d(t,{R:()=>l,x:()=>i});var s=r(36672);const n={},a=s.createContext(n);function l(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),s.createElement(a.Provider,{value:t},e.children)}},70121:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"rails/models/advanced/bulk_upsert_with_upsert_all","title":"bulk_upsert_with_upsert_all","description":"\ud83d\udd04 Performing Bulk Upserts with upsert_all","source":"@site/docs/rails/models/advanced/bulk_upsert_with_upsert_all.md","sourceDirName":"rails/models/advanced","slug":"/rails/models/advanced/bulk_upsert_with_upsert_all","permalink":"/keep-being-human-dev/docs/rails/models/advanced/bulk_upsert_with_upsert_all","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/advanced/bulk_upsert_with_upsert_all.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"testing_middleware_integration","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/testing_middleware_integration"},"next":{"title":"composite_primary_keys_usage","permalink":"/keep-being-human-dev/docs/rails/models/advanced/composite_primary_keys_usage"}}');var n=r(23420),a=r(65404);const l={},i=void 0,o={},u=[{value:"\ud83d\udd04 Performing Bulk Upserts with upsert_all",id:"-performing-bulk-upserts-with-upsert_all",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-performing-bulk-upserts-with-upsert_all",children:"\ud83d\udd04 Performing Bulk Upserts with upsert_all"}),"\n",(0,n.jsxs)(t.p,{children:["Use ",(0,n.jsx)(t.code,{children:"insert_all"})," or ",(0,n.jsx)(t.code,{children:"upsert_all"})," for high-performance bulk inserts/updates without callbacks and validations. On Postgres, specify ",(0,n.jsx)(t.code,{children:"unique_by"})," to perform upserts on conflict."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"# Prepare data\nrecords = [\n  { email: 'a@example.com', name: 'Alice', updated_at: Time.current },\n  { email: 'b@example.com', name: 'Bob',   updated_at: Time.current }\n]\n\n# Bulk upsert\nUser.upsert_all(records, unique_by: :index_users_on_email)\n"})})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);