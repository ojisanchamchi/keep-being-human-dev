"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39505],{65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(36672);const c={},i=t.createContext(c);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},73075:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/beginner/chain_method_stub","title":"chain_method_stub","description":"\ud83d\udd17 Stub Chained Methods with receivemessagechain","source":"@site/docs/gems/rspec/mocks_and_stubs/beginner/chain_method_stub.md","sourceDirName":"gems/rspec/mocks_and_stubs/beginner","slug":"/gems/rspec/mocks_and_stubs/beginner/chain_method_stub","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/chain_method_stub","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/beginner/chain_method_stub.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"argument_matching_stub","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/argument_matching_stub"},"next":{"title":"instance_double_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/instance_double_usage"}}');var c=s(23420),i=s(65404);const a={},r=void 0,o={},d=[{value:"\ud83d\udd17 Stub Chained Methods with <code>receive_message_chain</code>",id:"-stub-chained-methods-with-receive_message_chain",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h2,{id:"-stub-chained-methods-with-receive_message_chain",children:["\ud83d\udd17 Stub Chained Methods with ",(0,c.jsx)(n.code,{children:"receive_message_chain"})]}),"\n",(0,c.jsxs)(n.p,{children:["When you need to stub a chain of method calls on an object, ",(0,c.jsx)(n.code,{children:"receive_message_chain"})," lets you specify the chain in one go. Use it sparingly, as it can hide design issues, but it\u2019s handy for simple stubs."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"user = double('User')\nallow(user).to receive_message_chain(:profile, :full_name).and_return('Jane Doe')\n\nRSpec.describe GreetingService do\n  it 'greets the user by full name' do\n    service = GreetingService.new(user)\n    expect(service.greet).to eq('Hello, Jane Doe!')\n  end\nend\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}}}]);