"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17956],{50579:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/versioning/advanced/dynamic_api_version_constraints","title":"dynamic_api_version_constraints","description":"\ud83d\udee0\ufe0f Dynamic API Version Constraints","source":"@site/docs/rails/versioning/advanced/dynamic_api_version_constraints.md","sourceDirName":"rails/versioning/advanced","slug":"/rails/versioning/advanced/dynamic_api_version_constraints","permalink":"/keep-being-human-dev/docs/rails/versioning/advanced/dynamic_api_version_constraints","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/versioning/advanced/dynamic_api_version_constraints.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"reuse_tests_shared_examples","permalink":"/keep-being-human-dev/docs/rails/testing/middle/reuse_tests_shared_examples"},"next":{"title":"paper_trail_advanced_usage","permalink":"/keep-being-human-dev/docs/rails/versioning/advanced/paper_trail_advanced_usage"}}');var i=s(23420),r=s(65404);const t={},o=void 0,c={},d=[{value:"\ud83d\udee0\ufe0f Dynamic API Version Constraints",id:"\ufe0f-dynamic-api-version-constraints",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-dynamic-api-version-constraints",children:"\ud83d\udee0\ufe0f Dynamic API Version Constraints"}),"\n",(0,i.jsx)(n.p,{children:"Leverage a custom routing constraint to serve multiple API versions side by side, using headers or URL parameters. This approach keeps your controllers clean and allows seamless deprecation and rollback of endpoints without cluttering your routes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# lib/api_version_constraint.rb\nclass ApiVersionConstraint\n  def initialize(options)\n    @version = options[:version]\n    @default = options[:default] || false\n  end\n\n  def matches?(req)\n    version_in_header(req) || default_version?\n  end\n\n  private\n\n  def version_in_header(req)\n    accept = req.headers['Accept']\n    accept&.include?(\"application/vnd.myapp.v#{@version}+json\")\n  end\n\n  def default_version?\n    @default\n  end\nend\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/routes.rb\nRails.application.routes.draw do\n  namespace :api, defaults: { format: :json } do\n    scope module: :v1,\n          constraints: ApiVersionConstraint.new(version: 1, default: true) do\n      resources :posts\n    end\n\n    scope module: :v2,\n          constraints: ApiVersionConstraint.new(version: 2) do\n      resources :posts\n    end\n  end\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This lets clients request ",(0,i.jsx)(n.code,{children:"Accept: application/vnd.myapp.v2+json"})," or fall back to v1 when the header is absent."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var a=s(36672);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);