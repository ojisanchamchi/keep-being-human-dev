"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44700],{1608:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>u,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/classes_and_modules/middle/module_nesting_lookup","title":"module_nesting_lookup","description":"\ud83d\ude80 Understanding Constant Lookup in Nested Modules","source":"@site/docs/ruby/classes_and_modules/middle/module_nesting_lookup.md","sourceDirName":"ruby/classes_and_modules/middle","slug":"/ruby/classes_and_modules/middle/module_nesting_lookup","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_nesting_lookup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/middle/module_nesting_lookup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_function_usage","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_function_usage"},"next":{"title":"module_prepend","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_prepend"}}');var t=s(23420),d=s(65404);const u={},r=void 0,l={},a=[{value:"\ud83d\ude80 Understanding Constant Lookup in Nested Modules",id:"-understanding-constant-lookup-in-nested-modules",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-understanding-constant-lookup-in-nested-modules",children:"\ud83d\ude80 Understanding Constant Lookup in Nested Modules"}),"\n",(0,t.jsx)(n.p,{children:"Ruby searches constants lexically before going to ancestors. Nesting modules affects how constants are resolved, so structure your modules to avoid unexpected lookups."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module Outer\n  X = 'outer'\n\n  module Inner\n    X = 'inner'\n\n    def self.value\n      X            # 'inner' from current scope\n    end\n\n    def self.outer_x\n      ::Outer::X  # 'outer' using top-level lookup\n    end\n  end\nend\n\nputs Outer::Inner.value      # => \"inner\"\nputs Outer::Inner.outer_x    # => \"outer\"\n"})})]})}function c(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>u,x:()=>r});var o=s(36672);const t={},d=o.createContext(t);function u(e){const n=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:u(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);