"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39186],{30690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"ruby/strings/expert/binary_parsing_with_unpack_pack","title":"binary_parsing_with_unpack_pack","description":"\ud83d\udd2c Parse and build binary protocols with unpack/pack","source":"@site/docs/ruby/strings/expert/binary_parsing_with_unpack_pack.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/binary_parsing_with_unpack_pack","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/binary_parsing_with_unpack_pack","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/binary_parsing_with_unpack_pack.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"binary_data_handling_string_b","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/binary_data_handling_string_b"},"next":{"title":"freeze_dedupe_strings","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/freeze_dedupe_strings"}}');var r=t(23420),s=t(65404);const i={},c=void 0,o={},p=[{value:"\ud83d\udd2c Parse and build binary protocols with unpack/pack",id:"-parse-and-build-binary-protocols-with-unpackpack",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-parse-and-build-binary-protocols-with-unpackpack",children:"\ud83d\udd2c Parse and build binary protocols with unpack/pack"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\u2019s ",(0,r.jsx)(n.code,{children:"String#unpack"})," and ",(0,r.jsx)(n.code,{children:"Array#pack"})," provide direct access to binary data layouts. Use template directives (",(0,r.jsx)(n.code,{children:"C"}),", ",(0,r.jsx)(n.code,{children:"L<"}),", ",(0,r.jsx)(n.code,{children:"n"}),", etc.) to decode headers or serialize messages without external gems. This is your go\u2011to for implementing compact network or file protocols."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Unpack a 32-bit big\u2011endian length and payload\ndata = [0x00_00_00_05, 0x61_62_63_64_65].pack('N C5')\nlength, *bytes = data.unpack('N C*')\npayload = bytes.pack('C*')\nputs length     # => 5\nputs payload    # => \"abcde\"\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(36672);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);