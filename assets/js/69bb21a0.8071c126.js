"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7776],{65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var s=n(36672);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}},68738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>m});const s=JSON.parse('{"id":"rails/views/expert/mustache_template_integration","title":"mustache_template_integration","description":"\ud83c\udf0d Integrate Mustache Templates for Client-side Rendering","source":"@site/docs/rails/views/expert/mustache_template_integration.md","sourceDirName":"rails/views/expert","slug":"/rails/views/expert/mustache_template_integration","permalink":"/keep-being-human-dev/docs/rails/views/expert/mustache_template_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/views/expert/mustache_template_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_form_builder_dsl","permalink":"/keep-being-human-dev/docs/rails/views/expert/custom_form_builder_dsl"},"next":{"title":"nested_fragment_caching_strategies","permalink":"/keep-being-human-dev/docs/rails/views/expert/nested_fragment_caching_strategies"}}');var r=n(23420),i=n(65404);const a={},c=void 0,o={},m=[{value:"\ud83c\udf0d Integrate Mustache Templates for Client-side Rendering",id:"-integrate-mustache-templates-for-client-side-rendering",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-integrate-mustache-templates-for-client-side-rendering",children:"\ud83c\udf0d Integrate Mustache Templates for Client-side Rendering"}),"\n",(0,r.jsx)(t.p,{children:"Precompile Mustache/Handlebars templates server-side then render in views to minimize JS bundling and leverage existing Ruby data transforms."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/mustache.rb\nMustache.template_path = Rails.root.join('app', 'views', 'mustache')\n"})}),"\n",(0,r.jsx)(t.p,{children:"In view:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-erb",children:"<script id=\"comment-template\" type=\"x-tmpl-mustache\">\n  {{#comments}}\n    <p>{{ author }}: {{ body }}</p>\n  {{/comments}}\n<\/script>\n<script>\n  const template = Mustache.compile(document.getElementById('comment-template').innerHTML)\n  document.getElementById('comments').innerHTML = template({ comments: <%= raw @comments.to_json %> })\n<\/script>\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);