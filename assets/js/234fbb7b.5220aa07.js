"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38199],{65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var i=n(36672);const o={},t=i.createContext(o);function a(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(t.Provider,{value:r},e.children)}},76017:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"ruby/file_io/expert/memory_map_file","title":"memory_map_file","description":"\ud83e\udde0 Use Memory-Mapped Files for Zero-Copy Access","source":"@site/docs/ruby/file_io/expert/memory_map_file.md","sourceDirName":"ruby/file_io/expert","slug":"/ruby/file_io/expert/memory_map_file","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/memory_map_file","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/expert/memory_map_file.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"atomic_file_write","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/atomic_file_write"},"next":{"title":"nonblocking_file_io","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/nonblocking_file_io"}}');var o=n(23420),t=n(65404);const a={},s=void 0,c={},m=[{value:"\ud83e\udde0 Use Memory-Mapped Files for Zero-Copy Access",id:"-use-memory-mapped-files-for-zero-copy-access",level:2}];function p(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-use-memory-mapped-files-for-zero-copy-access",children:"\ud83e\udde0 Use Memory-Mapped Files for Zero-Copy Access"}),"\n",(0,o.jsxs)(r.p,{children:["Memory\u2011mapping a file lets you treat file contents as if they were in-memory arrays, avoiding extra buffer copies and leveraging the OS page cache. For large datasets or performance\u2011critical workloads (e.g., binary parsing, image processing), use the ",(0,o.jsx)(r.code,{children:"mmap"})," gem for direct and efficient access."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"require 'mmap'\n\n# Memory-map a 1GB file read-only\nmm = Mmap.new('large_data.bin', Mmap::MAP_SHARED, Mmap::PROT_READ)\n\n# Access bytes directly\nputs mm[0, 16].unpack('H*')\n\n# Modify in place if writable\n# mm.protect = Mmap::PROT_READ | Mmap::PROT_WRITE\n# mm[0] = 0xFF\n\nmm.unmap\n"})}),"\n",(0,o.jsx)(r.p,{children:"This approach bypasses Ruby\u2019s IO buffers and uses the OS\u2019s virtual memory mechanisms, providing near-native performance when iterating or slicing huge files."})]})}function l(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);