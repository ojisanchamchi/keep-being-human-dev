"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38130],{46355:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/xml/middle/build_xml_with_builder","title":"build_xml_with_builder","description":"\ud83d\udee0\ufe0f Building XML with the Builder Gem","source":"@site/docs/ruby/xml/middle/build_xml_with_builder.md","sourceDirName":"ruby/xml/middle","slug":"/ruby/xml/middle/build_xml_with_builder","permalink":"/keep-being-human-dev/docs/ruby/xml/middle/build_xml_with_builder","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/xml/middle/build_xml_with_builder.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nokogiri_xml_reader_streaming","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_xml_reader_streaming"},"next":{"title":"modify_xml_nodes_nokogiri","permalink":"/keep-being-human-dev/docs/ruby/xml/middle/modify_xml_nodes_nokogiri"}}');var r=t(23420),d=t(65404);const l={},o=void 0,s={},u=[{value:"\ud83d\udee0\ufe0f Building XML with the Builder Gem",id:"\ufe0f-building-xml-with-the-builder-gem",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-building-xml-with-the-builder-gem",children:"\ud83d\udee0\ufe0f Building XML with the Builder Gem"}),"\n",(0,r.jsx)(n.p,{children:"For generating XML programmatically, the Builder gem offers a clean DSL that maps Ruby blocks to XML nodes. This approach helps maintain readability and ease-of-change when constructing nested structures."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'builder'\n\ndef generate_feed(posts)\n  xml = Builder::XmlMarkup.new(indent: 2)\n  xml.instruct!  # <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  xml.feed(xmlns: 'http://www.w3.org/2005/Atom') do\n    posts.each do |post|\n      xml.entry do\n        xml.id       post.id\n        xml.title    post.title\n        xml.updated  post.updated_at.iso8601\n        xml.author do\n          xml.name post.author_name\n        end\n      end\n    end\n  end\nend\n\nposts = [OpenStruct.new(id: 1, title: 'Hello', updated_at: Time.now, author_name: 'Alice')]\nputs generate_feed(posts)\n"})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var i=t(36672);const r={},d=i.createContext(r);function l(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);