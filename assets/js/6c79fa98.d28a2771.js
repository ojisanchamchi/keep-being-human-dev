"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13782],{65404:(e,n,c)=>{c.d(n,{R:()=>a,x:()=>d});var t=c(36672);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},92915:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"ruby/concurrency_and_mutexes/advanced/double_checked_locking.md","title":"double_checked_locking.md","description":"\ud83d\udd04 Double-Checked Locking for Lazy Initialization","source":"@site/docs/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md.md","sourceDirName":"ruby/concurrency_and_mutexes/advanced","slug":"/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deadlock_prevention.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md"},"next":{"title":"monitor_reentrant_mutex.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md"}}');var o=c(23420),i=c(65404);const a={},d=void 0,r={},s=[{value:"\ud83d\udd04 Double-Checked Locking for Lazy Initialization",id:"-double-checked-locking-for-lazy-initialization",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-double-checked-locking-for-lazy-initialization",children:"\ud83d\udd04 Double-Checked Locking for Lazy Initialization"}),"\n",(0,o.jsx)(n.p,{children:"To avoid the overhead of locking on every access when lazily initializing a resource, use double-checked locking. This pattern checks if the instance exists before and after acquiring the lock, ensuring thread safety and reducing contention."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class ExpensiveResource\n  @instance = nil\n  @mutex    = Mutex.new\n\n  class << self\n    def instance\n      # First check without locking\n      return @instance if @instance\n\n      # Only one thread initializes\n      @mutex.synchronize do\n        # Second check inside lock\n        @instance ||= new\n      end\n    end\n\n    private :new\n  end\nend\n\n# Usage\nthreads = 5.times.map do\n  Thread.new { p ExpensiveResource.instance.object_id }\nend\nthreads.each(&:join)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["All threads will print the same object ID, and only one ",(0,o.jsx)(n.code,{children:"new"})," call occurs."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);