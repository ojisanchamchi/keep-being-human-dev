"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94390],{40284:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>m,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"ruby/metaprogramming/middle/dynamic_method_define","title":"dynamic_method_define","description":"\ud83c\udfaf Dynamic Method Definition with define_method","source":"@site/docs/ruby/metaprogramming/middle/dynamic_method_define.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/dynamic_method_define","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_method_define","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/dynamic_method_define.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_delegation_forwardable","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_delegation_forwardable"},"next":{"title":"dynamic_validation_macros","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_validation_macros"}}');var d=i(23420),a=i(65404);const o={},m=void 0,r={},s=[{value:"\ud83c\udfaf Dynamic Method Definition with define_method",id:"-dynamic-method-definition-with-define_method",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-dynamic-method-definition-with-define_method",children:"\ud83c\udfaf Dynamic Method Definition with define_method"}),"\n",(0,d.jsxs)(n.p,{children:["Using ",(0,d.jsx)(n.code,{children:"define_method"})," lets you create methods at runtime, reducing repetition and enabling flexible APIs. You can loop over data sets to generate similar methods dynamically, making your classes more DRY and maintainable."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'class MyClass\n  %i[foo bar baz].each do |name|\n    define_method(name) do\n      "Called #{name}!"\n    end\n  end\nend\n\no = MyClass.new\nputs o.foo  # => "Called foo!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>m});var t=i(36672);const d={},a=t.createContext(d);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);