"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4884],{65404:(e,r,t)=>{t.d(r,{R:()=>n,x:()=>s});var c=t(36672);const i={},a=c.createContext(i);function n(e){const r=c.useContext(a);return c.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),c.createElement(a.Provider,{value:r},e.children)}},82619:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>l,frontMatter:()=>n,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"rails/active_record_querying/expert/recursive_cte_for_hierarchies","title":"recursive_cte_for_hierarchies","description":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Recursive CTEs for Hierarchical Data","source":"@site/docs/rails/active_record_querying/expert/recursive_cte_for_hierarchies.md","sourceDirName":"rails/active_record_querying/expert","slug":"/rails/active_record_querying/expert/recursive_cte_for_hierarchies","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/recursive_cte_for_hierarchies","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_querying/expert/recursive_cte_for_hierarchies.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prepared_statements","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/prepared_statements"},"next":{"title":"window_functions","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/window_functions"}}');var i=t(23420),a=t(65404);const n={},s=void 0,o={},d=[{value:"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Recursive CTEs for Hierarchical Data",id:"\ufe0f\ufe0f-recursive-ctes-for-hierarchical-data",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"\ufe0f\ufe0f-recursive-ctes-for-hierarchical-data",children:"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Recursive CTEs for Hierarchical Data"}),"\n",(0,i.jsx)(r.p,{children:"Use recursive CTEs to query tree-structured data such as category hierarchies or organizational charts. ActiveRecord can embed raw SQL recursive clauses to fetch all descendants or ancestors in a single query."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"cte = <<~SQL\n  WITH RECURSIVE category_tree AS (\n    SELECT id, name, parent_id FROM categories WHERE id = :root_id\n    UNION ALL\n    SELECT c.id, c.name, c.parent_id FROM categories c\n    INNER JOIN category_tree ct ON ct.id = c.parent_id\n  ) SELECT * FROM category_tree;\nSQL\nCategory.find_by_sql([cte, { root_id: 1 }])\n"})}),"\n",(0,i.jsx)(r.p,{children:"This approach is far more efficient than iterative Ruby traversals for deep hierarchies."})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);