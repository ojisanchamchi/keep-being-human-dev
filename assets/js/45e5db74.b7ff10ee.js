"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1547],{55609:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"rails/active_record_associations/advanced/inverse_of_and_eager_preloading","title":"inverse_of_and_eager_preloading","description":"\ud83d\udd17 Preventing N+1 with inverse_of and Eager Preloading","source":"@site/docs/rails/active_record_associations/advanced/inverse_of_and_eager_preloading.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/inverse_of_and_eager_preloading","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/inverse_of_and_eager_preloading","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/inverse_of_and_eager_preloading.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"habtm_to_has_many_through_with_extra","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra"},"next":{"title":"multi_table_join_with_has_many_through","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/multi_table_join_with_has_many_through"}}');var r=a(23420),i=a(65404);const s={},t=void 0,d={},c=[{value:"\ud83d\udd17 Preventing N+1 with inverse_of and Eager Preloading",id:"-preventing-n1-with-inverse_of-and-eager-preloading",level:2}];function _(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-preventing-n1-with-inverse_of-and-eager-preloading",children:"\ud83d\udd17 Preventing N+1 with inverse_of and Eager Preloading"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"inverse_of"})," to enable proper in-memory associations and combine it with ",(0,r.jsx)(n.code,{children:"includes"})," or ",(0,r.jsx)(n.code,{children:"preload"})," for nested relations. This ensures ActiveRecord only fires the minimal queries needed, even on deep ",(0,r.jsx)(n.code,{children:"has_many :through"})," trees."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class Author < ApplicationRecord\n  has_many :books, inverse_of: :author\nend\n\nclass Book < ApplicationRecord\n  belongs_to :author, inverse_of: :books\n  has_many :reviews, inverse_of: :book\nend\n\n# Fetch authors, books, and reviews in 3 queries instead of N+1\nauthors = Author.includes(books: :reviews).where(active: true)\nauthors.each do |author|\n  author.books.each { |book| puts book.reviews.size }\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(_,{...e})}):_(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>t});var o=a(36672);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);