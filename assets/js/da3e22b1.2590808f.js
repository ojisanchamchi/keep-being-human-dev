"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51353],{61736:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_storage/expert/custom_pdf_page_count_analyzer","title":"custom_pdf_page_count_analyzer","description":"\ud83d\udee0\ufe0f Building a Custom PDF Page Count Analyzer","source":"@site/docs/rails/active_storage/expert/custom_pdf_page_count_analyzer.md","sourceDirName":"rails/active_storage/expert","slug":"/rails/active_storage/expert/custom_pdf_page_count_analyzer","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/custom_pdf_page_count_analyzer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/expert/custom_pdf_page_count_analyzer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"cdn_signed_url_with_custom_headers","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/cdn_signed_url_with_custom_headers"},"next":{"title":"mirror_service_fallback","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/mirror_service_fallback"}}');var r=n(23420),o=n(65404);const s={},c=void 0,i={},d=[{value:"\ud83d\udee0\ufe0f Building a Custom PDF Page Count Analyzer",id:"\ufe0f-building-a-custom-pdf-page-count-analyzer",level:2}];function l(e){const a={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"\ufe0f-building-a-custom-pdf-page-count-analyzer",children:"\ud83d\udee0\ufe0f Building a Custom PDF Page Count Analyzer"}),"\n",(0,r.jsx)(a.p,{children:"Extend Active Storage with a bespoke analyzer to extract PDF metadata, such as page counts or embedded fonts, and store it in your blob\u2019s metadata for querying or UI display."}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["Create the analyzer under ",(0,r.jsx)(a.code,{children:"app/analyzers"}),":"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"# app/analyzers/active_storage/analyzer/pdf_page_count_analyzer.rb\nrequire 'pdf-reader'\n\nclass ActiveStorage::Analyzer::PdfPageCountAnalyzer < ActiveStorage::Analyzer::Base\n  def metadata\n    reader = PDF::Reader.new(file.download)\n    { page_count: reader.page_count }\n  rescue => e\n    logger.error \"Failed to analyze PDF: #{e}\";\n    {}\n  end\nend\n"})}),"\n",(0,r.jsxs)(a.ol,{start:"2",children:["\n",(0,r.jsx)(a.li,{children:"Register and invoke on attach:"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"t# config/initializers/active_storage.rb\nActiveStorage::Analyzer.register :pdf, ActiveStorage::Analyzer::PdfPageCountAnalyzer\n\nclass Report < ApplicationRecord\n  has_one_attached :pdf\n  after_commit :extract_page_count, on: :create\n\n  def extract_page_count\n    pdf.analyze unless pdf.analyzed?\n  end\nend\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Now ",(0,r.jsx)(a.code,{children:"report.pdf.metadata[:page_count]"})," holds your custom value."]})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>c});var t=n(36672);const r={},o=t.createContext(r);function s(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);