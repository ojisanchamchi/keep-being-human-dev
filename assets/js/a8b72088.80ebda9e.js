"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97231],{65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var r=n(36672);const i={},s=r.createContext(i);function c(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:t},e.children)}},70933:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/net_http/expert/ssl_certificate_pinning","title":"ssl_certificate_pinning","description":"\ud83d\udd12 Enforce SSL Certificate Pinning via OpenSSL Context","source":"@site/docs/ruby/net_http/expert/ssl_certificate_pinning.md","sourceDirName":"ruby/net_http/expert","slug":"/ruby/net_http/expert/ssl_certificate_pinning","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/ssl_certificate_pinning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/expert/ssl_certificate_pinning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"retry_with_exponential_backoff","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/retry_with_exponential_backoff"},"next":{"title":"streaming_chunked_responses","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/streaming_chunked_responses"}}');var i=n(23420),s=n(65404);const c={},o=void 0,p={},a=[{value:"\ud83d\udd12 Enforce SSL Certificate Pinning via OpenSSL Context",id:"-enforce-ssl-certificate-pinning-via-openssl-context",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-enforce-ssl-certificate-pinning-via-openssl-context",children:"\ud83d\udd12 Enforce SSL Certificate Pinning via OpenSSL Context"}),"\n",(0,i.jsxs)(t.p,{children:["To defend against MITM attacks, pin the server\u2019s public key or certificate fingerprint. Customize the ",(0,i.jsx)(t.code,{children:"OpenSSL::SSL::SSLContext"})," used by Net::HTTP to verify the exact fingerprint in the TLS handshake."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\nrequire 'openssl'\n\nPINNED_FINGERPRINT = 'AB:CD:EF:12:34:56:78:90:AB:CD:EF:12:34:56:78:90:AB:CD:EF:12'\n\nuri = URI('https://secure.example.com')\n\ntls = OpenSSL::SSL::SSLContext.new\ntls.verify_mode = OpenSSL::SSL::VERIFY_PEER\ntls.verify_callback = proc do |preverify_ok, store_ctx|\n  cert = store_ctx.current_cert\n  digest = OpenSSL::Digest::SHA1.hexdigest(cert.to_der).upcase.scan(/../).join(\":\")\n  preverify_ok && (digest == PINNED_FINGERPRINT)\nend\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nhttp.ssl_timeout = 15\nhttp.ssl_context = tls\n\nresponse = http.get(uri.request_uri)\nputs response.body\n"})}),"\n",(0,i.jsx)(t.p,{children:"This approach halts the connection unless the certificate exactly matches your pinned fingerprint, adding a robust layer of trust."})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);