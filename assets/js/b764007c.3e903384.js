"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62994],{7994:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/matrix/middle/matrix_transpose_and_diagonal","title":"matrix_transpose_and_diagonal","description":"\ud83d\udcd0 Using Transpose and Diagonal Extraction","source":"@site/docs/ruby/matrix/middle/matrix_transpose_and_diagonal.md","sourceDirName":"ruby/matrix/middle","slug":"/ruby/matrix/middle/matrix_transpose_and_diagonal","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_transpose_and_diagonal","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/matrix/middle/matrix_transpose_and_diagonal.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"matrix_enumeration_transform","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_enumeration_transform"},"next":{"title":"alias_method_chain_emulation","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/alias_method_chain_emulation"}}');var r=a(23420),i=a(65404);const o={},s=void 0,d={},c=[{value:"\ud83d\udcd0 Using Transpose and Diagonal Extraction",id:"-using-transpose-and-diagonal-extraction",level:2}];function m(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"-using-transpose-and-diagonal-extraction",children:"\ud83d\udcd0 Using Transpose and Diagonal Extraction"}),"\n",(0,r.jsxs)(e.p,{children:["Extracting rows, columns, or diagonals can simplify algorithms (e.g., solving linear systems). Use ",(0,r.jsx)(e.code,{children:"transpose"}),", ",(0,r.jsx)(e.code,{children:"row"}),", ",(0,r.jsx)(e.code,{children:"column"}),", and ",(0,r.jsx)(e.code,{children:"each_diagonal"})," methods to access these structures."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ruby",children:"require 'matrix'\n\nm = Matrix[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Transpose flips rows and columns\nm_t = m.transpose\n# => Matrix[[1,4,7],[2,5,8],[3,6,9]]\n\n# Access a single row or column\nsecond_row   = m.row(1)    # => Vector[4,5,6]\nthird_column = m.column(2) # => Vector[3,6,9]\n\n# Extract both diagonals\nprimary = []\nsecondary = []\nm.each_with_index { |_, i, j| primary << m[i,j] if i == j; secondary << m[i,j] if i + j == m.row_count - 1 }\n# primary   => [1,5,9]\n# secondary => [3,5,7]\n"})}),"\n",(0,r.jsx)(e.p,{children:"These methods help you manipulate matrix data without manual index management."})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(m,{...n})}):m(n)}},65404:(n,e,a)=>{a.d(e,{R:()=>o,x:()=>s});var t=a(36672);const r={},i=t.createContext(r);function o(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);