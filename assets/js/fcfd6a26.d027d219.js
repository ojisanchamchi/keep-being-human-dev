"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41323],{5448:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/secrets_and_credentials/expert/multi_layer_credentials","title":"multi_layer_credentials","description":"\ud83d\udee1\ufe0f Multi-layer Encrypted Credentials","source":"@site/docs/rails/secrets_and_credentials/expert/multi_layer_credentials.md","sourceDirName":"rails/secrets_and_credentials/expert","slug":"/rails/secrets_and_credentials/expert/multi_layer_credentials","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/expert/multi_layer_credentials","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/secrets_and_credentials/expert/multi_layer_credentials.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"credentials_rotation_task","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/expert/credentials_rotation_task"},"next":{"title":"access_nested_credentials","permalink":"/keep-being-human-dev/docs/rails/secrets_and_credentials/middle/access_nested_credentials"}}');var s=r(23420),a=r(65404);const i={},c=void 0,l={},d=[{value:"\ud83d\udee1\ufe0f Multi-layer Encrypted Credentials",id:"\ufe0f-multi-layer-encrypted-credentials",level:2}];function o(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-multi-layer-encrypted-credentials",children:"\ud83d\udee1\ufe0f Multi-layer Encrypted Credentials"}),"\n",(0,s.jsxs)(n.p,{children:["By default Rails loads a single encrypted credentials file per environment. As an expert, you can layer multiple ",(0,s.jsx)(n.code,{children:"ActiveSupport::EncryptedConfiguration"})," instances to share secrets across services or add ephemeral overrides. This approach lets you keep ",(0,s.jsx)(n.code,{children:"shared.yml.enc"})," for common keys (e.g. API URIs) and ",(0,s.jsx)(n.code,{children:"<env>.yml.enc"})," for environment\u2011specific tokens."]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"config/initializers/credentials_layers.rb"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Load shared credentials (common across all environments)\nshared_cfg = ActiveSupport::EncryptedConfiguration.new(\n  config_path: Rails.root.join("config/credentials/shared.yml.enc"),\n  key_path:    Rails.root.join("config/credentials/shared.key"),\n  env_key:     "RAILS_SHARED_KEY"\n)\n\n# Load app\u2011specific credentials for current environment\nenv_cfg = ActiveSupport::EncryptedConfiguration.new(\n  config_path: Rails.root.join("config/credentials/#{Rails.env}.yml.enc"),\n  key_path:    Rails.root.join("config/credentials/#{Rails.env}.key"),\n  env_key:     "RAILS_MASTER_KEY"\n)\n\n# Deep merge shared + env into Rails.application.credentials\nmerged = shared_cfg.config.deep_symbolize_keys.merge(env_cfg.config.deep_symbolize_keys)\nRails.application.credentials.config = merged\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now access combined secrets anywhere via:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"Rails.application.credentials[:third_party_api_key]\nRails.application.credentials[:shared_service_url]\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(36672);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);