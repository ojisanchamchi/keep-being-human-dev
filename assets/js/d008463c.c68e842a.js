"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23483],{18962:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/data_types/advanced/deep_default_hash","title":"deep_default_hash","description":"\ud83c\udf33 Build Nested Hashes with Recursive Default Procs","source":"@site/docs/ruby/data_types/advanced/deep_default_hash.md","sourceDirName":"ruby/data_types/advanced","slug":"/ruby/data_types/advanced/deep_default_hash","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/deep_default_hash","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/advanced/deep_default_hash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bitwise_operations","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/bitwise_operations"},"next":{"title":"lazy_enumerators","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/lazy_enumerators"}}');var n=a(23420),d=a(65404);const r={},u=void 0,i={},c=[{value:"\ud83c\udf33 Build Nested Hashes with Recursive Default Procs",id:"-build-nested-hashes-with-recursive-default-procs",level:2}];function o(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-build-nested-hashes-with-recursive-default-procs",children:"\ud83c\udf33 Build Nested Hashes with Recursive Default Procs"}),"\n",(0,n.jsx)(t.p,{children:"Use a hash default proc that references itself to auto-vivify arbitrary nesting levels without manual checks."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:'deep_hash = Hash.new { |hash, key| hash[key] = Hash.new(&hash.default_proc) }\n\ndeep_hash[:users][:alice][:roles] << :admin\n# Now deep_hash auto-created nested hashes\nputs deep_hash.inspect\n# => { :users=>{ :alice=>{ :roles=>[:admin] } } }\n\n# You can mix types too:\ndeep_hash[:settings][:theme] = "dark"\nputs deep_hash\n# => { :users=>{ :alice=>{ :roles=>[:admin] } }, :settings=>{ :theme=>"dark" } }\n'})})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>u});var s=a(36672);const n={},d=s.createContext(n);function r(e){const t=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(d.Provider,{value:t},e.children)}}}]);