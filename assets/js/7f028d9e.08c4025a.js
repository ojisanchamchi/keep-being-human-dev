"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17372],{34859:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"rails/active_record_callbacks/advanced/concern_based_callbacks","title":"concern_based_callbacks","description":"\ud83d\udcda Tip: Organizing Callbacks with Concerns","source":"@site/docs/rails/active_record_callbacks/advanced/concern_based_callbacks.md","sourceDirName":"rails/active_record_callbacks/advanced","slug":"/rails/active_record_callbacks/advanced/concern_based_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/advanced/concern_based_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/advanced/concern_based_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"callback_performance_tips","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/advanced/callback_performance_tips"},"next":{"title":"conditional_callbacks_lambda","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/advanced/conditional_callbacks_lambda"}}');var r=a(23420),t=a(65404);const o={},s=void 0,i={},l=[{value:"\ud83d\udcda Tip: Organizing Callbacks with Concerns",id:"-tip-organizing-callbacks-with-concerns",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-tip-organizing-callbacks-with-concerns",children:"\ud83d\udcda Tip: Organizing Callbacks with Concerns"}),"\n",(0,r.jsxs)(n.p,{children:["Extract common callback logic into ",(0,r.jsx)(n.code,{children:"ActiveSupport::Concern"})," to keep your models DRY and modular. This is invaluable when multiple models share behavior."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/models/concerns/auditable.rb\nto do:\nmodule Auditable\n  extend ActiveSupport::Concern\n\n  included do\n    after_create :record_creation\n    after_update :record_change\n  end\n\n  private\n\n  def record_creation\n    AuditLog.create!(action: 'create', record: self)\n  end\n\n  def record_change\n    AuditLog.create!(action: 'update', record: self)\n  end\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  include Auditable\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Concerns promote separation of concerns and ease testing of callback logic in isolation."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>s});var c=a(36672);const r={},t=c.createContext(r);function o(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);