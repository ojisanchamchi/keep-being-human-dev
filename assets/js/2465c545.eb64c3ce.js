"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12027],{1367:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"ruby/serialization/advanced/oj_serialization_tuning","title":"oj_serialization_tuning","description":"\u2699\ufe0f Tuning Oj for Maximum Speed and Flexibility","source":"@site/docs/ruby/serialization/advanced/oj_serialization_tuning.md","sourceDirName":"ruby/serialization/advanced","slug":"/ruby/serialization/advanced/oj_serialization_tuning","permalink":"/keep-being-human-dev/docs/ruby/serialization/advanced/oj_serialization_tuning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/serialization/advanced/oj_serialization_tuning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"marshal_custom_versioning","permalink":"/keep-being-human-dev/docs/ruby/serialization/advanced/marshal_custom_versioning"},"next":{"title":"streaming_large_json","permalink":"/keep-being-human-dev/docs/ruby/serialization/advanced/streaming_large_json"}}');var t=i(23420),o=i(65404);const r={},s=void 0,l={},u=[{value:"\u2699\ufe0f Tuning Oj for Maximum Speed and Flexibility",id:"\ufe0f-tuning-oj-for-maximum-speed-and-flexibility",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-tuning-oj-for-maximum-speed-and-flexibility",children:"\u2699\ufe0f Tuning Oj for Maximum Speed and Flexibility"}),"\n",(0,t.jsx)(n.p,{children:"Oj is a high-performance JSON parser and serializer for Ruby. You can configure global and per-call options to balance speed, compatibility, and format requirements. This allows handling large payloads, preserving symbol keys, and parsing custom types with minimal overhead."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'oj'\n\n# Global configuration for maximum throughput\nOj.default_options = {\n  mode: :compat,         # Strict JSON compatible\n  use_to_json: true,     # Respect `to_json` overrides\n  symbol_keys: true,     # Deserialize keys as symbols\n  time_format: :unix,    # Serialize time as integer seconds since epoch\n  bigdecimal_load: :bigdecimal # Preserve precision\n}\n\n# Serialize any Ruby object\nobj = { foo: 'bar', created_at: Time.now, price: BigDecimal('9.99') }\njson = Oj.dump(obj)\n\n# Deserialize back to Ruby with symbol keys and types\nruby_obj = Oj.load(json)\n"})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>s});var a=i(36672);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);