"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56273],{59418:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry","title":"hierarchical_tags_with_ancestry","description":"\ud83c\udf33 Building a Hierarchical Taxonomy with Ancestry","source":"@site/docs/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry.md","sourceDirName":"gems/acts-as-taggable-on/expert","slug":"/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_search_and_caching","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/expert/advanced_search_and_caching"},"next":{"title":"caching_tag_counts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/caching_tag_counts"}}');var s=t(23420),r=t(65404);const c={},i=void 0,o={},d=[{value:"\ud83c\udf33 Building a Hierarchical Taxonomy with Ancestry",id:"-building-a-hierarchical-taxonomy-with-ancestry",level:2}];function g(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-building-a-hierarchical-taxonomy-with-ancestry",children:"\ud83c\udf33 Building a Hierarchical Taxonomy with Ancestry"}),"\n",(0,s.jsxs)(a.p,{children:["Extend ActsAsTaggableOn\u2019s flat tag structure into a full hierarchy using the ",(0,s.jsx)(a.code,{children:"ancestry"})," gem. This enables parent-child relationships and more granular tag queries."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# Add ancestry to tags\nclass AddAncestryToTags < ActiveRecord::Migration[6.0]\n  def change\n    add_column :tags, :ancestry, :string\n    add_index :tags, :ancestry\n  end\nend\n\nclass Tag < ApplicationRecord\n  has_ancestry\n  has_many :taggings, dependent: :destroy\nend\n\n# Querying articles by subtree\nparent = Tag.find_by(name: 'Programming')\nsubtree_ids = parent.subtree.pluck(:id)\nArticle.joins(:taggings)\n       .where(taggings: { tag_id: subtree_ids })\n       .distinct\n"})}),"\n",(0,s.jsxs)(a.p,{children:["With this setup, you can present nested tag trees in your UI and allow users to drill down by categories. Combine this with ",(0,s.jsx)(a.code,{children:"acts_as_ordered_taggable_on"})," for custom ordering within each branch."]})]})}function l(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>c,x:()=>i});var n=t(36672);const s={},r=n.createContext(s);function c(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);