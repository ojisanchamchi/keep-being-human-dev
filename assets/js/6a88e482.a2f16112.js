"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59577],{65404:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>d});var a=i(36672);const t={},c=a.createContext(t);function o(e){const n=a.useContext(c);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(c.Provider,{value:n},e.children)}},84834:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"rails/caching/advanced/http_conditional_caching","title":"http_conditional_caching","description":"\ud83c\udf10 HTTP Conditional Caching with ETag & Last-Modified","source":"@site/docs/rails/caching/advanced/http_conditional_caching.md","sourceDirName":"rails/caching/advanced","slug":"/rails/caching/advanced/http_conditional_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/http_conditional_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/advanced/http_conditional_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_fragment_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/dynamic_fragment_caching"},"next":{"title":"low_level_race_condition_ttl","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/low_level_race_condition_ttl"}}');var t=i(23420),c=i(65404);const o={},d=void 0,r={},s=[{value:"\ud83c\udf10 HTTP Conditional Caching with ETag &amp; Last-Modified",id:"-http-conditional-caching-with-etag--last-modified",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-http-conditional-caching-with-etag--last-modified",children:"\ud83c\udf10 HTTP Conditional Caching with ETag & Last-Modified"}),"\n",(0,t.jsxs)(n.p,{children:["Offload repeated view rendering by leveraging HTTP 304s with ETags and ",(0,t.jsx)(n.code,{children:"Last-Modified"})," headers. Rails can automatically set ETags for your responses, enabling clients and proxies to skip fetching unchanged content."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/articles_controller.rb\nclass ArticlesController < ApplicationController\n  def show\n    @article = Article.find(params[:id])\n    fresh_when(etag: @article.cache_key_with_version, last_modified: @article.updated_at)\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["With this, browsers will send ",(0,t.jsx)(n.code,{children:"If-None-Match"})," or ",(0,t.jsx)(n.code,{children:"If-Modified-Since"}),", and Rails will return ",(0,t.jsx)(n.code,{children:"304 Not Modified"})," when appropriate, saving bandwidth and rendering time."]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);