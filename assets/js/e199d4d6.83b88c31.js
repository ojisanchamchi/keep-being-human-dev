"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61229],{8317:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"gems/sidekiq/expert/sidekiq_opentelemetry_middleware","title":"sidekiq_opentelemetry_middleware","description":"\ud83d\udd0d Integrate OpenTelemetry Tracing in Sidekiq Middleware","source":"@site/docs/gems/sidekiq/expert/sidekiq_opentelemetry_middleware.md","sourceDirName":"gems/sidekiq/expert","slug":"/gems/sidekiq/expert/sidekiq_opentelemetry_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_opentelemetry_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/expert/sidekiq_opentelemetry_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sidekiq_dynamic_autoscaling","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_dynamic_autoscaling"},"next":{"title":"sidekiq_tenant_isolation_namespace","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_tenant_isolation_namespace"}}');var r=i(23420),d=i(65404);const s={},a=void 0,o={},l=[{value:"\ud83d\udd0d Integrate OpenTelemetry Tracing in Sidekiq Middleware",id:"-integrate-opentelemetry-tracing-in-sidekiq-middleware",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-integrate-opentelemetry-tracing-in-sidekiq-middleware",children:"\ud83d\udd0d Integrate OpenTelemetry Tracing in Sidekiq Middleware"}),"\n",(0,r.jsx)(n.p,{children:"To achieve end-to-end traceability, inject OpenTelemetry spans into Sidekiq job lifecycles. Implement both client and server middleware to propagate context and record latency."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'opentelemetry-sdk'\ngem 'opentelemetry-instrumentation-sidekiq'\n\n# config/initializers/opentelemetry.rb\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/instrumentation/sidekiq'\n\nOpenTelemetry::SDK.configure do |c|\n  c.use 'OpenTelemetry::Instrumentation::Sidekiq'\nend\n\n# Optionally customize middleware\nSidekiq.configure_server do |config|\n  config.server_middleware.insert_before(0, OpenTelemetry::Instrumentation::Sidekiq::ServerMiddleware)\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(36672);const r={},d=t.createContext(r);function s(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);