"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50688],{45677:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"ruby/profiling/expert/ruby_prof_callgrind_kcachegrind","title":"ruby_prof_callgrind_kcachegrind","description":"\ud83d\udc22 Profiling with Callgrind Output and KCachegrind","source":"@site/docs/ruby/profiling/expert/ruby_prof_callgrind_kcachegrind.md","sourceDirName":"ruby/profiling/expert","slug":"/ruby/profiling/expert/ruby_prof_callgrind_kcachegrind","permalink":"/keep-being-human-dev/docs/ruby/profiling/expert/ruby_prof_callgrind_kcachegrind","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/profiling/expert/ruby_prof_callgrind_kcachegrind.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rbspy_production_sampling","permalink":"/keep-being-human-dev/docs/ruby/profiling/expert/rbspy_production_sampling"},"next":{"title":"stackprof_flamegraph","permalink":"/keep-being-human-dev/docs/ruby/profiling/expert/stackprof_flamegraph"}}');var t=n(23420),a=n(65404);const o={},l=void 0,c={},s=[{value:"\ud83d\udc22 Profiling with Callgrind Output and KCachegrind",id:"-profiling-with-callgrind-output-and-kcachegrind",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-profiling-with-callgrind-output-and-kcachegrind",children:"\ud83d\udc22 Profiling with Callgrind Output and KCachegrind"}),"\n",(0,t.jsx)(r.p,{children:"For deep call-stack analysis, use ruby\u2011prof\u2019s CallTreePrinter to emit Callgrind\u2011compatible data and inspect hot paths in KCachegrind. This lets you drill into inclusive vs. exclusive times and visualize call hierarchies graphically."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"require 'ruby-prof'\n\nRubyProf.measure_mode = RubyProf::WALL_TIME\nresult = RubyProf.profile do\n  # Your complex workload here\n  10_000.times { Math.sqrt(rand) }\nend\n\nFile.open(\"callgrind.out.#{Process.pid}\", 'w') do |f|\n  RubyProf::CallTreePrinter.new(result).print(f)\nend\n"})}),"\n",(0,t.jsx)(r.p,{children:"Then run:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"kcachegrind callgrind.out.$PID\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var i=n(36672);const t={},a=i.createContext(t);function o(e){const r=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:r},e.children)}}}]);