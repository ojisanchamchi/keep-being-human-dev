"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71724],{49353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/controllers/advanced/bulk_insert_update","title":"bulk_insert_update","description":"\u2699\ufe0f Use Bulk Insert and Update in Controllers","source":"@site/docs/rails/controllers/advanced/bulk_insert_update.md","sourceDirName":"rails/controllers/advanced","slug":"/rails/controllers/advanced/bulk_insert_update","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/bulk_insert_update","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/advanced/bulk_insert_update.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"actioncable_integration","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/actioncable_integration"},"next":{"title":"controller_concerns_draggable","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/controller_concerns_draggable"}}');var s=t(23420),a=t(65404);const o={},l=void 0,i={},c=[{value:"\u2699\ufe0f Use Bulk Insert and Update in Controllers",id:"\ufe0f-use-bulk-insert-and-update-in-controllers",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-use-bulk-insert-and-update-in-controllers",children:"\u2699\ufe0f Use Bulk Insert and Update in Controllers"}),"\n",(0,s.jsxs)(n.p,{children:["For high-volume data, minimize SQL calls with ",(0,s.jsx)(n.code,{children:"insert_all"})," and ",(0,s.jsx)(n.code,{children:"upsert_all"}),". These methods bypass validations, so sanitize inputs carefully."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class ImportsController < ApplicationController\n  def create\n    records = params[:items].map { |item| item.permit(:name, :price).to_h }\n    Product.insert_all(records)\n    head :created\n  end\n\n  def bulk_upsert\n    records = params[:items].map { |item| item.permit(:sku, :stock).to_h }\n    Product.upsert_all(records, unique_by: :sku)\n    head :ok\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(36672);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);