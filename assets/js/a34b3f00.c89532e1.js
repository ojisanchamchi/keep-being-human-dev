"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[29646],{53293:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/controllers/middle/streaming_responses","title":"streaming_responses","description":"\ud83c\udfac Stream Responses for Large Data","source":"@site/docs/rails/controllers/middle/streaming_responses.md","sourceDirName":"rails/controllers/middle","slug":"/rails/controllers/middle/streaming_responses","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/streaming_responses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/middle/streaming_responses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"service_objects","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/service_objects"},"next":{"title":"strong_parameters","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/strong_parameters"}}');var t=n(23420),o=n(65404);const a={},i=void 0,l={},c=[{value:"\ud83c\udfac Stream Responses for Large Data",id:"-stream-responses-for-large-data",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"-stream-responses-for-large-data",children:"\ud83c\udfac Stream Responses for Large Data"}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:"ActionController::Live"})," to stream large data sets or server-sent events (SSE) without loading everything into memory. Enable streaming in your controller and write chunks to the response. Remember to close the stream when done."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"class ReportsController < ApplicationController\n  include ActionController::Live\n\n  def download\n    response.headers['Content-Type'] = 'text/csv'\n    response.headers['Content-Disposition'] = 'attachment; filename=report.csv'\n\n    csv = CSV.generate do |csv|\n      csv << ['ID', 'Name', 'Email']\n      User.find_each { |u| csv << [u.id, u.name, u.email] }\n    end\n\n    response.stream.write(csv)\n  ensure\n    response.stream.close\n  end\nend\n"})})]})}function m(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>i});var r=n(36672);const t={},o=r.createContext(t);function a(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);