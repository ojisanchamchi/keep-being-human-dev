"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95556],{39394:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/fibers/advanced/fiber_enumerator_generator","title":"fiber_enumerator_generator","description":"\ud83e\uddf5 Craft Custom Generators with Fibers","source":"@site/docs/ruby/fibers/advanced/fiber_enumerator_generator.md","sourceDirName":"ruby/fibers/advanced","slug":"/ruby/fibers/advanced/fiber_enumerator_generator","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_enumerator_generator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/advanced/fiber_enumerator_generator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_data_pipeline","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_data_pipeline"},"next":{"title":"fiber_error_supervision","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_error_supervision"}}');var a=n(23420),i=n(65404);const o={},s=void 0,d={},u=[{value:"\ud83e\uddf5 Craft Custom Generators with Fibers",id:"-craft-custom-generators-with-fibers",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-craft-custom-generators-with-fibers",children:"\ud83e\uddf5 Craft Custom Generators with Fibers"}),"\n",(0,a.jsx)(r.p,{children:"Use fibers to build lazy enumerators that generate infinite or on\u2011the\u2011fly sequences. The fiber yields each element, and the Enumerator wraps it, supporting standard Enumerable methods without precomputing the full collection."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"def fib_generator\n  Enumerator.new do |yielder|\n    a, b = 0, 1\n    Fiber.new do\n      loop do\n        yielder << a\n        a, b = b, a + b\n        Fiber.yield\n      end\n    end.resume\n  end\nend\n\ngen = fib_generator\nputs gen.take(10).inspect  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"})})]})}function b(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(36672);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);