"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[67710],{63223:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/ransack/advanced/nested_association_query","title":"nested_association_query","description":"\ud83d\udd0d Deeply Nested Association Queries with Joins","source":"@site/docs/gems/ransack/advanced/nested_association_query.md","sourceDirName":"gems/ransack/advanced","slug":"/gems/ransack/advanced/nested_association_query","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/nested_association_query","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/advanced/nested_association_query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"define_custom_predicates","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/define_custom_predicates"},"next":{"title":"basic_search_form","permalink":"/keep-being-human-dev/docs/gems/ransack/beginner/basic_search_form"}}');var a=s(23420),r=s(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udd0d Deeply Nested Association Queries with Joins",id:"-deeply-nested-association-queries-with-joins",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-deeply-nested-association-queries-with-joins",children:"\ud83d\udd0d Deeply Nested Association Queries with Joins"}),"\n",(0,a.jsx)(n.p,{children:"For performance and flexibility, explicitly join associations and reference them in predicates. This approach avoids N+1 queries and lets you filter on deeply nested relationships."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# In a controller or service object\n@q = Order.joins(customer: { address: :country })\n          .ransack(\n            customer_country_name_eq: 'United States',\n            status_in: ['pending', 'shipped']\n          )\n@orders = @q.result(distinct: true)\n"})}),"\n",(0,a.jsx)(n.p,{children:"In your view, ensure the search fields match the join path:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-erb",children:"<%= search_form_for @q do |f| %>\n  <%= f.label :customer_country_name_eq, 'Country' %>\n  <%= f.text_field :customer_country_name_eq %>\n  <%= f.submit 'Search' %>\n<% end %>\n"})}),"\n",(0,a.jsx)(n.p,{children:"This produces a single optimized SQL query with the necessary JOINs."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(36672);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);