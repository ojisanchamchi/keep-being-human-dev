"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82954],{56e3:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"gems/mini_magick/expert/streaming_image_pipelining","title":"streaming_image_pipelining","description":"\ud83d\ude80 Streaming and Pipelining Large Image Transformations","source":"@site/docs/gems/mini_magick/expert/streaming_image_pipelining.md","sourceDirName":"gems/mini_magick/expert","slug":"/gems/mini_magick/expert/streaming_image_pipelining","permalink":"/keep-being-human-dev/docs/gems/mini_magick/expert/streaming_image_pipelining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/mini_magick/expert/streaming_image_pipelining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pdf_multipage_annotation","permalink":"/keep-being-human-dev/docs/gems/mini_magick/expert/pdf_multipage_annotation"},"next":{"title":"conditional_resize","permalink":"/keep-being-human-dev/docs/gems/mini_magick/middle/conditional_resize"}}');var a=i(23420),r=i(65404);const s={},o=void 0,m={},g=[{value:"\ud83d\ude80 Streaming and Pipelining Large Image Transformations",id:"-streaming-and-pipelining-large-image-transformations",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-streaming-and-pipelining-large-image-transformations",children:"\ud83d\ude80 Streaming and Pipelining Large Image Transformations"}),"\n",(0,a.jsx)(n.p,{children:"For memory\u2011constrained environments, avoid temporary files by streaming image data between MiniMagick and other CLI tools. Piping via STDIN/STDOUT maintains a constant memory footprint regardless of image size, enabling true real\u2011time processing in high\u2011throughput systems."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'open3'\nrequire 'mini_magick'\n\n# Assemble a Convert command that reads JPEG from STDIN and outputs PNG to STDOUT\ntool = MiniMagick::Tool::Convert.new do |c|\n  c << 'jpeg:-'       # read JPEG from STDIN\n  c.resize '1024x'    # resize operation\n  c << 'png:-'        # write PNG to STDOUT\nend\nconvert_cmd = tool.args\n\n# Stream the data\nto_stdin = File.binread('large_input.jpg')\nstdout_str, stderr_str, status = Open3.capture3(*convert_cmd, stdin_data: to_stdin)\n\n# Load the transformed image directly from stdout\nprocessed = MiniMagick::Image.read(stdout_str) do |img|\n  img.format 'png'\nend\nprocessed.write('resized.png')\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(36672);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);