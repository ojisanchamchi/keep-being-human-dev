"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14064],{40338:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/faker/middle/faker_with_factorybot","title":"faker_with_factorybot","description":"\ud83c\udfed Integrating Faker into FactoryBot Definitions","source":"@site/docs/gems/faker/middle/faker_with_factorybot.md","sourceDirName":"gems/faker/middle","slug":"/gems/faker/middle/faker_with_factorybot","permalink":"/keep-being-human-dev/docs/gems/faker/middle/faker_with_factorybot","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faker/middle/faker_with_factorybot.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"faker_unique_generator","permalink":"/keep-being-human-dev/docs/gems/faker/middle/faker_unique_generator"},"next":{"title":"faraday_custom_hmac_middleware","permalink":"/keep-being-human-dev/docs/gems/faraday/advanced/faraday_custom_hmac_middleware"}}');var a=r(23420),o=r(65404);const i={},s=void 0,c={},d=[{value:"\ud83c\udfed Integrating Faker into FactoryBot Definitions",id:"-integrating-faker-into-factorybot-definitions",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-integrating-faker-into-factorybot-definitions",children:"\ud83c\udfed Integrating Faker into FactoryBot Definitions"}),"\n",(0,a.jsxs)(t.p,{children:["FactoryBot pairs seamlessly with Faker for generating realistic test records. Use lazy attributes (blocks) to ensure each build or create call is fresh, and combine ",(0,a.jsx)(t.code,{children:"unique"})," where necessary. Transient attributes allow you to parametrize your factories further."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"FactoryBot.define do\n  factory :user do\n    name  { Faker::Name.name }\n    email { Faker::Internet.unique.email }\n    bio   { Faker::Lorem.sentence(word_count: 10) }\n  end\nend\n\n# Usage in your specs:\nuser1 = create(:user)\nuser2 = create(:user)\n# Both users will have different emails, names, and bios.\n"})})]})}function f(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>s});var n=r(36672);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);