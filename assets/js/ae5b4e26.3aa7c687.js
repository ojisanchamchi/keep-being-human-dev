"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74765],{2045:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"sql/sqlite/expert/custom_sql_functions_c","title":"custom_sql_functions_c","description":"\ud83e\udde9 User\u2011Defined Functions in C for Extensibility","source":"@site/docs/sql/sqlite/expert/custom_sql_functions_c.md","sourceDirName":"sql/sqlite/expert","slug":"/sql/sqlite/expert/custom_sql_functions_c","permalink":"/keep-being-human-dev/docs/sql/sqlite/expert/custom_sql_functions_c","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/sqlite/expert/custom_sql_functions_c.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_where_clause","permalink":"/keep-being-human-dev/docs/sql/sqlite/beginner/using_where_clause"},"next":{"title":"explain_query_plan_optimization","permalink":"/keep-being-human-dev/docs/sql/sqlite/expert/explain_query_plan_optimization"}}');var s=t(23420),r=t(65404);const o={},c=void 0,l={},u=[{value:"\ud83e\udde9 User\u2011Defined Functions in C for Extensibility",id:"-userdefined-functions-in-c-for-extensibility",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-userdefined-functions-in-c-for-extensibility",children:"\ud83e\udde9 User\u2011Defined Functions in C for Extensibility"}),"\n",(0,s.jsx)(n.p,{children:"Extend SQLite by writing custom scalar or aggregate functions in C. Register them at runtime to perform domain\u2011specific logic within SQL queries."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#include <sqlite3.h>\n\n// Simple reverse string function\ntemplate <typename T>\nstatic void reverseFunc(sqlite3_context *ctx, int argc, sqlite3_value **argv) {\n    const unsigned char *s = sqlite3_value_text(argv[0]);\n    int len = sqlite3_value_bytes(argv[0]);\n    unsigned char *out = sqlite3_malloc(len + 1);\n    for(int i=0; i<len; i++) out[i] = s[len-1-i];\n    out[len] = '\\0';\n    sqlite3_result_text(ctx, (char*)out, len, sqlite3_free);\n}\n\n// In your initialization\nint sqlite3_extension_init(sqlite3 *db, char **pzErrMsg, const sqlite3_api_routines *pApi) {\n    SQLITE_EXTENSION_INIT2(pApi);\n    sqlite3_create_function(db, \"reverse\", 1, SQLITE_UTF8, NULL, reverseFunc, NULL, NULL);\n    return SQLITE_OK;\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(36672);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);