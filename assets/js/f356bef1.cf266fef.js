"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48459],{14877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rails/models/advanced/postgres_enum_with_attribute_api","title":"postgres_enum_with_attribute_api","description":"\ud83d\udee0\ufe0f Defining Custom PostgreSQL Enums via ActiveRecord","source":"@site/docs/rails/models/advanced/postgres_enum_with_attribute_api.md","sourceDirName":"rails/models/advanced","slug":"/rails/models/advanced/postgres_enum_with_attribute_api","permalink":"/keep-being-human-dev/docs/rails/models/advanced/postgres_enum_with_attribute_api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/advanced/postgres_enum_with_attribute_api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parameterized_scopes_for_reusability","permalink":"/keep-being-human-dev/docs/rails/models/advanced/parameterized_scopes_for_reusability"},"next":{"title":"using_arel_for_complex_queries","permalink":"/keep-being-human-dev/docs/rails/models/advanced/using_arel_for_complex_queries"}}');var r=n(23420),a=n(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Defining Custom PostgreSQL Enums via ActiveRecord",id:"\ufe0f-defining-custom-postgresql-enums-via-activerecord",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-defining-custom-postgresql-enums-via-activerecord",children:"\ud83d\udee0\ufe0f Defining Custom PostgreSQL Enums via ActiveRecord"}),"\n",(0,r.jsx)(t.p,{children:"Create native Postgres enums in migrations and map them to Ruby symbols with the attribute API. This ensures type safety and database-level constraints."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# db/migrate/XXXX_create_order_status_enum.rb\nclass CreateOrderStatusEnum < ActiveRecord::Migration[6.1]\n  def up\n    execute <<-SQL\n      CREATE TYPE order_status AS ENUM ('pending', 'paid', 'shipped', 'cancelled');\n    SQL\n    add_column :orders, :status, :order_status, default: 'pending', null: false\n  end\n\n  def down\n    remove_column :orders, :status\n    execute \"DROP TYPE order_status;\"\n  end\nend\n\n# app/models/order.rb\nclass Order < ApplicationRecord\n  attribute :status, :string\n  enum status: { pending: 'pending', paid: 'paid', shipped: 'shipped', cancelled: 'cancelled' }\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(36672);const r={},a=s.createContext(r);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);