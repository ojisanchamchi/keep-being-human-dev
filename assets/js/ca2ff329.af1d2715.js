"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5749],{8574:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"rails/active_record_associations/middle/dependent_options","title":"dependent_options","description":"\u2699\ufe0f Managing Lifecycle with dependent Options","source":"@site/docs/rails/active_record_associations/middle/dependent_options.md","sourceDirName":"rails/active_record_associations/middle","slug":"/rails/active_record_associations/middle/dependent_options","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/dependent_options","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/middle/dependent_options.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_foreign_key_and_class_name","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/custom_foreign_key_and_class_name"},"next":{"title":"eager_loading_includes","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/eager_loading_includes"}}');var o=t(23420),i=t(65404);const d={},a=void 0,c={},r=[{value:"\u2699\ufe0f Managing Lifecycle with <code>dependent</code> Options",id:"\ufe0f-managing-lifecycle-with-dependent-options",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"\ufe0f-managing-lifecycle-with-dependent-options",children:["\u2699\ufe0f Managing Lifecycle with ",(0,o.jsx)(n.code,{children:"dependent"})," Options"]}),"\n",(0,o.jsxs)(n.p,{children:["Use the ",(0,o.jsx)(n.code,{children:"dependent:"})," option on associations to automatically handle cleanup of related records. Options such as ",(0,o.jsx)(n.code,{children:":destroy"}),", ",(0,o.jsx)(n.code,{children:":delete_all"}),", ",(0,o.jsx)(n.code,{children:":nullify"}),", or ",(0,o.jsx)(n.code,{children:":restrict_with_error"})," control how Rails treats dependents when the parent is removed. Choosing the right strategy prevents orphaned rows or unintended deletes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  has_many :posts, dependent: :destroy      # calls `destroy` on each post\n  has_many :comments, dependent: :nullify  # sets `user_id` to NULL\n  has_many :logs, dependent: :delete_all   # deletes directly via SQL\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var s=t(36672);const o={},i=s.createContext(o);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);