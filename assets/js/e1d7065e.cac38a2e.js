"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14430],{48783:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/fibers/middle/fiber_arguments","title":"fiber_arguments","description":"\ud83c\udfaf Passing Values In and Out of Fibers","source":"@site/docs/ruby/fibers/middle/fiber_arguments.md","sourceDirName":"ruby/fibers/middle","slug":"/ruby/fibers/middle/fiber_arguments","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/middle/fiber_arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_lazy_enumerator","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/fiber_lazy_enumerator"},"next":{"title":"fiber_basic_usage","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_basic_usage"}}');var t=r(23420),i=r(65404);const a={},u=void 0,d={},o=[{value:"\ud83c\udfaf Passing Values In and Out of Fibers",id:"-passing-values-in-and-out-of-fibers",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-passing-values-in-and-out-of-fibers",children:"\ud83c\udfaf Passing Values In and Out of Fibers"}),"\n",(0,t.jsxs)(n.p,{children:["Fibers can exchange data with the caller by passing arguments to ",(0,t.jsx)(n.code,{children:"resume"})," and returning values from the block. This pattern is useful for simple coroutines, pipelines, or implementing generators. Remember each ",(0,t.jsx)(n.code,{children:"resume"})," returns the value passed to the corresponding ",(0,t.jsx)(n.code,{children:"yield"}),", and vice versa."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'fiber = Fiber.new do |initial|\n  puts "Received: #{initial}"\n  next_value = Fiber.yield("yielded value")\n  puts "Received next: #{next_value}"\n  "final result"\nend\n\n# Start and capture yield\nyielded = fiber.resume("start")  # => "yielded value"\nputs yielded                       # => "yielded value"\n\n# Resume with next data and capture return\nresult = fiber.resume("more data")\nputs result                        # => "final result"\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>u});var s=r(36672);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);