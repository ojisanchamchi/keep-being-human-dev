"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[60642],{15891:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"ruby/variables/advanced/thread_local_variables","title":"thread_local_variables","description":"\ud83e\uddf5 Leveraging Thread-Local Variables for Concurrency","source":"@site/docs/ruby/variables/advanced/thread_local_variables.md","sourceDirName":"ruby/variables/advanced","slug":"/ruby/variables/advanced/thread_local_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/thread_local_variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/advanced/thread_local_variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_local_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/dynamic_local_variables"},"next":{"title":"clear_variable_naming","permalink":"/keep-being-human-dev/docs/ruby/variables/beginner/clear_variable_naming"}}');var t=r(23420),i=r(65404);const s={},c=void 0,d={},l=[{value:"\ud83e\uddf5 Leveraging Thread-Local Variables for Concurrency",id:"-leveraging-thread-local-variables-for-concurrency",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-leveraging-thread-local-variables-for-concurrency",children:"\ud83e\uddf5 Leveraging Thread-Local Variables for Concurrency"}),"\n",(0,t.jsxs)(a.p,{children:["Thread-local storage lets each thread maintain isolated state, preventing shared\u2011memory conflicts and enabling context\u2011specific data like request IDs or logging metadata. Store values in ",(0,t.jsx)(a.code,{children:"Thread.current"})," and retrieve them anywhere in that thread without passing arguments through call chains."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"require 'securerandom'\n\nthreads = 3.times.map do |i|\n  Thread.new do\n    # Assign a unique identifier per thread\n    Thread.current[:request_id] = SecureRandom.uuid\n\n    # Simulate work\n    sleep(rand * 0.1)\n    puts \"Thread #{i} \u2013 Request ID: #{Thread.current[:request_id]}\"\n  end\nend\n\nthreads.each(&:join)\n"})})]})}function u(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},65404:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>c});var n=r(36672);const t={},i=n.createContext(t);function s(e){const a=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);