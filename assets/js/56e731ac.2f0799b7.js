"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85890],{65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var o=n(36672);const s={},r=o.createContext(s);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:t},e.children)}},97939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/rspec/advanced/composite_matcher_operators","title":"composite_matcher_operators","description":"\ud83e\udde9 Combine Matchers with & and | Operators","source":"@site/docs/gems/rspec/advanced/composite_matcher_operators.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/composite_matcher_operators","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/composite_matcher_operators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/composite_matcher_operators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"around_hooks_for_transactions","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/around_hooks_for_transactions"},"next":{"title":"custom_matcher_chainable","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/custom_matcher_chainable"}}');var s=n(23420),r=n(65404);const a={},c=void 0,i={},d=[{value:"\ud83e\udde9 Combine Matchers with &amp; and | Operators",id:"-combine-matchers-with--and--operators",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-combine-matchers-with--and--operators",children:"\ud83e\udde9 Combine Matchers with & and | Operators"}),"\n",(0,s.jsxs)(t.p,{children:["When you need flexible assertions, RSpec\u2019s composite matchers let you combine existing matchers with boolean logic. You can use ",(0,s.jsx)(t.code,{children:"&"}),", ",(0,s.jsx)(t.code,{children:"|"}),", and ",(0,s.jsx)(t.code,{children:"~"})," (negation) to create powerful, readable expectations without custom code. This technique is ideal for validating complex object states succinctly."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# Assert that result is positive and even\nexpect(result).to (be > 0) & be_even\n\n# Assert that a string is non-empty or matches pattern\nexpect(user.name).to be_empty | match(/^Guest/)  \n\n# Negation: ensure no errors are present\nexpect(errors).to_not contain_exactly('timeout', 'connection')\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);