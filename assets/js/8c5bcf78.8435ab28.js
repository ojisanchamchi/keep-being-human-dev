"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56903],{38651:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>u,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex","title":"shared_counter_with_mutex","description":"\ud83d\udd12 Protect Shared Counter with Mutex","source":"@site/docs/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex.md","sourceDirName":"ruby/concurrency_and_mutexes/beginner","slug":"/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"manual_lock_unlock","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock"},"next":{"title":"waiting_for_threads_join","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join"}}');var c=t(23420),o=t(65404);const u={},a=void 0,s={},i=[{value:"\ud83d\udd12 Protect Shared Counter with Mutex",id:"-protect-shared-counter-with-mutex",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-protect-shared-counter-with-mutex",children:"\ud83d\udd12 Protect Shared Counter with Mutex"}),"\n",(0,c.jsxs)(n.p,{children:["When multiple threads modify a shared variable, race conditions can occur. A ",(0,c.jsx)(n.code,{children:"Mutex"})," ensures only one thread at a time enters a critical section. Use ",(0,c.jsx)(n.code,{children:"Mutex#synchronize"})," to wrap the increment logic and keep your counter accurate."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nmutex = Mutex.new\ncounter = 0\n\nthreads = 5.times.map do\n  Thread.new do\n    1000.times do\n      mutex.synchronize do\n        counter += 1\n      end\n    end\n  end\nend\n\nthreads.each(&:join)\nputs counter  # => 5000\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>a});var r=t(36672);const c={},o=r.createContext(c);function u(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:u(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);