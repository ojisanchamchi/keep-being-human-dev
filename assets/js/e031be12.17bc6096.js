"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81426],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(36672);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},75703:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"gems/geocoder/expert/optimized_distance_sql","title":"optimized_distance_sql","description":"\ud83d\ude80 Optimizing Distance Queries with Custom SQL and Haversine Formula","source":"@site/docs/gems/geocoder/expert/optimized_distance_sql.md","sourceDirName":"gems/geocoder/expert","slug":"/gems/geocoder/expert/optimized_distance_sql","permalink":"/keep-being-human-dev/docs/gems/geocoder/expert/optimized_distance_sql","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/geocoder/expert/optimized_distance_sql.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bulk_reverse_geocoding_sidekiq","permalink":"/keep-being-human-dev/docs/gems/geocoder/expert/bulk_reverse_geocoding_sidekiq"},"next":{"title":"postgis_advanced_queries","permalink":"/keep-being-human-dev/docs/gems/geocoder/expert/postgis_advanced_queries"}}');var s=t(23420),o=t(65404);const r={},a=void 0,c={},d=[{value:"\ud83d\ude80 Optimizing Distance Queries with Custom SQL and Haversine Formula",id:"-optimizing-distance-queries-with-custom-sql-and-haversine-formula",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-optimizing-distance-queries-with-custom-sql-and-haversine-formula",children:"\ud83d\ude80 Optimizing Distance Queries with Custom SQL and Haversine Formula"}),"\n",(0,s.jsx)(n.p,{children:"Leverage raw SQL to compute distances directly in the database, avoiding Ruby-level iteration and improving performance for large datasets. By injecting the Haversine formula into your ActiveRecord scopes, you only return the closest records without pulling all points into memory."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# app/models/place.rb\nclass Place < ApplicationRecord\n  # latitude_column and longitude_column are your geocoder fields\n  scope :nearby, ->(lat, lon, radius_km = 10) {\n    haversine = <<-SQL.squish\n      6371 * acos(\n        cos(radians(#{lat})) * cos(radians(latitude_column)) *\n        cos(radians(longitude_column) - radians(#{lon})) +\n        sin(radians(#{lat})) * sin(radians(latitude_column))\n      )\n    SQL\n\n    select("*, #{haversine} AS distance_km")\n      .where("#{haversine} < ?", radius_km)\n      .order("distance_km ASC")\n  }\nend\n\n# Usage:\nPlace.nearby(40.7128, -74.0060, 5)\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);