"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59398],{44551:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"ruby/regex/advanced/extended_mode_comments","title":"extended_mode_comments","description":"\ud83d\udcdd Organize Complex Patterns with x Mode","source":"@site/docs/ruby/regex/advanced/extended_mode_comments.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/extended_mode_comments","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/extended_mode_comments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/extended_mode_comments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_union","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/dynamic_union"},"next":{"title":"g_anchor_scanning","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/g_anchor_scanning"}}');var r=t(23420),d=t(65404);const o={},s=void 0,c={},i=[{value:"\ud83d\udcdd Organize Complex Patterns with x Mode",id:"-organize-complex-patterns-with-x-mode",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-organize-complex-patterns-with-x-mode",children:"\ud83d\udcdd Organize Complex Patterns with x Mode"}),"\n",(0,r.jsxs)(n.p,{children:["Free-spacing mode (",(0,r.jsx)(n.code,{children:"/x"}),") lets you spread regex across multiple lines, add comments, and ignore whitespace, making intricate patterns maintainable and self-documenting."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'pattern = /\\n  \\A          # start of string\\n  (?<user>    # capture username\\n    [a-z0-9_]+ # lowercase and underscores\\n  )\\n  @           # literal @\\n  (?<domain>  # capture domain\\n    [a-z.]+   # letters and dots\\n  )\\n  \\z          # end of string\\n/x\n\nmd = pattern.match(\'alice123@example.com\')\nmd.named_captures #=> {"user"=>"alice123", "domain"=>"example.com"}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(36672);const r={},d=a.createContext(r);function o(e){const n=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);