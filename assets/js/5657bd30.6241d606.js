"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95785],{16861:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/enumerables/beginner/filter_with_select","title":"filter_with_select","description":"\ud83d\udd0e Filter Arrays with select","source":"@site/docs/ruby/enumerables/beginner/filter_with_select.md","sourceDirName":"ruby/enumerables/beginner","slug":"/ruby/enumerables/beginner/filter_with_select","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/filter_with_select","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/beginner/filter_with_select.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"exclude_with_reject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/exclude_with_reject"},"next":{"title":"find_with_detect","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/find_with_detect"}}');var s=n(23420),i=n(65404);const c={},a=void 0,l={},u=[{value:"\ud83d\udd0e Filter Arrays with select",id:"-filter-arrays-with-select",level:2}];function o(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-filter-arrays-with-select",children:"\ud83d\udd0e Filter Arrays with select"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"select"})," returns a new array containing all elements for which the block returns ",(0,s.jsx)(t.code,{children:"true"}),". It's handy for extracting a subset of data based on conditions. Use ",(0,s.jsx)(t.code,{children:"select"})," when you want to keep items matching certain criteria."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"numbers = [1, 2, 3, 4, 5, 6]\\n# Keep only even numbers\nevens = numbers.select { |n| n.even? }\n# => [2, 4, 6]\n\nusers = [\n  {name: 'Alice', active: true},\n  {name: 'Bob',   active: false}\n]\nactive_users = users.select { |u| u[:active] }\n# => [{name: 'Alice', active: true}]\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var r=n(36672);const s={},i=r.createContext(s);function c(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);