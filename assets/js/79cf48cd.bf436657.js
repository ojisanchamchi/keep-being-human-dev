"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30285],{8564:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/benchmarking/expert/low_level_benchmarking","title":"low_level_benchmarking","description":"\u26a1\ufe0f Harness Low-Level Benchmark for Micro-Optimizations","source":"@site/docs/rails/benchmarking/expert/low_level_benchmarking.md","sourceDirName":"rails/benchmarking/expert","slug":"/rails/benchmarking/expert/low_level_benchmarking","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/low_level_benchmarking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/benchmarking/expert/low_level_benchmarking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrent_ruby_benchmark","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/concurrent_ruby_benchmark"},"next":{"title":"memory_allocation_tracking","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/memory_allocation_tracking"}}');var i=r(23420),a=r(65404);const o={},s=void 0,c={},l=[{value:"\u26a1\ufe0f Harness Low-Level Benchmark for Micro-Optimizations",id:"\ufe0f-harness-low-level-benchmark-for-micro-optimizations",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-harness-low-level-benchmark-for-micro-optimizations",children:"\u26a1\ufe0f Harness Low-Level Benchmark for Micro-Optimizations"}),"\n",(0,i.jsxs)(n.p,{children:["When you need nanosecond precision to decide between two algorithms, drop down to Ruby\u2019s ",(0,i.jsx)(n.code,{children:"Benchmark"})," API with GC control. By disabling garbage collection during your measurement and running high iteration counts, you can surface micro-optimizations that matter in hot code paths."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'require \'benchmark\'\n\n# Disable GC to avoid pauses during measurement\ngc_was_disabled = GC.disable\niterations = 500_000\n\nBenchmark.bm(20) do |x|\n  x.report("String#+:") { iterations.times { "a" + "b" } }\n  x.report("String#<<:") { iterations.times { s = "a"; s << "b" } }\nend\n\n# Re-enable GC once done\nGC.enable if gc_was_disabled\n'})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(36672);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);