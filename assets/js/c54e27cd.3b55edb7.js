"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4230],{17560:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var a=t(35442),o=t(23420),r=t(65404);const i={slug:"ruby-concurrency-mutexes-tu-co-ban-den-nang-cao",title:"Ruby Concurrency & Mutexes: T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao - H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n",authors:["admin"],tags:["ruby","concurrency","mutex","threading","synchronization","performance","parallel"]},c="Ruby Concurrency & Mutexes: T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao",u={authorsImageUrls:[void 0]},s=[];function l(n){const e={p:"p",...(0,r.R)(),...n.components};return(0,o.jsx)(e.p,{children:"Concurrency (\u0111\u1ed3ng th\u1eddi) l\xe0 m\u1ed9t trong nh\u1eefng ch\u1ee7 \u0111\u1ec1 ph\u1ee9c t\u1ea1p nh\u1ea5t trong l\u1eadp tr\xecnh, nh\u01b0ng c\u0169ng l\xe0 ch\xeca kh\xf3a \u0111\u1ec3 t\u1ea1o ra nh\u1eefng \u1ee9ng d\u1ee5ng Ruby hi\u1ec7u su\u1ea5t cao. Trong b\xe0i vi\u1ebft n\xe0y, ch\xfang ta s\u1ebd kh\xe1m ph\xe1 t\u1eeb nh\u1eefng kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n v\u1ec1 threads v\xe0 mutexes \u0111\u1ebfn c\xe1c k\u1ef9 thu\u1eadt n\xe2ng cao nh\u01b0 lock striping v\xe0 fair mutexes."})}function g(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},35442:n=>{n.exports=JSON.parse('{"permalink":"/keep-being-human-dev/blog/ruby-concurrency-mutexes-tu-co-ban-den-nang-cao","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/ruby-concurrency-mutexes-tu-co-ban-den-nang-cao.md","source":"@site/blog/ruby-concurrency-mutexes-tu-co-ban-den-nang-cao.md","title":"Ruby Concurrency & Mutexes: T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao - H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n","description":"Concurrency (\u0111\u1ed3ng th\u1eddi) l\xe0 m\u1ed9t trong nh\u1eefng ch\u1ee7 \u0111\u1ec1 ph\u1ee9c t\u1ea1p nh\u1ea5t trong l\u1eadp tr\xecnh, nh\u01b0ng c\u0169ng l\xe0 ch\xeca kh\xf3a \u0111\u1ec3 t\u1ea1o ra nh\u1eefng \u1ee9ng d\u1ee5ng Ruby hi\u1ec7u su\u1ea5t cao. Trong b\xe0i vi\u1ebft n\xe0y, ch\xfang ta s\u1ebd kh\xe1m ph\xe1 t\u1eeb nh\u1eefng kh\xe1i ni\u1ec7m c\u01a1 b\u1ea3n v\u1ec1 threads v\xe0 mutexes \u0111\u1ebfn c\xe1c k\u1ef9 thu\u1eadt n\xe2ng cao nh\u01b0 lock striping v\xe0 fair mutexes.","date":"2025-07-24T10:20:47.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Concurrency","permalink":"/keep-being-human-dev/blog/tags/concurrency","description":"Content about concurrent programming and parallel execution"},{"inline":false,"label":"Mutex","permalink":"/keep-being-human-dev/blog/tags/mutex","description":"Content about mutual exclusion and thread synchronization"},{"inline":false,"label":"Threading","permalink":"/keep-being-human-dev/blog/tags/threading","description":"Content about multi-threading and thread management"},{"inline":false,"label":"Synchronization","permalink":"/keep-being-human-dev/blog/tags/synchronization","description":"Content about thread synchronization techniques and patterns"},{"inline":false,"label":"Performance","permalink":"/keep-being-human-dev/blog/tags/performance","description":"Content related to performance optimization and techniques"},{"inline":false,"label":"Parallel Programming","permalink":"/keep-being-human-dev/blog/tags/parallel","description":"Content about parallel programming and concurrent execution"}],"readingTime":14.19,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1y t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-concurrency-mutexes-tu-co-ban-den-nang-cao","title":"Ruby Concurrency & Mutexes: T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao - H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n","authors":["admin"],"tags":["ruby","concurrency","mutex","threading","synchronization","performance","parallel"]},"unlisted":false,"prevItem":{"title":"Ruby Compression: T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao - H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n","permalink":"/keep-being-human-dev/blog/ruby-compression-tu-co-ban-den-nang-cao"},"nextItem":{"title":"Ruby Classes v\xe0 Modules - T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn N\xe2ng Cao Cho Developer","permalink":"/keep-being-human-dev/blog/ruby-classes-modules-tu-co-ban-den-nang-cao"}}')},65404:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var a=t(36672);const o={},r=a.createContext(o);function i(n){const e=a.useContext(r);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),a.createElement(r.Provider,{value:e},n.children)}}}]);