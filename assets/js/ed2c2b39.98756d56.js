"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16585],{12785:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rails/testing/middle/activejob_test_adapter","title":"activejob_test_adapter","description":"\ud83d\udcec Testing ActiveJob with Test Adapter","source":"@site/docs/rails/testing/middle/activejob_test_adapter.md","sourceDirName":"rails/testing/middle","slug":"/rails/testing/middle/activejob_test_adapter","permalink":"/keep-being-human-dev/docs/rails/testing/middle/activejob_test_adapter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/testing/middle/activejob_test_adapter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"test_prof_optimizations","permalink":"/keep-being-human-dev/docs/rails/testing/expert/test_prof_optimizations"},"next":{"title":"dry_test_setup_let_subject","permalink":"/keep-being-human-dev/docs/rails/testing/middle/dry_test_setup_let_subject"}}');var i=n(23420),o=n(65404);const r={},a=void 0,d={},c=[{value:"\ud83d\udcec Testing ActiveJob with Test Adapter",id:"-testing-activejob-with-test-adapter",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-testing-activejob-with-test-adapter",children:"\ud83d\udcec Testing ActiveJob with Test Adapter"}),"\n",(0,i.jsxs)(t.p,{children:["Switch to the ",(0,i.jsx)(t.code,{children:":test"})," adapter to inspect enqueued jobs without performing them. Use ",(0,i.jsx)(t.code,{children:"have_enqueued_job"})," matcher for declarative checks or ",(0,i.jsx)(t.code,{children:"perform_enqueued_jobs"})," to run them inline."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# spec/jobs/send_welcome_email_job_spec.rb\ndescribe SendWelcomeEmailJob, type: :job do\n  around do |example|\n    ActiveJob::Base.queue_adapter = :test\n    example.run\n    ActiveJob::Base.queue_adapter = :async\n  end\n\n  it 'enqueues the job' do\n    expect {\n      SendWelcomeEmailJob.perform_later(user_id: 1)\n    }.to have_enqueued_job(SendWelcomeEmailJob).with(user_id: 1).on_queue('default')\n  end\n\n  it 'executes the job when performed' do\n    perform_enqueued_jobs do\n      SendWelcomeEmailJob.perform_later(user_id: 1)\n    end\n\n    # assert side effects, e.g. email delivery\n    expect(ActionMailer::Base.deliveries.last.to).to include('user@example.com')\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(36672);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);