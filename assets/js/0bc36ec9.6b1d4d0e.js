"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12996],{1319:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"ruby/blocks/middle/check_block_presence.md","title":"check_block_presence.md","description":"\ud83d\udd0d Use block_given? to Guard Behavior","source":"@site/docs/ruby/blocks/middle/check_block_presence.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/check_block_presence.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/check_block_presence.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/check_block_presence.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chainable_methods_with_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/chainable_methods_with_blocks.md"},"next":{"title":"control_flow_within_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/control_flow_within_blocks.md"}}');var s=o(23420),t=o(65404);const r={},i=void 0,d={},l=[{value:"\ud83d\udd0d Use <code>block_given?</code> to Guard Behavior",id:"-use-block_given-to-guard-behavior",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-use-block_given-to-guard-behavior",children:["\ud83d\udd0d Use ",(0,s.jsx)(n.code,{children:"block_given?"})," to Guard Behavior"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"block_given?"})," checks if a block was passed without converting it to a ",(0,s.jsx)(n.code,{children:"Proc"}),". This lightweight check avoids errors when calling ",(0,s.jsx)(n.code,{children:"yield"})," and lets you choose between different execution paths. It\u2019s ideal for methods that optionally accept blocks."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'def maybe_log(msg)\n  if block_given?\n    puts "Before: #{msg}"\n    yield\n    puts "After: #{msg}"\n  else\n    puts msg\n  end\nend\n\nmaybe_log("Process") do\n  puts "Running..."\nend\n# Before: Process\n# Running...\n# After: Process\n\nmaybe_log("Simple")\n# Simple\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>i});var c=o(36672);const s={},t=c.createContext(s);function r(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);