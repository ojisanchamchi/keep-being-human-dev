"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75721],{16001:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/methods/expert/delegation_with_forwardable","title":"delegation_with_forwardable","description":"\ud83d\udee0\ufe0f Dynamic Delegation via Forwardable","source":"@site/docs/ruby/methods/expert/delegation_with_forwardable.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/delegation_with_forwardable","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/delegation_with_forwardable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/delegation_with_forwardable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"currying_partial_application","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/currying_partial_application"},"next":{"title":"dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/dynamic_define_method"}}');var r=a(23420),o=a(65404);const i={},d=void 0,s={},l=[{value:"\ud83d\udee0\ufe0f Dynamic Delegation via Forwardable",id:"\ufe0f-dynamic-delegation-via-forwardable",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-dynamic-delegation-via-forwardable",children:"\ud83d\udee0\ufe0f Dynamic Delegation via Forwardable"}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"Forwardable"})," module to route method calls to encapsulated objects, while retaining the ability to override individual delegations. This pattern streamlines API design and separation of concerns."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'forwardable\'\n\nclass Decorator\n  extend Forwardable\n  def_delegators :@obj, :name, :value\n\n  def initialize(obj)\n    @obj = obj\n  end\n\n  # Override one delegation for custom behavior\n  def value\n    "Decorated #{ @obj.value }"\n  end\nend\n\nclass Data; attr_reader :name, :value; end\n\ndata = Data.new\ndecorator = Decorator.new(data)\nputs decorator.name   # => nil (Data#name)\nputs decorator.value  # => "Decorated "\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Fallback dynamic delegation via method_missing\nclass SmartDelegator\n  def initialize(obj)\n    @obj = obj\n  end\n\n  def method_missing(m, *args, &blk)\n    return @obj.public_send(m, *args, &blk) if @obj.respond_to?(m)\n    super\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var t=a(36672);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);