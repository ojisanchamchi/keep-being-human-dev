"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20481],{53825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"gems/pundit/advanced/graphql_field_authorization","title":"graphql_field_authorization","description":"\ud83d\ude80 Integrating Pundit with GraphQL Resolvers","source":"@site/docs/gems/pundit/advanced/graphql_field_authorization.md","sourceDirName":"gems/pundit/advanced","slug":"/gems/pundit/advanced/graphql_field_authorization","permalink":"/keep-being-human-dev/docs/gems/pundit/advanced/graphql_field_authorization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/pundit/advanced/graphql_field_authorization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_policy_scopes","permalink":"/keep-being-human-dev/docs/gems/pundit/advanced/dynamic_policy_scopes"},"next":{"title":"pundit_basic_policy_usage","permalink":"/keep-being-human-dev/docs/gems/pundit/beginner/pundit_basic_policy_usage"}}');var i=t(23420),s=t(65404);const o={},a=void 0,d={},u=[{value:"\ud83d\ude80 Integrating Pundit with GraphQL Resolvers",id:"-integrating-pundit-with-graphql-resolvers",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-integrating-pundit-with-graphql-resolvers",children:"\ud83d\ude80 Integrating Pundit with GraphQL Resolvers"}),"\n",(0,i.jsxs)(n.p,{children:["For GraphQL APIs, use Pundit inside your field resolvers to enforce field\u2011level and query\u2011level authorization. You can ",(0,i.jsx)(n.code,{children:"authorize"})," before returning data and rescue errors for uniform error handling."]}),"\n",(0,i.jsxs)(n.p,{children:["Example using ",(0,i.jsx)(n.code,{children:"graphql-ruby"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"module Types\n  class QueryType < Types::BaseObject\n    field :posts, [PostType], null: false do\n      argument :published, Boolean, required: false\n    end\n\n    def posts(published: nil)\n      # Filter via policy scope\n      posts = Pundit.policy_scope!(context[:current_user], Post)\n      posts = posts.where(published: published) unless published.nil?\n\n      # Authorize the entire collection\n      Pundit.authorize(context[:current_user], posts, :index?)\n      posts\n    end\n  end\nend\n\nclass GraphqlController < ApplicationController\n  rescue_from Pundit::NotAuthorizedError, with: :render_unauthorized\n\n  private\n\n  def render_unauthorized(exception)\n    render json: { errors: [message: exception.message] }, status: :forbidden\n  end\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"This ensures only permitted objects are returned and GraphQL errors are handled gracefully."})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(36672);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);