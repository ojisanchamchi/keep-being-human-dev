"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83789],{52134:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/define_method/beginner/attribute_getter_setter","title":"attribute_getter_setter","description":"\ud83d\udd11 Build Custom Getters and Setters","source":"@site/docs/ruby/define_method/beginner/attribute_getter_setter.md","sourceDirName":"ruby/define_method/beginner","slug":"/ruby/define_method/beginner/attribute_getter_setter","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/attribute_getter_setter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/beginner/attribute_getter_setter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoization_via_define_method","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/memoization_via_define_method"},"next":{"title":"capture_external_variable","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/capture_external_variable"}}');var a=n(23420),i=n(65404);const s={},o=void 0,d={},u=[{value:"\ud83d\udd11 Build Custom Getters and Setters",id:"-build-custom-getters-and-setters",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-build-custom-getters-and-setters",children:"\ud83d\udd11 Build Custom Getters and Setters"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"define_method"})," can replace repetitive attribute reader/writer methods. You can generate custom getters and setters with validation or transformation logic."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'class Person\n  %i[name age].each do |attr|\n    define_method(attr) do\n      instance_variable_get("@#{attr}")\n    end\n\n    define_method("#{attr}=") do |value|\n      # Example: ensure age is non-negative\n      if attr == :age && value < 0\n        raise ArgumentError, "Age must be >= 0"\n      end\n      instance_variable_set("@#{attr}", value)\n    end\n  end\nend\n\np = Person.new\np.name = "Carol"\nputs p.name       # => "Carol"\np.age = 30        # works\n# p.age = -5      # raises ArgumentError\n'})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(36672);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);