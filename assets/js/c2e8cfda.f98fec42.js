"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20353],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(36672);const r={},c=s.createContext(r);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},76655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"gems/rspec/middle/leveraging_contexts","title":"leveraging_contexts","description":"\ud83d\udcc2 Leveraging Context Blocks","source":"@site/docs/gems/rspec/middle/leveraging_contexts.md","sourceDirName":"gems/rspec/middle","slug":"/gems/rspec/middle/leveraging_contexts","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/leveraging_contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/middle/leveraging_contexts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"let_vs_let_bang","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/let_vs_let_bang"},"next":{"title":"named_subject","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/named_subject"}}');var r=t(23420),c=t(65404);const o={},i=void 0,d={},a=[{value:"\ud83d\udcc2 Leveraging Context Blocks",id:"-leveraging-context-blocks",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-leveraging-context-blocks",children:"\ud83d\udcc2 Leveraging Context Blocks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"context"})," blocks group tests under specific conditions or states, improving clarity. Use descriptive context names and nest them to reflect different preconditions or inputs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'RSpec.describe PaymentProcessor do\n  context "when the card is valid" do\n    let(:card) { Card.new(valid: true) }\n\n    it "processes payment successfully" do\n      expect(subject.process(card)).to be_truthy\n    end\n  end\n\n  context "when the card is expired" do\n    let(:card) { Card.new(expired: true) }\n\n    it "raises an expiration error" do\n      expect { subject.process(card) }.to raise_error(ExpiredCardError)\n    end\n  end\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);