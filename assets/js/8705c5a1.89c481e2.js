"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63391],{26125:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface","title":"instance_double_strict_interface","description":"\ud83d\udd12 Use instance_double for stricter interface checks","source":"@site/docs/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface.md","sourceDirName":"gems/rspec/mocks_and_stubs/middle","slug":"/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"wrap_original_with_and_wrap_original","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/wrap_original_with_and_wrap_original"},"next":{"title":"sequential_return_values","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/sequential_return_values"}}');var r=t(23420),c=t(65404);const i={},a=void 0,o={},d=[{value:"\ud83d\udd12 Use <code>instance_double</code> for stricter interface checks",id:"-use-instance_double-for-stricter-interface-checks",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h2,{id:"-use-instance_double-for-stricter-interface-checks",children:["\ud83d\udd12 Use ",(0,r.jsx)(s.code,{children:"instance_double"})," for stricter interface checks"]}),"\n",(0,r.jsxs)(s.p,{children:["Instead of generic doubles, use ",(0,r.jsx)(s.code,{children:"instance_double(Class)"})," to verify your mock\u2019s interface at runtime. It ensures only existing methods are stubbed, catching typos and outdated expectations and keeping your tests aligned with real objects."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"RSpec.describe UserNotifier do\n  let(:user) { instance_double(User, email: 'test@example.com') }\n\n  it 'sends an email' do\n    mailer = instance_double(ActionMailer::MessageDelivery)\n    allow(UserMailer).to receive(:welcome_email).with(user.email).and_return(mailer)\n    expect(mailer).to receive(:deliver_later)\n\n    UserNotifier.new.send_welcome(user)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>a});var n=t(36672);const r={},c=n.createContext(r);function i(e){const s=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(c.Provider,{value:s},e.children)}}}]);