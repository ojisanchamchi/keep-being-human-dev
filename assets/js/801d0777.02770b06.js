"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80929],{32155:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/fibers/beginner/passing_values_between_fiber","title":"passing_values_between_fiber","description":"\ud83d\udd04 Passing Values Between Fiber and Caller","source":"@site/docs/ruby/fibers/beginner/passing_values_between_fiber.md","sourceDirName":"ruby/fibers/beginner","slug":"/ruby/fibers/beginner/passing_values_between_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/passing_values_between_fiber","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/beginner/passing_values_between_fiber.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"creating_and_resuming","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/creating_and_resuming"},"next":{"title":"simple_enumerator_with_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/simple_enumerator_with_fiber"}}');var i=r(23420),t=r(65404);const a={},u=void 0,l={},o=[{value:"\ud83d\udd04 Passing Values Between Fiber and Caller",id:"-passing-values-between-fiber-and-caller",level:2}];function b(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-passing-values-between-fiber-and-caller",children:"\ud83d\udd04 Passing Values Between Fiber and Caller"}),"\n",(0,i.jsxs)(n.p,{children:["Fibers let you exchange data between the caller and the fiber block. You can pass an argument to ",(0,i.jsx)(n.code,{children:"resume"}),", which becomes the return value of ",(0,i.jsx)(n.code,{children:"Fiber.yield"}),", and vice versa. This pattern helps maintain state or pass configuration dynamically."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'fiber = Fiber.new do |starting|\n  value = starting * 2\n  input = Fiber.yield(value)\n  puts "Caller sent: #{input}"\nend\n\nresult = fiber.resume(5)            # result == 10\nfiber.resume("Hello Fiber!")       # prints "Caller sent: Hello Fiber!"\n'})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(b,{...e})}):b(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>u});var s=r(36672);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);