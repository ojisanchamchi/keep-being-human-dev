"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85963],{7077:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/ranges/middle/endless_beginless_ranges","title":"endless_beginless_ranges","description":"\ud83d\udd04 Leveraging Endless and Beginless Ranges","source":"@site/docs/ruby/ranges/middle/endless_beginless_ranges.md","sourceDirName":"ruby/ranges/middle","slug":"/ruby/ranges/middle/endless_beginless_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/middle/endless_beginless_ranges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/middle/endless_beginless_ranges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_ranges_as_hash_keys","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/using_ranges_as_hash_keys"},"next":{"title":"range_case_when","permalink":"/keep-being-human-dev/docs/ruby/ranges/middle/range_case_when"}}');var a=s(23420),t=s(65404);const i={},d=void 0,l={},o=[{value:"\ud83d\udd04 Leveraging Endless and Beginless Ranges",id:"-leveraging-endless-and-beginless-ranges",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-leveraging-endless-and-beginless-ranges",children:"\ud83d\udd04 Leveraging Endless and Beginless Ranges"}),"\n",(0,a.jsxs)(n.p,{children:["Introduced in Ruby 2.6, endless (",(0,a.jsx)(n.code,{children:"start.."}),") and beginless (",(0,a.jsx)(n.code,{children:"..end"}),") ranges let you express open-ended intervals elegantly. They\u2019re especially handy for slicing, filtering, and default bounds checks without explicitly specifying both endpoints."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# Endless range starting from 5\nenums = (5..)\nputs enums.first(3)  # => [5, 6, 7]\n\n# Beginless range up to 100\nnums = (..100)\nputs nums.cover?(0)  # => true\n\n# Combining with Array#slice\ndata = [10,20,30,40,50]\nslice = data[2..]  # => [30,40,50]\n"})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(g,{...e})}):g(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var r=s(36672);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);