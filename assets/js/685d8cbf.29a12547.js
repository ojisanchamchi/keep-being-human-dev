"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89009],{12676:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>t,metadata:()=>d,toc:()=>s});const d=JSON.parse('{"id":"gems/solid_queue/advanced/advanced_dynamic_worker_routing.md","title":"advanced_dynamic_worker_routing.md","description":"\ud83d\udd00 Dynamic Worker Selection Based on Payload","source":"@site/docs/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md.md","sourceDirName":"gems/solid_queue/advanced","slug":"/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_custom_middleware_integration.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_custom_middleware_integration.md"},"next":{"title":"advanced_exponential_backoff.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_exponential_backoff.md"}}');var o=a(23420),r=a(65404);const t={},i=void 0,c={},s=[{value:"\ud83d\udd00 Dynamic Worker Selection Based on Payload",id:"-dynamic-worker-selection-based-on-payload",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-dynamic-worker-selection-based-on-payload",children:"\ud83d\udd00 Dynamic Worker Selection Based on Payload"}),"\n",(0,o.jsx)(n.p,{children:"For complex workflows, you can route jobs to different workers dynamically based on message content. This approach reduces conditional logic inside workers and centralizes routing rules. Use a custom client middleware or publisher wrapper to inspect the payload and enqueue the proper worker."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# lib/middleware/dynamic_router_middleware.rb\nclass DynamicRouterMiddleware\n  def call(env, next_middleware)\n    job_type = env[:payload]['type']\n    worker = case job_type\n             when 'email'  then EmailSenderWorker\n             when 'report' then ReportGeneratorWorker\n             else DefaultWorker\n             end\n\n    # Re-enqueue under chosen worker\n    SolidQueue.enqueue(worker, env[:payload], headers: env[:headers])\n  end\nend\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/solid_queue.rb\nSolidQueue.configure do |config|\n  config.client_middleware.use DynamicRouterMiddleware\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var d=a(36672);const o={},r=d.createContext(o);function t(e){const n=d.useContext(r);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),d.createElement(r.Provider,{value:n},e.children)}}}]);