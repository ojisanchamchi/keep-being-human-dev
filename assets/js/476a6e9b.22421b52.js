"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23941],{54355:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"ruby/exceptions/expert/custom_error_with_metadata","title":"custom_error_with_metadata","description":"\ud83c\udff7\ufe0f Enrich Exceptions with Context Metadata","source":"@site/docs/ruby/exceptions/expert/custom_error_with_metadata.md","sourceDirName":"ruby/exceptions/expert","slug":"/ruby/exceptions/expert/custom_error_with_metadata","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/custom_error_with_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/expert/custom_error_with_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rescue_specific","permalink":"/keep-being-human-dev/docs/ruby/exceptions/beginner/rescue_specific"},"next":{"title":"exception_wrapping_with_cause","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exception_wrapping_with_cause"}}');var r=n(23420),a=n(65404);const o={},i=void 0,c={},p=[{value:"\ud83c\udff7\ufe0f Enrich Exceptions with Context Metadata",id:"\ufe0f-enrich-exceptions-with-context-metadata",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-enrich-exceptions-with-context-metadata",children:"\ud83c\udff7\ufe0f Enrich Exceptions with Context Metadata"}),"\n",(0,r.jsx)(t.p,{children:"For complex domains, embed contextual data (user IDs, request IDs, payload snapshots) directly into your exception classes. This pattern minimizes external lookups and makes logs self-descriptive."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'class ApiFailureError < StandardError\n  attr_reader :endpoint, :status, :payload\n\n  def initialize(msg = nil, endpoint:, status:, payload:)\n    super(msg || "API call failed")\n    @endpoint = endpoint\n    @status   = status\n    @payload  = payload\n  end\n\n  def to_h\n    { message: message, endpoint: endpoint, status: status, payload: payload }\n  end\nend\n\n# Usage\nbegin\n  response = HTTP.post(url)\n  raise ApiFailureError.new(\n    endpoint: url,\n    status: response.code,\n    payload: response.body.to_json\n  ) unless response.status.success?\nrescue ApiFailureError => e\n  logger.error(e.to_h)\nend\n'})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(36672);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);