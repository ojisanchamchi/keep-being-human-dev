"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80415],{55440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>u,default:()=>a,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"ruby/minitest/expert/custom_minitest_profiling_plugin","title":"custom_minitest_profiling_plugin","description":"\ud83d\udee0\ufe0f Custom Minitest Profiling Plugin","source":"@site/docs/ruby/minitest/expert/custom_minitest_profiling_plugin.md","sourceDirName":"ruby/minitest/expert","slug":"/ruby/minitest/expert/custom_minitest_profiling_plugin","permalink":"/keep-being-human-dev/docs/ruby/minitest/expert/custom_minitest_profiling_plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/minitest/expert/custom_minitest_profiling_plugin.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"setup_teardown_hooks","permalink":"/keep-being-human-dev/docs/ruby/minitest/beginner/setup_teardown_hooks"},"next":{"title":"dynamic_test_generation","permalink":"/keep-being-human-dev/docs/ruby/minitest/expert/dynamic_test_generation"}}');var r=n(23420),s=n(65404);const o={},u=void 0,l={},p=[{value:"\ud83d\udee0\ufe0f Custom Minitest Profiling Plugin",id:"\ufe0f-custom-minitest-profiling-plugin",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-custom-minitest-profiling-plugin",children:"\ud83d\udee0\ufe0f Custom Minitest Profiling Plugin"}),"\n",(0,r.jsxs)(t.p,{children:["Create a Minitest plugin to hook into the runner lifecycle, profile test durations, and optionally filter or reorder tests. By extending ",(0,r.jsx)(t.code,{children:"Minitest.plugin_*"})," methods you can inject custom reporters or modify the test queue before execution."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# lib/minitest/profiling_plugin.rb\ndef Minitest.plugin_profiling_init(options)\n  require 'minitest/reporters'\n  Minitest::Reporters.use! [Minitest::Reporters::DefaultReporter.new]\nend\n\ndef Minitest.plugin_profiling_reporter(options)\n  Module.new do\n    def record(result)\n      super\n      @times ||= []\n      @times << [result.name, result.time]\n    end\n\n    def report\n      super\n      puts \"\\nSlowest Tests:\".bold\n      @times.sort_by(&:last).last(5).each do |name, time|\n        puts \"#{format('%.4f', time)}s  #{name}\"\n      end\n    end\n  end.tap { |r| Minitest.reporter.reporters << r.new }\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"Then require your plugin when running:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"ruby -r ./lib/minitest/profiling_plugin.rb -Ilib:test test/**/*_test.rb\n"})})]})}function a(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>u});var i=n(36672);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);