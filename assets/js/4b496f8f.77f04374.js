"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72238],{30345:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/data_types/middle/optimize_hash_keys","title":"optimize_hash_keys","description":"\ud83d\udd11 Optimize Hash Keys with Symbols","source":"@site/docs/ruby/data_types/middle/optimize_hash_keys.md","sourceDirName":"ruby/data_types/middle","slug":"/ruby/data_types/middle/optimize_hash_keys","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/optimize_hash_keys","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/middle/optimize_hash_keys.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hash_default_proc","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/hash_default_proc"},"next":{"title":"range_iteration_step","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/range_iteration_step"}}');var i=t(23420),a=t(65404);const o={},r=void 0,d={},c=[{value:"\ud83d\udd11 Optimize Hash Keys with Symbols",id:"-optimize-hash-keys-with-symbols",level:2}];function h(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"-optimize-hash-keys-with-symbols",children:"\ud83d\udd11 Optimize Hash Keys with Symbols"}),"\n",(0,i.jsx)(s.p,{children:"Symbols are immutable and memory\u2011efficient, making them perfect for hash keys compared to strings. When you use strings as keys, Ruby allocates a new object on each assignment; symbols avoid that overhead."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:'# Using strings as hash keys allocates new String objects:\nh1 = { "user" => "Alice" }\nh2 = { "user" => "Bob" }\nputs h1.keys.first.object_id == h2.keys.first.object_id  # => false\n\n# Using symbols reuses the same Symbol object:\nh3 = { user: "Alice" }\nh4 = { user: "Bob" }\nputs h3.keys.first.object_id == h4.keys.first.object_id  # => true\n'})}),"\n",(0,i.jsxs)(s.p,{children:["Whenever possible, define static keys as symbols. If you need to convert dynamic string keys to symbols, use ",(0,i.jsx)(s.code,{children:"to_sym"})," or ",(0,i.jsx)(s.code,{children:"intern"})," carefully to avoid symbol table bloat."]})]})}function l(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>r});var n=t(36672);const i={},a=n.createContext(i);function o(e){const s=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);