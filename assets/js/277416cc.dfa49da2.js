"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43780],{37574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"ruby/blocks/middle/yield_with_arguments.md","title":"yield_with_arguments.md","description":"\ud83d\udee0\ufe0f Use yield with Arguments for Flexibility","source":"@site/docs/ruby/blocks/middle/yield_with_arguments.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/yield_with_arguments.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/yield_with_arguments.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/yield_with_arguments.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multiple_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/multiple_blocks.md"},"next":{"title":"alias_chain_prepend","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/alias_chain_prepend"}}');var s=n(23420),r=n(65404);const l={},d=void 0,o={},a=[{value:"\ud83d\udee0\ufe0f Use <code>yield</code> with Arguments for Flexibility",id:"\ufe0f-use-yield-with-arguments-for-flexibility",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"\ufe0f-use-yield-with-arguments-for-flexibility",children:["\ud83d\udee0\ufe0f Use ",(0,s.jsx)(t.code,{children:"yield"})," with Arguments for Flexibility"]}),"\n",(0,s.jsxs)(t.p,{children:["Passing arguments to ",(0,s.jsx)(t.code,{children:"yield"})," lets callers customize behavior without exposing internal variables. You can yield multiple values or even hashes for more complex data structures. This yields flexible APIs while keeping your method signatures simple."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'def with_logging\n  start_time = Time.now\n  result = yield\n  duration = Time.now - start_time\n  puts "Executed in #{duration.round(2)}s"\n  result\nend\n\nvalue = with_logging do\n  sleep(0.5)\n  "done"\nend\n# => "done" and logs execution time\n'})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>d});var i=n(36672);const s={},r=i.createContext(s);function l(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);