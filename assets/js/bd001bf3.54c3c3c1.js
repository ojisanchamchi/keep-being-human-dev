"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89997],{65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>o});var n=r(36672);const a={},s=n.createContext(a);function i(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:t},e.children)}},88089:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/arrays/expert/bitset_array_representation.md","title":"bitset_array_representation.md","description":"\ud83d\udd22 Bitset Array Representation","source":"@site/docs/ruby/arrays/expert/bitset_array_representation.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/bitset_array_representation.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/bitset_array_representation.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/bitset_array_representation.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"binary_packing_with_pack_unpack.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/binary_packing_with_pack_unpack.md"},"next":{"title":"custom_enumerator_chaining.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/custom_enumerator_chaining.md"}}');var a=r(23420),s=r(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udd22 Bitset Array Representation",id:"-bitset-array-representation",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-bitset-array-representation",children:"\ud83d\udd22 Bitset Array Representation"}),"\n",(0,a.jsx)(t.p,{children:"Represent boolean collections as compact bitsets within integer arrays for high-performance set operations. This technique uses bitwise operators to compute unions and intersections over machine words."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"class Bitset\n  WORD_SIZE = 64\n  def initialize(size)\n    @data = Array.new((size + WORD_SIZE - 1) / WORD_SIZE, 0)\n  end\n\n  def set(idx)\n    @data[idx / WORD_SIZE] |= 1 << (idx % WORD_SIZE)\n  end\n\n  def get(idx)\n    ((@data[idx / WORD_SIZE] >> (idx % WORD_SIZE)) & 1) == 1\n  end\n\n  def union(other)\n    result = Bitset.new(@data.size * WORD_SIZE)\n    merged = @data.zip(other.instance_variable_get(:@data)).map { |a, b| a | b }\n    result.instance_variable_set(:@data, merged)\n    result\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);