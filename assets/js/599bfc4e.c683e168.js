"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79628],{43681:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/sidekiq/expert/sidekiq_batch_chaining","title":"sidekiq_batch_chaining","description":"\ud83d\ude80 Master Complex Batch Chaining with Callback Pipelines","source":"@site/docs/gems/sidekiq/expert/sidekiq_batch_chaining.md","sourceDirName":"gems/sidekiq/expert","slug":"/gems/sidekiq/expert/sidekiq_batch_chaining","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_batch_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/expert/sidekiq_batch_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"setup_sidekiq_in_rails","permalink":"/keep-being-human-dev/docs/gems/sidekiq/beginner/setup_sidekiq_in_rails"},"next":{"title":"sidekiq_dynamic_autoscaling","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_dynamic_autoscaling"}}');var a=i(23420),s=i(65404);const c={},r=void 0,o={},d=[{value:"\ud83d\ude80 Master Complex Batch Chaining with Callback Pipelines",id:"-master-complex-batch-chaining-with-callback-pipelines",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-master-complex-batch-chaining-with-callback-pipelines",children:"\ud83d\ude80 Master Complex Batch Chaining with Callback Pipelines"}),"\n",(0,a.jsx)(n.p,{children:"Utilize Sidekiq::Batch to orchestrate multi-stage processing, with on-success and on-complete callbacks for each phase. You can nest batches or dynamically spawn sub-batches to handle dependent workflows."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class MainJob\n  include Sidekiq::Worker\n  def perform(data)\n    batch = Sidekiq::Batch.new\n    batch.description = \"Process data pipeline for #{data['id']}\"\n    batch.on(:success, PipelineCallback, {'parent_id' => data['id']})\n\n    batch.jobs do\n      StageOneWorker.perform_async(data)\n    end\n  end\nend\n\nclass PipelineCallback\n  include Sidekiq::Worker\n  def perform(status, options)\n    # status contains :total, :failures, :bid\n    StageTwoWorker.perform_async(options['parent_id'])\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(36672);const a={},s=t.createContext(a);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);