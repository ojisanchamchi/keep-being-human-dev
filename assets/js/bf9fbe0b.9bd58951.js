"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52887],{8697:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/date_time/expert/business_calendar_refinement","title":"business_calendar_refinement","description":"\ud83d\udcc6 Refinement-based Business Calendar","source":"@site/docs/ruby/date_time/expert/business_calendar_refinement.md","sourceDirName":"ruby/date_time/expert","slug":"/ruby/date_time/expert/business_calendar_refinement","permalink":"/keep-being-human-dev/docs/ruby/date_time/expert/business_calendar_refinement","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/date_time/expert/business_calendar_refinement.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"astronomical_julian_day_conversion","permalink":"/keep-being-human-dev/docs/ruby/date_time/expert/astronomical_julian_day_conversion"},"next":{"title":"high_res_monotonic_timing","permalink":"/keep-being-human-dev/docs/ruby/date_time/expert/high_res_monotonic_timing"}}');var a=s(23420),i=s(65404);const d={},r=void 0,o={},c=[{value:"\ud83d\udcc6 Refinement-based Business Calendar",id:"-refinement-based-business-calendar",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-refinement-based-business-calendar",children:"\ud83d\udcc6 Refinement-based Business Calendar"}),"\n",(0,a.jsxs)(n.p,{children:["To avoid polluting the global ",(0,a.jsx)(n.code,{children:"Date"})," class while adding domain\u2011specific logic (e.g., business days excluding weekends and holidays), use a ",(0,a.jsx)(n.code,{children:"Module"})," with refinements. You get scoped extensions and can easily switch calendars per context."]}),"\n",(0,a.jsx)(n.p,{children:"Example: define and use a refined business calendar:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"module BusinessCalendar\n  refine Date do\n    HOLIDAYS = [Date.new(2024, 1, 1), Date.new(2024, 12, 25)]\n\n    def business_day?\n      !(saturday? || sunday? || HOLIDAYS.include?(self))\n    end\n\n    def advance_business(days)\n      date = self\n      days.abs.times do\n        date += days.positive? ? 1 : -1\n        redo unless date.business_day?\n      end\n      date\n    end\n  end\nend\n\nusing BusinessCalendar\nputs Date.today.advance_business(10)  # skips weekends & holidays\n"})}),"\n",(0,a.jsx)(n.p,{children:"This pattern gives you full control over core refinements and keeps your calendar logic isolated."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var t=s(36672);const a={},i=t.createContext(a);function d(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);