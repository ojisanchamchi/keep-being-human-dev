"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6523],{39581:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/threads/expert/barrier_synchronization_with_conditionvariable","title":"barrier_synchronization_with_conditionvariable","description":"\ud83d\udd17 Build a Cyclic Barrier with Mutex and ConditionVariable","source":"@site/docs/ruby/threads/expert/barrier_synchronization_with_conditionvariable.md","sourceDirName":"ruby/threads/expert","slug":"/ruby/threads/expert/barrier_synchronization_with_conditionvariable","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/barrier_synchronization_with_conditionvariable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/expert/barrier_synchronization_with_conditionvariable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_passing_arguments","permalink":"/keep-being-human-dev/docs/ruby/threads/beginner/thread_passing_arguments"},"next":{"title":"thread_pool_with_sized_queue","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_pool_with_sized_queue"}}');var t=r(23420),a=r(65404);const o={},s=void 0,d={},c=[{value:"\ud83d\udd17 Build a Cyclic Barrier with Mutex and ConditionVariable",id:"-build-a-cyclic-barrier-with-mutex-and-conditionvariable",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-build-a-cyclic-barrier-with-mutex-and-conditionvariable",children:"\ud83d\udd17 Build a Cyclic Barrier with Mutex and ConditionVariable"}),"\n",(0,t.jsx)(n.p,{children:"When you need N threads to rendezvous at multiple synchronization points, implement a reusable barrier. Threads block until the last participant arrives, then all proceed. This is critical for staged parallel algorithms."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nclass CyclicBarrier\n  def initialize(parties)\n    @parties = parties\n    @count    = parties\n    @mutex    = Mutex.new\n    @cond     = ConditionVariable.new\n  end\n\n  def wait\n    @mutex.synchronize do\n      @count -= 1\n      if @count.zero?\n        @count = @parties\n        @cond.broadcast\n      else\n        @cond.wait(@mutex)\n      end\n    end\n  end\nend\n\n# Usage\nbarrier = CyclicBarrier.new(3)\n\n3.times.map do |i|\n  Thread.new do\n    5.times do |round|\n      sleep rand(0.1)\n      puts \"Thread #{i} reached barrier #{round}\"\n      barrier.wait\n# All threads proceed together\n    end\n  end\nend.each(&:join)\n"})}),"\n",(0,t.jsx)(n.p,{children:"This pattern avoids busy-waiting and allows multiple reuse of the same barrier."})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var i=r(36672);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);