"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19987],{31261:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/active_record_migrations/advanced/partitioned_tables","title":"partitioned_tables","description":"\u2699\ufe0f Create Partitioned Tables","source":"@site/docs/rails/active_record_migrations/advanced/partitioned_tables.md","sourceDirName":"rails/active_record_migrations/advanced","slug":"/rails/active_record_migrations/advanced/partitioned_tables","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/partitioned_tables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/advanced/partitioned_tables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"materialized_views","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/materialized_views"},"next":{"title":"reversible_data_migrations","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/reversible_data_migrations"}}');var r=a(23420),i=a(65404);const s={},o=void 0,d={},c=[{value:"\u2699\ufe0f Create Partitioned Tables",id:"\ufe0f-create-partitioned-tables",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-create-partitioned-tables",children:"\u2699\ufe0f Create Partitioned Tables"}),"\n",(0,r.jsxs)(t.p,{children:["Leverage PostgreSQL table partitioning to manage large datasets by range, list, or hash. Use ",(0,r.jsx)(t.code,{children:"execute"})," in migrations to define partition schemes and create child tables. This improves performance and maintenance for time-series or massive tables."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"class PartitionEventsByDate < ActiveRecord::Migration[6.1]\n  def up\n    execute <<-SQL\n      CREATE TABLE events (\n        id SERIAL PRIMARY KEY,\n        occurred_at TIMESTAMP NOT NULL,\n        data JSONB\n      ) PARTITION BY RANGE (occurred_at);\n    SQL\n    execute <<-SQL\n      CREATE TABLE events_2023 PARTITION OF events\n      FOR VALUES FROM ('2023-01-01') TO ('2024-01-01');\n    SQL\n  end\n\n  def down\n    execute 'DROP TABLE events_2023;'\n    execute 'DROP TABLE events;'\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>o});var n=a(36672);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);