"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97545],{26083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/caching/expert/http_conditional_get","title":"http_conditional_get","description":"\u26a1\ufe0f Turbo-Charge API Responses with Conditional GET (ETag & Last-Modified)","source":"@site/docs/rails/caching/expert/http_conditional_get.md","sourceDirName":"rails/caching/expert","slug":"/rails/caching/expert/http_conditional_get","permalink":"/keep-being-human-dev/docs/rails/caching/expert/http_conditional_get","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/expert/http_conditional_get.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fetch_multi_batch_reads","permalink":"/keep-being-human-dev/docs/rails/caching/expert/fetch_multi_batch_reads"},"next":{"title":"localcache_with_remote_store","permalink":"/keep-being-human-dev/docs/rails/caching/expert/localcache_with_remote_store"}}');var o=n(23420),r=n(65404);const a={},s=void 0,c={},d=[{value:"\u26a1\ufe0f Turbo-Charge API Responses with Conditional GET (<code>ETag</code> &amp; <code>Last-Modified</code>)",id:"\ufe0f-turbo-charge-api-responses-with-conditional-get-etag--last-modified",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.h2,{id:"\ufe0f-turbo-charge-api-responses-with-conditional-get-etag--last-modified",children:["\u26a1\ufe0f Turbo-Charge API Responses with Conditional GET (",(0,o.jsx)(t.code,{children:"ETag"})," & ",(0,o.jsx)(t.code,{children:"Last-Modified"}),")"]}),"\n",(0,o.jsxs)(t.p,{children:["Combine Rails\u2019 HTTP caching with your JSON endpoints to avoid rendering or sending payloads when clients already have fresh data. Use ",(0,o.jsx)(t.code,{children:"stale?"})," or ",(0,o.jsx)(t.code,{children:"fresh_when"})," in controllers."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"class ArticlesController < ApplicationController\n  def show\n    @article = Article.find(params[:id])\n    fresh_when(etag: @article.cache_key_with_version, last_modified: @article.updated_at)\n    # Rails returns 304 Not Modified if appropriate, skipping view/render\n  end\nend\n"})}),"\n",(0,o.jsxs)(t.p,{children:["You can also use ",(0,o.jsx)(t.code,{children:"expires_in"})," and ",(0,o.jsx)(t.code,{children:"public: true"})," to set ",(0,o.jsx)(t.code,{children:"Cache-Control"})," headers for proxies and clients."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(36672);const o={},r=i.createContext(o);function a(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);