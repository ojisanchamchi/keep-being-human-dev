"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12848],{74188:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"huong-dan-benchmark-ruby","metadata":{"permalink":"/keep-being-human-dev/blog/huong-dan-benchmark-ruby","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/huong-dan-benchmark-ruby.md","source":"@site/blog/huong-dan-benchmark-ruby.md","title":"H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n V\u1ec1 Benchmark Trong Ruby - T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn Chuy\xean S\xe2u","description":"T\u1ed1i \u01b0u h\xf3a hi\u1ec7u su\u1ea5t l\xe0 m\u1ed9t kh\xeda c\u1ea1nh quan tr\u1ecdng trong ph\xe1t tri\u1ec3n Ruby, cho d\xf9 b\u1ea1n \u0111ang x\xe2y d\u1ef1ng \u1ee9ng d\u1ee5ng web, h\u1ec7 th\u1ed1ng x\u1eed l\xfd d\u1eef li\u1ec7u, hay c\xf4ng c\u1ee5 d\xf2ng l\u1ec7nh. H\u01b0\u1edbng d\u1eabn to\xe0n di\u1ec7n n\xe0y s\u1ebd gi\xfap b\u1ea1n kh\xe1m ph\xe1 c\xe1c kh\u1ea3 n\u0103ng benchmark c\u1ee7a Ruby, t\u1eeb \u0111o l\u01b0\u1eddng th\u1eddi gian c\u01a1 b\u1ea3n \u0111\u1ebfn c\xe1c k\u1ef9 thu\u1eadt ph\xe2n t\xedch chuy\xean s\xe2u. \u0110\u1ebfn cu\u1ed1i b\xe0i, b\u1ea1n s\u1ebd c\xf3 m\u1ed9t b\u1ed9 c\xf4ng c\u1ee5 \u0111\u1ea7y \u0111\u1ee7 \u0111\u1ec3 \u0111o l\u01b0\u1eddng, so s\xe1nh v\xe0 t\u1ed1i \u01b0u h\xf3a m\xe3 Ruby c\u1ee7a m\xecnh.","date":"2025-07-24T03:14:55.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Performance","permalink":"/keep-being-human-dev/blog/tags/performance","description":"Content related to performance optimization and techniques"},{"inline":false,"label":"Benchmarking","permalink":"/keep-being-human-dev/blog/tags/benchmarking","description":"Content about measuring and comparing code performance"}],"readingTime":7.97,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"huong-dan-benchmark-ruby","title":"H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n V\u1ec1 Benchmark Trong Ruby - T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn Chuy\xean S\xe2u","authors":["admin"],"tags":["ruby","performance","benchmarking"]},"unlisted":false,"nextItem":{"title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-chuyen-gia"}},"content":"T\u1ed1i \u01b0u h\xf3a hi\u1ec7u su\u1ea5t l\xe0 m\u1ed9t kh\xeda c\u1ea1nh quan tr\u1ecdng trong ph\xe1t tri\u1ec3n Ruby, cho d\xf9 b\u1ea1n \u0111ang x\xe2y d\u1ef1ng \u1ee9ng d\u1ee5ng web, h\u1ec7 th\u1ed1ng x\u1eed l\xfd d\u1eef li\u1ec7u, hay c\xf4ng c\u1ee5 d\xf2ng l\u1ec7nh. H\u01b0\u1edbng d\u1eabn to\xe0n di\u1ec7n n\xe0y s\u1ebd gi\xfap b\u1ea1n kh\xe1m ph\xe1 c\xe1c kh\u1ea3 n\u0103ng benchmark c\u1ee7a Ruby, t\u1eeb \u0111o l\u01b0\u1eddng th\u1eddi gian c\u01a1 b\u1ea3n \u0111\u1ebfn c\xe1c k\u1ef9 thu\u1eadt ph\xe2n t\xedch chuy\xean s\xe2u. \u0110\u1ebfn cu\u1ed1i b\xe0i, b\u1ea1n s\u1ebd c\xf3 m\u1ed9t b\u1ed9 c\xf4ng c\u1ee5 \u0111\u1ea7y \u0111\u1ee7 \u0111\u1ec3 \u0111o l\u01b0\u1eddng, so s\xe1nh v\xe0 t\u1ed1i \u01b0u h\xf3a m\xe3 Ruby c\u1ee7a m\xecnh.\\n\\n\x3c!-- truncate --\x3e\\n\\n## C\u1ea5p \u0110\u1ed9 C\u01a1 B\u1ea3n: B\u1eaft \u0110\u1ea7u V\u1edbi Ruby Benchmarking\\n\\n### \u26a1 Ki\u1ec3m Tra Hi\u1ec7u Su\u1ea5t Nhanh Trong IRB ho\u1eb7c Rails Console\\n\\nC\xe1ch \u0111\u01a1n gi\u1ea3n nh\u1ea5t \u0111\u1ec3 b\u1eaft \u0111\u1ea7u benchmark l\xe0 tr\u1ef1c ti\u1ebfp trong m\xf4i tr\u01b0\u1eddng Ruby t\u01b0\u01a1ng t\xe1c. Th\u01b0 vi\u1ec7n chu\u1ea9n c\u1ee7a Ruby bao g\u1ed3m module `Benchmark`, cung c\u1ea5p nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 \u0111o th\u1eddi gian th\u1ef1c thi m\xe3.\\n\\n```ruby\\n$ irb\\n>> require \'benchmark\'\\n>> Benchmark.measure { (1..100_000).map(&:to_s) }\\n=>   0.020000   0.000000   0.020000 (  0.019845)\\n```\\n\\nK\u1ebft qu\u1ea3 n\xe0y hi\u1ec3n th\u1ecb th\u1eddi gian CPU ng\u01b0\u1eddi d\xf9ng, th\u1eddi gian CPU h\u1ec7 th\u1ed1ng, t\u1ed5ng th\u1eddi gian CPU v\xe0 th\u1eddi gian th\u1ef1c t\u1ebf tr\xf4i qua (trong ngo\u1eb7c \u0111\u01a1n).\\n\\n### \ud83d\udd52 S\u1eed D\u1ee5ng Benchmark.measure \u0110\u1ec3 \u0110o Th\u1eddi Gian Nhanh\\n\\nKhi b\u1ea1n mu\u1ed1n \u0111o th\u1eddi gian c\u1ee7a m\u1ed9t kh\u1ed1i m\xe3 c\u1ee5 th\u1ec3 trong script c\u1ee7a m\xecnh, `Benchmark.measure` l\xe0 ph\u01b0\u01a1ng th\u1ee9c l\xfd t\u01b0\u1edfng:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\ntime = Benchmark.measure do\\n  # m\xe3 c\u1ee7a b\u1ea1n \u1edf \u0111\xe2y\\n  100_000.times { |i| i * 2 }\\nend\\n\\nputs time  # =>   0.010000   0.000000   0.010000 (  0.009876)\\n```\\n\\n### \u23f1\ufe0f \u0110o L\u01b0\u1eddng Ruby Thu\u1ea7n T\xfay V\u1edbi Benchmark.realtime\\n\\nN\u1ebfu b\u1ea1n ch\u1ec9 quan t\xe2m \u0111\u1ebfn th\u1eddi gian th\u1ef1c t\u1ebf (th\u1eddi gian th\u1ef1c s\u1ef1 m\u1ea5t \u0111\u1ec3 th\u1ef1c hi\u1ec7n m\u1ed9t t\xe1c v\u1ee5), `Benchmark.realtime` cung c\u1ea5p giao di\u1ec7n \u0111\u01a1n gi\u1ea3n h\u01a1n:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nelapsed = Benchmark.realtime do\\n  sleep 0.5  # thay th\u1ebf b\u1eb1ng logic c\u1ee7a b\u1ea1n\\nend\\n\\nputs \\"Th\u1eddi gian \u0111\xe3 tr\xf4i qua: #{elapsed.round(3)} gi\xe2y\\"\\n```\\n\\n### \ud83d\udcca So S\xe1nh Nhi\u1ec1u \u0110o\u1ea1n M\xe3 V\u1edbi Benchmark.bm\\n\\nKhi b\u1ea1n c\u1ea7n so s\xe1nh c\xe1c c\xe1ch tri\u1ec3n khai kh\xe1c nhau, `Benchmark.bm` t\u1ea1o ra m\u1ed9t b\u1ea3ng \u0111\u1ecbnh d\u1ea1ng:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nBenchmark.bm(12) do |x|\\n  x.report(\\"v\xf2ng l\u1eb7p times\\") { 1_000_000.times { |i| i * 2 } }\\n  x.report(\\"v\xf2ng l\u1eb7p for  \\") do\\n    for i in 1..1_000_000\\n      i * 2\\n    end\\n  end\\nend\\n```\\n\\nTham s\u1ed1 `12` ch\u1ec9 \u0111\u1ecbnh \u0111\u1ed9 r\u1ed9ng c\u1ee7a c\u1ed9t nh\xe3n \u0111\u1ec3 c\u0103n ch\u1ec9nh.\\n\\n### \ud83d\udcbe Truy C\u1eadp Th\u1eddi Gian Th\u1ef1c, Ng\u01b0\u1eddi D\xf9ng v\xe0 H\u1ec7 Th\u1ed1ng t\u1eeb Tms\\n\\nPh\u01b0\u01a1ng th\u1ee9c `Benchmark.measure` tr\u1ea3 v\u1ec1 m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng `Benchmark::Tms` v\u1edbi c\xe1c thu\u1ed9c t\xednh th\u1eddi gian ri\xeang bi\u1ec7t:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nt = Benchmark.measure do\\n  10_000.times { Math.sqrt(123.456) }\\nend\\n\\nputs \\"Th\u1ef1c: #{t.real}\\"    # th\u1eddi gian th\u1ef1c t\u1ebf\\nputs \\"Ng\u01b0\u1eddi d\xf9ng: #{t.utime}\\"   # th\u1eddi gian CPU d\xe0nh cho Ruby\\nputs \\"H\u1ec7 th\u1ed1ng: #{t.stime}\\" # th\u1eddi gian CPU d\xe0nh cho l\u1ec7nh g\u1ecdi h\u1ec7 th\u1ed1ng\\n```\\n\\n## C\u1ea5p \u0110\u1ed9 Trung C\u1ea5p: \u0110o L\u01b0\u1eddng Ch\xednh X\xe1c H\u01a1n\\n\\n### \ud83d\ude80 S\u1eed D\u1ee5ng Benchmark.bm Cho C\xe1c Ph\xe9p \u0110o Chi Ti\u1ebft\\n\\n\u0110\u1ec3 so s\xe1nh chi ti\u1ebft h\u01a1n, b\u1ea1n c\xf3 th\u1ec3 s\u1eed d\u1ee5ng `Benchmark.bm` v\u1edbi nhi\u1ec1u kh\u1ed1i m\xe3:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nn = 500_000\\nBenchmark.bm(10) do |x|\\n  x.report(\'each\')    { (1..n).each    { |i| Math.sqrt(i) } }\\n  x.report(\'map\')     { (1..n).map     { |i| Math.sqrt(i) } }\\n  x.report(\'collect\') { (1..n).collect { |i| Math.sqrt(i) } }\\nend\\n```\\n\\n### \ud83e\uddea T\u1eadn D\u1ee5ng Benchmark.bmbm Cho So S\xe1nh Ch\xednh X\xe1c\\n\\nPh\u01b0\u01a1ng th\u1ee9c `bmbm` (vi\u1ebft t\u1eaft c\u1ee7a \\"benchmark benchmark\\") ch\u1ea1y m\u1ed7i kh\u1ed1i hai l\u1ea7n\u2014\u0111\u1ea7u ti\xean l\xe0 \\"t\u1eadp d\u01b0\u1ee3t\\" v\xe0 sau \u0111\xf3 l\xe0 \u0111o l\u01b0\u1eddng th\u1ef1c t\u1ebf. \u0110i\u1ec1u n\xe0y gi\xfap lo\u1ea1i b\u1ecf c\xe1c b\u1ea5t th\u01b0\u1eddng trong l\u1ea7n ch\u1ea1y \u0111\u1ea7u ti\xean nh\u01b0 JIT warm-up ho\u1eb7c overhead c\u1ee7a garbage collection:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nBenchmark.bmbm(12) do |x|\\n  x.report(\'n\u1ed1i chu\u1ed7i +\')     { 100_000.times { \'a\' + \'b\' } }\\n  x.report(\'n\u1ed9i suy chu\u1ed7i\'){ 100_000.times { \\"#{a}#{b}\\" } }\\nend\\n```\\n\\n### \u23f1\ufe0f S\u1eed D\u1ee5ng Benchmark.realtime Cho \u0110o Th\u1eddi Gian Nhanh\\n\\n\u0110\u1ed1i v\u1edbi c\xe1c ph\xe9p \u0111o nhanh, `Benchmark.realtime` l\xe0 l\u1ef1a ch\u1ecdn ho\xe0n h\u1ea3o:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nstart_time = Benchmark.realtime do\\n  sleep(2)\\nend\\nputs \\"Thao t\xe1c m\u1ea5t #{start_time.round(3)}s\\"\\n```\\n\\n### \ud83d\udcca Ghi L\u1ea1i v\xe0 \u0110\u1ecbnh D\u1ea1ng K\u1ebft Qu\u1ea3 Benchmark\\n\\nB\u1ea1n c\xf3 th\u1ec3 ghi l\u1ea1i k\u1ebft qu\u1ea3 benchmark v\xe0 \u0111\u1ecbnh d\u1ea1ng ch\xfang theo ch\u01b0\u01a1ng tr\xecnh:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nresult = Benchmark.measure { 1_000_000.times { |i| i**2 } }\\nputs \\"Th\u1ef1c: #{result.real.round(4)}s, Ng\u01b0\u1eddi d\xf9ng: #{result.utime.round(4)}s, H\u1ec7 th\u1ed1ng: #{result.stime.round(4)}s\\"\\n```\\n\\n### \u2702\ufe0f So S\xe1nh N\u1ed1i Chu\u1ed7i v\xe0 N\u1ed9i Suy Chu\u1ed7i\\n\\nM\u1ed9t v\xed d\u1ee5 th\u1ef1c t\u1ebf v\u1ec1 benchmark c\xe1c c\xe1ch ti\u1ebfp c\u1eadn kh\xe1c nhau:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nn = 200_000\\nBenchmark.bm(15) do |x|\\n  x.report(\'n\u1ed1i chu\u1ed7i\') { n.times { s = \'foo\' + \'bar\' } }\\n  x.report(\'n\u1ed9i suy chu\u1ed7i\') { n.times { s = \\"#{\'foo\'}#{\'bar\'}\\" } }\\nend\\n```\\n## C\u1ea5p \u0110\u1ed9 N\xe2ng Cao: K\u1ef9 Thu\u1eadt Benchmark Chuy\xean Bi\u1ec7t\\n\\n### \u26a1 S\u1eed D\u1ee5ng `benchmark-ips` Cho C\xe1c S\u1ed1 Li\u1ec7u Th\xf4ng L\u01b0\u1ee3ng\\n\\nGem `benchmark-ips` \u0111o l\u01b0\u1eddng s\u1ed1 l\u1ea7n l\u1eb7p m\u1ed7i gi\xe2y, th\u01b0\u1eddng h\u1eefu \xedch h\u01a1n th\u1eddi gian th\xf4 khi so s\xe1nh c\xe1c thu\u1eadt to\xe1n:\\n\\n```ruby\\nrequire \'benchmark/ips\'\\n\\nBenchmark.ips do |x|\\n  x.report(\'n\u1ed1i chu\u1ed7i\')   { \'hello\' + \' \' + \'world\' }\\n  x.report(\'n\u1ed9i suy chu\u1ed7i\') { \\"#{\'hello\'} #{\'world\'}\\" }\\n  x.compare!\\nend\\n```\\n\\nPh\u01b0\u01a1ng th\u1ee9c `compare!` t\u1ef1 \u0111\u1ed9ng t\xednh to\xe1n m\u1ed9t c\xe1ch tri\u1ec3n khai nhanh h\u01a1n bao nhi\xeau so v\u1edbi c\xe1c c\xe1ch kh\xe1c.\\n\\n### \ud83d\udd27 M\u1edf R\u1ed9ng `Benchmark::Suite` V\u1edbi C\xe1c S\u1ed1 Li\u1ec7u T\xf9y Ch\u1ec9nh\\n\\n\u0110\u1ed1i v\u1edbi ph\xe2n t\xedch \u0111a chi\u1ec1u, b\u1ea1n c\xf3 th\u1ec3 t\u1ea1o c\xe1c b\u1ed9 benchmark t\xf9y ch\u1ec9nh:\\n\\n```ruby\\nrequire \'benchmark/suite\'\\n\\nclass CustomSuite < Benchmark::Suite\\n  report \'allocations\' do |n|\\n    GC.start; before = GC.stat[:total_allocated_objects]\\n    n.times { \\"#{rand}\\" * 2 }\\n    GC.stat[:total_allocated_objects] - before\\n  end\\nend\\n\\nsuite = CustomSuite.new\\nsuite.bench_ms(10_000)\\nsuite.print(:legacy)\\n```\\n\\n### \ud83d\udeab T\u1ea1m Th\u1eddi V\xf4 Hi\u1ec7u H\xf3a Garbage Collection Trong Benchmark\\n\\nGarbage collection c\xf3 th\u1ec3 l\xe0m sai l\u1ec7ch k\u1ebft qu\u1ea3 microbenchmark. B\u1ea1n c\xf3 th\u1ec3 t\u1ea1m th\u1eddi v\xf4 hi\u1ec7u h\xf3a n\xf3:\\n\\n```ruby\\nrequire \'benchmark\'\\n\\nGC.disable\\nresults = Benchmark.measure do\\n  10_000.times { \\"foo\\" * 10 }\\nend\\nGC.enable\\n\\nputs results\\n```\\n\\n### \ud83d\udcca K\u1ebft H\u1ee3p C\xe1c S\u1ed1 Li\u1ec7u Ph\xe2n B\u1ed5 B\u1ed9 Nh\u1edb V\xe0o Benchmark\\n\\nVi\u1ec7c s\u1eed d\u1ee5ng b\u1ed9 nh\u1edb th\u01b0\u1eddng quan tr\u1ecdng nh\u01b0 th\u1eddi gian th\u1ef1c thi:\\n\\n```ruby\\nrequire \'benchmark\'\\nrequire \'memory_profiler\'\\n\\nreport = MemoryProfiler.report do\\n  10_000.times { Array.new(5) { rand } }\\nend\\nreport.pretty_print(to_file: \'allocations.txt\')\\n```\\n\\n### \ud83d\udd25 Tri\u1ec3n Khai Giai \u0110o\u1ea1n Kh\u1edfi \u0110\u1ed9ng \u0110\u1ec3 \u1ed4n \u0110\u1ecbnh JIT v\xe0 Hi\u1ec7u \u1ee8ng B\u1ed9 Nh\u1edb \u0110\u1ec7m\\n\\nGiai \u0111o\u1ea1n kh\u1edfi \u0111\u1ed9ng gi\xfap \u1ed5n \u0111\u1ecbnh c\xe1c ph\xe9p \u0111o b\u1eb1ng c\xe1ch cho ph\xe9p VM c\u1ee7a Ruby t\u1ed1i \u01b0u h\xf3a \u0111\u01b0\u1eddng d\u1eabn m\xe3:\\n\\n```ruby\\nrequire \'benchmark/ips\'\\n\\nBenchmark.ips(warmup: 2, time: 5) do |x|\\n  x.report(\'math sqrt\') { Math.sqrt(123.456) }\\n  x.report(\'pow operator\') { 123.456**0.5 }\\nend\\n```\\n## C\u1ea5p \u0110\u1ed9 Chuy\xean Gia: Benchmark C\u1ea5p \u0110\u1ed9 S\u1ea3n Xu\u1ea5t\\n\\n### \ud83d\udee0 T\u1ef1 \u0110\u1ed9ng H\xf3a B\u1ed9 Benchmark V\u1edbi B\xe1o C\xe1o HTML T\u01b0\u01a1ng T\xe1c\\n\\n\u0110\u1ec3 gi\xe1m s\xe1t hi\u1ec7u su\u1ea5t li\xean t\u1ee5c, t\xedch h\u1ee3p benchmark v\xe0o pipeline CI c\u1ee7a b\u1ea1n:\\n\\n```ruby\\nrequire \'benchmark\'\\nrequire \'erb\'\\nrequire \'json\'\\n\\n# B\u01b0\u1edbc 1: ch\u1ea1y benchmark\\nresults = Benchmark.bmbm do |x|\\n  x.report(\'alpha\') { alpha_task }\\n  x.report(\'beta\')  { beta_task  }\\nend\\n\\n# B\u01b0\u1edbc 2: chu\u1ea9n b\u1ecb d\u1eef li\u1ec7u cho bi\u1ec3u \u0111\u1ed3\\nchart_data = results.map { |r| { name: r.label, time: r.real } }\\n\\n# B\u01b0\u1edbc 3: render HTML\\ntemplate = ERB.new(File.read(\'report_template.html.erb\'))\\nFile.write(\'bench_report.html\', template.result_with_hash(data: chart_data.to_json))\\n```\\n\\nSau \u0111\xf3, trong pipeline GitHub Actions c\u1ee7a b\u1ea1n, t\u1ea3i l\xean `bench_report.html` nh\u01b0 m\u1ed9t artifact ho\u1eb7c tri\u1ec3n khai l\xean GitHub Pages \u0111\u1ec3 c\xf3 kh\u1ea3 n\u0103ng hi\u1ec3n th\u1ecb li\xean t\u1ee5c.\\n\\n### \ud83d\ude80 Tinh Ch\u1ec9nh Benchmark.ips Cho \u0110\u1ed9 Tin C\u1eady Th\u1ed1ng K\xea\\n\\n\u0110\u1ed1i v\u1edbi c\xe1c h\u1ec7 th\u1ed1ng quan tr\u1ecdng, \u0111\u1ed9 tin c\u1eady th\u1ed1ng k\xea l\xe0 r\u1ea5t quan tr\u1ecdng:\\n\\n```ruby\\nrequire \'benchmark/ips\'\\n\\nBenchmark.ips do |x|\\n  x.config(time: 5, warmup: 2, confidence: 95, guarantee: 99)\\n\\n  x.report(\\"fast_path\\") do\\n    # tri\u1ec3n khai \u0111\xe3 t\u1ed1i \u01b0u h\xf3a\\n    FastPath.process(data)\\n  end\\n\\n  x.report(\\"fallback\\") do\\n    # tri\u1ec3n khai d\u1ef1 ph\xf2ng ch\u1eadm h\u01a1n\\n    Fallback.process(data)\\n  end\\n\\n  x.compare!\\nend\\n```\\n\\n### \ud83d\udd29 Microbenchmark C Extensions So V\u1edbi Ruby Thu\u1ea7n T\xfay\\n\\nKhi xem x\xe9t C extensions cho m\xe3 quan tr\u1ecdng v\u1ec1 hi\u1ec7u su\u1ea5t:\\n\\n```ruby\\nrequire \'benchmark/ips\'\\nrequire_relative \'fast_parser\'  # C extension\\n\\ndef ruby_parser(data)\\n  data.each_char.map(&:ord).reduce(0, :^)\\nend\\n\\nBenchmark.ips do |x|\\n  x.config(time: 3, warmup: 1)\\n\\n  x.report(\\"C parser\\")      { FastParser.parse(large_string) }\\n  x.report(\\"Ruby parser\\")   { ruby_parser(large_string)  }\\n\\n  x.compare!(threshold: 1.05)  # ch\u1ec9 hi\u1ec3n th\u1ecb s\u1ef1 kh\xe1c bi\u1ec7t >5%\\nend\\n```\\n\\n### \u2699\ufe0f X\xe2y D\u1ef1ng B\u1ed9 Benchmark T\xf9y Ch\u1ec9nh V\u1edbi Kh\u1edfi \u0110\u1ed9ng v\xe0 D\u1ecdn D\u1eb9p\\n\\n\u0110\u1ed1i v\u1edbi benchmark c\u1ea5p doanh nghi\u1ec7p, m\u1ed9t b\u1ed9 t\xf9y ch\u1ec9nh cung c\u1ea5p kh\u1ea3 n\u0103ng ki\u1ec3m so\xe1t t\u1ed1i \u0111a:\\n\\n```ruby\\nclass BenchmarkHarness\\n  def initialize(iterations:, warmup_cycles:)\\n    @iterations = iterations\\n    @warmup_cycles = warmup_cycles\\n    @results = []\\n  end\\n\\n  def run\\n    @warmup_cycles.times { GC.start }\\n    @warmup_cycles.times { yield }  # kh\u1edfi \u0111\u1ed9ng\\n\\n    @iterations.times do |i|\\n      GC.start(full_mark: true, immediate_sweep: true)\\n      t0 = Process.clock_gettime(Process::CLOCK_MONOTONIC)\\n      yield\\n      t1 = Process.clock_gettime(Process::CLOCK_MONOTONIC)\\n      @results << (t1 - t0)\\n    end\\n    summarize\\n  end\\n\\n  def summarize\\n    avg = @results.sum / @results.size\\n    sd = Math.sqrt(@results.map { |x| (x - avg)**2 }.sum / @results.size)\\n    { average: avg, std_dev: sd, samples: @results.size }\\n  end\\nend\\n\\n# C\xe1ch s\u1eed d\u1ee5ng\\nharness = BenchmarkHarness.new(iterations: 50, warmup_cycles: 10)\\nstats = harness.run { MyService.call(payload) }\\nputs stats\\n```\\n\\n### \ud83d\udcca K\u1ebft H\u1ee3p Ph\xe2n T\xedch Hi\u1ec7u Su\u1ea5t v\xe0 B\u1ed9 Nh\u1edb S\u1eed D\u1ee5ng memory_profiler\\n\\n\u0110\u1ec3 c\xf3 c\xe1i nh\xecn to\xe0n di\u1ec7n v\u1ec1 hi\u1ec7u su\u1ea5t, k\u1ebft h\u1ee3p ph\xe2n t\xedch th\u1eddi gian v\xe0 b\u1ed9 nh\u1edb:\\n\\n```ruby\\nrequire \'benchmark\'\\nrequire \'memory_profiler\'\\n\\nreport = MemoryProfiler.report do\\n  time = Benchmark.realtime do\\n    10_000.times { process_item(item) }\\n  end\\n  puts \\"Th\u1eddi gian th\u1ef1c thi: #{time.round(4)}s\\"\\nend\\n\\nreport.pretty_print(to_file: \'memory_report.txt\')\\n```\\n\\n## K\u1ebft Lu\u1eadn\\n\\nBenchmark trong Ruby l\xe0 m\u1ed9t h\xe0nh tr\xecnh t\u1eeb c\xe1c ph\xe9p \u0111o th\u1eddi gian \u0111\u01a1n gi\u1ea3n \u0111\u1ebfn ph\xe2n t\xedch th\u1ed1ng k\xea ph\u1ee9c t\u1ea1p. Khi \u1ee9ng d\u1ee5ng c\u1ee7a b\u1ea1n ng\xe0y c\xe0ng ph\u1ee9c t\u1ea1p, k\u1ef9 thu\u1eadt benchmark c\u1ee7a b\u1ea1n c\u0169ng n\xean ph\xe1t tri\u1ec3n theo. B\u1eaft \u0111\u1ea7u v\u1edbi c\xe1c c\u01a1 b\u1ea3n nh\u01b0 `Benchmark.measure` v\xe0 `Benchmark.bm`, sau \u0111\xf3 ti\u1ebfn t\u1edbi c\xe1c c\xf4ng c\u1ee5 n\xe2ng cao h\u01a1n nh\u01b0 `benchmark-ips` v\xe0 c\xe1c b\u1ed9 t\xf9y ch\u1ec9nh khi c\u1ea7n thi\u1ebft.\\n\\nH\xe3y nh\u1edb r\u1eb1ng benchmark kh\xf4ng ch\u1ec9 l\xe0 t\xecm m\xe3 nhanh nh\u1ea5t\u2014m\xe0 l\xe0 \u0111\u01b0a ra quy\u1ebft \u0111\u1ecbnh s\xe1ng su\u1ed1t d\u1ef1a tr\xean d\u1eef li\u1ec7u th\u1ef1c nghi\u1ec7m. \u0110\xf4i khi m\u1ed9t tri\u1ec3n khai h\u01a1i ch\u1eadm h\u01a1n c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c \u01b0a chu\u1ed9ng n\u1ebfu n\xf3 s\u1eed d\u1ee5ng \xedt b\u1ed9 nh\u1edb h\u01a1n ho\u1eb7c d\u1ec5 b\u1ea3o tr\xec h\u01a1n. Lu\xf4n xem x\xe9t b\u1ed1i c\u1ea3nh \u0111\u1ea7y \u0111\u1ee7 c\u1ee7a \u1ee9ng d\u1ee5ng khi t\u1ed1i \u01b0u h\xf3a hi\u1ec7u su\u1ea5t.\\n\\nB\u1eb1ng c\xe1ch n\u1eafm v\u1eefng c\xe1c k\u1ef9 thu\u1eadt benchmark n\xe0y, b\u1ea1n s\u1ebd \u0111\u01b0\u1ee3c trang b\u1ecb t\u1ed1t \u0111\u1ec3 vi\u1ebft m\xe3 Ruby hi\u1ec7u qu\u1ea3, c\xf3 hi\u1ec7u su\u1ea5t cao v\xe0 c\xf3 th\u1ec3 m\u1edf r\u1ed9ng theo nhu c\u1ea7u c\u1ee7a b\u1ea1n."},{"id":"ruby-arrays-ky-thuat-chuyen-gia","metadata":{"permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-chuyen-gia","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-26-ruby-arrays-ky-thuat-chuyen-gia.md","source":"@site/blog/2023-07-26-ruby-arrays-ky-thuat-chuyen-gia.md","title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","description":"Ruby Arrays Expert","date":"2023-07-26T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Arrays","permalink":"/keep-being-human-dev/blog/tags/arrays","description":"Content about array data structures and operations"},{"inline":false,"label":"Expert","permalink":"/keep-being-human-dev/blog/tags/expert","description":"Content for expert level programmers"}],"readingTime":10.2,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-ky-thuat-chuyen-gia","title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","authors":["admin"],"tags":["ruby","arrays","expert"]},"unlisted":false,"prevItem":{"title":"H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n V\u1ec1 Benchmark Trong Ruby - T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn Chuy\xean S\xe2u","permalink":"/keep-being-human-dev/blog/huong-dan-benchmark-ruby"},"nextItem":{"title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-nang-cao"}},"content":"![Ruby Arrays Expert](https://images.unsplash.com/photo-1555099962-4199c345e5dd?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)\\n\\nB\u1ea1n \u0111\xe3 th\xe0nh th\u1ea1o t\u1ea5t c\u1ea3 c\xe1c k\u1ef9 thu\u1eadt c\u01a1 b\u1ea3n, trung c\u1ea5p v\xe0 n\xe2ng cao v\u1ec1 m\u1ea3ng trong Ruby? \u0110\xe3 \u0111\u1ebfn l\xfac kh\xe1m ph\xe1 nh\u1eefng b\xed k\xedp t\u1ed1i th\u01b0\u1ee3ng, nh\u1eefng k\u1ef9 thu\u1eadt ch\u1ec9 d\xe0nh cho c\xe1c chuy\xean gia Ruby th\u1ef1c th\u1ee5. B\xe0i vi\u1ebft n\xe0y s\u1ebd \u0111\u01b0a b\u1ea1n \u0111\u1ebfn nh\u1eefng ranh gi\u1edbi xa nh\u1ea5t c\u1ee7a vi\u1ec7c l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby, n\u01a1i hi\u1ec7u su\u1ea5t, t\xednh linh ho\u1ea1t v\xe0 s\u1ef1 thanh l\u1ecbch c\u1ee7a code \u0111\u01b0\u1ee3c \u0111\u1ea9y \u0111\u1ebfn gi\u1edbi h\u1ea1n.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83e\uddf5 X\u1eed L\xfd Song Song v\u1edbi Threads\\n\\nT\u1eadn d\u1ee5ng s\u1ee9c m\u1ea1nh c\u1ee7a \u0111a lu\u1ed3ng \u0111\u1ec3 x\u1eed l\xfd m\u1ea3ng l\u1edbn m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3:\\n\\n```ruby\\nrequire \'thread\'\\nrequire \'etc\'\\n\\nclass Array\\n  def parallel_map(pool_size: Etc.nprocessors)\\n    return [] if empty?\\n    \\n    queue   = SizedQueue.new(pool_size)\\n    results = Array.new(size)\\n    mutex   = Mutex.new\\n    \\n    # T\u1ea1o nh\xf3m worker threads\\n    workers = pool_size.times.map do\\n      Thread.new do\\n        while (item = queue.pop rescue nil)\\n          value, idx = item\\n          result = yield(value)\\n          mutex.synchronize { results[idx] = result }\\n        end\\n      end\\n    end\\n    \\n    # \u0110\u01b0a c\xf4ng vi\u1ec7c v\xe0o h\xe0ng \u0111\u1ee3i\\n    each_with_index { |elem, i| queue << [elem, i] }\\n    \\n    # \u0110\xf3ng h\xe0ng \u0111\u1ee3i v\xe0 ch\u1edd c\xe1c worker ho\xe0n th\xe0nh\\n    pool_size.times { queue.close }\\n    workers.each(&:join)\\n    \\n    results\\n  end\\nend\\n\\n# V\xed d\u1ee5 s\u1eed d\u1ee5ng\\ndef xu_ly_phuc_tap(n)\\n  sleep(0.1)  # Gi\u1ea3 l\u1eadp x\u1eed l\xfd t\u1ed1n th\u1eddi gian\\n  n * n\\nend\\n\\n# X\u1eed l\xfd tu\u1ea7n t\u1ef1 - m\u1ea5t kho\u1ea3ng 1 gi\xe2y\\nstart = Time.now\\nket_qua_tuan_tu = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map { |n| xu_ly_phuc_tap(n) }\\nputs \\"X\u1eed l\xfd tu\u1ea7n t\u1ef1: #{Time.now - start} gi\xe2y\\"\\n\\n# X\u1eed l\xfd song song - nhanh h\u01a1n nhi\u1ec1u\\nstart = Time.now\\nket_qua_song_song = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].parallel_map { |n| xu_ly_phuc_tap(n) }\\nputs \\"X\u1eed l\xfd song song: #{Time.now - start} gi\xe2y\\"\\n```\\n\\n## \ud83d\udd12 Deep Freeze - B\u1ea3o V\u1ec7 M\u1ea3ng L\u1ed3ng Nhau Kh\u1ecfi Thay \u0110\u1ed5i\\n\\nT\u1ea1o m\u1ea3ng b\u1ea5t bi\u1ebfn ho\xe0n to\xe0n, bao g\u1ed3m c\u1ea3 c\xe1c m\u1ea3ng con v\xe0 \u0111\u1ed1i t\u01b0\u1ee3ng b\xean trong:\\n\\n```ruby\\nclass Array\\n  def deep_freeze\\n    each { |element| element.deep_freeze if element.respond_to?(:deep_freeze) }\\n    freeze\\n  end\\nend\\n\\nclass Hash\\n  def deep_freeze\\n    each_value { |value| value.deep_freeze if value.respond_to?(:deep_freeze) }\\n    freeze\\n  end\\nend\\n\\nclass Object\\n  def deep_freeze\\n    freeze\\n  end\\nend\\n\\n# T\u1ea1o c\u1ea5u tr\xfac d\u1eef li\u1ec7u b\u1ea5t bi\u1ebfn ho\xe0n to\xe0n\\ncau_hinh = {\\n  app_name: \\"Ruby Master\\",\\n  version: \\"1.0.0\\",\\n  settings: {\\n    timeout: 30,\\n    retries: 3,\\n    endpoints: [\\"api.example.com\\", \\"backup.example.com\\"]\\n  },\\n  features: [\\"authentication\\", \\"reporting\\", \\"analytics\\"]\\n}.deep_freeze\\n\\n# Th\u1eed thay \u0111\u1ed5i s\u1ebd g\xe2y ra l\u1ed7i\\n# cau_hinh[:version] = \\"1.0.1\\"                  # => FrozenError\\n# cau_hinh[:settings][:timeout] = 60            # => FrozenError\\n# cau_hinh[:settings][:endpoints] << \\"new.com\\"  # => FrozenError\\n# cau_hinh[:features][0] = \\"new-auth\\"           # => FrozenError\\n```\\n\\n## \ud83e\udde0 Metaprogramming - T\u1ea1o Ph\u01b0\u01a1ng Th\u1ee9c M\u1ea3ng \u0110\u1ed9ng\\n\\nS\u1eed d\u1ee5ng metaprogramming \u0111\u1ec3 t\u1ea1o c\xe1c ph\u01b0\u01a1ng th\u1ee9c x\u1eed l\xfd m\u1ea3ng m\u1ed9t c\xe1ch \u0111\u1ed9ng:\\n\\n```ruby\\nclass Array\\n  # \u0110\u1ecbnh ngh\u0129a c\xe1c ph\u01b0\u01a1ng th\u1ee9c t\xecm ki\u1ebfm \u0111\u1ed9ng\\n  %w[first last min max].each do |method_prefix|\\n    %w[even odd prime].each do |criteria|\\n      method_name = \\"#{method_prefix}_#{criteria}\\"\\n      \\n      define_method(method_name) do\\n        case criteria\\n        when \'even\'\\n          self.select(&:even?).public_send(method_prefix)\\n        when \'odd\'\\n          self.select(&:odd?).public_send(method_prefix)\\n        when \'prime\'\\n          require \'prime\'\\n          self.select { |n| Prime.prime?(n) }.public_send(method_prefix)\\n        end\\n      end\\n    end\\n  end\\n  \\n  # T\u1ea1o ph\u01b0\u01a1ng th\u1ee9c t\u1ed5ng h\u1ee3p \u0111\u1ed9ng\\n  def method_missing(method_name, *args, &block)\\n    if method_name.to_s =~ /^(sum|product)_of_(.+)$/\\n      operation, property = $1, $2\\n      \\n      values = map { |item| item.is_a?(Hash) ? item[property.to_sym] : item.send(property) }\\n      \\n      case operation\\n      when \'sum\'\\n        values.sum\\n      when \'product\'\\n        values.inject(1, :*)\\n      end\\n    else\\n      super\\n    end\\n  end\\n  \\n  def respond_to_missing?(method_name, include_private = false)\\n    method_name.to_s =~ /^(sum|product)_of_(.+)$/ || super\\n  end\\nend\\n\\n# S\u1eed d\u1ee5ng c\xe1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c t\u1ea1o \u0111\u1ed9ng\\nso = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\\n\\nso.first_even  # => 2\\nso.last_odd    # => 13\\nso.max_prime   # => 13\\n\\n# S\u1eed d\u1ee5ng v\u1edbi m\u1ea3ng \u0111\u1ed1i t\u01b0\u1ee3ng\\nsan_pham = [\\n  {ten: \\"Laptop\\", gia: 15000000, so_luong: 2},\\n  {ten: \\"\u0110i\u1ec7n tho\u1ea1i\\", gia: 8000000, so_luong: 5},\\n  {ten: \\"Tai nghe\\", gia: 1500000, so_luong: 10}\\n]\\n\\nsan_pham.sum_of_gia       # => 24500000\\nsan_pham.product_of_so_luong  # => 100\\n```\\n\\n## \ud83e\uddee Memoized Inject - T\u1ed1i \u01afu H\xf3a T\xednh To\xe1n L\u1eb7p L\u1ea1i\\n\\nT\u1ea1o m\u1ed9t phi\xean b\u1ea3n t\u1ed1i \u01b0u c\u1ee7a `inject` v\u1edbi kh\u1ea3 n\u0103ng ghi nh\u1edb k\u1ebft qu\u1ea3 trung gian:\\n\\n```ruby\\nclass Array\\n  def memoized_inject(initial = nil, memo_key = nil)\\n    memo = {}\\n    memo_key ||= ->(acc, item) { [acc, item].hash }\\n    \\n    if block_given?\\n      inject(initial) do |acc, item|\\n        key = memo_key.call(acc, item)\\n        memo[key] ||= yield(acc, item)\\n      end\\n    else\\n      inject(initial)\\n    end\\n  end\\nend\\n\\n# T\xednh giai th\u1eeba v\u1edbi memoization\\ndef factorial(n)\\n  return 1 if n <= 1\\n  (1..n).memoized_inject(1) { |acc, i| acc * i }\\nend\\n\\n# T\xednh s\u1ed1 Fibonacci v\u1edbi memoization\\ndef fibonacci_sequence(n)\\n  return [] if n <= 0\\n  return [0] if n == 1\\n  return [0, 1] if n == 2\\n  \\n  result = [0, 1]\\n  memo = {}\\n  \\n  (2...n).each do |i|\\n    key = [result[i-1], result[i-2]].hash\\n    memo[key] ||= result[i-1] + result[i-2]\\n    result << memo[key]\\n  end\\n  \\n  result\\nend\\n\\nputs fibonacci_sequence(100).last  # T\xednh s\u1ed1 Fibonacci th\u1ee9 100 r\u1ea5t nhanh\\n```\\n\\n## \ud83d\udd04 Enumerator V\xf4 H\u1ea1n L\u01b0\u1eddi Bi\u1ebfng\\n\\nT\u1ea1o v\xe0 l\xe0m vi\u1ec7c v\u1edbi c\xe1c d\xe3y v\xf4 h\u1ea1n m\xe0 kh\xf4ng g\xe2y tr\xe0n b\u1ed9 nh\u1edb:\\n\\n```ruby\\n# T\u1ea1o d\xe3y s\u1ed1 Fibonacci v\xf4 h\u1ea1n\\nfibonacci = Enumerator.new do |yielder|\\n  a, b = 0, 1\\n  loop do\\n    yielder << a\\n    a, b = b, a + b\\n  end\\nend.lazy\\n\\n# L\u1ea5y 10 s\u1ed1 Fibonacci \u0111\u1ea7u ti\xean\\nfibonacci.take(10).force  # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\\n\\n# L\u1ea5y c\xe1c s\u1ed1 Fibonacci l\u1edbn h\u01a1n 1000 v\xe0 nh\u1ecf h\u01a1n 10000\\nfibonacci\\n  .select { |n| n > 1000 }\\n  .take_while { |n| n < 10000 }\\n  .force  # => [1597, 2584, 4181, 6765]\\n\\n# T\u1ea1o d\xe3y s\u1ed1 nguy\xean t\u1ed1 v\xf4 h\u1ea1n\\nrequire \'prime\'\\nprimes = Enumerator.new do |yielder|\\n  Prime.each { |prime| yielder << prime }\\nend.lazy\\n\\n# T\xecm 5 s\u1ed1 nguy\xean t\u1ed1 \u0111\u1ea7u ti\xean l\u1edbn h\u01a1n 1000000\\nprimes\\n  .select { |p| p > 1000000 }\\n  .take(5)\\n  .force  # => [1000003, 1000033, 1000037, 1000039, 1000081]\\n```\\n\\n## \ud83d\udd0c Refinements - M\u1edf R\u1ed9ng M\u1ea3ng An To\xe0n\\n\\nS\u1eed d\u1ee5ng refinements \u0111\u1ec3 m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng c\u1ee7a m\u1ea3ng m\xe0 kh\xf4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn code kh\xe1c:\\n\\n```ruby\\nmodule ArrayExtensions\\n  refine Array do\\n    # Ph\u01b0\u01a1ng th\u1ee9c t\xecm ph\u1ea7n t\u1eed ph\u1ed5 bi\u1ebfn nh\u1ea5t\\n    def most_frequent\\n      group_by(&:itself)\\n        .transform_values(&:count)\\n        .max_by { |_, count| count }\\n        &.first\\n    end\\n    \\n    # Ph\u01b0\u01a1ng th\u1ee9c t\xednh trung b\xecnh c\xf3 tr\u1ecdng s\u1ed1\\n    def weighted_average(weights = nil)\\n      return nil if empty?\\n      \\n      if weights.nil?\\n        sum.to_f / size\\n      else\\n        raise ArgumentError, \\"Weights array must have same size as source array\\" if weights.size != size\\n        \\n        sum { |v| v * weights[index(v)] }.to_f / weights.sum\\n      end\\n    end\\n    \\n    # Ph\u01b0\u01a1ng th\u1ee9c chia m\u1ea3ng th\xe0nh c\xe1c nh\xf3m c\xf3 k\xedch th\u01b0\u1edbc b\u1eb1ng nhau\\n    def split_into(num_groups)\\n      return [] if empty?\\n      \\n      groups = Array.new(num_groups) { [] }\\n      each_with_index { |elem, i| groups[i % num_groups] << elem }\\n      groups\\n    end\\n  end\\nend\\n\\n# S\u1eed d\u1ee5ng refinements\\nusing ArrayExtensions\\n\\n# T\xecm ph\u1ea7n t\u1eed ph\u1ed5 bi\u1ebfn nh\u1ea5t\\n[1, 2, 3, 2, 2, 4, 5, 2, 6, 7, 2].most_frequent  # => 2\\n\\n# T\xednh trung b\xecnh c\xf3 tr\u1ecdng s\u1ed1\\ndiem = [8.5, 7.0, 9.5]\\ntrong_so = [0.3, 0.2, 0.5]\\ndiem.weighted_average(trong_so)  # => 8.55\\n\\n# Chia m\u1ea3ng th\xe0nh c\xe1c nh\xf3m\\n(1..10).to_a.split_into(3)  # => [[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]\\n```\\n\\n## \ud83d\udce6 Binary Packing v\u1edbi pack/unpack\\n\\nS\u1eed d\u1ee5ng `pack` v\xe0 `unpack` \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i gi\u1eefa m\u1ea3ng v\xe0 d\u1eef li\u1ec7u nh\u1ecb ph\xe2n:\\n\\n```ruby\\n# Chuy\u1ec3n \u0111\u1ed5i m\u1ea3ng s\u1ed1 nguy\xean th\xe0nh d\u1eef li\u1ec7u nh\u1ecb ph\xe2n\\nso_nguyen = [1, 2, 3, 4, 5]\\nbinary_data = so_nguyen.pack(\'C*\')  # \'C\' = unsigned char (8-bit)\\n\\n# Chuy\u1ec3n \u0111\u1ed5i ng\u01b0\u1ee3c l\u1ea1i t\u1eeb d\u1eef li\u1ec7u nh\u1ecb ph\xe2n th\xe0nh m\u1ea3ng\\nso_nguyen_moi = binary_data.unpack(\'C*\')  # => [1, 2, 3, 4, 5]\\n\\n# \u0110\xf3ng g\xf3i c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p\\ndef serialize_point(x, y, z)\\n  [x, y, z].pack(\'d3\')  # \'d\' = double precision float (64-bit)\\nend\\n\\ndef deserialize_point(binary)\\n  binary.unpack(\'d3\')  # => [x, y, z]\\nend\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\u01b0u tr\u1eef hi\u1ec7u qu\u1ea3 m\u1ea3ng l\u1edbn\\ndef save_large_array(array, filename)\\n  File.open(filename, \'wb\') do |file|\\n    # L\u01b0u k\xedch th\u01b0\u1edbc m\u1ea3ng\\n    file.write([array.size].pack(\'N\'))\\n    \\n    # L\u01b0u d\u1eef li\u1ec7u\\n    file.write(array.pack(\'d*\'))\\n  end\\nend\\n\\ndef load_large_array(filename)\\n  File.open(filename, \'rb\') do |file|\\n    # \u0110\u1ecdc k\xedch th\u01b0\u1edbc m\u1ea3ng\\n    size = file.read(4).unpack(\'N\')[0]\\n    \\n    # \u0110\u1ecdc d\u1eef li\u1ec7u\\n    file.read(size * 8).unpack(\'d*\')\\n  end\\nend\\n```\\n\\n## \ud83c\udfb2 Bi\u1ec3u Di\u1ec5n M\u1ea3ng D\u01b0\u1edbi D\u1ea1ng BitSet\\n\\nS\u1eed d\u1ee5ng bi\u1ec3u di\u1ec5n bit \u0111\u1ec3 t\u1ed1i \u01b0u h\xf3a b\u1ed9 nh\u1edb cho c\xe1c t\u1eadp h\u1ee3p s\u1ed1 nguy\xean:\\n\\n```ruby\\nclass BitSet\\n  def initialize(size)\\n    @size = size\\n    @bits = Array.new((size / 32.0).ceil, 0)\\n  end\\n  \\n  def [](index)\\n    return nil if index >= @size\\n    \\n    word_index = index / 32\\n    bit_index = index % 32\\n    \\n    (@bits[word_index] & (1 << bit_index)) != 0\\n  end\\n  \\n  def []=(index, value)\\n    return nil if index >= @size\\n    \\n    word_index = index / 32\\n    bit_index = index % 32\\n    \\n    if value\\n      @bits[word_index] |= (1 << bit_index)\\n    else\\n      @bits[word_index] &= ~(1 << bit_index)\\n    end\\n  end\\n  \\n  def to_a\\n    (0...@size).select { |i| self[i] }\\n  end\\n  \\n  def union(other)\\n    result = BitSet.new(@size)\\n    @bits.each_with_index do |word, i|\\n      result.instance_variable_get(:@bits)[i] = word | other.instance_variable_get(:@bits)[i]\\n    end\\n    result\\n  end\\n  \\n  def intersection(other)\\n    result = BitSet.new(@size)\\n    @bits.each_with_index do |word, i|\\n      result.instance_variable_get(:@bits)[i] = word & other.instance_variable_get(:@bits)[i]\\n    end\\n    result\\n  end\\nend\\n\\n# S\u1eed d\u1ee5ng BitSet \u0111\u1ec3 bi\u1ec3u di\u1ec5n t\u1eadp h\u1ee3p hi\u1ec7u qu\u1ea3\\nmax_value = 1_000_000\\nbitset = BitSet.new(max_value + 1)\\n\\n# \u0110\xe1nh d\u1ea5u c\xe1c s\u1ed1 nguy\xean t\u1ed1\\nrequire \'prime\'\\nPrime.each(max_value) do |prime|\\n  bitset[prime] = true\\nend\\n\\n# Ki\u1ec3m tra s\u1ed1 nguy\xean t\u1ed1 nhanh ch\xf3ng\\nbitset[997]  # => true\\nbitset[998]  # => false\\n\\n# T\u1ea1o t\u1eadp h\u1ee3p c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong kho\u1ea3ng\\nprimes_under_100 = (0..100).select { |n| bitset[n] }\\n```\\n\\n## \ud83e\udde9 T\u1ea1o M\u1ea3ng N Chi\u1ec1u\\n\\nT\u1ea1o v\xe0 l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng \u0111a chi\u1ec1u m\u1ed9t c\xe1ch linh ho\u1ea1t:\\n\\n```ruby\\nclass NDimensionalArray\\n  def initialize(dimensions, default_value = nil, &block)\\n    @dimensions = dimensions.dup\\n    \\n    if @dimensions.empty?\\n      @data = default_value\\n    else\\n      current_dim = @dimensions.shift\\n      @data = Array.new(current_dim) do |i|\\n        if block_given?\\n          NDimensionalArray.new(@dimensions.dup, default_value) { |*coords| block.call(i, *coords) }\\n        else\\n          NDimensionalArray.new(@dimensions.dup, default_value)\\n        end\\n      end\\n    end\\n  end\\n  \\n  def [](*indices)\\n    return @data if indices.empty?\\n    \\n    current_index = indices.shift\\n    if indices.empty?\\n      @data[current_index]\\n    else\\n      @data[current_index][*indices]\\n    end\\n  end\\n  \\n  def []=(*indices, value)\\n    if indices.size == 1\\n      @data[indices[0]] = value\\n    else\\n      current_index = indices.shift\\n      @data[current_index][*indices] = value\\n    end\\n  end\\n  \\n  def each(&block)\\n    if @data.is_a?(Array)\\n      @data.each_with_index do |subarray, i|\\n        if subarray.is_a?(NDimensionalArray)\\n          subarray.each_with_coords do |value, *coords|\\n            yield value, i, *coords\\n          end\\n        else\\n          yield subarray, i\\n        end\\n      end\\n    else\\n      yield @data\\n    end\\n  end\\n  \\n  def each_with_coords(&block)\\n    if @data.is_a?(Array)\\n      @data.each_with_index do |subarray, i|\\n        if subarray.is_a?(NDimensionalArray)\\n          subarray.each_with_coords do |value, *coords|\\n            yield value, i, *coords\\n          end\\n        else\\n          yield subarray, i\\n        end\\n      end\\n    else\\n      yield @data\\n    end\\n  end\\n  \\n  def to_a\\n    if @data.is_a?(Array)\\n      @data.map { |item| item.is_a?(NDimensionalArray) ? item.to_a : item }\\n    else\\n      @data\\n    end\\n  end\\nend\\n\\n# T\u1ea1o ma tr\u1eadn 3x3\\nmatrix = NDimensionalArray.new([3, 3], 0)\\nmatrix[0, 0] = 1\\nmatrix[1, 1] = 5\\nmatrix[2, 2] = 9\\n\\n# T\u1ea1o tensor 3x3x3 v\u1edbi gi\xe1 tr\u1ecb l\xe0 t\u1ed5ng c\xe1c ch\u1ec9 s\u1ed1\\ntensor = NDimensionalArray.new([3, 3, 3]) { |i, j, k| i + j + k }\\n\\n# Truy c\u1eadp gi\xe1 tr\u1ecb\\ntensor[1, 2, 0]  # => 3 (1 + 2 + 0)\\n```\\n\\n## \ud83d\udd17 Chu\u1ed7i Enumerator T\xf9y Ch\u1ec9nh\\n\\nT\u1ea1o v\xe0 k\u1ebft h\u1ee3p c\xe1c enumerator t\xf9y ch\u1ec9nh \u0111\u1ec3 x\u1eed l\xfd d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p:\\n\\n```ruby\\nmodule EnumeratorChaining\\n  refine Enumerator do\\n    def chain(other)\\n      Enumerator.new do |yielder|\\n        each { |value| yielder << value }\\n        other.each { |value| yielder << value }\\n      end\\n    end\\n    \\n    def zip_with(other)\\n      Enumerator.new do |yielder|\\n        loop do\\n          yielder << [self.next, other.next]\\n        end\\n      rescue StopIteration\\n        nil\\n      end\\n    end\\n    \\n    def interleave(other)\\n      Enumerator.new do |yielder|\\n        loop do\\n          yielder << self.next\\n          yielder << other.next\\n        end\\n      rescue StopIteration\\n        nil\\n      end\\n    end\\n    \\n    def batch(size)\\n      Enumerator.new do |yielder|\\n        buffer = []\\n        \\n        each do |item|\\n          buffer << item\\n          \\n          if buffer.size >= size\\n            yielder << buffer\\n            buffer = []\\n          end\\n        end\\n        \\n        yielder << buffer unless buffer.empty?\\n      end\\n    end\\n  end\\nend\\n\\nusing EnumeratorChaining\\n\\n# K\u1ebft h\u1ee3p c\xe1c d\xe3y s\u1ed1\\nfibonacci = Enumerator.new do |yielder|\\n  a, b = 0, 1\\n  loop do\\n    yielder << a\\n    a, b = b, a + b\\n  end\\nend\\n\\nsquares = Enumerator.new do |yielder|\\n  n = 0\\n  loop do\\n    yielder << n * n\\n    n += 1\\n  end\\nend\\n\\n# K\u1ebft h\u1ee3p hai d\xe3y s\u1ed1\\ncombined = fibonacci.lazy.take(10).chain(squares.lazy.take(10))\\ncombined.to_a  # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\\n\\n# Gh\xe9p c\u1eb7p c\xe1c ph\u1ea7n t\u1eed\\npairs = fibonacci.lazy.take(10).zip_with(squares.lazy)\\npairs.take(5).force  # => [[0, 0], [1, 1], [1, 4], [2, 9], [3, 16]]\\n\\n# Xen k\u1ebd c\xe1c ph\u1ea7n t\u1eed\\ninterleaved = fibonacci.lazy.take(5).interleave(squares.lazy.take(5))\\ninterleaved.to_a  # => [0, 0, 1, 1, 1, 4, 2, 9, 3, 16]\\n\\n# X\u1eed l\xfd theo l\xf4\\nbatched = (1..10).each.batch(3)\\nbatched.to_a  # => [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\\n```\\n\\n## \ud83c\udfaf K\u1ebft lu\u1eadn\\n\\nNh\u1eefng k\u1ef9 thu\u1eadt chuy\xean gia n\xe0y \u0111\u1ea1i di\u1ec7n cho tr\xecnh \u0111\u1ed9 cao nh\u1ea5t trong vi\u1ec7c l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby. Ch\xfang kh\xf4ng ch\u1ec9 gi\xfap b\u1ea1n vi\u1ebft code hi\u1ec7u qu\u1ea3 v\xe0 t\u1ed1i \u01b0u m\xe0 c\xf2n m\u1edf ra nh\u1eefng kh\u1ea3 n\u0103ng m\u1edbi trong vi\u1ec7c x\u1eed l\xfd d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p.\\n\\nH\xe3y nh\u1edb r\u1eb1ng, v\u1edbi s\u1ee9c m\u1ea1nh l\u1edbn \u0111i k\xe8m tr\xe1ch nhi\u1ec7m l\u1edbn. Nh\u1eefng k\u1ef9 thu\u1eadt n\xe0y r\u1ea5t m\u1ea1nh m\u1ebd nh\u01b0ng c\u0169ng c\xf3 th\u1ec3 l\xe0m cho code c\u1ee7a b\u1ea1n tr\u1edf n\xean kh\xf3 hi\u1ec3u n\u1ebfu s\u1eed d\u1ee5ng kh\xf4ng \u0111\xfang c\xe1ch. Lu\xf4n c\xe2n nh\u1eafc gi\u1eefa s\u1ef1 ph\u1ee9c t\u1ea1p v\xe0 t\xednh d\u1ec5 \u0111\u1ecdc c\u1ee7a code.\\n\\nB\u1ea1n \u0111\xe3 s\u1eb5n s\xe0ng tr\u1edf th\xe0nh b\u1eadc th\u1ea7y v\u1ec1 m\u1ea3ng trong Ruby ch\u01b0a? H\xe3y th\u1eed nghi\u1ec7m v\xe0 \xe1p d\u1ee5ng nh\u1eefng k\u1ef9 thu\u1eadt n\xe0y v\xe0o d\u1ef1 \xe1n c\u1ee7a b\u1ea1n!\\n\\n---\\n\\nB\u1ea1n c\xf3 k\u1ef9 thu\u1eadt x\u1eed l\xfd m\u1ea3ng n\xe2ng cao n\xe0o kh\xe1c mu\u1ed1n chia s\u1ebb? H\xe3y \u0111\u1ec3 l\u1ea1i b\xecnh lu\u1eadn b\xean d\u01b0\u1edbi nh\xe9!"},{"id":"ruby-arrays-ky-thuat-nang-cao","metadata":{"permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-nang-cao","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-25-ruby-arrays-ky-thuat-nang-cao.md","source":"@site/blog/2023-07-25-ruby-arrays-ky-thuat-nang-cao.md","title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","description":"Ruby Arrays Advanced","date":"2023-07-25T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Arrays","permalink":"/keep-being-human-dev/blog/tags/arrays","description":"Content about array data structures and operations"},{"inline":false,"label":"Advanced","permalink":"/keep-being-human-dev/blog/tags/advanced","description":"Content for advanced level programmers"}],"readingTime":7.11,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-ky-thuat-nang-cao","title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","authors":["admin"],"tags":["ruby","arrays","advanced"]},"unlisted":false,"prevItem":{"title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-chuyen-gia"},"nextItem":{"title":"Ngh\u1ec7 Thu\u1eadt X\u1eed L\xfd M\u1ea3ng Trong Ruby: K\u1ef9 Thu\u1eadt Trung C\u1ea5p \u0110\xe1ng Kinh Ng\u1ea1c","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-trung-cap"}},"content":"![Ruby Arrays Advanced](https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)\\n\\nB\u1ea1n \u0111\xe3 th\xe0nh th\u1ea1o c\xe1c k\u1ef9 thu\u1eadt c\u01a1 b\u1ea3n v\xe0 trung c\u1ea5p v\u1ec1 m\u1ea3ng trong Ruby? \u0110\xe3 \u0111\u1ebfn l\xfac kh\xe1m ph\xe1 nh\u1eefng k\u1ef9 thu\u1eadt n\xe2ng cao, nh\u1eefng \\"v\u0169 kh\xed b\xed m\u1eadt\\" gi\xfap code c\u1ee7a b\u1ea1n tr\u1edf n\xean tinh t\u1ebf, hi\u1ec7u qu\u1ea3 v\xe0 \u0111\u1eb3ng c\u1ea5p h\u01a1n. H\xe3y c\xf9ng \u0111i s\xe2u v\xe0o th\u1ebf gi\u1edbi c\u1ee7a nh\u1eefng b\u1eadc th\u1ea7y Ruby!\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83e\uddd9\u200d\u2642\ufe0f Pattern Matching v\u1edbi M\u1ea3ng - Ph\xe9p Thu\u1eadt M\u1edbi t\u1eeb Ruby 3.0\\n\\nPattern matching l\xe0 m\u1ed9t trong nh\u1eefng t\xednh n\u0103ng m\u1ea1nh m\u1ebd nh\u1ea5t \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u t\u1eeb Ruby 3.0, gi\xfap b\u1ea1n tr\xedch xu\u1ea5t d\u1eef li\u1ec7u t\u1eeb c\xe1c c\u1ea5u tr\xfac ph\u1ee9c t\u1ea1p m\u1ed9t c\xe1ch d\u1ec5 d\xe0ng:\\n\\n```ruby\\ndef phan_tich_du_lieu(data)\\n  case data\\n  in [id_nguoi_dung, [nam, thang, ngay], *nhan]\\n    puts \\"Ng\u01b0\u1eddi d\xf9ng #{id_nguoi_dung} v\xe0o ng\xe0y #{ngay}/#{thang}/#{nam} v\u1edbi nh\xe3n: #{nhan.inspect}\\"\\n  in [id_nguoi_dung, thoi_gian, *]\\n    puts \\"Ng\u01b0\u1eddi d\xf9ng #{id_nguoi_dung} v\xe0o l\xfac #{thoi_gian}\\"\\n  else\\n    puts \\"D\u1eef li\u1ec7u kh\xf4ng h\u1ee3p l\u1ec7\\"\\n  end\\nend\\n\\n# S\u1eed d\u1ee5ng pattern matching\\ndu_lieu = [42, [2023, 7, 25], \'ruby\', \'arrays\']\\nphan_tich_du_lieu(du_lieu)\\n# => \\"Ng\u01b0\u1eddi d\xf9ng 42 v\xe0o ng\xe0y 25/7/2023 v\u1edbi nh\xe3n: [\\\\\\"ruby\\\\\\", \\\\\\"arrays\\\\\\"]\\"\\n\\n# Pattern matching trong tham s\u1ed1 h\xe0m\\ndef xu_ly_toa_do([(x, y), z])\\n  puts \\"T\u1ecda \u0111\u1ed9 2D: (#{x}, #{y}), \u0110\u1ed9 cao: #{z}\\"\\nend\\n\\nxu_ly_toa_do([[10, 20], 5])\\n# => \\"T\u1ecda \u0111\u1ed9 2D: (10, 20), \u0110\u1ed9 cao: 5\\"\\n```\\n\\n## \ud83d\udd04 Lazy Enumerators - S\u1ee9c M\u1ea1nh c\u1ee7a S\u1ef1 L\u01b0\u1eddi Bi\u1ebfng\\n\\nLazy enumerators cho ph\xe9p b\u1ea1n x\u1eed l\xfd c\xe1c t\u1eadp d\u1eef li\u1ec7u l\u1edbn m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 b\u1eb1ng c\xe1ch ch\u1ec9 t\xednh to\xe1n khi c\u1ea7n thi\u1ebft:\\n\\n```ruby\\n# T\u1ea1o m\u1ed9t d\xe3y v\xf4 h\u1ea1n c\xe1c s\u1ed1 nguy\xean t\u1ed1\\nrequire \'prime\'\\nso_nguyen_to_vo_han = Prime.each\\n\\n# Kh\xf4ng hi\u1ec7u qu\u1ea3 v\xe0 s\u1ebd ch\u1ea1y m\xe3i m\xe3i\\n# so_nguyen_to_dau = so_nguyen_to_vo_han.take(10)\\n\\n# S\u1eed d\u1ee5ng lazy \u0111\u1ec3 x\u1eed l\xfd hi\u1ec7u qu\u1ea3\\nso_nguyen_to_lon = so_nguyen_to_vo_han\\n  .lazy\\n  .select { |p| p > 1000 }\\n  .take(5)\\n  .force\\n# => [1009, 1013, 1019, 1021, 1031]\\n\\n# X\u1eed l\xfd t\u1ec7p l\u1edbn theo d\xf2ng m\xe0 kh\xf4ng c\u1ea7n \u0111\u1ecdc to\xe0n b\u1ed9 v\xe0o b\u1ed9 nh\u1edb\\ndef doc_va_xu_ly_tep_lon(duong_dan)\\n  File.open(duong_dan, \'r\').each_line\\n    .lazy\\n    .map(&:chomp)\\n    .select { |line| line.include?(\'ERROR\') }\\n    .take(10)\\n    .force\\nend\\n```\\n\\n## \ud83e\udde9 Nh\xf3m D\u1eef Li\u1ec7u v\u1edbi each_with_object\\n\\nPh\u01b0\u01a1ng th\u1ee9c `each_with_object` cung c\u1ea5p c\xe1ch ti\u1ebfp c\u1eadn thanh l\u1ecbch \u0111\u1ec3 x\xe2y d\u1ef1ng c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p:\\n\\n```ruby\\nsinh_vien = [\\n  {ten: \\"Minh\\", lop: \\"12A\\", diem: 8.5},\\n  {ten: \\"H\u01b0\u01a1ng\\", lop: \\"12A\\", diem: 9.0},\\n  {ten: \\"Tu\u1ea5n\\", lop: \\"12B\\", diem: 7.5},\\n  {ten: \\"Linh\\", lop: \\"12B\\", diem: 8.0},\\n  {ten: \\"Nam\\", lop: \\"12C\\", diem: 9.5}\\n]\\n\\n# Nh\xf3m sinh vi\xean theo l\u1edbp\\nsinh_vien_theo_lop = sinh_vien.each_with_object({}) do |sv, result|\\n  (result[sv[:lop]] ||= []) << sv\\nend\\n# => {\\n#      \\"12A\\" => [{ten: \\"Minh\\", lop: \\"12A\\", diem: 8.5}, {ten: \\"H\u01b0\u01a1ng\\", lop: \\"12A\\", diem: 9.0}],\\n#      \\"12B\\" => [{ten: \\"Tu\u1ea5n\\", lop: \\"12B\\", diem: 7.5}, {ten: \\"Linh\\", lop: \\"12B\\", diem: 8.0}],\\n#      \\"12C\\" => [{ten: \\"Nam\\", lop: \\"12C\\", diem: 9.5}]\\n#    }\\n\\n# T\xednh \u0111i\u1ec3m trung b\xecnh theo l\u1edbp\\ndiem_trung_binh_theo_lop = sinh_vien.each_with_object({}) do |sv, result|\\n  lop = sv[:lop]\\n  result[lop] ||= {tong_diem: 0, so_sv: 0}\\n  result[lop][:tong_diem] += sv[:diem]\\n  result[lop][:so_sv] += 1\\nend.transform_values { |v| v[:tong_diem] / v[:so_sv] }\\n# => {\\"12A\\" => 8.75, \\"12B\\" => 7.75, \\"12C\\" => 9.5}\\n```\\n\\n## \ud83e\udde0 T\xf9y Ch\u1ec9nh Ph\u01b0\u01a1ng Th\u1ee9c uniq v\u1edbi Kh\u1ed1i L\u1ec7nh\\n\\nPh\u01b0\u01a1ng th\u1ee9c `uniq` c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c t\xf9y ch\u1ec9nh \u0111\u1ec3 x\xe1c \u0111\u1ecbnh \\"t\xednh duy nh\u1ea5t\\" d\u1ef1a tr\xean ti\xeau ch\xed ph\u1ee9c t\u1ea1p:\\n\\n```ruby\\nsan_pham = [\\n  {id: 1, ten: \\"iPhone\\", hang: \\"Apple\\", gia: 20000000},\\n  {id: 2, ten: \\"Galaxy\\", hang: \\"Samsung\\", gia: 18000000},\\n  {id: 3, ten: \\"iPhone Pro\\", hang: \\"Apple\\", gia: 30000000},\\n  {id: 4, ten: \\"Redmi\\", hang: \\"Xiaomi\\", gia: 5000000}\\n]\\n\\n# L\u1ea5y s\u1ea3n ph\u1ea9m duy nh\u1ea5t theo h\xe3ng\\nsan_pham_theo_hang = san_pham.uniq { |sp| sp[:hang] }\\n# => [\\n#      {id: 1, ten: \\"iPhone\\", hang: \\"Apple\\", gia: 20000000},\\n#      {id: 2, ten: \\"Galaxy\\", hang: \\"Samsung\\", gia: 18000000},\\n#      {id: 4, ten: \\"Redmi\\", hang: \\"Xiaomi\\", gia: 5000000}\\n#    ]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\u1ecdc email tr\xf9ng l\u1eb7p kh\xf4ng ph\xe2n bi\u1ec7t hoa th\u01b0\u1eddng\\nemails = [\\"user@example.com\\", \\"USER@EXAMPLE.COM\\", \\"another@gmail.com\\", \\"Another@Gmail.com\\"]\\nemails_duy_nhat = emails.uniq { |email| email.downcase }\\n# => [\\"user@example.com\\", \\"another@gmail.com\\"]\\n```\\n\\n## \ud83e\uddee T\u1ed5 H\u1ee3p v\xe0 Ho\xe1n V\u1ecb v\u1edbi M\u1ea3ng\\n\\nRuby cung c\u1ea5p c\xe1c ph\u01b0\u01a1ng th\u1ee9c m\u1ea1nh m\u1ebd \u0111\u1ec3 l\xe0m vi\u1ec7c v\u1edbi t\u1ed5 h\u1ee3p v\xe0 ho\xe1n v\u1ecb:\\n\\n```ruby\\nnguyen_to = [2, 3, 5, 7]\\n\\n# T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c t\u1ed5 h\u1ee3p c\xf3 th\u1ec3 c\xf3 k\xedch th\u01b0\u1edbc 2\\nto_hop = nguyen_to.combination(2).to_a\\n# => [[2, 3], [2, 5], [2, 7], [3, 5], [3, 7], [5, 7]]\\n\\n# T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c ho\xe1n v\u1ecb c\xf3 th\u1ec3 c\xf3\\nhoan_vi = nguyen_to.permutation(3).to_a\\n# => [[2, 3, 5], [2, 3, 7], [2, 5, 3], [2, 5, 7], [2, 7, 3], [2, 7, 5], ...]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c m\u1eadt kh\u1ea9u c\xf3 th\u1ec3 t\u1eeb m\u1ed9t t\u1eadp k\xfd t\u1ef1\\nky_tu = [\'A\', \'B\', \'C\', \'1\', \'2\']\\nmat_khau_co_the = ky_tu.repeated_permutation(3).map(&:join)\\n# => [\\"AAA\\", \\"AA1\\", \\"AA2\\", \\"A1A\\", \\"A11\\", \\"A12\\", \\"A2A\\", \\"A21\\", \\"A22\\", ...]\\n```\\n\\n## \ud83d\udd2a Chia M\u1ea3ng Th\xe0nh C\xe1c Ph\u1ea7n B\u1eb1ng Nhau\\n\\nT\u1ea1o m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 chia m\u1ea3ng th\xe0nh c\xe1c ph\u1ea7n c\xf3 k\xedch th\u01b0\u1edbc g\u1ea7n b\u1eb1ng nhau:\\n\\n```ruby\\nclass Array\\n  def balanced_split(num_chunks)\\n    return [] if empty?\\n    \\n    chunk_size = (size.to_f / num_chunks).ceil\\n    each_slice(chunk_size).to_a\\n  end\\nend\\n\\n# Chia m\u1ea3ng th\xe0nh c\xe1c ph\u1ea7n g\u1ea7n b\u1eb1ng nhau\\ndu_lieu = (1..10).to_a\\ndu_lieu.balanced_split(3)\\n# => [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Ph\xe2n chia c\xf4ng vi\u1ec7c cho nhi\u1ec1u lu\u1ed3ng x\u1eed l\xfd\\ncong_viec = (1..20).to_a\\nso_luong_worker = 4\\ncong_viec_theo_worker = cong_viec.balanced_split(so_luong_worker)\\n# => [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\\n```\\n\\n## \ud83d\udd0d Ph\xe2n \u0110o\u1ea1n M\u1ea3ng v\u1edbi slice_when\\n\\nPh\u01b0\u01a1ng th\u1ee9c `slice_when` cho ph\xe9p b\u1ea1n chia m\u1ea3ng th\xe0nh c\xe1c ph\xe2n \u0111o\u1ea1n d\u1ef1a tr\xean \u0111i\u1ec1u ki\u1ec7n gi\u1eefa c\xe1c ph\u1ea7n t\u1eed li\xean ti\u1ebfp:\\n\\n```ruby\\n# Ph\xe2n \u0111o\u1ea1n m\u1ea3ng s\u1ed1 th\xe0nh c\xe1c d\xe3y li\xean ti\u1ebfp\\nso = [1, 2, 3, 5, 6, 8, 9, 10, 12]\\nday_lien_tiep = so.slice_when { |i, j| j != i + 1 }.to_a\\n# => [[1, 2, 3], [5, 6], [8, 9, 10], [12]]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Nh\xf3m c\xe1c giao d\u1ecbch theo ng\xe0y\\ngiao_dich = [\\n  {ngay: \\"2023-07-20\\", so_tien: 100000},\\n  {ngay: \\"2023-07-20\\", so_tien: 200000},\\n  {ngay: \\"2023-07-21\\", so_tien: 150000},\\n  {ngay: \\"2023-07-21\\", so_tien: 300000},\\n  {ngay: \\"2023-07-23\\", so_tien: 500000}\\n]\\n\\ngiao_dich_theo_ngay = giao_dich.slice_when { |a, b| a[:ngay] != b[:ngay] }.to_a\\n# => [\\n#      [{ngay: \\"2023-07-20\\", so_tien: 100000}, {ngay: \\"2023-07-20\\", so_tien: 200000}],\\n#      [{ngay: \\"2023-07-21\\", so_tien: 150000}, {ngay: \\"2023-07-21\\", so_tien: 300000}],\\n#      [{ngay: \\"2023-07-23\\", so_tien: 500000}]\\n#    ]\\n```\\n\\n## \ud83d\udd04 X\u1eed L\xfd M\u1ea3ng Kh\xf4ng \u0110\u1ec1u v\u1edbi Transpose\\n\\nKhi l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng kh\xf4ng \u0111\u1ec1u (jagged arrays), ph\u01b0\u01a1ng th\u1ee9c `transpose` ti\xeau chu\u1ea9n s\u1ebd g\u1eb7p l\u1ed7i. H\xe3y t\u1ea1o m\u1ed9t phi\xean b\u1ea3n n\xe2ng cao:\\n\\n```ruby\\nclass Array\\n  def safe_transpose\\n    return [] if empty?\\n    \\n    max_size = map(&:size).max\\n    map { |row| row.fill(nil, row.size, max_size - row.size) }.transpose\\n  end\\nend\\n\\n# X\u1eed l\xfd m\u1ea3ng kh\xf4ng \u0111\u1ec1u\\nmang_khong_deu = [\\n  [1, 2, 3],\\n  [4, 5],\\n  [6, 7, 8, 9]\\n]\\n\\nmang_chuyen_vi = mang_khong_deu.safe_transpose\\n# => [\\n#      [1, 4, 6],\\n#      [2, 5, 7],\\n#      [3, nil, 8],\\n#      [nil, nil, 9]\\n#    ]\\n```\\n\\n## \ud83d\ude80 X\u1eed L\xfd D\u1eef Li\u1ec7u v\u1edbi Pipeline S\u1eed D\u1ee5ng tap v\xe0 then\\n\\nT\u1ea1o c\xe1c pipeline x\u1eed l\xfd d\u1eef li\u1ec7u thanh l\u1ecbch v\u1edbi `tap` v\xe0 `then`:\\n\\n```ruby\\n# X\u1eed l\xfd d\u1eef li\u1ec7u theo pipeline\\ndef xu_ly_du_lieu(du_lieu)\\n  du_lieu\\n    .then { |data| data.map { |item| item.downcase } }\\n    .tap { |data| puts \\"Sau khi chuy\u1ec3n th\xe0nh ch\u1eef th\u01b0\u1eddng: #{data.inspect}\\" }\\n    .then { |data| data.select { |item| item.length > 3 } }\\n    .tap { |data| puts \\"Sau khi l\u1ecdc theo \u0111\u1ed9 d\xe0i: #{data.inspect}\\" }\\n    .then { |data| data.map { |item| item.capitalize } }\\n    .tap { |data| puts \\"K\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng: #{data.inspect}\\" }\\nend\\n\\nxu_ly_du_lieu([\\"RUBY\\", \\"JS\\", \\"PYTHON\\", \\"GO\\"])\\n# => Sau khi chuy\u1ec3n th\xe0nh ch\u1eef th\u01b0\u1eddng: [\\"ruby\\", \\"js\\", \\"python\\", \\"go\\"]\\n# => Sau khi l\u1ecdc theo \u0111\u1ed9 d\xe0i: [\\"ruby\\", \\"python\\"]\\n# => K\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng: [\\"Ruby\\", \\"Python\\"]\\n```\\n\\n## \ud83e\uddf9 L\xe0m Ph\u1eb3ng M\u1ea3ng C\xf3 Ch\u1ecdn L\u1ecdc\\n\\nT\u1ea1o m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 l\xe0m ph\u1eb3ng m\u1ea3ng l\u1ed3ng nhau m\u1ed9t c\xe1ch c\xf3 ch\u1ecdn l\u1ecdc:\\n\\n```ruby\\nclass Array\\n  def selective_flatten(condition)\\n    each_with_object([]) do |element, result|\\n      if element.is_a?(Array) && condition.call(element)\\n        result.concat(element)\\n      else\\n        result << element\\n      end\\n    end\\n  end\\nend\\n\\n# L\xe0m ph\u1eb3ng c\xf3 ch\u1ecdn l\u1ecdc\\ndu_lieu = [1, [2, 3], 4, [5, 6, 7], 8, [9]]\\nket_qua = du_lieu.selective_flatten ->(arr) { arr.size > 1 }\\n# => [1, 2, 3, 4, 5, 6, 7, 8, [9]]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\xe0m ph\u1eb3ng c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p\\ncau_truc = [\\n  {id: 1, ten: \\"Minh\\"},\\n  [\\n    {id: 2, ten: \\"H\u01b0\u01a1ng\\"},\\n    {id: 3, ten: \\"Tu\u1ea5n\\"}\\n  ],\\n  {id: 4, ten: \\"Linh\\"},\\n  [\\n    {id: 5, ten: \\"Nam\\"}\\n  ]\\n]\\n\\nnguoi_dung = cau_truc.selective_flatten ->(arr) { arr.all? { |e| e.is_a?(Hash) && e.key?(:id) } }\\n# => [{id: 1, ten: \\"Minh\\"}, {id: 2, ten: \\"H\u01b0\u01a1ng\\"}, {id: 3, ten: \\"Tu\u1ea5n\\"}, {id: 4, ten: \\"Linh\\"}, [{id: 5, ten: \\"Nam\\"}]]\\n```\\n\\n## \ud83c\udfaf K\u1ebft lu\u1eadn\\n\\nNh\u1eefng k\u1ef9 thu\u1eadt n\xe2ng cao n\xe0y s\u1ebd gi\xfap b\u1ea1n x\u1eed l\xfd m\u1ea3ng trong Ruby m\u1ed9t c\xe1ch m\u1ea1nh m\u1ebd v\xe0 tinh t\u1ebf h\u01a1n. Vi\u1ec7c n\u1eafm v\u1eefng v\xe0 \xe1p d\u1ee5ng ch\xfang kh\xf4ng ch\u1ec9 gi\xfap code c\u1ee7a b\u1ea1n ng\u1eafn g\u1ecdn, d\u1ec5 \u0111\u1ecdc m\xe0 c\xf2n t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t x\u1eed l\xfd d\u1eef li\u1ec7u.\\n\\nH\xe3y th\u1eed nghi\u1ec7m v\xe0 k\u1ebft h\u1ee3p c\xe1c k\u1ef9 thu\u1eadt n\xe0y \u0111\u1ec3 t\u1ea1o ra nh\u1eefng gi\u1ea3i ph\xe1p s\xe1ng t\u1ea1o cho c\xe1c v\u1ea5n \u0111\u1ec1 ph\u1ee9c t\u1ea1p trong d\u1ef1 \xe1n c\u1ee7a b\u1ea1n!\\n\\n---\\n\\nB\u1ea1n \u0111\xe3 t\u1eebng \xe1p d\u1ee5ng k\u1ef9 thu\u1eadt n\xe2ng cao n\xe0o kh\xe1c khi l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby? H\xe3y chia s\u1ebb kinh nghi\u1ec7m c\u1ee7a b\u1ea1n trong ph\u1ea7n b\xecnh lu\u1eadn nh\xe9!"},{"id":"ruby-arrays-ky-thuat-trung-cap","metadata":{"permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-trung-cap","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-24-ruby-arrays-ky-thuat-trung-cap.md","source":"@site/blog/2023-07-24-ruby-arrays-ky-thuat-trung-cap.md","title":"Ngh\u1ec7 Thu\u1eadt X\u1eed L\xfd M\u1ea3ng Trong Ruby: K\u1ef9 Thu\u1eadt Trung C\u1ea5p \u0110\xe1ng Kinh Ng\u1ea1c","description":"Ruby Arrays Intermediate","date":"2023-07-24T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Arrays","permalink":"/keep-being-human-dev/blog/tags/arrays","description":"Content about array data structures and operations"},{"inline":false,"label":"Intermediate","permalink":"/keep-being-human-dev/blog/tags/intermediate","description":"Content for intermediate level programmers"}],"readingTime":4.53,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-ky-thuat-trung-cap","title":"Ngh\u1ec7 Thu\u1eadt X\u1eed L\xfd M\u1ea3ng Trong Ruby: K\u1ef9 Thu\u1eadt Trung C\u1ea5p \u0110\xe1ng Kinh Ng\u1ea1c","authors":["admin"],"tags":["ruby","arrays","intermediate"]},"unlisted":false,"prevItem":{"title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-nang-cao"},"nextItem":{"title":"Kh\xe1m Ph\xe1 M\u1ea3ng Trong Ruby: H\xe0nh Trang C\u1ea7n Thi\u1ebft Cho Ng\u01b0\u1eddi M\u1edbi","permalink":"/keep-being-human-dev/blog/ruby-arrays-cho-nguoi-moi-bat-dau"}},"content":"![Ruby Arrays Intermediate](https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)\\n\\nB\u1ea1n \u0111\xe3 n\u1eafm v\u1eefng c\xe1c ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n v\u1ec1 m\u1ea3ng trong Ruby? \u0110\xe3 \u0111\u1ebfn l\xfac n\xe2ng cao k\u1ef9 n\u0103ng c\u1ee7a b\u1ea1n v\u1edbi nh\u1eefng k\u1ef9 thu\u1eadt trung c\u1ea5p \u0111\u1ea7y s\u1ee9c m\u1ea1nh. B\xe0i vi\u1ebft n\xe0y s\u1ebd gi\u1edbi thi\u1ec7u nh\u1eefng ph\u01b0\u01a1ng ph\xe1p x\u1eed l\xfd m\u1ea3ng th\xf4ng minh h\u01a1n, gi\xfap code c\u1ee7a b\u1ea1n tr\u1edf n\xean s\u1ea1ch s\u1ebd v\xe0 hi\u1ec7u qu\u1ea3 h\u01a1n.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udd2a C\u1eaft m\u1ea3ng v\u1edbi slice, range v\xe0 ch\u1ec9 s\u1ed1 \xe2m\\n\\nRuby cung c\u1ea5p nhi\u1ec1u c\xe1ch linh ho\u1ea1t \u0111\u1ec3 c\u1eaft v\xe0 tr\xedch xu\u1ea5t ph\u1ea7n t\u1eed t\u1eeb m\u1ea3ng:\\n\\n```ruby\\ndu_lieu = [\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\']\\n\\n# S\u1eed d\u1ee5ng slice v\u1edbi ch\u1ec9 s\u1ed1 b\u1eaft \u0111\u1ea7u v\xe0 s\u1ed1 l\u01b0\u1ee3ng ph\u1ea7n t\u1eed\\ndu_lieu.slice(2, 3)      # => [\'c\', \'d\', \'e\']\\n\\n# S\u1eed d\u1ee5ng range\\ndu_lieu[1..4]            # => [\'b\', \'c\', \'d\', \'e\']\\ndu_lieu[1...4]           # => [\'b\', \'c\', \'d\'] (kh\xf4ng bao g\u1ed3m ph\u1ea7n t\u1eed cu\u1ed1i)\\n\\n# S\u1eed d\u1ee5ng ch\u1ec9 s\u1ed1 \xe2m\\ndu_lieu[-3..-1]          # => [\'e\', \'f\', \'g\']\\ndu_lieu[-5...-2]         # => [\'c\', \'d\', \'e\']\\n```\\n\\n## \ud83e\udde0 T\xecm ki\u1ebfm nh\u1ecb ph\xe2n v\u1edbi bsearch\\n\\nKhi l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng \u0111\xe3 s\u1eafp x\u1ebfp, `bsearch` gi\xfap t\xecm ki\u1ebfm ph\u1ea7n t\u1eed nhanh ch\xf3ng v\u1edbi \u0111\u1ed9 ph\u1ee9c t\u1ea1p O(log n):\\n\\n```ruby\\nso_nguyen = [1, 4, 8, 11, 15, 19, 24, 28, 31, 36, 42]\\n\\n# T\xecm gi\xe1 tr\u1ecb ch\xednh x\xe1c\\nso_nguyen.bsearch { |x| x >= 15 }  # => 15\\n\\n# T\xecm v\u1ecb tr\xed \u0111\u1ea7u ti\xean th\u1ecfa m\xe3n \u0111i\u1ec1u ki\u1ec7n\\nvi_tri = so_nguyen.bsearch_index { |x| x >= 30 }  # => 8 (v\u1ecb tr\xed c\u1ee7a s\u1ed1 31)\\n\\n# T\xecm ki\u1ebfm ph\u1ee9c t\u1ea1p h\u01a1n\\ndiem_sinh_vien = [\\n  {ten: \\"An\\", diem: 7.5},\\n  {ten: \\"B\xecnh\\", diem: 8.0},\\n  {ten: \\"C\u01b0\u1eddng\\", diem: 8.5},\\n  {ten: \\"Dung\\", diem: 9.0}\\n].sort_by { |sv| sv[:diem] }\\n\\n# T\xecm sinh vi\xean \u0111\u1ea7u ti\xean c\xf3 \u0111i\u1ec3m >= 8.5\\ndiem_sinh_vien.bsearch { |sv| sv[:diem] >= 8.5 ? 0 : -1 }  # => {ten: \\"C\u01b0\u1eddng\\", diem: 8.5}\\n```\\n\\n## \ud83d\udd04 Chuy\u1ec3n v\u1ecb ma tr\u1eadn - Bi\u1ebfn \u0111\u1ed5i d\u1eef li\u1ec7u \u0111a chi\u1ec1u\\n\\nPh\u01b0\u01a1ng th\u1ee9c `transpose` cho ph\xe9p b\u1ea1n chuy\u1ec3n \u0111\u1ed5i h\xe0ng th\xe0nh c\u1ed9t v\xe0 ng\u01b0\u1ee3c l\u1ea1i trong m\u1ea3ng hai chi\u1ec1u:\\n\\n```ruby\\nma_tran = [\\n  [1, 2, 3],\\n  [4, 5, 6],\\n  [7, 8, 9]\\n]\\n\\nma_tran_chuyen_vi = ma_tran.transpose\\n# => [\\n#      [1, 4, 7],\\n#      [2, 5, 8],\\n#      [3, 6, 9]\\n#    ]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Chuy\u1ec3n \u0111\u1ed5i d\u1eef li\u1ec7u CSV\\ndu_lieu_csv = [\\n  [\\"T\xean\\", \\"Tu\u1ed5i\\", \\"Th\xe0nh ph\u1ed1\\"],\\n  [\\"Minh\\", \\"28\\", \\"H\xe0 N\u1ed9i\\"],\\n  [\\"H\u01b0\u01a1ng\\", \\"25\\", \\"\u0110\xe0 N\u1eb5ng\\"],\\n  [\\"Tu\u1ea5n\\", \\"30\\", \\"TP.HCM\\"]\\n]\\n\\ndu_lieu_theo_cot = du_lieu_csv.transpose\\n# => [\\n#      [\\"T\xean\\", \\"Minh\\", \\"H\u01b0\u01a1ng\\", \\"Tu\u1ea5n\\"],\\n#      [\\"Tu\u1ed5i\\", \\"28\\", \\"25\\", \\"30\\"],\\n#      [\\"Th\xe0nh ph\u1ed1\\", \\"H\xe0 N\u1ed9i\\", \\"\u0110\xe0 N\u1eb5ng\\", \\"TP.HCM\\"]\\n#    ]\\n```\\n\\n## \ud83e\udde9 Ph\xe2n v\xf9ng m\u1ea3ng v\u1edbi partition\\n\\nPh\u01b0\u01a1ng th\u1ee9c `partition` gi\xfap chia m\u1ea3ng th\xe0nh hai nh\xf3m d\u1ef1a tr\xean m\u1ed9t \u0111i\u1ec1u ki\u1ec7n:\\n\\n```ruby\\nso = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\n\\n# Chia th\xe0nh s\u1ed1 ch\u1eb5n v\xe0 s\u1ed1 l\u1ebb\\nso_chan, so_le = so.partition { |n| n.even? }\\n# so_chan = [2, 4, 6, 8, 10]\\n# so_le = [1, 3, 5, 7, 9]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Ph\xe2n lo\u1ea1i sinh vi\xean \u0111\u1eadu/r\u1edbt\\ndiem_thi = [8.5, 6.7, 4.2, 9.0, 5.5, 7.8, 3.9]\\ndau, rot = diem_thi.partition { |diem| diem >= 5.0 }\\n# dau = [8.5, 6.7, 9.0, 5.5, 7.8]\\n# rot = [4.2, 3.9]\\n```\\n\\n## \ud83d\udd17 K\u1ebft h\u1ee3p map v\xe0 compact trong chu\u1ed7i x\u1eed l\xfd\\n\\nK\u1ebft h\u1ee3p c\xe1c ph\u01b0\u01a1ng th\u1ee9c trong m\u1ed9t chu\u1ed7i gi\xfap code ng\u1eafn g\u1ecdn v\xe0 d\u1ec5 \u0111\u1ecdc h\u01a1n:\\n\\n```ruby\\ndu_lieu = [\\"1\\", \\"hai\\", \\"3\\", \\"b\u1ed1n\\", \\"5\\"]\\n\\n# Chuy\u1ec3n \u0111\u1ed5i chu\u1ed7i th\xe0nh s\u1ed1 v\xe0 lo\u1ea1i b\u1ecf c\xe1c gi\xe1 tr\u1ecb kh\xf4ng h\u1ee3p l\u1ec7\\nso = du_lieu\\n  .map { |s| Integer(s) rescue nil }\\n  .compact\\n# => [1, 3, 5]\\n\\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: X\u1eed l\xfd d\u1eef li\u1ec7u t\u1eeb file CSV\\ndu_lieu_csv = [\\"12.5\\", \\"N/A\\", \\"8.75\\", \\"error\\", \\"10.0\\"]\\ngia_tri = du_lieu_csv\\n  .map { |s| s == \\"N/A\\" || s == \\"error\\" ? nil : Float(s) rescue nil }\\n  .compact\\n# => [12.5, 8.75, 10.0]\\n```\\n\\n## \ud83d\udd0d Truy c\u1eadp m\u1ea3ng l\u1ed3ng nhau v\u1edbi dig\\n\\nPh\u01b0\u01a1ng th\u1ee9c `dig` gi\xfap truy c\u1eadp an to\xe0n v\xe0o c\xe1c ph\u1ea7n t\u1eed trong m\u1ea3ng l\u1ed3ng nhau m\xe0 kh\xf4ng g\u1eb7p l\u1ed7i `NoMethodError`:\\n\\n```ruby\\ndu_lieu_nguoi_dung = [\\n  {\\n    ten: \\"Minh\\",\\n    thong_tin: {\\n      dia_chi: {\\n        thanh_pho: \\"H\xe0 N\u1ed9i\\",\\n        quan: \\"C\u1ea7u Gi\u1ea5y\\"\\n      },\\n      sdt: [\\"0912345678\\", \\"0987654321\\"]\\n    }\\n  },\\n  {\\n    ten: \\"Linh\\",\\n    thong_tin: {\\n      dia_chi: nil,\\n      sdt: [\\"0923456789\\"]\\n    }\\n  }\\n]\\n\\n# Truy c\u1eadp an to\xe0n v\u1edbi dig\\ndu_lieu_nguoi_dung[0].dig(:thong_tin, :dia_chi, :thanh_pho)  # => \\"H\xe0 N\u1ed9i\\"\\ndu_lieu_nguoi_dung[1].dig(:thong_tin, :dia_chi, :thanh_pho)  # => nil (kh\xf4ng g\xe2y l\u1ed7i)\\n```\\n\\n## \ud83e\uddee T\xednh t\u1ed5ng v\u1edbi block t\xf9y ch\u1ec9nh\\n\\nPh\u01b0\u01a1ng th\u1ee9c `sum` kh\xf4ng ch\u1ec9 d\xf9ng \u0111\u1ec3 c\u1ed9ng c\xe1c s\u1ed1, m\xe0 c\xf2n c\xf3 th\u1ec3 t\xf9y ch\u1ec9nh c\xe1ch t\xednh t\u1ed5ng:\\n\\n```ruby\\nsan_pham = [\\n  {ten: \\"\xc1o\\", gia: 250000, so_luong: 2},\\n  {ten: \\"Qu\u1ea7n\\", gia: 350000, so_luong: 1},\\n  {ten: \\"Gi\xe0y\\", gia: 500000, so_luong: 1}\\n]\\n\\n# T\xednh t\u1ed5ng ti\u1ec1n\\ntong_tien = san_pham.sum { |sp| sp[:gia] * sp[:so_luong] }\\n# => 1350000\\n\\n# T\xednh t\u1ed5ng v\u1edbi gi\xe1 tr\u1ecb kh\u1edfi t\u1ea1o\\ntong_tien_sau_giam_gia = san_pham.sum(100000) { |sp| sp[:gia] * sp[:so_luong] }\\n# => 1450000 (th\xeam 100000 v\xe0o t\u1ed5ng)\\n```\\n\\n## \ud83c\udfb2 T\u1ea1o t\u1ed5 h\u1ee3p v\xe0 t\xedch Descartes v\u1edbi product\\n\\nPh\u01b0\u01a1ng th\u1ee9c `product` gi\xfap t\u1ea1o ra t\u1ea5t c\u1ea3 c\xe1c c\u1eb7p ph\u1ea7n t\u1eed c\xf3 th\u1ec3 c\xf3 t\u1eeb hai ho\u1eb7c nhi\u1ec1u m\u1ea3ng:\\n\\n```ruby\\nmau_ao = [\'\u0111\u1ecf\', \'xanh\', \'tr\u1eafng\']\\nkich_co = [\'S\', \'M\', \'L\', \'XL\']\\n\\n# T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c k\u1ebft h\u1ee3p c\xf3 th\u1ec3\\nsan_pham = mau_ao.product(kich_co)\\n# => [\\n#      [\\"\u0111\u1ecf\\", \\"S\\"], [\\"\u0111\u1ecf\\", \\"M\\"], [\\"\u0111\u1ecf\\", \\"L\\"], [\\"\u0111\u1ecf\\", \\"XL\\"],\\n#      [\\"xanh\\", \\"S\\"], [\\"xanh\\", \\"M\\"], [\\"xanh\\", \\"L\\"], [\\"xanh\\", \\"XL\\"],\\n#      [\\"tr\u1eafng\\", \\"S\\"], [\\"tr\u1eafng\\", \\"M\\"], [\\"tr\u1eafng\\", \\"L\\"], [\\"tr\u1eafng\\", \\"XL\\"]\\n#    ]\\n\\n# T\u1ea1o t\u1ed5 h\u1ee3p ph\u1ee9c t\u1ea1p h\u01a1n\\nchat_lieu = [\'cotton\', \'kaki\']\\ntat_ca_san_pham = mau_ao.product(kich_co, chat_lieu)\\n# K\u1ebft qu\u1ea3: M\u1ea3ng 3 chi\u1ec1u v\u1edbi t\u1ea5t c\u1ea3 c\xe1c k\u1ebft h\u1ee3p c\xf3 th\u1ec3\\n```\\n\\n## \ud83d\ude80 K\u1ebft lu\u1eadn\\n\\nC\xe1c k\u1ef9 thu\u1eadt trung c\u1ea5p n\xe0y s\u1ebd gi\xfap b\u1ea1n x\u1eed l\xfd m\u1ea3ng trong Ruby m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 v\xe0 s\xe1ng t\u1ea1o h\u01a1n. Vi\u1ec7c n\u1eafm v\u1eefng nh\u1eefng ph\u01b0\u01a1ng th\u1ee9c n\xe0y kh\xf4ng ch\u1ec9 gi\xfap code c\u1ee7a b\u1ea1n ng\u1eafn g\u1ecdn h\u01a1n m\xe0 c\xf2n t\u0103ng hi\u1ec7u su\u1ea5t x\u1eed l\xfd d\u1eef li\u1ec7u.\\n\\nH\xe3y th\u1eed \xe1p d\u1ee5ng nh\u1eefng k\u1ef9 thu\u1eadt n\xe0y v\xe0o d\u1ef1 \xe1n c\u1ee7a b\u1ea1n v\xe0 kh\xe1m ph\xe1 s\u1ee9c m\u1ea1nh th\u1ef1c s\u1ef1 c\u1ee7a m\u1ea3ng trong Ruby!\\n\\n---\\n\\nB\u1ea1n \u0111\xe3 s\u1eed d\u1ee5ng k\u1ef9 thu\u1eadt n\xe0o trong s\u1ed1 n\xe0y? H\xe3y chia s\u1ebb kinh nghi\u1ec7m c\u1ee7a b\u1ea1n trong ph\u1ea7n b\xecnh lu\u1eadn nh\xe9!"},{"id":"ruby-arrays-cho-nguoi-moi-bat-dau","metadata":{"permalink":"/keep-being-human-dev/blog/ruby-arrays-cho-nguoi-moi-bat-dau","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-23-ruby-arrays-cho-nguoi-moi-bat-dau.md","source":"@site/blog/2023-07-23-ruby-arrays-cho-nguoi-moi-bat-dau.md","title":"Kh\xe1m Ph\xe1 M\u1ea3ng Trong Ruby: H\xe0nh Trang C\u1ea7n Thi\u1ebft Cho Ng\u01b0\u1eddi M\u1edbi","description":"Ruby Arrays","date":"2023-07-23T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Arrays","permalink":"/keep-being-human-dev/blog/tags/arrays","description":"Content about array data structures and operations"},{"inline":false,"label":"Beginner","permalink":"/keep-being-human-dev/blog/tags/beginner","description":"Content suitable for beginners"}],"readingTime":3.19,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-cho-nguoi-moi-bat-dau","title":"Kh\xe1m Ph\xe1 M\u1ea3ng Trong Ruby: H\xe0nh Trang C\u1ea7n Thi\u1ebft Cho Ng\u01b0\u1eddi M\u1edbi","authors":["admin"],"tags":["ruby","arrays","beginner"]},"unlisted":false,"prevItem":{"title":"Ngh\u1ec7 Thu\u1eadt X\u1eed L\xfd M\u1ea3ng Trong Ruby: K\u1ef9 Thu\u1eadt Trung C\u1ea5p \u0110\xe1ng Kinh Ng\u1ea1c","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-trung-cap"}},"content":"![Ruby Arrays](https://images.unsplash.com/photo-1522542550221-31fd19575a2d?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80)\\n\\nB\u1ea1n m\u1edbi b\u1eaft \u0111\u1ea7u v\u1edbi Ruby? B\u1ea1n \u0111ang loay hoay v\u1edbi kh\xe1i ni\u1ec7m m\u1ea3ng (arrays)? \u0110\u1eebng lo l\u1eafng! B\xe0i vi\u1ebft n\xe0y s\u1ebd gi\xfap b\u1ea1n n\u1eafm v\u1eefng nh\u1eefng ki\u1ebfn th\u1ee9c c\u01a1 b\u1ea3n v\u1ec1 m\u1ea3ng trong Ruby m\u1ed9t c\xe1ch d\u1ec5 d\xe0ng v\xe0 th\xfa v\u1ecb.\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83c\udfae T\u1ea1o m\u1ea3ng - B\u01b0\u1edbc \u0111\u1ea7u ti\xean trong cu\u1ed9c phi\xeau l\u01b0u\\n\\nTrong Ruby, b\u1ea1n c\xf3 th\u1ec3 t\u1ea1o m\u1ea3ng b\u1eb1ng hai c\xe1ch ch\xednh: s\u1eed d\u1ee5ng c\xfa ph\xe1p `[]` ho\u1eb7c constructor `Array.new`. M\u1ed7i c\xe1ch c\xf3 \u01b0u \u0111i\u1ec3m ri\xeang t\xf9y v\xe0o t\xecnh hu\u1ed1ng s\u1eed d\u1ee5ng.\\n\\n```ruby\\n# C\xe1ch 1: S\u1eed d\u1ee5ng c\xfa ph\xe1p []\\ntrai_cay = [\'t\xe1o\', \'chu\u1ed1i\', \'cherry\']\\n\\n# C\xe1ch 2: S\u1eed d\u1ee5ng Array.new v\u1edbi k\xedch th\u01b0\u1edbc c\u1ed1 \u0111\u1ecbnh\\no_trong = Array.new(5)            # => [nil, nil, nil, nil, nil]\\n\\n# C\xe1ch 3: V\u1edbi gi\xe1 tr\u1ecb m\u1eb7c \u0111\u1ecbnh\\nso_khong = Array.new(3, 0)        # => [0, 0, 0]\\n```\\n\\n## \ud83d\udd0d Truy c\u1eadp ph\u1ea7n t\u1eed - T\xecm kho b\xe1u trong m\u1ea3ng\\n\\nTruy c\u1eadp ph\u1ea7n t\u1eed trong m\u1ea3ng Ruby r\u1ea5t linh ho\u1ea1t. B\u1ea1n c\xf3 th\u1ec3 s\u1eed d\u1ee5ng ch\u1ec9 s\u1ed1 d\u01b0\u01a1ng (b\u1eaft \u0111\u1ea7u t\u1eeb 0) ho\u1eb7c ch\u1ec9 s\u1ed1 \xe2m (\u0111\u1ebfm ng\u01b0\u1ee3c t\u1eeb cu\u1ed1i m\u1ea3ng).\\n\\n```ruby\\nmon_an = [\'ph\u1edf\', \'b\xfan ch\u1ea3\', \'b\xe1nh m\xec\', \'c\u01a1m t\u1ea5m\']\\n\\n# Truy c\u1eadp b\u1eb1ng ch\u1ec9 s\u1ed1 d\u01b0\u01a1ng\\nmon_an[0]      # => \'ph\u1edf\'\\nmon_an[2]      # => \'b\xe1nh m\xec\'\\n\\n# Truy c\u1eadp b\u1eb1ng ch\u1ec9 s\u1ed1 \xe2m\\nmon_an[-1]     # => \'c\u01a1m t\u1ea5m\' (ph\u1ea7n t\u1eed cu\u1ed1i c\xf9ng)\\nmon_an[-3]     # => \'b\xfan ch\u1ea3\'\\n\\n# Ph\u01b0\u01a1ng th\u1ee9c first v\xe0 last\\nmon_an.first   # => \'ph\u1edf\'\\nmon_an.last    # => \'c\u01a1m t\u1ea5m\'\\n```\\n\\n## \ud83e\udde9 Th\xeam v\xe0 x\xf3a ph\u1ea7n t\u1eed - \u0110i\u1ec1u ch\u1ec9nh kho b\xe1u c\u1ee7a b\u1ea1n\\n\\nRuby cung c\u1ea5p nhi\u1ec1u ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 th\xeam v\xe0 x\xf3a ph\u1ea7n t\u1eed trong m\u1ea3ng:\\n\\n```ruby\\ndanh_sach = [\'h\u1ecdc Ruby\', \'l\xe0m b\xe0i t\u1eadp\']\\n\\n# Th\xeam ph\u1ea7n t\u1eed v\xe0o cu\u1ed1i m\u1ea3ng\\ndanh_sach.push(\'\u0111\u1ecdc s\xe1ch\')        # => [\'h\u1ecdc Ruby\', \'l\xe0m b\xe0i t\u1eadp\', \'\u0111\u1ecdc s\xe1ch\']\\ndanh_sach << \'nghe nh\u1ea1c\'          # => [\'h\u1ecdc Ruby\', \'l\xe0m b\xe0i t\u1eadp\', \'\u0111\u1ecdc s\xe1ch\', \'nghe nh\u1ea1c\']\\n\\n# Th\xeam ph\u1ea7n t\u1eed v\xe0o \u0111\u1ea7u m\u1ea3ng\\ndanh_sach.unshift(\'th\u1ee9c d\u1eady s\u1edbm\') # => [\'th\u1ee9c d\u1eady s\u1edbm\', \'h\u1ecdc Ruby\', \'l\xe0m b\xe0i t\u1eadp\', \'\u0111\u1ecdc s\xe1ch\', \'nghe nh\u1ea1c\']\\n\\n# X\xf3a ph\u1ea7n t\u1eed cu\u1ed1i c\xf9ng\\nphan_tu_cuoi = danh_sach.pop      # => \'nghe nh\u1ea1c\'\\n\\n# X\xf3a ph\u1ea7n t\u1eed \u0111\u1ea7u ti\xean\\nphan_tu_dau = danh_sach.shift     # => \'th\u1ee9c d\u1eady s\u1edbm\'\\n```\\n\\n## \ud83d\udd04 L\u1eb7p qua m\u1ea3ng - Kh\xe1m ph\xe1 t\u1eebng ng\xf3c ng\xe1ch\\n\\nDuy\u1ec7t qua c\xe1c ph\u1ea7n t\u1eed trong m\u1ea3ng l\xe0 m\u1ed9t thao t\xe1c ph\u1ed5 bi\u1ebfn. Ruby cung c\u1ea5p nhi\u1ec1u c\xe1ch \u0111\u1ec3 th\u1ef1c hi\u1ec7n \u0111i\u1ec1u n\xe0y:\\n\\n```ruby\\nmau_sac = [\'\u0111\u1ecf\', \'xanh l\xe1\', \'v\xe0ng\', \'t\xedm\']\\n\\n# S\u1eed d\u1ee5ng each\\nmau_sac.each do |mau|\\n  puts \\"T\xf4i th\xedch m\xe0u #{mau}\\"\\nend\\n\\n# S\u1eed d\u1ee5ng each_with_index\\nmau_sac.each_with_index do |mau, index|\\n  puts \\"M\xe0u th\u1ee9 #{index + 1} l\xe0: #{mau}\\"\\nend\\n```\\n\\n## \ud83e\uddea Bi\u1ebfn \u0111\u1ed5i m\u1ea3ng - Ph\xe9p thu\u1eadt v\u1edbi map v\xe0 select\\n\\nRuby cung c\u1ea5p c\xe1c ph\u01b0\u01a1ng th\u1ee9c m\u1ea1nh m\u1ebd \u0111\u1ec3 bi\u1ebfn \u0111\u1ed5i m\u1ea3ng:\\n\\n```ruby\\nso = [1, 2, 3, 4, 5]\\n\\n# S\u1eed d\u1ee5ng map \u0111\u1ec3 bi\u1ebfn \u0111\u1ed5i m\u1ed7i ph\u1ea7n t\u1eed\\nbinh_phuong = so.map { |n| n * n }  # => [1, 4, 9, 16, 25]\\n\\n# S\u1eed d\u1ee5ng select \u0111\u1ec3 l\u1ecdc ph\u1ea7n t\u1eed\\nso_chan = so.select { |n| n.even? } # => [2, 4]\\n\\n# K\u1ebft h\u1ee3p c\xe1c m\u1ea3ng\\nso_khac = [6, 7, 8]\\ntat_ca = so + so_khac              # => [1, 2, 3, 4, 5, 6, 7, 8]\\n```\\n\\n## \ud83e\uddf9 L\xe0m s\u1ea1ch m\u1ea3ng - D\u1ecdn d\u1eb9p kho b\xe1u\\n\\n\u0110\xf4i khi b\u1ea1n c\u1ea7n lo\u1ea1i b\u1ecf c\xe1c ph\u1ea7n t\u1eed kh\xf4ng mong mu\u1ed1n:\\n\\n```ruby\\ndu_lieu = [1, nil, 2, nil, 3, \'a\', \'b\', nil]\\n\\n# Lo\u1ea1i b\u1ecf nil\\ndu_lieu_sach = du_lieu.compact    # => [1, 2, 3, \'a\', \'b\']\\n\\n# Lo\u1ea1i b\u1ecf ph\u1ea7n t\u1eed tr\xf9ng l\u1eb7p\\nmang_trung = [1, 2, 2, 3, 3, 3, 4]\\nmang_duy_nhat = mang_trung.uniq   # => [1, 2, 3, 4]\\n```\\n\\n## \ud83c\udfaf K\u1ebft lu\u1eadn\\n\\nM\u1ea3ng l\xe0 m\u1ed9t trong nh\u1eefng c\u1ea5u tr\xfac d\u1eef li\u1ec7u c\u01a1 b\u1ea3n v\xe0 quan tr\u1ecdng nh\u1ea5t trong Ruby. N\u1eafm v\u1eefng c\xe1ch s\u1eed d\u1ee5ng m\u1ea3ng s\u1ebd gi\xfap b\u1ea1n x\xe2y d\u1ef1ng c\xe1c \u1ee9ng d\u1ee5ng Ruby hi\u1ec7u qu\u1ea3 h\u01a1n. H\xe3y th\u1ef1c h\xe0nh c\xe1c v\xed d\u1ee5 tr\xean v\xe0 kh\xe1m ph\xe1 th\xeam c\xe1c ph\u01b0\u01a1ng th\u1ee9c kh\xe1c c\u1ee7a m\u1ea3ng trong Ruby.\\n\\nB\u1ea1n \u0111\xe3 s\u1eb5n s\xe0ng ti\u1ebfn xa h\u01a1n trong h\xe0nh tr\xecnh h\u1ecdc Ruby? H\xe3y theo d\xf5i c\xe1c b\xe0i vi\u1ebft ti\u1ebfp theo c\u1ee7a ch\xfang t\xf4i v\u1ec1 c\xe1c ch\u1ee7 \u0111\u1ec1 n\xe2ng cao h\u01a1n!\\n\\n---\\n\\nB\u1ea1n c\xf3 c\xe2u h\u1ecfi ho\u1eb7c \xfd ki\u1ebfn? H\xe3y \u0111\u1ec3 l\u1ea1i b\xecnh lu\u1eadn b\xean d\u01b0\u1edbi nh\xe9!"}]}}')}}]);