"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10063],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(36672);const i={},a=r.createContext(i);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},74683:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/regex/advanced/atomic_grouping","title":"atomic_grouping","description":"\u26a1 Prevent Backtracking with Atomic Groups","source":"@site/docs/ruby/regex/advanced/atomic_grouping.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/atomic_grouping","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/atomic_grouping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/atomic_grouping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"introspect_methods","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/introspect_methods"},"next":{"title":"dynamic_union","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/dynamic_union"}}');var i=n(23420),a=n(65404);const o={},c=void 0,s={},u=[{value:"\u26a1 Prevent Backtracking with Atomic Groups",id:"-prevent-backtracking-with-atomic-groups",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-prevent-backtracking-with-atomic-groups",children:"\u26a1 Prevent Backtracking with Atomic Groups"}),"\n",(0,i.jsxs)(t.p,{children:["Wrap subpatterns in atomic groups ",(0,i.jsx)(t.code,{children:"(?>...)"})," to forbid backtracking into them, eliminating catastrophic backtracking in complex patterns. This ensures once the engine leaves an atomic group, it won't revisit it, boosting performance."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"str = 'a' * 30 + '!'\n# Vulnerable to backtracking\nregexp1 = /(a+)+!/\n# Optimized with atomic group\nregexp2 = /(?>a+)+!/\n# regexp1.match(str) might be slow; regexp2.match(str) is instant\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);