"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57605],{65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>i});var s=a(36672);const r={},t=s.createContext(r);function c(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(t.Provider,{value:n},e.children)}},93891:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/beginner/calling_procs","title":"calling_procs","description":"\ud83d\udd04 Calling Procs with Different Syntaxes","source":"@site/docs/ruby/procs_and_lambdas/beginner/calling_procs.md","sourceDirName":"ruby/procs_and_lambdas/beginner","slug":"/ruby/procs_and_lambdas/beginner/calling_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/calling_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/beginner/calling_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"calling_lambdas","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/calling_lambdas"},"next":{"title":"getting_started_with_lambdas","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/getting_started_with_lambdas"}}');var r=a(23420),t=a(65404);const c={},i=void 0,l={},o=[{value:"\ud83d\udd04 Calling Procs with Different Syntaxes",id:"-calling-procs-with-different-syntaxes",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-calling-procs-with-different-syntaxes",children:"\ud83d\udd04 Calling Procs with Different Syntaxes"}),"\n",(0,r.jsxs)(n.p,{children:["Procs accept multiple call syntaxes: ",(0,r.jsx)(n.code,{children:"call"}),", ",(0,r.jsx)(n.code,{children:"[]"}),", or ",(0,r.jsx)(n.code,{children:"yield"}),"-style with ",(0,r.jsx)(n.code,{children:"&"}),". Familiarize yourself with these to make your code more readable and idiomatic."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"p = proc { |x| x * 2 }\n\nputs p.call(5)   # => 10\nputs p[5]        # => 10\n# Using as a block\n[1,2,3].map(&p)  # => [2, 4, 6]\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);