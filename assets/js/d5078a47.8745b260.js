"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93043],{37450:(n,e,h)=>{h.r(e),h.d(e,{assets:()=>g,contentTitle:()=>l,default:()=>s,frontMatter:()=>c,metadata:()=>t,toc:()=>u});var t=h(44858),i=h(23420),a=h(65404);const c={slug:"ruby-arrays-ky-thuat-nang-cao",title:"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao",authors:["admin"],tags:["ruby","arrays","advanced"]},l="B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao",g={authorsImageUrls:[void 0]},u=[{value:"\ud83e\uddd9\u200d\u2642\ufe0f Pattern Matching v\u1edbi M\u1ea3ng - Ph\xe9p Thu\u1eadt M\u1edbi t\u1eeb Ruby 3.0",id:"\ufe0f-pattern-matching-v\u1edbi-m\u1ea3ng---ph\xe9p-thu\u1eadt-m\u1edbi-t\u1eeb-ruby-30",level:2},{value:"\ud83d\udd04 Lazy Enumerators - S\u1ee9c M\u1ea1nh c\u1ee7a S\u1ef1 L\u01b0\u1eddi Bi\u1ebfng",id:"-lazy-enumerators---s\u1ee9c-m\u1ea1nh-c\u1ee7a-s\u1ef1-l\u01b0\u1eddi-bi\u1ebfng",level:2},{value:"\ud83e\udde9 Nh\xf3m D\u1eef Li\u1ec7u v\u1edbi each_with_object",id:"-nh\xf3m-d\u1eef-li\u1ec7u-v\u1edbi-each_with_object",level:2},{value:"\ud83e\udde0 T\xf9y Ch\u1ec9nh Ph\u01b0\u01a1ng Th\u1ee9c uniq v\u1edbi Kh\u1ed1i L\u1ec7nh",id:"-t\xf9y-ch\u1ec9nh-ph\u01b0\u01a1ng-th\u1ee9c-uniq-v\u1edbi-kh\u1ed1i-l\u1ec7nh",level:2},{value:"\ud83e\uddee T\u1ed5 H\u1ee3p v\xe0 Ho\xe1n V\u1ecb v\u1edbi M\u1ea3ng",id:"-t\u1ed5-h\u1ee3p-v\xe0-ho\xe1n-v\u1ecb-v\u1edbi-m\u1ea3ng",level:2},{value:"\ud83d\udd2a Chia M\u1ea3ng Th\xe0nh C\xe1c Ph\u1ea7n B\u1eb1ng Nhau",id:"-chia-m\u1ea3ng-th\xe0nh-c\xe1c-ph\u1ea7n-b\u1eb1ng-nhau",level:2},{value:"\ud83d\udd0d Ph\xe2n \u0110o\u1ea1n M\u1ea3ng v\u1edbi slice_when",id:"-ph\xe2n-\u0111o\u1ea1n-m\u1ea3ng-v\u1edbi-slice_when",level:2},{value:"\ud83d\udd04 X\u1eed L\xfd M\u1ea3ng Kh\xf4ng \u0110\u1ec1u v\u1edbi Transpose",id:"-x\u1eed-l\xfd-m\u1ea3ng-kh\xf4ng-\u0111\u1ec1u-v\u1edbi-transpose",level:2},{value:"\ud83d\ude80 X\u1eed L\xfd D\u1eef Li\u1ec7u v\u1edbi Pipeline S\u1eed D\u1ee5ng tap v\xe0 then",id:"-x\u1eed-l\xfd-d\u1eef-li\u1ec7u-v\u1edbi-pipeline-s\u1eed-d\u1ee5ng-tap-v\xe0-then",level:2},{value:"\ud83e\uddf9 L\xe0m Ph\u1eb3ng M\u1ea3ng C\xf3 Ch\u1ecdn L\u1ecdc",id:"-l\xe0m-ph\u1eb3ng-m\u1ea3ng-c\xf3-ch\u1ecdn-l\u1ecdc",level:2},{value:"\ud83c\udfaf K\u1ebft lu\u1eadn",id:"-k\u1ebft-lu\u1eadn",level:2}];function o(n){const e={code:"code",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:"https://images.unsplash.com/photo-1517694712202-14dd9538aa97?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80",alt:"Ruby Arrays Advanced"})}),"\n",(0,i.jsx)(e.p,{children:'B\u1ea1n \u0111\xe3 th\xe0nh th\u1ea1o c\xe1c k\u1ef9 thu\u1eadt c\u01a1 b\u1ea3n v\xe0 trung c\u1ea5p v\u1ec1 m\u1ea3ng trong Ruby? \u0110\xe3 \u0111\u1ebfn l\xfac kh\xe1m ph\xe1 nh\u1eefng k\u1ef9 thu\u1eadt n\xe2ng cao, nh\u1eefng "v\u0169 kh\xed b\xed m\u1eadt" gi\xfap code c\u1ee7a b\u1ea1n tr\u1edf n\xean tinh t\u1ebf, hi\u1ec7u qu\u1ea3 v\xe0 \u0111\u1eb3ng c\u1ea5p h\u01a1n. H\xe3y c\xf9ng \u0111i s\xe2u v\xe0o th\u1ebf gi\u1edbi c\u1ee7a nh\u1eefng b\u1eadc th\u1ea7y Ruby!'}),"\n",(0,i.jsx)(e.h2,{id:"\ufe0f-pattern-matching-v\u1edbi-m\u1ea3ng---ph\xe9p-thu\u1eadt-m\u1edbi-t\u1eeb-ruby-30",children:"\ud83e\uddd9\u200d\u2642\ufe0f Pattern Matching v\u1edbi M\u1ea3ng - Ph\xe9p Thu\u1eadt M\u1edbi t\u1eeb Ruby 3.0"}),"\n",(0,i.jsx)(e.p,{children:"Pattern matching l\xe0 m\u1ed9t trong nh\u1eefng t\xednh n\u0103ng m\u1ea1nh m\u1ebd nh\u1ea5t \u0111\u01b0\u1ee3c gi\u1edbi thi\u1ec7u t\u1eeb Ruby 3.0, gi\xfap b\u1ea1n tr\xedch xu\u1ea5t d\u1eef li\u1ec7u t\u1eeb c\xe1c c\u1ea5u tr\xfac ph\u1ee9c t\u1ea1p m\u1ed9t c\xe1ch d\u1ec5 d\xe0ng:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'def phan_tich_du_lieu(data)\n  case data\n  in [id_nguoi_dung, [nam, thang, ngay], *nhan]\n    puts "Ng\u01b0\u1eddi d\xf9ng #{id_nguoi_dung} v\xe0o ng\xe0y #{ngay}/#{thang}/#{nam} v\u1edbi nh\xe3n: #{nhan.inspect}"\n  in [id_nguoi_dung, thoi_gian, *]\n    puts "Ng\u01b0\u1eddi d\xf9ng #{id_nguoi_dung} v\xe0o l\xfac #{thoi_gian}"\n  else\n    puts "D\u1eef li\u1ec7u kh\xf4ng h\u1ee3p l\u1ec7"\n  end\nend\n\n# S\u1eed d\u1ee5ng pattern matching\ndu_lieu = [42, [2023, 7, 25], \'ruby\', \'arrays\']\nphan_tich_du_lieu(du_lieu)\n# => "Ng\u01b0\u1eddi d\xf9ng 42 v\xe0o ng\xe0y 25/7/2023 v\u1edbi nh\xe3n: [\\"ruby\\", \\"arrays\\"]"\n\n# Pattern matching trong tham s\u1ed1 h\xe0m\ndef xu_ly_toa_do([(x, y), z])\n  puts "T\u1ecda \u0111\u1ed9 2D: (#{x}, #{y}), \u0110\u1ed9 cao: #{z}"\nend\n\nxu_ly_toa_do([[10, 20], 5])\n# => "T\u1ecda \u0111\u1ed9 2D: (10, 20), \u0110\u1ed9 cao: 5"\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-lazy-enumerators---s\u1ee9c-m\u1ea1nh-c\u1ee7a-s\u1ef1-l\u01b0\u1eddi-bi\u1ebfng",children:"\ud83d\udd04 Lazy Enumerators - S\u1ee9c M\u1ea1nh c\u1ee7a S\u1ef1 L\u01b0\u1eddi Bi\u1ebfng"}),"\n",(0,i.jsx)(e.p,{children:"Lazy enumerators cho ph\xe9p b\u1ea1n x\u1eed l\xfd c\xe1c t\u1eadp d\u1eef li\u1ec7u l\u1edbn m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3 b\u1eb1ng c\xe1ch ch\u1ec9 t\xednh to\xe1n khi c\u1ea7n thi\u1ebft:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:"# T\u1ea1o m\u1ed9t d\xe3y v\xf4 h\u1ea1n c\xe1c s\u1ed1 nguy\xean t\u1ed1\nrequire 'prime'\nso_nguyen_to_vo_han = Prime.each\n\n# Kh\xf4ng hi\u1ec7u qu\u1ea3 v\xe0 s\u1ebd ch\u1ea1y m\xe3i m\xe3i\n# so_nguyen_to_dau = so_nguyen_to_vo_han.take(10)\n\n# S\u1eed d\u1ee5ng lazy \u0111\u1ec3 x\u1eed l\xfd hi\u1ec7u qu\u1ea3\nso_nguyen_to_lon = so_nguyen_to_vo_han\n  .lazy\n  .select { |p| p > 1000 }\n  .take(5)\n  .force\n# => [1009, 1013, 1019, 1021, 1031]\n\n# X\u1eed l\xfd t\u1ec7p l\u1edbn theo d\xf2ng m\xe0 kh\xf4ng c\u1ea7n \u0111\u1ecdc to\xe0n b\u1ed9 v\xe0o b\u1ed9 nh\u1edb\ndef doc_va_xu_ly_tep_lon(duong_dan)\n  File.open(duong_dan, 'r').each_line\n    .lazy\n    .map(&:chomp)\n    .select { |line| line.include?('ERROR') }\n    .take(10)\n    .force\nend\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-nh\xf3m-d\u1eef-li\u1ec7u-v\u1edbi-each_with_object",children:"\ud83e\udde9 Nh\xf3m D\u1eef Li\u1ec7u v\u1edbi each_with_object"}),"\n",(0,i.jsxs)(e.p,{children:["Ph\u01b0\u01a1ng th\u1ee9c ",(0,i.jsx)(e.code,{children:"each_with_object"})," cung c\u1ea5p c\xe1ch ti\u1ebfp c\u1eadn thanh l\u1ecbch \u0111\u1ec3 x\xe2y d\u1ef1ng c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'sinh_vien = [\n  {ten: "Minh", lop: "12A", diem: 8.5},\n  {ten: "H\u01b0\u01a1ng", lop: "12A", diem: 9.0},\n  {ten: "Tu\u1ea5n", lop: "12B", diem: 7.5},\n  {ten: "Linh", lop: "12B", diem: 8.0},\n  {ten: "Nam", lop: "12C", diem: 9.5}\n]\n\n# Nh\xf3m sinh vi\xean theo l\u1edbp\nsinh_vien_theo_lop = sinh_vien.each_with_object({}) do |sv, result|\n  (result[sv[:lop]] ||= []) << sv\nend\n# => {\n#      "12A" => [{ten: "Minh", lop: "12A", diem: 8.5}, {ten: "H\u01b0\u01a1ng", lop: "12A", diem: 9.0}],\n#      "12B" => [{ten: "Tu\u1ea5n", lop: "12B", diem: 7.5}, {ten: "Linh", lop: "12B", diem: 8.0}],\n#      "12C" => [{ten: "Nam", lop: "12C", diem: 9.5}]\n#    }\n\n# T\xednh \u0111i\u1ec3m trung b\xecnh theo l\u1edbp\ndiem_trung_binh_theo_lop = sinh_vien.each_with_object({}) do |sv, result|\n  lop = sv[:lop]\n  result[lop] ||= {tong_diem: 0, so_sv: 0}\n  result[lop][:tong_diem] += sv[:diem]\n  result[lop][:so_sv] += 1\nend.transform_values { |v| v[:tong_diem] / v[:so_sv] }\n# => {"12A" => 8.75, "12B" => 7.75, "12C" => 9.5}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-t\xf9y-ch\u1ec9nh-ph\u01b0\u01a1ng-th\u1ee9c-uniq-v\u1edbi-kh\u1ed1i-l\u1ec7nh",children:"\ud83e\udde0 T\xf9y Ch\u1ec9nh Ph\u01b0\u01a1ng Th\u1ee9c uniq v\u1edbi Kh\u1ed1i L\u1ec7nh"}),"\n",(0,i.jsxs)(e.p,{children:["Ph\u01b0\u01a1ng th\u1ee9c ",(0,i.jsx)(e.code,{children:"uniq"}),' c\xf3 th\u1ec3 \u0111\u01b0\u1ee3c t\xf9y ch\u1ec9nh \u0111\u1ec3 x\xe1c \u0111\u1ecbnh "t\xednh duy nh\u1ea5t" d\u1ef1a tr\xean ti\xeau ch\xed ph\u1ee9c t\u1ea1p:']}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'san_pham = [\n  {id: 1, ten: "iPhone", hang: "Apple", gia: 20000000},\n  {id: 2, ten: "Galaxy", hang: "Samsung", gia: 18000000},\n  {id: 3, ten: "iPhone Pro", hang: "Apple", gia: 30000000},\n  {id: 4, ten: "Redmi", hang: "Xiaomi", gia: 5000000}\n]\n\n# L\u1ea5y s\u1ea3n ph\u1ea9m duy nh\u1ea5t theo h\xe3ng\nsan_pham_theo_hang = san_pham.uniq { |sp| sp[:hang] }\n# => [\n#      {id: 1, ten: "iPhone", hang: "Apple", gia: 20000000},\n#      {id: 2, ten: "Galaxy", hang: "Samsung", gia: 18000000},\n#      {id: 4, ten: "Redmi", hang: "Xiaomi", gia: 5000000}\n#    ]\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\u1ecdc email tr\xf9ng l\u1eb7p kh\xf4ng ph\xe2n bi\u1ec7t hoa th\u01b0\u1eddng\nemails = ["user@example.com", "USER@EXAMPLE.COM", "another@gmail.com", "Another@Gmail.com"]\nemails_duy_nhat = emails.uniq { |email| email.downcase }\n# => ["user@example.com", "another@gmail.com"]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-t\u1ed5-h\u1ee3p-v\xe0-ho\xe1n-v\u1ecb-v\u1edbi-m\u1ea3ng",children:"\ud83e\uddee T\u1ed5 H\u1ee3p v\xe0 Ho\xe1n V\u1ecb v\u1edbi M\u1ea3ng"}),"\n",(0,i.jsx)(e.p,{children:"Ruby cung c\u1ea5p c\xe1c ph\u01b0\u01a1ng th\u1ee9c m\u1ea1nh m\u1ebd \u0111\u1ec3 l\xe0m vi\u1ec7c v\u1edbi t\u1ed5 h\u1ee3p v\xe0 ho\xe1n v\u1ecb:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'nguyen_to = [2, 3, 5, 7]\n\n# T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c t\u1ed5 h\u1ee3p c\xf3 th\u1ec3 c\xf3 k\xedch th\u01b0\u1edbc 2\nto_hop = nguyen_to.combination(2).to_a\n# => [[2, 3], [2, 5], [2, 7], [3, 5], [3, 7], [5, 7]]\n\n# T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c ho\xe1n v\u1ecb c\xf3 th\u1ec3 c\xf3\nhoan_vi = nguyen_to.permutation(3).to_a\n# => [[2, 3, 5], [2, 3, 7], [2, 5, 3], [2, 5, 7], [2, 7, 3], [2, 7, 5], ...]\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: T\u1ea1o t\u1ea5t c\u1ea3 c\xe1c m\u1eadt kh\u1ea9u c\xf3 th\u1ec3 t\u1eeb m\u1ed9t t\u1eadp k\xfd t\u1ef1\nky_tu = [\'A\', \'B\', \'C\', \'1\', \'2\']\nmat_khau_co_the = ky_tu.repeated_permutation(3).map(&:join)\n# => ["AAA", "AA1", "AA2", "A1A", "A11", "A12", "A2A", "A21", "A22", ...]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-chia-m\u1ea3ng-th\xe0nh-c\xe1c-ph\u1ea7n-b\u1eb1ng-nhau",children:"\ud83d\udd2a Chia M\u1ea3ng Th\xe0nh C\xe1c Ph\u1ea7n B\u1eb1ng Nhau"}),"\n",(0,i.jsx)(e.p,{children:"T\u1ea1o m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 chia m\u1ea3ng th\xe0nh c\xe1c ph\u1ea7n c\xf3 k\xedch th\u01b0\u1edbc g\u1ea7n b\u1eb1ng nhau:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:"class Array\n  def balanced_split(num_chunks)\n    return [] if empty?\n    \n    chunk_size = (size.to_f / num_chunks).ceil\n    each_slice(chunk_size).to_a\n  end\nend\n\n# Chia m\u1ea3ng th\xe0nh c\xe1c ph\u1ea7n g\u1ea7n b\u1eb1ng nhau\ndu_lieu = (1..10).to_a\ndu_lieu.balanced_split(3)\n# => [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Ph\xe2n chia c\xf4ng vi\u1ec7c cho nhi\u1ec1u lu\u1ed3ng x\u1eed l\xfd\ncong_viec = (1..20).to_a\nso_luong_worker = 4\ncong_viec_theo_worker = cong_viec.balanced_split(so_luong_worker)\n# => [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-ph\xe2n-\u0111o\u1ea1n-m\u1ea3ng-v\u1edbi-slice_when",children:"\ud83d\udd0d Ph\xe2n \u0110o\u1ea1n M\u1ea3ng v\u1edbi slice_when"}),"\n",(0,i.jsxs)(e.p,{children:["Ph\u01b0\u01a1ng th\u1ee9c ",(0,i.jsx)(e.code,{children:"slice_when"})," cho ph\xe9p b\u1ea1n chia m\u1ea3ng th\xe0nh c\xe1c ph\xe2n \u0111o\u1ea1n d\u1ef1a tr\xean \u0111i\u1ec1u ki\u1ec7n gi\u1eefa c\xe1c ph\u1ea7n t\u1eed li\xean ti\u1ebfp:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'# Ph\xe2n \u0111o\u1ea1n m\u1ea3ng s\u1ed1 th\xe0nh c\xe1c d\xe3y li\xean ti\u1ebfp\nso = [1, 2, 3, 5, 6, 8, 9, 10, 12]\nday_lien_tiep = so.slice_when { |i, j| j != i + 1 }.to_a\n# => [[1, 2, 3], [5, 6], [8, 9, 10], [12]]\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: Nh\xf3m c\xe1c giao d\u1ecbch theo ng\xe0y\ngiao_dich = [\n  {ngay: "2023-07-20", so_tien: 100000},\n  {ngay: "2023-07-20", so_tien: 200000},\n  {ngay: "2023-07-21", so_tien: 150000},\n  {ngay: "2023-07-21", so_tien: 300000},\n  {ngay: "2023-07-23", so_tien: 500000}\n]\n\ngiao_dich_theo_ngay = giao_dich.slice_when { |a, b| a[:ngay] != b[:ngay] }.to_a\n# => [\n#      [{ngay: "2023-07-20", so_tien: 100000}, {ngay: "2023-07-20", so_tien: 200000}],\n#      [{ngay: "2023-07-21", so_tien: 150000}, {ngay: "2023-07-21", so_tien: 300000}],\n#      [{ngay: "2023-07-23", so_tien: 500000}]\n#    ]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-x\u1eed-l\xfd-m\u1ea3ng-kh\xf4ng-\u0111\u1ec1u-v\u1edbi-transpose",children:"\ud83d\udd04 X\u1eed L\xfd M\u1ea3ng Kh\xf4ng \u0110\u1ec1u v\u1edbi Transpose"}),"\n",(0,i.jsxs)(e.p,{children:["Khi l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng kh\xf4ng \u0111\u1ec1u (jagged arrays), ph\u01b0\u01a1ng th\u1ee9c ",(0,i.jsx)(e.code,{children:"transpose"})," ti\xeau chu\u1ea9n s\u1ebd g\u1eb7p l\u1ed7i. H\xe3y t\u1ea1o m\u1ed9t phi\xean b\u1ea3n n\xe2ng cao:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:"class Array\n  def safe_transpose\n    return [] if empty?\n    \n    max_size = map(&:size).max\n    map { |row| row.fill(nil, row.size, max_size - row.size) }.transpose\n  end\nend\n\n# X\u1eed l\xfd m\u1ea3ng kh\xf4ng \u0111\u1ec1u\nmang_khong_deu = [\n  [1, 2, 3],\n  [4, 5],\n  [6, 7, 8, 9]\n]\n\nmang_chuyen_vi = mang_khong_deu.safe_transpose\n# => [\n#      [1, 4, 6],\n#      [2, 5, 7],\n#      [3, nil, 8],\n#      [nil, nil, 9]\n#    ]\n"})}),"\n",(0,i.jsx)(e.h2,{id:"-x\u1eed-l\xfd-d\u1eef-li\u1ec7u-v\u1edbi-pipeline-s\u1eed-d\u1ee5ng-tap-v\xe0-then",children:"\ud83d\ude80 X\u1eed L\xfd D\u1eef Li\u1ec7u v\u1edbi Pipeline S\u1eed D\u1ee5ng tap v\xe0 then"}),"\n",(0,i.jsxs)(e.p,{children:["T\u1ea1o c\xe1c pipeline x\u1eed l\xfd d\u1eef li\u1ec7u thanh l\u1ecbch v\u1edbi ",(0,i.jsx)(e.code,{children:"tap"})," v\xe0 ",(0,i.jsx)(e.code,{children:"then"}),":"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'# X\u1eed l\xfd d\u1eef li\u1ec7u theo pipeline\ndef xu_ly_du_lieu(du_lieu)\n  du_lieu\n    .then { |data| data.map { |item| item.downcase } }\n    .tap { |data| puts "Sau khi chuy\u1ec3n th\xe0nh ch\u1eef th\u01b0\u1eddng: #{data.inspect}" }\n    .then { |data| data.select { |item| item.length > 3 } }\n    .tap { |data| puts "Sau khi l\u1ecdc theo \u0111\u1ed9 d\xe0i: #{data.inspect}" }\n    .then { |data| data.map { |item| item.capitalize } }\n    .tap { |data| puts "K\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng: #{data.inspect}" }\nend\n\nxu_ly_du_lieu(["RUBY", "JS", "PYTHON", "GO"])\n# => Sau khi chuy\u1ec3n th\xe0nh ch\u1eef th\u01b0\u1eddng: ["ruby", "js", "python", "go"]\n# => Sau khi l\u1ecdc theo \u0111\u1ed9 d\xe0i: ["ruby", "python"]\n# => K\u1ebft qu\u1ea3 cu\u1ed1i c\xf9ng: ["Ruby", "Python"]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-l\xe0m-ph\u1eb3ng-m\u1ea3ng-c\xf3-ch\u1ecdn-l\u1ecdc",children:"\ud83e\uddf9 L\xe0m Ph\u1eb3ng M\u1ea3ng C\xf3 Ch\u1ecdn L\u1ecdc"}),"\n",(0,i.jsx)(e.p,{children:"T\u1ea1o m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c \u0111\u1ec3 l\xe0m ph\u1eb3ng m\u1ea3ng l\u1ed3ng nhau m\u1ed9t c\xe1ch c\xf3 ch\u1ecdn l\u1ecdc:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ruby",children:'class Array\n  def selective_flatten(condition)\n    each_with_object([]) do |element, result|\n      if element.is_a?(Array) && condition.call(element)\n        result.concat(element)\n      else\n        result << element\n      end\n    end\n  end\nend\n\n# L\xe0m ph\u1eb3ng c\xf3 ch\u1ecdn l\u1ecdc\ndu_lieu = [1, [2, 3], 4, [5, 6, 7], 8, [9]]\nket_qua = du_lieu.selective_flatten ->(arr) { arr.size > 1 }\n# => [1, 2, 3, 4, 5, 6, 7, 8, [9]]\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\xe0m ph\u1eb3ng c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p\ncau_truc = [\n  {id: 1, ten: "Minh"},\n  [\n    {id: 2, ten: "H\u01b0\u01a1ng"},\n    {id: 3, ten: "Tu\u1ea5n"}\n  ],\n  {id: 4, ten: "Linh"},\n  [\n    {id: 5, ten: "Nam"}\n  ]\n]\n\nnguoi_dung = cau_truc.selective_flatten ->(arr) { arr.all? { |e| e.is_a?(Hash) && e.key?(:id) } }\n# => [{id: 1, ten: "Minh"}, {id: 2, ten: "H\u01b0\u01a1ng"}, {id: 3, ten: "Tu\u1ea5n"}, {id: 4, ten: "Linh"}, [{id: 5, ten: "Nam"}]]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"-k\u1ebft-lu\u1eadn",children:"\ud83c\udfaf K\u1ebft lu\u1eadn"}),"\n",(0,i.jsx)(e.p,{children:"Nh\u1eefng k\u1ef9 thu\u1eadt n\xe2ng cao n\xe0y s\u1ebd gi\xfap b\u1ea1n x\u1eed l\xfd m\u1ea3ng trong Ruby m\u1ed9t c\xe1ch m\u1ea1nh m\u1ebd v\xe0 tinh t\u1ebf h\u01a1n. Vi\u1ec7c n\u1eafm v\u1eefng v\xe0 \xe1p d\u1ee5ng ch\xfang kh\xf4ng ch\u1ec9 gi\xfap code c\u1ee7a b\u1ea1n ng\u1eafn g\u1ecdn, d\u1ec5 \u0111\u1ecdc m\xe0 c\xf2n t\u1ed1i \u01b0u hi\u1ec7u su\u1ea5t x\u1eed l\xfd d\u1eef li\u1ec7u."}),"\n",(0,i.jsx)(e.p,{children:"H\xe3y th\u1eed nghi\u1ec7m v\xe0 k\u1ebft h\u1ee3p c\xe1c k\u1ef9 thu\u1eadt n\xe0y \u0111\u1ec3 t\u1ea1o ra nh\u1eefng gi\u1ea3i ph\xe1p s\xe1ng t\u1ea1o cho c\xe1c v\u1ea5n \u0111\u1ec1 ph\u1ee9c t\u1ea1p trong d\u1ef1 \xe1n c\u1ee7a b\u1ea1n!"}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.p,{children:"B\u1ea1n \u0111\xe3 t\u1eebng \xe1p d\u1ee5ng k\u1ef9 thu\u1eadt n\xe2ng cao n\xe0o kh\xe1c khi l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby? H\xe3y chia s\u1ebb kinh nghi\u1ec7m c\u1ee7a b\u1ea1n trong ph\u1ea7n b\xecnh lu\u1eadn nh\xe9!"})]})}function s(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},44858:n=>{n.exports=JSON.parse('{"permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-nang-cao","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-25-ruby-arrays-ky-thuat-nang-cao.md","source":"@site/blog/2023-07-25-ruby-arrays-ky-thuat-nang-cao.md","title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","description":"Ruby Arrays Advanced","date":"2023-07-25T00:00:00.000Z","tags":[{"inline":true,"label":"ruby","permalink":"/keep-being-human-dev/blog/tags/ruby"},{"inline":true,"label":"arrays","permalink":"/keep-being-human-dev/blog/tags/arrays"},{"inline":true,"label":"advanced","permalink":"/keep-being-human-dev/blog/tags/advanced"}],"readingTime":7.11,"hasTruncateMarker":false,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1nh t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-ky-thuat-nang-cao","title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","authors":["admin"],"tags":["ruby","arrays","advanced"]},"unlisted":false,"prevItem":{"title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-chuyen-gia"},"nextItem":{"title":"Ngh\u1ec7 Thu\u1eadt X\u1eed L\xfd M\u1ea3ng Trong Ruby: K\u1ef9 Thu\u1eadt Trung C\u1ea5p \u0110\xe1ng Kinh Ng\u1ea1c","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-trung-cap"}}')},65404:(n,e,h)=>{h.d(e,{R:()=>c,x:()=>l});var t=h(36672);const i={},a=t.createContext(i);function c(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:c(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);