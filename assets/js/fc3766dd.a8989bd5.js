"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26572],{54772:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/lambda_currying","title":"lambda_currying","description":"\ud83e\udde9 Currying Lambdas for Partial Application","source":"@site/docs/ruby/procs_and_lambdas/advanced/lambda_currying.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/lambda_currying","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/lambda_currying","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/lambda_currying.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"error_handling_wrappers","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/error_handling_wrappers"},"next":{"title":"memoization_with_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/memoization_with_procs"}}');var t=n(23420),i=n(65404);const d={},s=void 0,c={},o=[{value:"\ud83e\udde9 Currying Lambdas for Partial Application",id:"-currying-lambdas-for-partial-application",level:2}];function l(a){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...a.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"-currying-lambdas-for-partial-application",children:"\ud83e\udde9 Currying Lambdas for Partial Application"}),"\n",(0,t.jsx)(e.p,{children:"Currying lets you break down a multi-argument lambda into a chain of single-argument lambdas, enabling elegant partial application. This is ideal when you want to pre-configure certain parameters and pass the resulting lambda around for later use."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ruby",children:"# Define a three-arg lambda and curry it\nsum = ->(a, b, c) { a + b + c }.curry\n\n# Partially apply the first two args\nadd_five = sum.call(2, 3)\n\n# Later, apply the final arg\nputs add_five.call(10)  # => 15\n"})})]})}function u(a={}){const{wrapper:e}={...(0,i.R)(),...a.components};return e?(0,t.jsx)(e,{...a,children:(0,t.jsx)(l,{...a})}):l(a)}},65404:(a,e,n)=>{n.d(e,{R:()=>d,x:()=>s});var r=n(36672);const t={},i=r.createContext(t);function d(a){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof a?a(e):{...e,...a}},[e,a])}function s(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:d(a.components),r.createElement(i.Provider,{value:e},a.children)}}}]);