"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39042],{50304:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/net_http/middle/parse_json_errors","title":"parse_json_errors","description":"\ud83d\udd0d Parsing JSON Responses and Handling Errors","source":"@site/docs/ruby/net_http/middle/parse_json_errors.md","sourceDirName":"ruby/net_http/middle","slug":"/ruby/net_http/middle/parse_json_errors","permalink":"/keep-being-human-dev/docs/ruby/net_http/middle/parse_json_errors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/middle/parse_json_errors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"get_with_custom_headers","permalink":"/keep-being-human-dev/docs/ruby/net_http/middle/get_with_custom_headers"},"next":{"title":"post_form_data","permalink":"/keep-being-human-dev/docs/ruby/net_http/middle/post_form_data"}}');var t=s(23420),o=s(65404);const a={},d=void 0,i={},p=[{value:"\ud83d\udd0d Parsing JSON Responses and Handling Errors",id:"-parsing-json-responses-and-handling-errors",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-parsing-json-responses-and-handling-errors",children:"\ud83d\udd0d Parsing JSON Responses and Handling Errors"}),"\n",(0,t.jsxs)(n.p,{children:["When consuming JSON APIs, always check response codes and rescue parse errors. Using ",(0,t.jsx)(n.code,{children:"JSON.parse"})," inside a ",(0,t.jsx)(n.code,{children:"begin/rescue"})," block ensures your app won\u2019t blow up on invalid payloads."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'net/http'\nrequire 'uri'\nrequire 'json'\n\nuri = URI('https://api.example.com/items/1')\nresponse = Net::HTTP.get_response(uri)\n\nif response.is_a?(Net::HTTPSuccess)\n  begin\n    data = JSON.parse(response.body)\n    puts \"Item name: #{data['name']}\"\n  rescue JSON::ParserError => e\n    warn \"Failed to parse JSON: #{e.message}\"\n  end\nelse\n  warn \"Request failed (#{response.code}): #{response.message}\"\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var r=s(36672);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);