"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58144],{65404:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>c});var n=t(36672);const l={},r=n.createContext(l);function o(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),n.createElement(r.Provider,{value:a},e.children)}},91651:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"ruby/blocks/middle/default_block_fallback.md","title":"default_block_fallback.md","description":"\ud83c\udfaf Provide a Default Block Fallback","source":"@site/docs/ruby/blocks/middle/default_block_fallback.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/default_block_fallback.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/default_block_fallback.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/default_block_fallback.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_each_iterator.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/custom_each_iterator.md"},"next":{"title":"dsl_with_instance_eval.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/dsl_with_instance_eval.md"}}');var l=t(23420),r=t(65404);const o={},c=void 0,d={},s=[{value:"\ud83c\udfaf Provide a Default Block Fallback",id:"-provide-a-default-block-fallback",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h2,{id:"-provide-a-default-block-fallback",children:"\ud83c\udfaf Provide a Default Block Fallback"}),"\n",(0,l.jsxs)(a.p,{children:["If a block isn\u2019t given, you can supply a default behavior. Use ",(0,l.jsx)(a.code,{children:"block_given?"})," to detect absence and yield to an internal proc or return a standard value. This pattern makes your methods more robust and user-friendly."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-ruby",children:"def transform(array)\n  return array.map { |e| e * 2 } unless block_given?\n\n  array.map { |e| yield(e) }\nend\n\nputs transform([1,2,3])\n# => [2,4,6]\nputs transform([1,2,3]) { |n| n + 10 }\n# => [11,12,13]\n"})})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}}}]);