"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39677],{65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var s=n(36672);const r={},a=s.createContext(r);function c(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(a.Provider,{value:t},e.children)}},68886:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/regex/middle/gsub_with_block","title":"gsub_with_block","description":"\u2702\ufe0f Transform Data with gsub and Blocks","source":"@site/docs/ruby/regex/middle/gsub_with_block.md","sourceDirName":"ruby/regex/middle","slug":"/ruby/regex/middle/gsub_with_block","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/gsub_with_block","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/middle/gsub_with_block.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"character_classes","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/character_classes"},"next":{"title":"inline_modifiers","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/inline_modifiers"}}');var r=n(23420),a=n(65404);const c={},i=void 0,o={},d=[{value:"\u2702\ufe0f Transform Data with gsub and Blocks",id:"\ufe0f-transform-data-with-gsub-and-blocks",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-transform-data-with-gsub-and-blocks",children:"\u2702\ufe0f Transform Data with gsub and Blocks"}),"\n",(0,r.jsxs)(t.p,{children:["Using ",(0,r.jsx)(t.code,{children:"String#gsub"})," with a block gives you full control over replacements. You can compute dynamic values or apply logic based on each match."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"text = 'item1, item2, item3'\n# Wrap each match in <span>\nhtml = text.gsub(/item\\d+/) do |match|\n  \"<span class='item'>#{match.upcase}</span>\"\nend\n# => \"<span class='item'>ITEM1</span>, ...\"\n"})}),"\n",(0,r.jsx)(t.p,{children:"Blocks shine when your replacements depend on the matched text rather than a static string."})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);