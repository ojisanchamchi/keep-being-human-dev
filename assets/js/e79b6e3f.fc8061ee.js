"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5902],{12734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/reflection/expert/singleton_class_hierarchy","title":"singleton_class_hierarchy","description":"\ud83d\udee0\ufe0f Navigating and Altering Singleton Class Hierarchies","source":"@site/docs/ruby/reflection/expert/singleton_class_hierarchy.md","sourceDirName":"ruby/reflection/expert","slug":"/ruby/reflection/expert/singleton_class_hierarchy","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/singleton_class_hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/expert/singleton_class_hierarchy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"granular_tracepoint_events","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/granular_tracepoint_events"},"next":{"title":"dynamic_constant_lookup","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_constant_lookup"}}');var s=t(23420),o=t(65404);const a={},i=void 0,c={},l=[{value:"\ud83d\udee0\ufe0f Navigating and Altering Singleton Class Hierarchies",id:"\ufe0f-navigating-and-altering-singleton-class-hierarchies",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-navigating-and-altering-singleton-class-hierarchies",children:"\ud83d\udee0\ufe0f Navigating and Altering Singleton Class Hierarchies"}),"\n",(0,s.jsx)(n.p,{children:"Every Ruby object has a singleton class for per\u2011object behavior. You can insert modules into its ancestor chain, override methods on the fly, or introspect the exact method lookup path."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'obj = "hello"\n# Inspect original ancestors\np obj.singleton_class.ancestors\n# Dynamically prepend a module\nmod = Module.new do\n  def upcase\n    "INTERCEPT: #{super}"\n  end\nend\nobj.singleton_class.prepend(mod)\np obj.upcase  # => "INTERCEPT: HELLO"\n# Remove the module later\nobj.singleton_class.send(:undef_method, :upcase)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"singleton_class.ancestors"}),", ",(0,s.jsx)(n.code,{children:"prepend"}),", and ",(0,s.jsx)(n.code,{children:"remove_method"})," to surgically inject or retract per\u2011object behavior without touching global classes."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(36672);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);