"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53975],{37297:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/define_method/beginner/method_with_arguments","title":"method_with_arguments","description":"\ud83c\udfaf Define Methods That Accept Arguments","source":"@site/docs/ruby/define_method/beginner/method_with_arguments.md","sourceDirName":"ruby/define_method/beginner","slug":"/ruby/define_method/beginner/method_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/method_with_arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/beginner/method_with_arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_creation","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/dynamic_method_creation"},"next":{"title":"dynamic_api_client_generator","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/dynamic_api_client_generator"}}');var r=t(23420),i=t(65404);const o={},d=void 0,s={},c=[{value:"\ud83c\udfaf Define Methods That Accept Arguments",id:"-define-methods-that-accept-arguments",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-define-methods-that-accept-arguments",children:"\ud83c\udfaf Define Methods That Accept Arguments"}),"\n",(0,r.jsxs)(n.p,{children:["You can define methods that take arguments by specifying block parameters just like in a normal ",(0,r.jsx)(n.code,{children:"def"}),". This lets you build dynamic methods that remain flexible."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class Calculator\n  operations = {\n    add: ->(a, b) { a + b },\n    sub: ->(a, b) { a - b },\n    mul: ->(a, b) { a * b },\n    div: ->(a, b) { a / b.to_f }\n  }\n\n  operations.each do |name, func|\n    define_method(name) do |x, y|\n      func.call(x, y)\n    end\n  end\nend\n\ncalc = Calculator.new\nputs calc.add(4, 2)   # => 6\nputs calc.div(5, 2)   # => 2.5\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var a=t(36672);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);