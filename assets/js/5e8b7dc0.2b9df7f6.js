"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53495],{3683:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/data_types/middle/range_iteration_step","title":"range_iteration_step","description":"\ud83d\udd22 Harness Ranges for Iteration and Step Incrementation","source":"@site/docs/ruby/data_types/middle/range_iteration_step.md","sourceDirName":"ruby/data_types/middle","slug":"/ruby/data_types/middle/range_iteration_step","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/range_iteration_step","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/middle/range_iteration_step.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"optimize_hash_keys","permalink":"/keep-being-human-dev/docs/ruby/data_types/middle/optimize_hash_keys"},"next":{"title":"business_days_enumeration","permalink":"/keep-being-human-dev/docs/ruby/date_time/advanced/business_days_enumeration"}}');var s=t(23420),r=t(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udd22 Harness Ranges for Iteration and Step Incrementation",id:"-harness-ranges-for-iteration-and-step-incrementation",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-harness-ranges-for-iteration-and-step-incrementation",children:"\ud83d\udd22 Harness Ranges for Iteration and Step Incrementation"}),"\n",(0,s.jsx)(n.p,{children:"Ranges are handy for succinct loops, conditional checks, and stepping through numeric sequences or characters without manually managing counters."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# Inclusive and exclusive ranges\n(1..5).each { |n| print n }      # 1 2 3 4 5\n(1...5).to_a                     # [1, 2, 3, 4]\n\n# Step through a range\n(0..10).step(2) { |n| puts n }   # 0, 2, 4, 6, 8, 10\n\n# Checking inclusion\nputs ('a'..'f').cover?('c')     # => true\nputs (1..100).include?(150)      # => false\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Use ranges to replace manual loops, improve readability, and leverage built\u2011in methods like ",(0,s.jsx)(n.code,{children:"step"}),", ",(0,s.jsx)(n.code,{children:"cover?"}),", and ",(0,s.jsx)(n.code,{children:"to_a"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(36672);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);