"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62878],{55842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/api_mode/expert/streaming_json_responses","title":"streaming_json_responses","description":"\ud83d\ude80 Streaming JSON with ActionController::Live","source":"@site/docs/rails/api_mode/expert/streaming_json_responses.md","sourceDirName":"rails/api_mode/expert","slug":"/rails/api_mode/expert/streaming_json_responses","permalink":"/keep-being-human-dev/docs/rails/api_mode/expert/streaming_json_responses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/api_mode/expert/streaming_json_responses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fast_json_serialization_with_oj","permalink":"/keep-being-human-dev/docs/rails/api_mode/expert/fast_json_serialization_with_oj"},"next":{"title":"api_error_handling","permalink":"/keep-being-human-dev/docs/rails/api_mode/middle/api_error_handling"}}');var r=t(23420),o=t(65404);const i={},a=void 0,l={},d=[{value:"\ud83d\ude80 Streaming JSON with ActionController::Live",id:"-streaming-json-with-actioncontrollerlive",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-streaming-json-with-actioncontrollerlive",children:"\ud83d\ude80 Streaming JSON with ActionController::Live"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"ActionController::Live"})," for chunked JSON or Server-Sent Events in API mode without blocking the main thread. This is ideal for large datasets or real-time feeds, but be sure to manage thread pools (Puma) and close streams to avoid leaks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class UsersController < ActionController::API\n  include ActionController::Live\n\n  def index\n    response.headers['Content-Type'] = 'application/json; charset=utf-8'\n    response.stream.write '['\n\n    User.find_each.with_index do |user, i|\n      response.stream.write(',') if i.positive?\n      response.stream.write(user.to_json)\n    end\n\n    response.stream.write ']'        \n  ensure\n    response.stream.close\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(36672);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);