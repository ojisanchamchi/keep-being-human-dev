"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24328],{25011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/date_time/expert/tzinfo_caching","title":"tzinfo_caching","description":"\u231b TZInfo Caching for High-Throughput Time Zone Conversions","source":"@site/docs/ruby/date_time/expert/tzinfo_caching.md","sourceDirName":"ruby/date_time/expert","slug":"/ruby/date_time/expert/tzinfo_caching","permalink":"/keep-being-human-dev/docs/ruby/date_time/expert/tzinfo_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/date_time/expert/tzinfo_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"high_res_monotonic_timing","permalink":"/keep-being-human-dev/docs/ruby/date_time/expert/high_res_monotonic_timing"},"next":{"title":"business_day_calculation","permalink":"/keep-being-human-dev/docs/ruby/date_time/middle/business_day_calculation"}}');var o=t(23420),r=t(65404);const c={},a=void 0,s={},d=[{value:"\u231b TZInfo Caching for High-Throughput Time Zone Conversions",id:"-tzinfo-caching-for-high-throughput-time-zone-conversions",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-tzinfo-caching-for-high-throughput-time-zone-conversions",children:"\u231b TZInfo Caching for High-Throughput Time Zone Conversions"}),"\n",(0,o.jsxs)(n.p,{children:["Repeatedly resolving time zones can be expensive under heavy load. By caching the ",(0,o.jsx)(n.code,{children:"Timezone"})," object and its transition periods, you minimize lookups and GC overhead in hot paths."]}),"\n",(0,o.jsx)(n.p,{children:"Example: thread\u2011local caching of a TZInfo period:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'tzinfo'\nmodule FastTZ\n  def self.local_time(zone_name, utc_time)\n    tz = Thread.current[:tz_cache] ||= {}\n    tz[zone_name] ||= TZInfo::Timezone.get(zone_name)\n    period = tz[zone_name].period_for_utc(utc_time)\n    period.to_local(utc_time)\n  end\nend\n\nutc = Time.now.utc\nny = FastTZ.local_time('America/New_York', utc)\nputs ny.strftime('%Y-%m-%d %H:%M:%S %Z')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["By reusing ",(0,o.jsx)(n.code,{children:"Timezone"})," instances per thread and caching periods, you drastically reduce overhead when converting millions of timestamps."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(36672);const o={},r=i.createContext(o);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);