"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18193],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(36672);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},89583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/tempfiles/expert/otmpfile_anonymous","title":"otmpfile_anonymous","description":"\ud83d\ude80 Anonymous Tempfiles with O_TMPFILE","source":"@site/docs/ruby/tempfiles/expert/otmpfile_anonymous.md","sourceDirName":"ruby/tempfiles/expert","slug":"/ruby/tempfiles/expert/otmpfile_anonymous","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/expert/otmpfile_anonymous","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/tempfiles/expert/otmpfile_anonymous.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tempfile_with_block_cleanup","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/beginner/tempfile_with_block_cleanup"},"next":{"title":"secure_wipe_tempfile","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/expert/secure_wipe_tempfile"}}');var o=t(23420),s=t(65404);const r={},a=void 0,l={},u=[{value:"\ud83d\ude80 Anonymous Tempfiles with O_TMPFILE",id:"-anonymous-tempfiles-with-o_tmpfile",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-anonymous-tempfiles-with-o_tmpfile",children:"\ud83d\ude80 Anonymous Tempfiles with O_TMPFILE"}),"\n",(0,o.jsxs)(n.p,{children:["Bypass on-disk leaks by creating truly anonymous temporary files using the Linux-specific ",(0,o.jsx)(n.code,{children:"O_TMPFILE"})," flag. This method never emits a visible pathname, so there's no need for manual cleanup\u2014the kernel discards the file when you close its descriptor. You can treat the returned ",(0,o.jsx)(n.code,{children:"IO"})," handle just like a regular file for reads and writes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'fileutils'\nrequire 'tempfile'\n\n# Set flags for an anonymous temp file (Linux-only)\nflags = File::Constants::O_TMPFILE | File::Constants::O_RDWR\ndir   = Dir.tmpdir\n\n# Open an unlinked temp file descriptor\nanon_fd  = File.open(dir, flags, 0o600)\nanon_io  = IO.new(anon_fd.fileno, 'r+')\n\n# Use it as normal\nanon_io.write \"Sensitive data\"\nanon_io.rewind\nputs anon_io.read  # => \"Sensitive data\"\n\n# Closing auto-discards without touching disk\nanon_io.close\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);