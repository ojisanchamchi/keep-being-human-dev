"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82853],{65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(36672);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},90231:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/versioning/expert/custom_header_versioning_constraint","title":"custom_header_versioning_constraint","description":"\ud83d\udd0d Header-Based Version Negotiation Constraint","source":"@site/docs/rails/versioning/expert/custom_header_versioning_constraint.md","sourceDirName":"rails/versioning/expert","slug":"/rails/versioning/expert/custom_header_versioning_constraint","permalink":"/keep-being-human-dev/docs/rails/versioning/expert/custom_header_versioning_constraint","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/versioning/expert/custom_header_versioning_constraint.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lock_rails_version_gemfile","permalink":"/keep-being-human-dev/docs/rails/versioning/beginner/lock_rails_version_gemfile"},"next":{"title":"deprecation_middleware_fallback","permalink":"/keep-being-human-dev/docs/rails/versioning/expert/deprecation_middleware_fallback"}}');var r=s(23420),t=s(65404);const o={},a=void 0,c={},d=[{value:"\ud83d\udd0d Header-Based Version Negotiation Constraint",id:"-header-based-version-negotiation-constraint",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-header-based-version-negotiation-constraint",children:"\ud83d\udd0d Header-Based Version Negotiation Constraint"}),"\n",(0,r.jsxs)(n.p,{children:["For truly flexible API versioning, implement a custom ",(0,r.jsx)(n.code,{children:"RouteConstraint"})," that inspects the ",(0,r.jsx)(n.code,{children:"Accept"})," header (or a custom header) to drive routing decisions. This allows you to route requests to different controller namespaces without polluting your URL space with version prefixes. You can also fallback to a default version if the header is missing."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# lib/constraints/api_version.rb\ntclass ApiVersion\n  def initialize(version, default = false)\n    @version = version\n    @default = default\n  end\n\n  def matches?(req)\n    accept = req.headers['Accept']\n    if accept && accept.include?(\"application/vnd.myapp.v#{@version}+json\")\n      true\n    else\n      @default\n    end\n  end\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then in ",(0,r.jsx)(n.code,{children:"config/routes.rb"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"Rails.application.routes.draw do\n  namespace :api do\n    scope module: :v1, constraints: ApiVersion.new(1, true) do\n      resources :posts\n    end\n\n    scope module: :v2, constraints: ApiVersion.new(2) do\n      resources :posts\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);