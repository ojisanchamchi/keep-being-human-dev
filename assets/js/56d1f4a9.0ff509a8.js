"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79215],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var o=t(36672);const r={},s=o.createContext(r);function d(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),o.createElement(s.Provider,{value:n},e.children)}},66593:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/methods/advanced/refinements_local_method_override","title":"refinements_local_method_override","description":"\ud83d\udd10 Scoped Method Overrides with Refinements","source":"@site/docs/ruby/methods/advanced/refinements_local_method_override.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/refinements_local_method_override","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/refinements_local_method_override","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/refinements_local_method_override.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prepend_for_method_wrapping","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/prepend_for_method_wrapping"},"next":{"title":"default_parameters","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/default_parameters"}}');var r=t(23420),s=t(65404);const d={},i=void 0,a={},c=[{value:"\ud83d\udd10 Scoped Method Overrides with Refinements",id:"-scoped-method-overrides-with-refinements",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-scoped-method-overrides-with-refinements",children:"\ud83d\udd10 Scoped Method Overrides with Refinements"}),"\n",(0,r.jsx)(n.p,{children:"Refinements let you monkey\u2011patch methods only within a lexical scope, preventing global side effects. This is especially useful when you need a temporary or context\u2011specific tweak to a core class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'module StringExtensions\n  refine String do\n    def to_json\n      "\\"#{self}\\""\n    end\n  end\nend\n\ngoing = \'hello\'\nusing StringExtensions\np going.to_json  # => "\\"hello\\""\n# outside this block, String#to_json is untouched\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);