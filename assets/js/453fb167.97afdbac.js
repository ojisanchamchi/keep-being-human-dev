"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7379],{14281:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/metaprogramming/advanced/dynamic_define_method","title":"dynamic_define_method","description":"\ud83d\udd27 Dynamic define_method with parameterized behaviors","source":"@site/docs/ruby/metaprogramming/advanced/dynamic_define_method.md","sourceDirName":"ruby/metaprogramming/advanced","slug":"/ruby/metaprogramming/advanced/dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dynamic_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/advanced/dynamic_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dsl_instance_eval"},"next":{"title":"dynamic_delegator_generation","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/dynamic_delegator_generation"}}');var d=a(23420),r=a(65404);const i={},o=void 0,c={},m=[{value:"\ud83d\udd27 Dynamic <code>define_method</code> with parameterized behaviors",id:"-dynamic-define_method-with-parameterized-behaviors",level:2}];function s(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h2,{id:"-dynamic-define_method-with-parameterized-behaviors",children:["\ud83d\udd27 Dynamic ",(0,d.jsx)(n.code,{children:"define_method"})," with parameterized behaviors"]}),"\n",(0,d.jsxs)(n.p,{children:["Use ",(0,d.jsx)(n.code,{children:"define_method"})," to create methods at runtime based on metadata, keeping your code DRY and adaptable. This approach allows you to inject custom logic for each generated method by capturing local variables in closures."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'class Model\n  ATTRIBUTES = %i[name age email]\n\n  ATTRIBUTES.each do |attr|\n    define_method("find_by_#{attr}") do |value|\n      where(attr => value).first\n    end\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(36672);const d={},r=t.createContext(d);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);