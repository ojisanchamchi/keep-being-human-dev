"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93858],{10912:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization","title":"custom_delimiters_unicode_normalization","description":"\u2699\ufe0f Custom Tag List Delimiters and Unicode Normalization","source":"@site/docs/gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization.md","sourceDirName":"gems/acts-as-taggable-on/advanced","slug":"/gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Pattern Diagram ph\u1ed5 bi\u1ebfn","permalink":"/keep-being-human-dev/docs/diagrams/digitalocean/patterns"},"next":{"title":"optimize_tag_query_with_joins","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins"}}');var s=a(23420),i=a(65404);const o={},r=void 0,c={},d=[{value:"\u2699\ufe0f Custom Tag List Delimiters and Unicode Normalization",id:"\ufe0f-custom-tag-list-delimiters-and-unicode-normalization",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-custom-tag-list-delimiters-and-unicode-normalization",children:"\u2699\ufe0f Custom Tag List Delimiters and Unicode Normalization"}),"\n",(0,s.jsx)(n.p,{children:"By default, ActsAsTaggableOn splits tags on commas. For advanced multilingual apps, you can override the parser to use custom delimiters (e.g., semicolons) and normalize Unicode characters to NFKC for consistency across languages."}),"\n",(0,s.jsx)(n.p,{children:"Create an initializer to override the tag parser:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/tag_list_parser.rb\nmodule ActsAsTaggableOn\n  module Utils\n    class DefaultParser\n      def parse(tags)\n        tags.to_s\n            .mb_chars\n            .normalize(:kc)      # Unicode NFKC normalization\n            .to_s\n            .split(/[;,]/)       # split on semicolon or comma\n            .map(&:strip)\n            .reject(&:blank?)\n            .uniq\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now tagging with semicolons or commas works seamlessly:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'event.tag_list = "Summer; \u6625; \xe9t\xe9, verano"\nevent.save\n# => ["Summer", "\u6625", "\xe9t\xe9", "verano"]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>r});var t=a(36672);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);