"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97224],{59264:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/syntax/expert/scoped_refinements","title":"scoped_refinements","description":"\ud83d\udca1 Scoped Monkey Patching with Refinements","source":"@site/docs/ruby/syntax/expert/scoped_refinements.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/scoped_refinements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/scoped_refinements.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pattern_matching_guards","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/pattern_matching_guards"},"next":{"title":"yield_self_then","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/yield_self_then"}}');var s=t(23420),o=t(65404);const i={},a=void 0,c={},d=[{value:"\ud83d\udca1 Scoped Monkey Patching with Refinements",id:"-scoped-monkey-patching-with-refinements",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-scoped-monkey-patching-with-refinements",children:"\ud83d\udca1 Scoped Monkey Patching with Refinements"}),"\n",(0,s.jsxs)(n.p,{children:["Use refinements to locally override core methods without polluting global scope\u2014ideal for DSLs or test helpers. Define your patch in a module, then activate it using ",(0,s.jsx)(n.code,{children:"using"})," only in the affected context."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'module StringNormalizer\n  refine String do\n    def normalize\n      downcase.strip.gsub(/\\s+/, "_")\n    end\n  end\nend\n\nclass FilenameGenerator\n  using StringNormalizer\n\n  def call(name)\n    "file_#{name.normalize}.txt"\n  end\nend\n\np FilenameGenerator.new.call(" Hello WORLD ")\n# => "file_hello_world.txt"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(36672);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);