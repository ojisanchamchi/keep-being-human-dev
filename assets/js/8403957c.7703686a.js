"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66444],{64136:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"gems/geocoder/middle/distance_queries_near_scope","title":"distance_queries_near_scope","description":"\ud83d\udd0e Performing Nearby Searches with the near Scope","source":"@site/docs/gems/geocoder/middle/distance_queries_near_scope.md","sourceDirName":"gems/geocoder/middle","slug":"/gems/geocoder/middle/distance_queries_near_scope","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/distance_queries_near_scope","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/geocoder/middle/distance_queries_near_scope.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"customizing_geocoder_config","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/customizing_geocoder_config"},"next":{"title":"model_geocoding_setup","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/model_geocoding_setup"}}');var i=s(23420),o=s(65404);const t={},c=void 0,d={},a=[{value:"\ud83d\udd0e Performing Nearby Searches with the <code>near</code> Scope",id:"-performing-nearby-searches-with-the-near-scope",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-performing-nearby-searches-with-the-near-scope",children:["\ud83d\udd0e Performing Nearby Searches with the ",(0,i.jsx)(n.code,{children:"near"})," Scope"]}),"\n",(0,i.jsxs)(n.p,{children:["Geocoder provides a ",(0,i.jsx)(n.code,{children:"near"})," scope that makes location-based queries effortless. You can find records within a certain distance or order them by proximity."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# Find users within 10 miles of a given point\nnearby_users = User.near([40.7128, -74.0060], 10)\n\n# Find addresses near a string address, ordered by distance\nnearby_restaurants = Restaurant.near("1600 Pennsylvania Ave NW, Washington, DC", 5, units: :mi)\n'})}),"\n",(0,i.jsx)(n.p,{children:"Options:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"units"}),": ",(0,i.jsx)(n.code,{children:":mi"})," or ",(0,i.jsx)(n.code,{children:":km"})," (defaults to ",(0,i.jsx)(n.code,{children:":mi"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"order"}),": set to ",(0,i.jsx)(n.code,{children:"false"})," to avoid automatic distance ordering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"limit"}),": chain ",(0,i.jsx)(n.code,{children:"limit(n)"})," to restrict results"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# Customize units and disable ordering\nfast_search = Location.near("Paris, France", 50, units: :km, order: false)\nlimit_results = fast_search.limit(20)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(36672);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);