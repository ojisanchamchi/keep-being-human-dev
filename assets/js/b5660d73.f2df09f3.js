"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33449],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(36672);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}},72995:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"sql/general/advanced/merge_upsert_statements","title":"merge_upsert_statements","description":"\u26a1 Perform Upserts with MERGE or ON CONFLICT","source":"@site/docs/sql/general/advanced/merge_upsert_statements.md","sourceDirName":"sql/general/advanced","slug":"/sql/general/advanced/merge_upsert_statements","permalink":"/keep-being-human-dev/docs/sql/general/advanced/merge_upsert_statements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/general/advanced/merge_upsert_statements.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"materialized_views_optimization","permalink":"/keep-being-human-dev/docs/sql/general/advanced/materialized_views_optimization"},"next":{"title":"optimizer_hints_and_plans","permalink":"/keep-being-human-dev/docs/sql/general/advanced/optimizer_hints_and_plans"}}');var r=n(23420),a=n(65404);const o={},c=void 0,i={},d=[{value:"\u26a1 Perform Upserts with MERGE or ON CONFLICT",id:"-perform-upserts-with-merge-or-on-conflict",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-perform-upserts-with-merge-or-on-conflict",children:"\u26a1 Perform Upserts with MERGE or ON CONFLICT"}),"\n",(0,r.jsxs)(t.p,{children:["Upsert operations merge insert and update logic in one atomic statement. In PostgreSQL, use ",(0,r.jsx)(t.code,{children:"INSERT \u2026 ON CONFLICT"}),", while in SQL Server or Oracle, use ",(0,r.jsx)(t.code,{children:"MERGE"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"-- PostgreSQL\nINSERT INTO products(id, name, stock)\nVALUES (1, 'Widget', 100)\nON CONFLICT (id) DO UPDATE\n  SET stock = products.stock + EXCLUDED.stock;\n"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"-- SQL Server\nMERGE INTO products AS target\nUSING (VALUES (1, 'Widget', 100)) AS src(id, name, stock)\n  ON target.id = src.id\nWHEN MATCHED THEN UPDATE SET target.stock = target.stock + src.stock\nWHEN NOT MATCHED THEN INSERT (id, name, stock) VALUES (src.id, src.name, src.stock);\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);