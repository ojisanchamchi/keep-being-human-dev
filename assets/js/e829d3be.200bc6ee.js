"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18075],{15234:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"ruby/metaprogramming/middle/dynamic_validation_macros","title":"dynamic_validation_macros","description":"\u2705 Custom Validation Macros","source":"@site/docs/ruby/metaprogramming/middle/dynamic_validation_macros.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/dynamic_validation_macros","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_validation_macros","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/dynamic_validation_macros.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_define","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_method_define"},"next":{"title":"fluent_interface_chaining","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/fluent_interface_chaining"}}');var t=a(23420),i=a(65404);const d={},o=void 0,s={},m=[{value:"\u2705 Custom Validation Macros",id:"-custom-validation-macros",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-custom-validation-macros",children:"\u2705 Custom Validation Macros"}),"\n",(0,t.jsx)(n.p,{children:"Create dynamic validation methods using metaprogramming. This is useful for DSLs in form objects or service layers."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Validatable\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def validates_format_of(attr, regex)\n      define_method("validate_#{attr}") do\n        value = send(attr)\n        unless value =~ regex\n          errors[attr] ||= []\n          errors[attr] << "is invalid"\n        end\n      end\n    end\n  end\n\n  def errors\n    @errors ||= {}\n  end\n\n  def valid?\n    methods.grep(/^validate_/).each { |m| send(m) }\n    errors.empty?\n  end\nend\n\nclass UserForm\n  include Validatable\n  attr_accessor :email\n  validates_format_of :email, /@/\nend\n\nf = UserForm.new\ne.try = \'invalid\'\nf.valid?  # => false\np f.errors # => {:email=>["is invalid"]}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>o});var r=a(36672);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);