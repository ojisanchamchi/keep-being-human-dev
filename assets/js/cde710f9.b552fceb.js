"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13202],{21170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/net_http/expert/streaming_chunked_responses","title":"streaming_chunked_responses","description":"\ud83d\udce1 Stream Large Responses with Chunked Reading","source":"@site/docs/ruby/net_http/expert/streaming_chunked_responses.md","sourceDirName":"ruby/net_http/expert","slug":"/ruby/net_http/expert/streaming_chunked_responses","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/streaming_chunked_responses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/expert/streaming_chunked_responses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ssl_certificate_pinning","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/ssl_certificate_pinning"},"next":{"title":"get_with_custom_headers","permalink":"/keep-being-human-dev/docs/ruby/net_http/middle/get_with_custom_headers"}}');var s=n(23420),i=n(65404);const o={},a=void 0,u={},p=[{value:"\ud83d\udce1 Stream Large Responses with Chunked Reading",id:"-stream-large-responses-with-chunked-reading",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-stream-large-responses-with-chunked-reading",children:"\ud83d\udce1 Stream Large Responses with Chunked Reading"}),"\n",(0,s.jsx)(t.p,{children:"When fetching huge payloads or media, loading the entire body into memory can lead to OOM. Net::HTTP lets you process incoming chunks on the fly via block iteration, implementing backpressure or piping directly into files or sockets."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\n\nuri = URI('https://bigdata.example.com/stream')\nNet::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|\n  request = Net::HTTP::Get.new(uri)\n  http.request(request) do |response|\n    File.open('output.dat', 'wb') do |file|\n      response.read_body do |chunk|\n        file.write(chunk)\n        # Optionally: throttling or monitoring per-chunk metrics\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(t.p,{children:"This pattern ensures minimal memory footprint and lets you plug in real\u2011time processing (e.g., parsing CSV lines or pushing to a queue)."})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(36672);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);