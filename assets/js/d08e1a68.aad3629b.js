"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81746],{17077:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"ruby/threads/advanced/prioritized_queue_and_conditionvariable","title":"prioritized_queue_and_conditionvariable","description":"\ud83d\udea6 Prioritized Producer-Consumer with Mutex and ConditionVariable","source":"@site/docs/ruby/threads/advanced/prioritized_queue_and_conditionvariable.md","sourceDirName":"ruby/threads/advanced","slug":"/ruby/threads/advanced/prioritized_queue_and_conditionvariable","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/prioritized_queue_and_conditionvariable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/advanced/prioritized_queue_and_conditionvariable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"graceful_thread_shutdown","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/graceful_thread_shutdown"},"next":{"title":"thread_local_memoization","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/thread_local_memoization"}}');var t=i(23420),o=i(65404);const a={},d=void 0,u={},s=[{value:"\ud83d\udea6 Prioritized Producer-Consumer with Mutex and ConditionVariable",id:"-prioritized-producer-consumer-with-mutex-and-conditionvariable",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-prioritized-producer-consumer-with-mutex-and-conditionvariable",children:"\ud83d\udea6 Prioritized Producer-Consumer with Mutex and ConditionVariable"}),"\n",(0,t.jsxs)(n.p,{children:["Implement a custom priority queue using ",(0,t.jsx)(n.code,{children:"Mutex"})," and ",(0,t.jsx)(n.code,{children:"ConditionVariable"})," to signal consumers only when high-priority items arrive. This avoids busy-waiting and ensures correct ordering."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class PriorityQueue\n  def initialize\n    @queue = []\n    @mutex = Mutex.new\n    @cond  = ConditionVariable.new\n  end\n\n  # Producer pushes items with integer priority (higher is more urgent)\n  def push(item, priority)\n    @mutex.synchronize do\n      @queue << [priority, item]\n      @queue.sort_by!(&:first).reverse!\n      @cond.signal\n    end\n  end\n\n  # Consumer pops highest-priority item, waits if empty\n  def pop\n    @mutex.synchronize do\n      @cond.wait(@mutex) while @queue.empty?\n      @queue.shift.last\n    end\n  end\nend\n\n# Example usage:\nqueue = PriorityQueue.new\n\n# Producer thread\nt1 = Thread.new do\n  queue.push('low-task', 1)\n  queue.push('high-task', 10)\nend\n\n# Consumer thread\nt2 = Thread.new do\n  puts queue.pop  # => 'high-task'\n  puts queue.pop  # => 'low-task'\nend\n\nt1.join; t2.join\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>d});var r=i(36672);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);