"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7244],{65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var r=a(36672);const s={},i=r.createContext(s);function t(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(i.Provider,{value:n},e.children)}},96524:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/enumerables/middle/lazy_chaining_enumerables","title":"lazy_chaining_enumerables","description":"\ud83c\udfaf Lazy Chains for Efficient Processing","source":"@site/docs/ruby/enumerables/middle/lazy_chaining_enumerables.md","sourceDirName":"ruby/enumerables/middle","slug":"/ruby/enumerables/middle/lazy_chaining_enumerables","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/lazy_chaining_enumerables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/middle/lazy_chaining_enumerables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flat_map_group_by_transform","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/flat_map_group_by_transform"},"next":{"title":"slice_before_chunk_while","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/slice_before_chunk_while"}}');var s=a(23420),i=a(65404);const t={},o=void 0,c={},l=[{value:"\ud83c\udfaf Lazy Chains for Efficient Processing",id:"-lazy-chains-for-efficient-processing",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-lazy-chains-for-efficient-processing",children:"\ud83c\udfaf Lazy Chains for Efficient Processing"}),"\n",(0,s.jsxs)(n.p,{children:["Large collections can create many intermediate arrays when using methods like ",(0,s.jsx)(n.code,{children:"select"})," and ",(0,s.jsx)(n.code,{children:"map"}),". By calling ",(0,s.jsx)(n.code,{children:"lazy"})," on an enumerable, you defer computation until needed, improving memory usage and performance. Use ",(0,s.jsx)(n.code,{children:"take"})," (or ",(0,s.jsx)(n.code,{children:"first"}),") and ",(0,s.jsx)(n.code,{children:"to_a"})," to force evaluation only on the elements you actually need."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# Process an infinite sequence, but only take the first 5 even doubles\neven_doubles = (1..Float::INFINITY)\n  .lazy\n  .select(&:even?)\n  .map { |n| n * 2 }\n  .take(5)\n  .to_a\n# => [4, 8, 12, 16, 20]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);