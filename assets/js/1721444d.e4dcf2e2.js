"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88312],{54619:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/sessions_and_cookies/expert/encrypted_cookie_segmentation","title":"encrypted_cookie_segmentation","description":"\ud83d\udd11 Advanced Encrypted Cookie Segmentation","source":"@site/docs/rails/sessions_and_cookies/expert/encrypted_cookie_segmentation.md","sourceDirName":"rails/sessions_and_cookies/expert","slug":"/rails/sessions_and_cookies/expert/encrypted_cookie_segmentation","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/encrypted_cookie_segmentation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/sessions_and_cookies/expert/encrypted_cookie_segmentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_signed_cookies_for_tamper_protection","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/beginner/using_signed_cookies_for_tamper_protection"},"next":{"title":"multi_domain_redis_sessions","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/multi_domain_redis_sessions"}}');var t=s(23420),i=s(65404);const r={},a=void 0,c={},d=[{value:"\ud83d\udd11 Advanced Encrypted Cookie Segmentation",id:"-advanced-encrypted-cookie-segmentation",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-advanced-encrypted-cookie-segmentation",children:"\ud83d\udd11 Advanced Encrypted Cookie Segmentation"}),"\n",(0,t.jsxs)(n.p,{children:["When you need to store small, non\u2011sensitive data alongside your main session without inflating the session payload, you can leverage Rails\u2019 ",(0,t.jsx)(n.code,{children:"encrypted_cookie"})," jar in parallel to your server\u2011side session store. This keeps the main session lean (in Redis or DB) while enabling tamper\u2011proof client\u2011side storage for flags or feature toggles."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Configure an additional encrypted cookie in ",(0,t.jsx)(n.code,{children:"application_controller.rb"}),":"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class ApplicationController < ActionController::Base\n  before_action :load_feature_flags\n\n  private\n\n  def feature_flags\n    cookies.encrypted[:feature_flags] ||= {}\n  end\n\n  def load_feature_flags\n    @feature_flags = feature_flags\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Write to the encrypted cookie without hitting your DB:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# In any controller or service\ncurrent_flags = cookies.encrypted[:feature_flags] || {}\ncurrent_flags[:beta_ui] = true\ncookies.encrypted[:feature_flags] = {\n  value: current_flags,\n  expires: 1.week.from_now,\n  secure: Rails.env.production?,\n  same_site: :lax\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"This pattern isolates ephemeral toggles in the client, avoids session bloat in Redis/DB, and ensures confidentiality and integrity via encryption."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>a});var o=s(36672);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);