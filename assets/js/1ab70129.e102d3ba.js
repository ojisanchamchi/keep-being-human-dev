"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74882],{43351:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"ruby/metaprogramming/expert/performance_measurement_proxy","title":"performance_measurement_proxy","description":"\u23f1\ufe0f Performance Measurement Proxy Generation","source":"@site/docs/ruby/metaprogramming/expert/performance_measurement_proxy.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/performance_measurement_proxy","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/performance_measurement_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/performance_measurement_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_prepend_for_instrumentation","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/module_prepend_for_instrumentation"},"next":{"title":"proxy_pattern_with_basicobject","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/proxy_pattern_with_basicobject"}}');var o=n(23420),a=n(65404);const s={},m=void 0,i={},p=[{value:"\u23f1\ufe0f Performance Measurement Proxy Generation",id:"\ufe0f-performance-measurement-proxy-generation",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"\ufe0f-performance-measurement-proxy-generation",children:"\u23f1\ufe0f Performance Measurement Proxy Generation"}),"\n",(0,o.jsxs)(r.p,{children:["Dynamically generate a proxy class that wraps all public methods to measure execution time. Use ",(0,o.jsx)(r.code,{children:"Module#define_method"})," in combination with ",(0,o.jsx)(r.code,{children:"instance_methods"})," to inject timing logic into each method at load time."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:'module PerfProxy\n  def self.wrap(klass)\n    proxy = Class.new(klass) do\n      klass.instance_methods(false).each do |m|\n        define_method(m) do |*args, &blk|\n          start = Time.now\n          result = super(*args, &blk)\n          duration = Time.now - start\n          puts "#{m} executed in #{(duration*1000).round(2)}ms"\n          result\n        end\n      end\n    end\n    proxy\n  end\nend\n\nclass Worker\n  def perform; sleep(0.01); end\nend\n\nPerfWorker = PerfProxy.wrap(Worker)\nPerfWorker.new.perform  # => "perform executed in 10.05ms"\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>m});var t=n(36672);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function m(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);