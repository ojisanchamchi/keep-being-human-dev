"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96096],{27773:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/operators/expert/dsl_via_operator_overloads","title":"dsl_via_operator_overloads","description":"\ud83e\udde8 Crafting Internal DSLs with Operator Overloading","source":"@site/docs/ruby/operators/expert/dsl_via_operator_overloads.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/dsl_via_operator_overloads","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/dsl_via_operator_overloads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/dsl_via_operator_overloads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deep_safe_navigation_chaining","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/deep_safe_navigation_chaining"},"next":{"title":"dynamic_operator_overloading","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/dynamic_operator_overloading"}}');var o=n(23420),a=n(65404);const s={},i=void 0,d={},l=[{value:"\ud83e\udde8 Crafting Internal DSLs with Operator Overloading",id:"-crafting-internal-dsls-with-operator-overloading",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-crafting-internal-dsls-with-operator-overloading",children:"\ud83e\udde8 Crafting Internal DSLs with Operator Overloading"}),"\n",(0,o.jsxs)(r.p,{children:["Redefine operators like ",(0,o.jsx)(r.code,{children:"<<"}),", ",(0,o.jsx)(r.code,{children:"[]"}),", or ",(0,o.jsx)(r.code,{children:"|"})," to construct internal DSLs. This makes definitions concise and expressive, ideal for query builders or state machines."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"class QueryBuilder\n  def initialize; @parts = [] end\n\n  def <<(clause)\n    @parts << clause\n    self\n  end\n\n  def |(other)\n    @parts << \"OR #{other}\"\n    self\n  end\n\n  def to_sql\n    @parts.join(' ')\n  end\nend\n\nq = QueryBuilder.new\n       << 'SELECT * FROM users'\n       << 'WHERE active = true'\n       | 'role = \"admin\"'\nputs q.to_sql\n# \u21d2 SELECT * FROM users WHERE active = true OR role = \"admin\"\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(36672);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);