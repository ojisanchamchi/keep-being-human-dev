"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89550],{31038:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"rails/active_record_migrations/expert/decouple_models_using_anonymous_class","title":"decouple_models_using_anonymous_class","description":"\ud83c\udfaf Use Anonymous Models to Decouple Future Schema Changes","source":"@site/docs/rails/active_record_migrations/expert/decouple_models_using_anonymous_class.md","sourceDirName":"rails/active_record_migrations/expert","slug":"/rails/active_record_migrations/expert/decouple_models_using_anonymous_class","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/decouple_models_using_anonymous_class","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/expert/decouple_models_using_anonymous_class.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_migration_base_class","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/custom_migration_base_class"},"next":{"title":"deferrable_foreign_keys","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/deferrable_foreign_keys"}}');var t=o(23420),r=o(65404);const a={},i=void 0,c={},u=[{value:"\ud83c\udfaf Use Anonymous Models to Decouple Future Schema Changes",id:"-use-anonymous-models-to-decouple-future-schema-changes",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-use-anonymous-models-to-decouple-future-schema-changes",children:"\ud83c\udfaf Use Anonymous Models to Decouple Future Schema Changes"}),"\n",(0,t.jsx)(n.p,{children:"Referencing your app models in migrations can break when the model changes. Define lightweight, anonymous AR classes within migrations to shield from future code changes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class BackfillProductCategory < ActiveRecord::Migration[6.1]\n  class MigrationProduct < ApplicationRecord\n    self.table_name = 'products'\n  end\n\n  def up\n    MigrationProduct.where(category: nil).update_all(category: 'uncategorized')\n  end\n\n  def down\n    MigrationProduct.where(category: 'uncategorized').update_all(category: nil)\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This ensures your migration logic remains stable even if ",(0,t.jsx)(n.code,{children:"Product"})," evolves."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var s=o(36672);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);