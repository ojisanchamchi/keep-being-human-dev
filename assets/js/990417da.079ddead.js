"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45124],{38163:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/security/expert/activestorage_s3_secure_upload","title":"activestorage_s3_secure_upload","description":"\ud83d\udce6 Secure Direct ActiveStorage Uploads","source":"@site/docs/rails/security/expert/activestorage_s3_secure_upload.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/activestorage_s3_secure_upload","permalink":"/keep-being-human-dev/docs/rails/security/expert/activestorage_s3_secure_upload","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/activestorage_s3_secure_upload.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_record_encryption_rotation","permalink":"/keep-being-human-dev/docs/rails/security/expert/active_record_encryption_rotation"},"next":{"title":"arel_safe_dynamic_queries","permalink":"/keep-being-human-dev/docs/rails/security/expert/arel_safe_dynamic_queries"}}');var n=a(23420),s=a(65404);const c={},o=void 0,i={},d=[{value:"\ud83d\udce6 Secure Direct ActiveStorage Uploads",id:"-secure-direct-activestorage-uploads",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-secure-direct-activestorage-uploads",children:"\ud83d\udce6 Secure Direct ActiveStorage Uploads"}),"\n",(0,n.jsx)(t.p,{children:"When allowing clients to upload directly to S3, validate blob metadata and scan for malware before attachment. Intercept the direct upload lifecycle to enforce content-type whitelists and virus checks."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  has_one_attached :avatar\n  validate :avatar_metadata_and_scan\n\n  private\n\n  def avatar_metadata_and_scan\n    return unless avatar.attached?\n\n    unless avatar.content_type.in?(%w[image/png image/jpeg])\n      errors.add(:avatar, 'must be PNG or JPEG')\n    end\n\n    result = Clamby.safe?(avatar.download)\n    errors.add(:avatar, 'contains a virus') unless result\n  end\nend\n"})}),"\n",(0,n.jsx)(t.p,{children:"Pair it with a JS direct upload workflow so that only pre-scrubbed blobs reach your record layer."})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>o});var r=a(36672);const n={},s=r.createContext(n);function c(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);