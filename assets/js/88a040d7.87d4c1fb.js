"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45195],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var a=t(36672);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}},95921:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"ruby/regex/advanced/dynamic_union","title":"dynamic_union","description":"\ud83d\udee0\ufe0f Build Dynamic Patterns with Regexp.union","source":"@site/docs/ruby/regex/advanced/dynamic_union.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/dynamic_union","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/dynamic_union","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/dynamic_union.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"atomic_grouping","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/atomic_grouping"},"next":{"title":"extended_mode_comments","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/extended_mode_comments"}}');var r=t(23420),o=t(65404);const i={},c=void 0,d={},s=[{value:"\ud83d\udee0\ufe0f Build Dynamic Patterns with Regexp.union",id:"\ufe0f-build-dynamic-patterns-with-regexpunion",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-build-dynamic-patterns-with-regexpunion",children:"\ud83d\udee0\ufe0f Build Dynamic Patterns with Regexp.union"}),"\n",(0,r.jsxs)(n.p,{children:["Generate complex alternations from arrays safely by using ",(0,r.jsx)(n.code,{children:"Regexp.union"}),". It handles escaping and joins patterns, preventing injection or manual errors."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"keywords = ['foo.bar', 'foo*', 'baz']\npattern = Regexp.union(keywords)\n# => /(?:foo\\.bar|foo\\*|baz)/\ntext = 'Match foo* or baz'\ntext.scan(pattern) #=> [\"foo*\", \"baz\"]\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);