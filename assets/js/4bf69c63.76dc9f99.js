"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35560],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var s=t(36672);const o={},i=s.createContext(o);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(i.Provider,{value:n},e.children)}},70131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"ruby/oop/expert/method_missing_delegate","title":"method_missing_delegate","description":"\ud83e\udde9 Advanced Delegation with methodmissing and respondto_missing?","source":"@site/docs/ruby/oop/expert/method_missing_delegate.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/method_missing_delegate","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/method_missing_delegate","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/method_missing_delegate.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_dsl","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/dynamic_method_dsl"},"next":{"title":"module_prepend_override","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/module_prepend_override"}}');var o=t(23420),i=t(65404);const d={},r=void 0,a={},p=[{value:"\ud83e\udde9 Advanced Delegation with method_missing and respond_to_missing?",id:"-advanced-delegation-with-method_missing-and-respond_to_missing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-advanced-delegation-with-method_missing-and-respond_to_missing",children:"\ud83e\udde9 Advanced Delegation with method_missing and respond_to_missing?"}),"\n",(0,o.jsxs)(n.p,{children:["Implement ",(0,o.jsx)(n.code,{children:"method_missing"})," alongside ",(0,o.jsx)(n.code,{children:"respond_to_missing?"})," to delegate unknown method calls dynamically while preserving introspection compatibility. This pattern can wrap external services or internal collaborators seamlessly."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class APIClient\n  def initialize(adapter)\n    @adapter = adapter\n  end\n\n  def method_missing(name, *args, &block)\n    if @adapter.respond_to?(name)\n      @adapter.public_send(name, *args, &block)\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @adapter.respond_to?(name, include_private) || super\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);