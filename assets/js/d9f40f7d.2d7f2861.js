"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63575],{61481:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"ruby/matrix/middle/matrix_enumeration_transform","title":"matrix_enumeration_transform","description":"\ud83d\udd04 Enumerating and Transforming Matrices","source":"@site/docs/ruby/matrix/middle/matrix_enumeration_transform.md","sourceDirName":"ruby/matrix/middle","slug":"/ruby/matrix/middle/matrix_enumeration_transform","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_enumeration_transform","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/matrix/middle/matrix_enumeration_transform.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"matrix_basic_operations","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_basic_operations"},"next":{"title":"matrix_transpose_and_diagonal","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_transpose_and_diagonal"}}');var a=r(23420),i=r(65404);const o={},s=void 0,d={},m=[{value:"\ud83d\udd04 Enumerating and Transforming Matrices",id:"-enumerating-and-transforming-matrices",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-enumerating-and-transforming-matrices",children:"\ud83d\udd04 Enumerating and Transforming Matrices"}),"\n",(0,a.jsxs)(n.p,{children:["When you need to apply transformations element-wise, convert the matrix to a nested array or use ",(0,a.jsx)(n.code,{children:"each"})," and ",(0,a.jsx)(n.code,{children:"map"})," methods. This approach keeps your code declarative and leverages Ruby\u2019s Enumerable module."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'matrix'\n\nmatrix = Matrix[[1, 2, 3], [4, 5, 6]]\n\n# Using to_a and map\ndoubled = Matrix.rows(matrix.to_a.map { |row| row.map { |n| n * 2 } })\n# => Matrix[[2,4,6],[8,10,12]]\n\n# Using each_with_index\nincremented = Matrix.build(matrix.row_count, matrix.column_count) do |i, j|\n  matrix[i, j] + 1\nend\n# => Matrix[[2,3,4],[5,6,7]]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Choose ",(0,a.jsx)(n.code,{children:"Matrix.build"})," for direct construction when the transformation depends on indices."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(36672);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);