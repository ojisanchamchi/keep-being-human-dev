"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75692],{48726:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"rails/helpers/expert/metaprogramming_method_missing_helpers","title":"metaprogramming_method_missing_helpers","description":"\ud83d\ude80 Metaprogramming with method_missing in Helpers","source":"@site/docs/rails/helpers/expert/metaprogramming_method_missing_helpers.md","sourceDirName":"rails/helpers/expert","slug":"/rails/helpers/expert/metaprogramming_method_missing_helpers","permalink":"/keep-being-human-dev/docs/rails/helpers/expert/metaprogramming_method_missing_helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/helpers/expert/metaprogramming_method_missing_helpers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoization_with_rails_cache","permalink":"/keep-being-human-dev/docs/rails/helpers/expert/memoization_with_rails_cache"},"next":{"title":"organizing_helpers_with_concern","permalink":"/keep-being-human-dev/docs/rails/helpers/expert/organizing_helpers_with_concern"}}');var s=r(23420),t=r(65404);const o={},a=void 0,m={},p=[{value:"\ud83d\ude80 Metaprogramming with method_missing in Helpers",id:"-metaprogramming-with-method_missing-in-helpers",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-metaprogramming-with-method_missing-in-helpers",children:"\ud83d\ude80 Metaprogramming with method_missing in Helpers"}),"\n",(0,s.jsxs)(n.p,{children:["By overriding ",(0,s.jsx)(n.code,{children:"method_missing"})," and ",(0,s.jsx)(n.code,{children:"respond_to_missing?"})," you can dynamically generate helpers on\u2011the\u2011fly for patterns like ",(0,s.jsx)(n.code,{children:"icon_for_user"})," or ",(0,s.jsx)(n.code,{children:"badge_for_status"}),". This avoids repetitive definitions and keeps your helper module DRY while still providing strongly named methods."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# app/helpers/application_helper.rb\nmodule ApplicationHelper\n  def method_missing(name, *args, &block)\n    if name.to_s.start_with?("icon_for_")\n      resource = name.to_s.delete_prefix("icon_for_")\n      content_tag(:i, "", class: "icon-#{resource}")\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    name.to_s.start_with?("icon_for_") || super\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"<%= icon_for_user %>"})," or ",(0,s.jsx)(n.code,{children:"<%= icon_for_admin %>"})," without any explicit method definitions."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(36672);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);