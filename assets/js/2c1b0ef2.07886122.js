"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27870],{8385:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"gems/devise/advanced/devise_jwt_integration.md","title":"devise_jwt_integration.md","description":"\ud83d\udd10 Integrate devise-jwt for Stateless API Authentication","source":"@site/docs/gems/devise/advanced/devise_jwt_integration.md.md","sourceDirName":"gems/devise/advanced","slug":"/gems/devise/advanced/devise_jwt_integration.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/devise_jwt_integration.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/advanced/devise_jwt_integration.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_password_strength_validator.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/custom_password_strength_validator.md"},"next":{"title":"multiple_user_scopes.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/multiple_user_scopes.md"}}');var i=n(23420),a=n(65404);const d={},r=void 0,o={},c=[{value:"\ud83d\udd10 Integrate devise-jwt for Stateless API Authentication",id:"-integrate-devise-jwt-for-stateless-api-authentication",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-integrate-devise-jwt-for-stateless-api-authentication",children:"\ud83d\udd10 Integrate devise-jwt for Stateless API Authentication"}),"\n",(0,i.jsxs)(t.p,{children:["For APIs, replace session cookies with JWT tokens by using the ",(0,i.jsx)(t.code,{children:"devise-jwt"})," extension. Configure dispatch and revocation requests in Devise\u2019s initializer and provide a denylist model for token revocation. This enables secure, scalable, stateless auth across distributed services."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# Gemfile\ngem 'devise-jwt'\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/devise.rb\nDevise.setup do |config|\n  # ... existing config\n  config.jwt do |jwt|\n    jwt.secret = Rails.application.credentials.jwt_secret_key\n    jwt.dispatch_requests = [['POST', %r{^/login$}]]\n    jwt.revocation_requests = [['DELETE', %r{^/logout$}]]\n  end\nend\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# app/models/user.rb\ndevise :database_authenticatable, :jwt_authenticatable,\n       jwt_revocation_strategy: JwtDenylist\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# app/models/jwt_denylist.rb\nclass JwtDenylist < ApplicationRecord\n  include Devise::JWT::RevocationStrategies::Denylist\n  self.table_name = 'jwt_denylists'\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>r});var s=n(36672);const i={},a=s.createContext(i);function d(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);