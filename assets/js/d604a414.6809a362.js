"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79073],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>p});var r=n(36672);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},90722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/httparty/expert/httparty_typhoeus_adapter","title":"httparty_typhoeus_adapter","description":"\ud83d\ude80 Integrating Typhoeus for Parallel Requests","source":"@site/docs/gems/httparty/expert/httparty_typhoeus_adapter.md","sourceDirName":"gems/httparty/expert","slug":"/gems/httparty/expert/httparty_typhoeus_adapter","permalink":"/keep-being-human-dev/docs/gems/httparty/expert/httparty_typhoeus_adapter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/httparty/expert/httparty_typhoeus_adapter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"httparty_persistent_connections","permalink":"/keep-being-human-dev/docs/gems/httparty/expert/httparty_persistent_connections"},"next":{"title":"httparty_dynamic_query_params","permalink":"/keep-being-human-dev/docs/gems/httparty/middle/httparty_dynamic_query_params"}}');var s=n(23420),a=n(65404);const o={},p=void 0,u={},d=[{value:"\ud83d\ude80 Integrating Typhoeus for Parallel Requests",id:"-integrating-typhoeus-for-parallel-requests",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-integrating-typhoeus-for-parallel-requests",children:"\ud83d\ude80 Integrating Typhoeus for Parallel Requests"}),"\n",(0,s.jsxs)(t.p,{children:["HTTParty doesn\u2019t natively support parallel requests, but you can plug in the Typhoeus HTTP engine to run concurrent calls. Override ",(0,s.jsx)(t.code,{children:"perform_request"})," to queue calls in a shared Hydra:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'httparty'\nrequire 'typhoeus'\n\nclass ParallelClient\n  include HTTParty\n  base_uri 'https://api.example.com'\n\n  # Custom adapter to use Typhoeus::Hydra\n  module TyphoeusAdapter\n    def perform_request(http_method, path, options, &block)\n      hydra = Typhoeus::Hydra.hydra\n      req = Typhoeus::Request.new(\n        self.class.base_uri + path,\n        method:   http_method,\n        headers:  options[:headers],\n        body:     options[:body]\n      )\n\n      response = nil\n      req.on_complete { |resp| response = resp }\n      hydra.queue(req)\n      hydra.run\n\n      build_response(response)\n    end\n  end\n\n  # Inject the adapter\n  class << self\n    prepend TyphoeusAdapter\n  end\n\n  def fetch(id)\n    self.class.get(\"/resources/#{id}\")\n  end\nend\n\n# Fire off 50 parallel requests\nrequests = 50.times.map do |i|\n  Thread.new { ParallelClient.new.fetch(i).body }\nend\nrequests.each(&:join)\n"})}),"\n",(0,s.jsx)(t.p,{children:"This approach uses a shared Hydra instance to batch and run all requests concurrently, drastically reducing total execution time when hitting many endpoints at once."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}}}]);