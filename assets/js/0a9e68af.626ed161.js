"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3999],{63744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ruby/reflection/middle/introspect_methods","title":"introspect_methods","description":"\ud83d\udd0d Introspect Methods","source":"@site/docs/ruby/reflection/middle/introspect_methods.md","sourceDirName":"ruby/reflection/middle","slug":"/ruby/reflection/middle/introspect_methods","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/introspect_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/middle/introspect_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"instance_variable_inspection","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/instance_variable_inspection"},"next":{"title":"atomic_grouping","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/atomic_grouping"}}');var o=t(23420),r=t(65404);const i={},c=void 0,d={},a=[{value:"\ud83d\udd0d Introspect Methods",id:"-introspect-methods",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-introspect-methods",children:"\ud83d\udd0d Introspect Methods"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"methods"}),", ",(0,o.jsx)(n.code,{children:"public_methods"}),", ",(0,o.jsx)(n.code,{children:"instance_methods"}),", and filtering to discover what an object or class can do at runtime. This helps in building dynamic features such as auto-generated API docs or dynamic dispatchers. You can also filter out inherited methods or private ones to focus on your own."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class User\n  def login; end\n  def logout; end\nend\n\n# List all public instance methods defined on User (excluding ancestors)\nUser.instance_methods(false) #=> [:login, :logout]\n\n# List only singleton methods on an instance\nuser = User.new\ndef user.special; end\nuser.methods(false) #=> [:special]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(36672);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);