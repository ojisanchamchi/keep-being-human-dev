"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52631],{1792:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/vcr/expert/vcr_custom_persister_and_serializer","title":"vcr_custom_persister_and_serializer","description":"\u26a1\ufe0f Custom Persisters and Serializers for VCR","source":"@site/docs/gems/vcr/expert/vcr_custom_persister_and_serializer.md","sourceDirName":"gems/vcr/expert","slug":"/gems/vcr/expert/vcr_custom_persister_and_serializer","permalink":"/keep-being-human-dev/docs/gems/vcr/expert/vcr_custom_persister_and_serializer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/vcr/expert/vcr_custom_persister_and_serializer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"install_and_configure_vcr","permalink":"/keep-being-human-dev/docs/gems/vcr/beginner/install_and_configure_vcr"},"next":{"title":"vcr_deep_request_matching_and_hooks","permalink":"/keep-being-human-dev/docs/gems/vcr/expert/vcr_deep_request_matching_and_hooks"}}');var t=r(23420),a=r(65404);const i={},c=void 0,o={},d=[{value:"\u26a1\ufe0f Custom Persisters and Serializers for VCR",id:"\ufe0f-custom-persisters-and-serializers-for-vcr",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"\ufe0f-custom-persisters-and-serializers-for-vcr",children:"\u26a1\ufe0f Custom Persisters and Serializers for VCR"}),"\n",(0,t.jsxs)(s.p,{children:["For enterprise use cases you might want to store cassettes in a database or use a custom serialization format (e.g., binary or encrypted JSON). Implement a ",(0,t.jsx)(s.strong,{children:"custom persister"})," and/or ",(0,t.jsx)(s.strong,{children:"serializer"})," by conforming to VCR's persister interface."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"# lib/vcr/persisters/db_persister.rb\nmodule VCR\n  module Persisters\n    class DbPersister\n      def initialize(opts)\n        @db = opts[:db_connection]\n      end\n\n      def [](cassette_name)\n        record = @db[:cassettes].where(name: cassette_name).first\n        record ? deserialize(record.payload) : nil\n      end\n\n      def []=(cassette_name, cassette_data)\n        payload = serialize(cassette_data)\n        @db[:cassettes].insert_or_replace(name: cassette_name, payload: payload)\n      end\n\n      def file_exists?(cassette_name)\n        @db[:cassettes].where(name: cassette_name).count > 0\n      end\n\n      private\n\n      def serialize(cassette_data)\n        # e.g., encrypt JSON\n        JSON.dump(cassette_data).reverse\n      end\n\n      def deserialize(payload)\n        JSON.parse(payload.reverse)\n      end\n    end\n  end\nend\n\n# spec/spec_helper.rb\nVCR.configure do |c|\n  c.cassette_library_dir = nil # disable file system\n  c.hook_into :webmock\n  c.persister = VCR::Persisters::DbPersister.new(db_connection: DB)\nend\n"})}),"\n",(0,t.jsx)(s.p,{children:"This grants full control over where and how your HTTP interactions are persisted\u2014ideal for multi-team environments, centralized cassette management, or integrating with custom storage backends."})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>c});var n=r(36672);const t={},a=n.createContext(t);function i(e){const s=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);