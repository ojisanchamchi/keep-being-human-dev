"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5988],{11070:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/file_io/expert/zero_copy_sendfile","title":"zero_copy_sendfile","description":"\ud83d\ude80 Leverage sendfile for Kernel\u2011Level Data Transfer","source":"@site/docs/ruby/file_io/expert/zero_copy_sendfile.md","sourceDirName":"ruby/file_io/expert","slug":"/ruby/file_io/expert/zero_copy_sendfile","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/zero_copy_sendfile","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/expert/zero_copy_sendfile.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_encryption","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/streaming_encryption"},"next":{"title":"chunked_read.md","permalink":"/keep-being-human-dev/docs/ruby/file_io/middle/chunked_read.md"}}');var s=r(23420),o=r(65404);const i={},a=void 0,l={},d=[{value:"\ud83d\ude80 Leverage <code>sendfile</code> for Kernel\u2011Level Data Transfer",id:"-leverage-sendfile-for-kernellevel-data-transfer",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-leverage-sendfile-for-kernellevel-data-transfer",children:["\ud83d\ude80 Leverage ",(0,s.jsx)(n.code,{children:"sendfile"})," for Kernel\u2011Level Data Transfer"]}),"\n",(0,s.jsxs)(n.p,{children:["Use Ruby\u2019s ",(0,s.jsx)(n.code,{children:"IO#sendfile"})," (available on recent MRI versions) to offload file copying to the OS kernel\u2014eliminating userland byte copies. Ideal for proxying large static assets in web servers or CDN implementations."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# Source and destination file descriptors\nsrc = File.open('video.mp4', 'rb')\ndst = File.open('output.dat', 'wb')\n\n# Send 0..EOF, using fallback if unsupported\nbytes_sent = dst.sendfile(src, 0, src.size)\nputs \"Sent #{bytes_sent} bytes via zero-copy\"\n\nsrc.close\ndst.close\n"})}),"\n",(0,s.jsx)(n.p,{children:"When supported by your OS (Linux, macOS), this system call drastically reduces CPU usage and memory bandwidth for large-file copies."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(36672);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);