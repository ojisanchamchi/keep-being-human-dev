"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3124],{65404:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>c});var i=r(36672);const n={},a=i.createContext(n);function s(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},97482:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"sql/sqlite/middle/recursive_cte_hierarchy","title":"recursive_cte_hierarchy","description":"\ud83d\udd04 Handling Hierarchical Data with Recursive CTEs","source":"@site/docs/sql/sqlite/middle/recursive_cte_hierarchy.md","sourceDirName":"sql/sqlite/middle","slug":"/sql/sqlite/middle/recursive_cte_hierarchy","permalink":"/keep-being-human-dev/docs/sql/sqlite/middle/recursive_cte_hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/sqlite/middle/recursive_cte_hierarchy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pragma_performance_tuning","permalink":"/keep-being-human-dev/docs/sql/sqlite/middle/pragma_performance_tuning"},"next":{"title":"timestamp_triggers","permalink":"/keep-being-human-dev/docs/sql/sqlite/middle/timestamp_triggers"}}');var n=r(23420),a=r(65404);const s={},c=void 0,d={},l=[{value:"\ud83d\udd04 Handling Hierarchical Data with Recursive CTEs",id:"-handling-hierarchical-data-with-recursive-ctes",level:2}];function o(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-handling-hierarchical-data-with-recursive-ctes",children:"\ud83d\udd04 Handling Hierarchical Data with Recursive CTEs"}),"\n",(0,n.jsx)(t.p,{children:"Recursive CTEs enable querying tree-like structures such as category hierarchies. Define an anchor member and a recursive member that references the CTE itself to walk the tree."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"WITH RECURSIVE category_tree(id, name, parent_id, depth) AS (\n  SELECT id, name, parent_id, 0 FROM categories WHERE parent_id IS NULL\n  UNION ALL\n  SELECT c.id, c.name, c.parent_id, ct.depth + 1\n  FROM categories c\n  JOIN category_tree ct ON c.parent_id = ct.id\n)\nSELECT printf('%s%s', substr('  ',1,depth*2), name) AS indented_name\nFROM category_tree\nORDER BY depth, name;\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}}}]);