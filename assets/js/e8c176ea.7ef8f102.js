"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88365],{65404:(e,r,o)=>{o.d(r,{R:()=>s,x:()=>p});var t=o(36672);const n={},i=t.createContext(n);function s(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function p(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},77341:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>a,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/operators/expert/pipeline_operator_with_procs","title":"pipeline_operator_with_procs","description":"\ud83d\udd2e Building a Pipeline Operator with Proc#>>","source":"@site/docs/ruby/operators/expert/pipeline_operator_with_procs.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/pipeline_operator_with_procs","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/pipeline_operator_with_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/pipeline_operator_with_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inline_rescue_in_operators","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/inline_rescue_in_operators"},"next":{"title":"refinements_for_core_operators","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/refinements_for_core_operators"}}');var n=o(23420),i=o(65404);const s={},p=void 0,a={},c=[{value:"\ud83d\udd2e Building a Pipeline Operator with <code>Proc#&gt;&gt;</code>",id:"-building-a-pipeline-operator-with-proc",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h2,{id:"-building-a-pipeline-operator-with-proc",children:["\ud83d\udd2e Building a Pipeline Operator with ",(0,n.jsx)(r.code,{children:"Proc#>>"})]}),"\n",(0,n.jsxs)(r.p,{children:["Compose ",(0,n.jsx)(r.code,{children:"Proc"})," objects into pipelines using a custom ",(0,n.jsx)(r.code,{children:">>"})," operator. This functional style boosts readability and testability of chained transformations."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"class Proc\n  def >>(other)\n    proc { |*args| other.call(self.call(*args)) }\n  end\nend\n\nincr    = ->(x) { x + 1 }\ndouble  = ->(x) { x * 2 }\npipeline = incr >> double >> incr\n\nputs pipeline.call(3)  # \u21d2 9  (3+1=4 *2=8 +1=9)\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);