"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34991],{8648:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"gems/ransack/advanced/custom_ransacker_computed_fields","title":"custom_ransacker_computed_fields","description":"\ud83d\udd27 Custom Ransacker for Computed Fields","source":"@site/docs/gems/ransack/advanced/custom_ransacker_computed_fields.md","sourceDirName":"gems/ransack/advanced","slug":"/gems/ransack/advanced/custom_ransacker_computed_fields","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/custom_ransacker_computed_fields","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/advanced/custom_ransacker_computed_fields.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"verify_authorization_callbacks","permalink":"/keep-being-human-dev/docs/gems/pundit/middle/verify_authorization_callbacks"},"next":{"title":"define_custom_predicates","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/define_custom_predicates"}}');var t=a(23420),r=a(65404);const o={},c=void 0,d={},i=[{value:"\ud83d\udd27 Custom Ransacker for Computed Fields",id:"-custom-ransacker-for-computed-fields",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-custom-ransacker-for-computed-fields",children:"\ud83d\udd27 Custom Ransacker for Computed Fields"}),"\n",(0,t.jsx)(n.p,{children:"When you need to search or sort on a field that doesn\u2019t exist directly in your database (for example, a concatenated full name or a calculated score), you can define a custom ransacker in your model. This uses Arel to build the SQL expression and makes it available to Ransack queries."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  # Define a ransacker for full name (first_name + ' ' + last_name)\n  ransacker :full_name, formatter: proc { |v| \"%#{v.downcase}%\" } do |parent|\n    Arel::Nodes::NamedFunction.new(\n      'LOWER',\n      [\n        Arel::Nodes::InfixOperation.new(:||,\n          Arel::Nodes::InfixOperation.new(:||,\n            parent.table[:first_name],\n            Arel::Nodes.build_quoted(' ')\n          ),\n          parent.table[:last_name]\n        )\n      ]\n    )\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can now use ",(0,t.jsx)(n.code,{children:"q[full_name_cont]"})," in your search form. Sorting also works with ",(0,t.jsx)(n.code,{children:"sorts: 'full_name asc'"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var s=a(36672);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);