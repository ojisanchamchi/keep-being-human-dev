"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95791],{65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>d});var c=a(36672);const o={},s=c.createContext(o);function t(e){const n=c.useContext(s);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),c.createElement(s.Provider,{value:n},e.children)}},87054:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced","title":"symbol_to_proc_advanced","description":"\ud83d\udd24 Advanced Symbol#to_proc Techniques","source":"@site/docs/ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proc_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_lambda_composition"},"next":{"title":"calling_lambdas","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/calling_lambdas"}}');var o=a(23420),s=a(65404);const t={},d=void 0,r={},l=[{value:"\ud83d\udd24 Advanced Symbol#to_proc Techniques",id:"-advanced-symbolto_proc-techniques",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-advanced-symbolto_proc-techniques",children:"\ud83d\udd24 Advanced Symbol#to_proc Techniques"}),"\n",(0,o.jsxs)(n.p,{children:["Beyond ",(0,o.jsx)(n.code,{children:"&:method"}),", you can use ",(0,o.jsx)(n.code,{children:"Symbol#to_proc"})," with arguments, chaining methods, or even constructing calls dynamically. This can drastically reduce boilerplate when invoking multiple methods in sequence."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# Basic usage\nnums = [1, 2, 3]\nsquares = nums.map(&(:**).to_proc.curry.call(2))\nputs squares.inspect  # => [1, 4, 9]\n\n# Chained calls\nusers = [{name: "Alice"}, {name: "Bob"}]\nnames_upcase = users.map(&(:[]).to_proc.curry.call(:name) >> :upcase.to_proc)\nputs names_upcase.inspect  # => ["ALICE", "BOB"]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}}}]);