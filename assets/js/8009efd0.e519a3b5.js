"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84239],{63617:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>p,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/networking/expert/persistent_http_pipelining","title":"persistent_http_pipelining","description":"\u26a1 Maximizing Throughput with Net::HTTP Persistent Pipelining","source":"@site/docs/ruby/networking/expert/persistent_http_pipelining.md","sourceDirName":"ruby/networking/expert","slug":"/ruby/networking/expert/persistent_http_pipelining","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/persistent_http_pipelining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/expert/persistent_http_pipelining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"packet_crafting_raw_sockets","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/packet_crafting_raw_sockets"},"next":{"title":"http_multipart_upload","permalink":"/keep-being-human-dev/docs/ruby/networking/middle/http_multipart_upload"}}');var r=n(23420),o=n(65404);const p={},s=void 0,a={},u=[{value:"\u26a1 Maximizing Throughput with Net::HTTP Persistent Pipelining",id:"-maximizing-throughput-with-nethttp-persistent-pipelining",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-maximizing-throughput-with-nethttp-persistent-pipelining",children:"\u26a1 Maximizing Throughput with Net::HTTP Persistent Pipelining"}),"\n",(0,r.jsx)(t.p,{children:"Use Net::HTTP\u2019s pipelining support alongside persistent connections to send multiple GET/POST requests without waiting for each response, minimizing RTT overhead. Combine with thread pools for concurrent pipelines against the same server."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\nrequire 'uri'\nrequire 'concurrent'\n\nuri = URI('http://api.highperf.com')\npool = Concurrent::FixedThreadPool.new(10)\n\n# Open a persistent connection\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.start do |conn|\n  50.times do |i|\n    pool.post do\n      conn.pipeline do |p|\n        p.get \"/items/#{i}\"\n        p.post \"/items\", { name: \"item#{i}\" }.to_json, 'Content-Type' => 'application/json'\n      end.each do |response|\n        puts \"Response #{response.code} for stream #{i}: #{response.body[0..30]}...\"\n      end\n    end\n  end\n  pool.shutdown\n  pool.wait_for_termination\nend\n"})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>p,x:()=>s});var i=n(36672);const r={},o=i.createContext(r);function p(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:p(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);