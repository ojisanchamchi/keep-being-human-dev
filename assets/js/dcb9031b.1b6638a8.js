"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[67133],{33693:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield","title":"complex_block_yields_with_and_yield","description":"\ud83c\udfaf Simulating Complex Block Yields with and_yield","source":"@site/docs/gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield.md","sourceDirName":"gems/rspec/mocks_and_stubs/expert","slug":"/gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"class_spy_on_new_with_and_call_original","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original"},"next":{"title":"stub_private_methods_with_prepend","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/stub_private_methods_with_prepend"}}');var d=s(23420),i=s(65404);const o={},r=void 0,l={},c=[{value:"\ud83c\udfaf Simulating Complex Block Yields with <code>and_yield</code>",id:"-simulating-complex-block-yields-with-and_yield",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(t.h2,{id:"-simulating-complex-block-yields-with-and_yield",children:["\ud83c\udfaf Simulating Complex Block Yields with ",(0,d.jsx)(t.code,{children:"and_yield"})]}),"\n",(0,d.jsxs)(t.p,{children:["For methods that yield multiple times or yield multiple arguments, chain ",(0,d.jsx)(t.code,{children:"and_yield"})," calls to precisely emulate the real flow. This is ideal when testing orchestrators or event streams."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ruby",children:"def orchestrator\n  yield :start, 1\n  yield :middle, 2\n  yield :end, 3\nend\n\nRSpec.describe 'orchestrator' do\n  it 'processes steps in order' do\n    spy = double('listener')\n    allow(self)\n      .to receive(:orchestrator)\n      .and_yield(:start, 1)\n      .and_yield(:middle, 2)\n      .and_yield(:end, 3)\n\n    orchestrator do |step, num|\n      spy.step(step, num)\n    end\n\n    expect(spy).to have_received(:step).with(:start, 1).ordered\n    expect(spy).to have_received(:step).with(:middle, 2).ordered\n    expect(spy).to have_received(:step).with(:end, 3).ordered\n  end\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(36672);const d={},i=n.createContext(d);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);