"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41282],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>d});var i=n(36672);const a={},s=i.createContext(a);function r(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:t},e.children)}},74074:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/syntax/middle/tap_debugging","title":"tap_debugging","description":"\ud83d\udee0\ufe0f Debugging with tap in Method Chains","source":"@site/docs/ruby/syntax/middle/tap_debugging.md","sourceDirName":"ruby/syntax/middle","slug":"/ruby/syntax/middle/tap_debugging","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/tap_debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/middle/tap_debugging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/symbol_to_proc"},"next":{"title":"atomic_tempfile_replacement","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/advanced/atomic_tempfile_replacement"}}');var a=n(23420),s=n(65404);const r={},d=void 0,o={},c=[{value:"\ud83d\udee0\ufe0f Debugging with <code>tap</code> in Method Chains",id:"\ufe0f-debugging-with-tap-in-method-chains",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h2,{id:"\ufe0f-debugging-with-tap-in-method-chains",children:["\ud83d\udee0\ufe0f Debugging with ",(0,a.jsx)(t.code,{children:"tap"})," in Method Chains"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"tap"})," yields the object to a block and returns it, making it ideal for inserting debug statements in chains without breaking the flow."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'(1..5)\n  .map { |n| n * 2 }\n  .tap { |arr| puts "After doubling: #{arr.inspect}" }\n  .select(&:odd?)\n  .tap { |arr| puts "After selecting odds: #{arr.inspect}" }\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);