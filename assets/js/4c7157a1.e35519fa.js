"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[98350],{43801:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/numbers/expert/expert_bigdecimal_precision","title":"expert_bigdecimal_precision","description":"\ud83e\uddee Advanced BigDecimal Precision Control","source":"@site/docs/ruby/numbers/expert/expert_bigdecimal_precision.md","sourceDirName":"ruby/numbers/expert","slug":"/ruby/numbers/expert/expert_bigdecimal_precision","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_bigdecimal_precision","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/numbers/expert/expert_bigdecimal_precision.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rounding_numbers","permalink":"/keep-being-human-dev/docs/ruby/numbers/beginner/rounding_numbers"},"next":{"title":"expert_bitwise_binary","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_bitwise_binary"}}');var t=n(23420),c=n(65404);const s={},a=void 0,o={},u=[{value:"\ud83e\uddee Advanced BigDecimal Precision Control",id:"-advanced-bigdecimal-precision-control",level:2}];function d(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-advanced-bigdecimal-precision-control",children:"\ud83e\uddee Advanced BigDecimal Precision Control"}),"\n",(0,t.jsxs)(i.p,{children:["Ruby\u2019s BigDecimal gives you true arbitrary-precision arithmetic, but by default it uses a modest number of significant digits. You can globally tune precision for all new BigDecimal instances with ",(0,t.jsx)(i.code,{children:"BigDecimal.limit"}),", and configure rounding modes per calculation via ",(0,t.jsx)(i.code,{children:"BigDecimal.mode"}),". This is invaluable when you need consistent rounding behavior across complex financial algorithms."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:'require \'bigdecimal\'\nrequire \'bigdecimal/util\'\n\n# Set default precision to 30 significant digits\nBigDecimal.limit(30)\n\n# Configure rounding mode: HALF_UP for typical financial rounding\nBigDecimal.mode(BigDecimal::ROUND_HALF_UP, BigDecimal::ROUND_DIGITS)\n\n# Now every new BigDecimal uses 30 digits and HALF_UP\na = BigDecimal("1.2345678901234567890123456789")\nb = BigDecimal("2.3456789012345678901234567890")\n\nsum = a + b\nputs sum.to_s("F")  # => high\u2011precision accurate result\n'})})]})}function l(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>a});var r=n(36672);const t={},c=r.createContext(t);function s(e){const i=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(c.Provider,{value:i},e.children)}}}]);