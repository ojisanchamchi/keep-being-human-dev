"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[474],{65404:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var n=a(36672);const r={},s=n.createContext(r);function i(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:t},e.children)}},75644:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"javascript/turbo/advanced/turbo_stream_multiplexing","title":"turbo_stream_multiplexing","description":"\ud83d\udd04 Turbo Stream Multiplexing for Real-time Updates","source":"@site/docs/javascript/turbo/advanced/turbo_stream_multiplexing.md","sourceDirName":"javascript/turbo/advanced","slug":"/javascript/turbo/advanced/turbo_stream_multiplexing","permalink":"/keep-being-human-dev/docs/javascript/turbo/advanced/turbo_stream_multiplexing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/turbo/advanced/turbo_stream_multiplexing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_stimulus_integration","permalink":"/keep-being-human-dev/docs/javascript/turbo/advanced/turbo_stimulus_integration"},"next":{"title":"websocket_turbo_streams","permalink":"/keep-being-human-dev/docs/javascript/turbo/advanced/websocket_turbo_streams"}}');var r=a(23420),s=a(65404);const i={},o=void 0,c={},u=[{value:"\ud83d\udd04 Turbo Stream Multiplexing for Real-time Updates",id:"-turbo-stream-multiplexing-for-real-time-updates",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-turbo-stream-multiplexing-for-real-time-updates",children:"\ud83d\udd04 Turbo Stream Multiplexing for Real-time Updates"}),"\n",(0,r.jsxs)(t.p,{children:["Combine multiple WebSocket channels into a single UI update stream using Turbo Streams. This pattern centralizes real-time events and avoids redundant DOM operations by calling ",(0,r.jsx)(t.code,{children:"Turbo.renderStreamMessage"})," for each incoming payload."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// app/javascript/channels/index.js\nimport * as ActionCable from '@rails/actioncable'\nconst consumer = ActionCable.createConsumer()\n\n['ChatChannel', 'NotificationsChannel'].forEach(channel => {\n  consumer.subscriptions.create({ channel }, {\n    received(data) {\n      Turbo.renderStreamMessage(data)\n    }\n  })\n})\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);