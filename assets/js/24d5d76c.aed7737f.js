"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17654],{29179:(e,t,c)=>{c.r(t),c.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"rails/active_record_callbacks/expert/rspec_callbacks_testing","title":"rspec_callbacks_testing","description":"\ud83e\uddea Testing Callbacks Precisely with RSpec","source":"@site/docs/rails/active_record_callbacks/expert/rspec_callbacks_testing.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/rspec_callbacks_testing","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/rspec_callbacks_testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/rspec_callbacks_testing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prepend_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/prepend_callbacks"},"next":{"title":"soft_delete_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/soft_delete_callbacks"}}');var a=c(23420),n=c(65404);const r={},i=void 0,l={},o=[{value:"\ud83e\uddea Testing Callbacks Precisely with RSpec",id:"-testing-callbacks-precisely-with-rspec",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-testing-callbacks-precisely-with-rspec",children:"\ud83e\uddea Testing Callbacks Precisely with RSpec"}),"\n",(0,a.jsx)(t.p,{children:"Avoid coupling tests to implementation details. Use RSpec spies and stub only external dependencies in callbacks. Test that callbacks fire under correct conditions rather than asserting internal state changes directly."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"RSpec.describe Payment, type: :model do\n  describe 'after_commit :notify_gateway' do\n    it 'enqueues a notification job after successful save' do\n      payment = build(:payment)\n      expect {\n        payment.save\n      }.to have_enqueued_job(GatewayNotificationJob).with(payment.id)\n    end\n  end\nend\n"})}),"\n",(0,a.jsx)(t.p,{children:"By focusing on side effects (e.g., enqueued jobs), you keep your tests resilient to refactoring and internal changes."})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,c)=>{c.d(t,{R:()=>r,x:()=>i});var s=c(36672);const a={},n=s.createContext(a);function r(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);