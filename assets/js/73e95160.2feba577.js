"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47431],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(36672);const a={},c=r.createContext(a);function o(e){const t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(c.Provider,{value:t},e.children)}},94728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rails/benchmarking/expert/memory_allocation_tracking","title":"memory_allocation_tracking","description":"\ud83e\udde0 Track Memory Allocation and GC Impact","source":"@site/docs/rails/benchmarking/expert/memory_allocation_tracking.md","sourceDirName":"rails/benchmarking/expert","slug":"/rails/benchmarking/expert/memory_allocation_tracking","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/memory_allocation_tracking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/benchmarking/expert/memory_allocation_tracking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"low_level_benchmarking","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/low_level_benchmarking"},"next":{"title":"sql_query_profiling","permalink":"/keep-being-human-dev/docs/rails/benchmarking/expert/sql_query_profiling"}}');var a=n(23420),c=n(65404);const o={},i=void 0,s={},l=[{value:"\ud83e\udde0 Track Memory Allocation and GC Impact",id:"-track-memory-allocation-and-gc-impact",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-track-memory-allocation-and-gc-impact",children:"\ud83e\udde0 Track Memory Allocation and GC Impact"}),"\n",(0,a.jsxs)(t.p,{children:["Microbenchmarks often ignore memory churn, but large heaps or frequent GCs can kill performance. By pairing ",(0,a.jsx)(t.code,{children:"Benchmark.realtime"})," with ",(0,a.jsx)(t.code,{children:"GC.stat"})," and ",(0,a.jsx)(t.code,{children:"ObjectSpace"}),", you can correlate time cost with allocation patterns and tune both code and GC settings."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'require \'benchmark\'\n\n# Warm up and clear heap for consistent stats\nGC.start(full_mark: true, immediate_sweep: true)\n\nbefore_stats = GC.stat\nbefore_count = ObjectSpace.each_object(String).count\n\ntime = Benchmark.realtime do\n  100_000.times { "x" * 100 }\nend\n\nafter_stats = GC.stat\nafter_count = ObjectSpace.each_object(String).count\n\nputs "Time: #{(time*1000).round(2)}ms"\nputs "Heap live slots \u0394: #{after_stats[:heap_live_slots] - before_stats[:heap_live_slots]}"\nputs "String objects \u0394: #{after_count - before_count}"\n'})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);