"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[99099],{45815:n=>{n.exports=JSON.parse('{"permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-chuyen-gia","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-07-26-ruby-arrays-ky-thuat-chuyen-gia.md","source":"@site/blog/2023-07-26-ruby-arrays-ky-thuat-chuyen-gia.md","title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","description":"Ruby Arrays Expert","date":"2023-07-26T00:00:00.000Z","tags":[{"inline":false,"label":"Ruby","permalink":"/keep-being-human-dev/blog/tags/ruby","description":"Content related to Ruby programming language"},{"inline":false,"label":"Arrays","permalink":"/keep-being-human-dev/blog/tags/arrays","description":"Content about array data structures and operations"},{"inline":false,"label":"Expert","permalink":"/keep-being-human-dev/blog/tags/expert","description":"Content for expert level programmers"}],"readingTime":10.2,"hasTruncateMarker":true,"authors":[{"name":"Dang Quang Minh","title":"Nh\xe2n vi\xean o\xe1nh m\xe1y t\xednh","url":"https://github.com/ojisanchamchi","page":{"permalink":"/keep-being-human-dev/blog/authors/admin"},"socials":{"github":"https://github.com/ojisanchamchi"},"imageURL":"https://github.com/ojisanchamchi.png","key":"admin"}],"frontMatter":{"slug":"ruby-arrays-ky-thuat-chuyen-gia","title":"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia","authors":["admin"],"tags":["ruby","arrays","expert"]},"unlisted":false,"prevItem":{"title":"H\u01b0\u1edbng D\u1eabn To\xe0n Di\u1ec7n V\u1ec1 Benchmark Trong Ruby - T\u1eeb C\u01a1 B\u1ea3n \u0110\u1ebfn Chuy\xean S\xe2u","permalink":"/keep-being-human-dev/blog/huong-dan-benchmark-ruby"},"nextItem":{"title":"B\u1eadc Th\u1ea7y X\u1eed L\xfd M\u1ea3ng Trong Ruby: Nh\u1eefng K\u1ef9 Thu\u1eadt N\xe2ng Cao \u0110\u1ec9nh Cao","permalink":"/keep-being-human-dev/blog/ruby-arrays-ky-thuat-nang-cao"}}')},65404:(n,e,i)=>{i.d(e,{R:()=>d,x:()=>s});var t=i(36672);const a={},r=t.createContext(a);function d(n){const e=t.useContext(r);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:d(n.components),t.createElement(r.Provider,{value:e},n.children)}},96525:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>h,contentTitle:()=>s,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>o});var t=i(45815),a=i(23420),r=i(65404);const d={slug:"ruby-arrays-ky-thuat-chuyen-gia",title:"Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia",authors:["admin"],tags:["ruby","arrays","expert"]},s="Ngh\u1ec7 Thu\u1eadt T\u1ed1i Th\u01b0\u1ee3ng v\u1ec1 M\u1ea3ng trong Ruby: B\xed K\xedp Ch\u1ec9 D\xe0nh Cho Chuy\xean Gia",h={authorsImageUrls:[void 0]},o=[{value:"\ud83e\uddf5 X\u1eed L\xfd Song Song v\u1edbi Threads",id:"-x\u1eed-l\xfd-song-song-v\u1edbi-threads",level:2},{value:"\ud83d\udd12 Deep Freeze - B\u1ea3o V\u1ec7 M\u1ea3ng L\u1ed3ng Nhau Kh\u1ecfi Thay \u0110\u1ed5i",id:"-deep-freeze---b\u1ea3o-v\u1ec7-m\u1ea3ng-l\u1ed3ng-nhau-kh\u1ecfi-thay-\u0111\u1ed5i",level:2},{value:"\ud83e\udde0 Metaprogramming - T\u1ea1o Ph\u01b0\u01a1ng Th\u1ee9c M\u1ea3ng \u0110\u1ed9ng",id:"-metaprogramming---t\u1ea1o-ph\u01b0\u01a1ng-th\u1ee9c-m\u1ea3ng-\u0111\u1ed9ng",level:2},{value:"\ud83e\uddee Memoized Inject - T\u1ed1i \u01afu H\xf3a T\xednh To\xe1n L\u1eb7p L\u1ea1i",id:"-memoized-inject---t\u1ed1i-\u01b0u-h\xf3a-t\xednh-to\xe1n-l\u1eb7p-l\u1ea1i",level:2},{value:"\ud83d\udd04 Enumerator V\xf4 H\u1ea1n L\u01b0\u1eddi Bi\u1ebfng",id:"-enumerator-v\xf4-h\u1ea1n-l\u01b0\u1eddi-bi\u1ebfng",level:2},{value:"\ud83d\udd0c Refinements - M\u1edf R\u1ed9ng M\u1ea3ng An To\xe0n",id:"-refinements---m\u1edf-r\u1ed9ng-m\u1ea3ng-an-to\xe0n",level:2},{value:"\ud83d\udce6 Binary Packing v\u1edbi pack/unpack",id:"-binary-packing-v\u1edbi-packunpack",level:2},{value:"\ud83c\udfb2 Bi\u1ec3u Di\u1ec5n M\u1ea3ng D\u01b0\u1edbi D\u1ea1ng BitSet",id:"-bi\u1ec3u-di\u1ec5n-m\u1ea3ng-d\u01b0\u1edbi-d\u1ea1ng-bitset",level:2},{value:"\ud83e\udde9 T\u1ea1o M\u1ea3ng N Chi\u1ec1u",id:"-t\u1ea1o-m\u1ea3ng-n-chi\u1ec1u",level:2},{value:"\ud83d\udd17 Chu\u1ed7i Enumerator T\xf9y Ch\u1ec9nh",id:"-chu\u1ed7i-enumerator-t\xf9y-ch\u1ec9nh",level:2},{value:"\ud83c\udfaf K\u1ebft lu\u1eadn",id:"-k\u1ebft-lu\u1eadn",level:2}];function c(n){const e={code:"code",h2:"h2",hr:"hr",img:"img",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://images.unsplash.com/photo-1555099962-4199c345e5dd?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80",alt:"Ruby Arrays Expert"})}),"\n",(0,a.jsx)(e.p,{children:"B\u1ea1n \u0111\xe3 th\xe0nh th\u1ea1o t\u1ea5t c\u1ea3 c\xe1c k\u1ef9 thu\u1eadt c\u01a1 b\u1ea3n, trung c\u1ea5p v\xe0 n\xe2ng cao v\u1ec1 m\u1ea3ng trong Ruby? \u0110\xe3 \u0111\u1ebfn l\xfac kh\xe1m ph\xe1 nh\u1eefng b\xed k\xedp t\u1ed1i th\u01b0\u1ee3ng, nh\u1eefng k\u1ef9 thu\u1eadt ch\u1ec9 d\xe0nh cho c\xe1c chuy\xean gia Ruby th\u1ef1c th\u1ee5. B\xe0i vi\u1ebft n\xe0y s\u1ebd \u0111\u01b0a b\u1ea1n \u0111\u1ebfn nh\u1eefng ranh gi\u1edbi xa nh\u1ea5t c\u1ee7a vi\u1ec7c l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby, n\u01a1i hi\u1ec7u su\u1ea5t, t\xednh linh ho\u1ea1t v\xe0 s\u1ef1 thanh l\u1ecbch c\u1ee7a code \u0111\u01b0\u1ee3c \u0111\u1ea9y \u0111\u1ebfn gi\u1edbi h\u1ea1n."}),"\n",(0,a.jsx)(e.h2,{id:"-x\u1eed-l\xfd-song-song-v\u1edbi-threads",children:"\ud83e\uddf5 X\u1eed L\xfd Song Song v\u1edbi Threads"}),"\n",(0,a.jsx)(e.p,{children:"T\u1eadn d\u1ee5ng s\u1ee9c m\u1ea1nh c\u1ee7a \u0111a lu\u1ed3ng \u0111\u1ec3 x\u1eed l\xfd m\u1ea3ng l\u1edbn m\u1ed9t c\xe1ch hi\u1ec7u qu\u1ea3:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"require 'thread'\nrequire 'etc'\n\nclass Array\n  def parallel_map(pool_size: Etc.nprocessors)\n    return [] if empty?\n    \n    queue   = SizedQueue.new(pool_size)\n    results = Array.new(size)\n    mutex   = Mutex.new\n    \n    # T\u1ea1o nh\xf3m worker threads\n    workers = pool_size.times.map do\n      Thread.new do\n        while (item = queue.pop rescue nil)\n          value, idx = item\n          result = yield(value)\n          mutex.synchronize { results[idx] = result }\n        end\n      end\n    end\n    \n    # \u0110\u01b0a c\xf4ng vi\u1ec7c v\xe0o h\xe0ng \u0111\u1ee3i\n    each_with_index { |elem, i| queue << [elem, i] }\n    \n    # \u0110\xf3ng h\xe0ng \u0111\u1ee3i v\xe0 ch\u1edd c\xe1c worker ho\xe0n th\xe0nh\n    pool_size.times { queue.close }\n    workers.each(&:join)\n    \n    results\n  end\nend\n\n# V\xed d\u1ee5 s\u1eed d\u1ee5ng\ndef xu_ly_phuc_tap(n)\n  sleep(0.1)  # Gi\u1ea3 l\u1eadp x\u1eed l\xfd t\u1ed1n th\u1eddi gian\n  n * n\nend\n\n# X\u1eed l\xfd tu\u1ea7n t\u1ef1 - m\u1ea5t kho\u1ea3ng 1 gi\xe2y\nstart = Time.now\nket_qua_tuan_tu = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map { |n| xu_ly_phuc_tap(n) }\nputs \"X\u1eed l\xfd tu\u1ea7n t\u1ef1: #{Time.now - start} gi\xe2y\"\n\n# X\u1eed l\xfd song song - nhanh h\u01a1n nhi\u1ec1u\nstart = Time.now\nket_qua_song_song = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].parallel_map { |n| xu_ly_phuc_tap(n) }\nputs \"X\u1eed l\xfd song song: #{Time.now - start} gi\xe2y\"\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-deep-freeze---b\u1ea3o-v\u1ec7-m\u1ea3ng-l\u1ed3ng-nhau-kh\u1ecfi-thay-\u0111\u1ed5i",children:"\ud83d\udd12 Deep Freeze - B\u1ea3o V\u1ec7 M\u1ea3ng L\u1ed3ng Nhau Kh\u1ecfi Thay \u0110\u1ed5i"}),"\n",(0,a.jsx)(e.p,{children:"T\u1ea1o m\u1ea3ng b\u1ea5t bi\u1ebfn ho\xe0n to\xe0n, bao g\u1ed3m c\u1ea3 c\xe1c m\u1ea3ng con v\xe0 \u0111\u1ed1i t\u01b0\u1ee3ng b\xean trong:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:'class Array\n  def deep_freeze\n    each { |element| element.deep_freeze if element.respond_to?(:deep_freeze) }\n    freeze\n  end\nend\n\nclass Hash\n  def deep_freeze\n    each_value { |value| value.deep_freeze if value.respond_to?(:deep_freeze) }\n    freeze\n  end\nend\n\nclass Object\n  def deep_freeze\n    freeze\n  end\nend\n\n# T\u1ea1o c\u1ea5u tr\xfac d\u1eef li\u1ec7u b\u1ea5t bi\u1ebfn ho\xe0n to\xe0n\ncau_hinh = {\n  app_name: "Ruby Master",\n  version: "1.0.0",\n  settings: {\n    timeout: 30,\n    retries: 3,\n    endpoints: ["api.example.com", "backup.example.com"]\n  },\n  features: ["authentication", "reporting", "analytics"]\n}.deep_freeze\n\n# Th\u1eed thay \u0111\u1ed5i s\u1ebd g\xe2y ra l\u1ed7i\n# cau_hinh[:version] = "1.0.1"                  # => FrozenError\n# cau_hinh[:settings][:timeout] = 60            # => FrozenError\n# cau_hinh[:settings][:endpoints] << "new.com"  # => FrozenError\n# cau_hinh[:features][0] = "new-auth"           # => FrozenError\n'})}),"\n",(0,a.jsx)(e.h2,{id:"-metaprogramming---t\u1ea1o-ph\u01b0\u01a1ng-th\u1ee9c-m\u1ea3ng-\u0111\u1ed9ng",children:"\ud83e\udde0 Metaprogramming - T\u1ea1o Ph\u01b0\u01a1ng Th\u1ee9c M\u1ea3ng \u0110\u1ed9ng"}),"\n",(0,a.jsx)(e.p,{children:"S\u1eed d\u1ee5ng metaprogramming \u0111\u1ec3 t\u1ea1o c\xe1c ph\u01b0\u01a1ng th\u1ee9c x\u1eed l\xfd m\u1ea3ng m\u1ed9t c\xe1ch \u0111\u1ed9ng:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"class Array\n  # \u0110\u1ecbnh ngh\u0129a c\xe1c ph\u01b0\u01a1ng th\u1ee9c t\xecm ki\u1ebfm \u0111\u1ed9ng\n  %w[first last min max].each do |method_prefix|\n    %w[even odd prime].each do |criteria|\n      method_name = \"#{method_prefix}_#{criteria}\"\n      \n      define_method(method_name) do\n        case criteria\n        when 'even'\n          self.select(&:even?).public_send(method_prefix)\n        when 'odd'\n          self.select(&:odd?).public_send(method_prefix)\n        when 'prime'\n          require 'prime'\n          self.select { |n| Prime.prime?(n) }.public_send(method_prefix)\n        end\n      end\n    end\n  end\n  \n  # T\u1ea1o ph\u01b0\u01a1ng th\u1ee9c t\u1ed5ng h\u1ee3p \u0111\u1ed9ng\n  def method_missing(method_name, *args, &block)\n    if method_name.to_s =~ /^(sum|product)_of_(.+)$/\n      operation, property = $1, $2\n      \n      values = map { |item| item.is_a?(Hash) ? item[property.to_sym] : item.send(property) }\n      \n      case operation\n      when 'sum'\n        values.sum\n      when 'product'\n        values.inject(1, :*)\n      end\n    else\n      super\n    end\n  end\n  \n  def respond_to_missing?(method_name, include_private = false)\n    method_name.to_s =~ /^(sum|product)_of_(.+)$/ || super\n  end\nend\n\n# S\u1eed d\u1ee5ng c\xe1c ph\u01b0\u01a1ng th\u1ee9c \u0111\u01b0\u1ee3c t\u1ea1o \u0111\u1ed9ng\nso = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\nso.first_even  # => 2\nso.last_odd    # => 13\nso.max_prime   # => 13\n\n# S\u1eed d\u1ee5ng v\u1edbi m\u1ea3ng \u0111\u1ed1i t\u01b0\u1ee3ng\nsan_pham = [\n  {ten: \"Laptop\", gia: 15000000, so_luong: 2},\n  {ten: \"\u0110i\u1ec7n tho\u1ea1i\", gia: 8000000, so_luong: 5},\n  {ten: \"Tai nghe\", gia: 1500000, so_luong: 10}\n]\n\nsan_pham.sum_of_gia       # => 24500000\nsan_pham.product_of_so_luong  # => 100\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-memoized-inject---t\u1ed1i-\u01b0u-h\xf3a-t\xednh-to\xe1n-l\u1eb7p-l\u1ea1i",children:"\ud83e\uddee Memoized Inject - T\u1ed1i \u01afu H\xf3a T\xednh To\xe1n L\u1eb7p L\u1ea1i"}),"\n",(0,a.jsxs)(e.p,{children:["T\u1ea1o m\u1ed9t phi\xean b\u1ea3n t\u1ed1i \u01b0u c\u1ee7a ",(0,a.jsx)(e.code,{children:"inject"})," v\u1edbi kh\u1ea3 n\u0103ng ghi nh\u1edb k\u1ebft qu\u1ea3 trung gian:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"class Array\n  def memoized_inject(initial = nil, memo_key = nil)\n    memo = {}\n    memo_key ||= ->(acc, item) { [acc, item].hash }\n    \n    if block_given?\n      inject(initial) do |acc, item|\n        key = memo_key.call(acc, item)\n        memo[key] ||= yield(acc, item)\n      end\n    else\n      inject(initial)\n    end\n  end\nend\n\n# T\xednh giai th\u1eeba v\u1edbi memoization\ndef factorial(n)\n  return 1 if n <= 1\n  (1..n).memoized_inject(1) { |acc, i| acc * i }\nend\n\n# T\xednh s\u1ed1 Fibonacci v\u1edbi memoization\ndef fibonacci_sequence(n)\n  return [] if n <= 0\n  return [0] if n == 1\n  return [0, 1] if n == 2\n  \n  result = [0, 1]\n  memo = {}\n  \n  (2...n).each do |i|\n    key = [result[i-1], result[i-2]].hash\n    memo[key] ||= result[i-1] + result[i-2]\n    result << memo[key]\n  end\n  \n  result\nend\n\nputs fibonacci_sequence(100).last  # T\xednh s\u1ed1 Fibonacci th\u1ee9 100 r\u1ea5t nhanh\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-enumerator-v\xf4-h\u1ea1n-l\u01b0\u1eddi-bi\u1ebfng",children:"\ud83d\udd04 Enumerator V\xf4 H\u1ea1n L\u01b0\u1eddi Bi\u1ebfng"}),"\n",(0,a.jsx)(e.p,{children:"T\u1ea1o v\xe0 l\xe0m vi\u1ec7c v\u1edbi c\xe1c d\xe3y v\xf4 h\u1ea1n m\xe0 kh\xf4ng g\xe2y tr\xe0n b\u1ed9 nh\u1edb:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"# T\u1ea1o d\xe3y s\u1ed1 Fibonacci v\xf4 h\u1ea1n\nfibonacci = Enumerator.new do |yielder|\n  a, b = 0, 1\n  loop do\n    yielder << a\n    a, b = b, a + b\n  end\nend.lazy\n\n# L\u1ea5y 10 s\u1ed1 Fibonacci \u0111\u1ea7u ti\xean\nfibonacci.take(10).force  # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n\n# L\u1ea5y c\xe1c s\u1ed1 Fibonacci l\u1edbn h\u01a1n 1000 v\xe0 nh\u1ecf h\u01a1n 10000\nfibonacci\n  .select { |n| n > 1000 }\n  .take_while { |n| n < 10000 }\n  .force  # => [1597, 2584, 4181, 6765]\n\n# T\u1ea1o d\xe3y s\u1ed1 nguy\xean t\u1ed1 v\xf4 h\u1ea1n\nrequire 'prime'\nprimes = Enumerator.new do |yielder|\n  Prime.each { |prime| yielder << prime }\nend.lazy\n\n# T\xecm 5 s\u1ed1 nguy\xean t\u1ed1 \u0111\u1ea7u ti\xean l\u1edbn h\u01a1n 1000000\nprimes\n  .select { |p| p > 1000000 }\n  .take(5)\n  .force  # => [1000003, 1000033, 1000037, 1000039, 1000081]\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-refinements---m\u1edf-r\u1ed9ng-m\u1ea3ng-an-to\xe0n",children:"\ud83d\udd0c Refinements - M\u1edf R\u1ed9ng M\u1ea3ng An To\xe0n"}),"\n",(0,a.jsx)(e.p,{children:"S\u1eed d\u1ee5ng refinements \u0111\u1ec3 m\u1edf r\u1ed9ng ch\u1ee9c n\u0103ng c\u1ee7a m\u1ea3ng m\xe0 kh\xf4ng \u1ea3nh h\u01b0\u1edfng \u0111\u1ebfn code kh\xe1c:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:'module ArrayExtensions\n  refine Array do\n    # Ph\u01b0\u01a1ng th\u1ee9c t\xecm ph\u1ea7n t\u1eed ph\u1ed5 bi\u1ebfn nh\u1ea5t\n    def most_frequent\n      group_by(&:itself)\n        .transform_values(&:count)\n        .max_by { |_, count| count }\n        &.first\n    end\n    \n    # Ph\u01b0\u01a1ng th\u1ee9c t\xednh trung b\xecnh c\xf3 tr\u1ecdng s\u1ed1\n    def weighted_average(weights = nil)\n      return nil if empty?\n      \n      if weights.nil?\n        sum.to_f / size\n      else\n        raise ArgumentError, "Weights array must have same size as source array" if weights.size != size\n        \n        sum { |v| v * weights[index(v)] }.to_f / weights.sum\n      end\n    end\n    \n    # Ph\u01b0\u01a1ng th\u1ee9c chia m\u1ea3ng th\xe0nh c\xe1c nh\xf3m c\xf3 k\xedch th\u01b0\u1edbc b\u1eb1ng nhau\n    def split_into(num_groups)\n      return [] if empty?\n      \n      groups = Array.new(num_groups) { [] }\n      each_with_index { |elem, i| groups[i % num_groups] << elem }\n      groups\n    end\n  end\nend\n\n# S\u1eed d\u1ee5ng refinements\nusing ArrayExtensions\n\n# T\xecm ph\u1ea7n t\u1eed ph\u1ed5 bi\u1ebfn nh\u1ea5t\n[1, 2, 3, 2, 2, 4, 5, 2, 6, 7, 2].most_frequent  # => 2\n\n# T\xednh trung b\xecnh c\xf3 tr\u1ecdng s\u1ed1\ndiem = [8.5, 7.0, 9.5]\ntrong_so = [0.3, 0.2, 0.5]\ndiem.weighted_average(trong_so)  # => 8.55\n\n# Chia m\u1ea3ng th\xe0nh c\xe1c nh\xf3m\n(1..10).to_a.split_into(3)  # => [[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"-binary-packing-v\u1edbi-packunpack",children:"\ud83d\udce6 Binary Packing v\u1edbi pack/unpack"}),"\n",(0,a.jsxs)(e.p,{children:["S\u1eed d\u1ee5ng ",(0,a.jsx)(e.code,{children:"pack"})," v\xe0 ",(0,a.jsx)(e.code,{children:"unpack"})," \u0111\u1ec3 chuy\u1ec3n \u0111\u1ed5i gi\u1eefa m\u1ea3ng v\xe0 d\u1eef li\u1ec7u nh\u1ecb ph\xe2n:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"# Chuy\u1ec3n \u0111\u1ed5i m\u1ea3ng s\u1ed1 nguy\xean th\xe0nh d\u1eef li\u1ec7u nh\u1ecb ph\xe2n\nso_nguyen = [1, 2, 3, 4, 5]\nbinary_data = so_nguyen.pack('C*')  # 'C' = unsigned char (8-bit)\n\n# Chuy\u1ec3n \u0111\u1ed5i ng\u01b0\u1ee3c l\u1ea1i t\u1eeb d\u1eef li\u1ec7u nh\u1ecb ph\xe2n th\xe0nh m\u1ea3ng\nso_nguyen_moi = binary_data.unpack('C*')  # => [1, 2, 3, 4, 5]\n\n# \u0110\xf3ng g\xf3i c\u1ea5u tr\xfac d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p\ndef serialize_point(x, y, z)\n  [x, y, z].pack('d3')  # 'd' = double precision float (64-bit)\nend\n\ndef deserialize_point(binary)\n  binary.unpack('d3')  # => [x, y, z]\nend\n\n# \u1ee8ng d\u1ee5ng th\u1ef1c t\u1ebf: L\u01b0u tr\u1eef hi\u1ec7u qu\u1ea3 m\u1ea3ng l\u1edbn\ndef save_large_array(array, filename)\n  File.open(filename, 'wb') do |file|\n    # L\u01b0u k\xedch th\u01b0\u1edbc m\u1ea3ng\n    file.write([array.size].pack('N'))\n    \n    # L\u01b0u d\u1eef li\u1ec7u\n    file.write(array.pack('d*'))\n  end\nend\n\ndef load_large_array(filename)\n  File.open(filename, 'rb') do |file|\n    # \u0110\u1ecdc k\xedch th\u01b0\u1edbc m\u1ea3ng\n    size = file.read(4).unpack('N')[0]\n    \n    # \u0110\u1ecdc d\u1eef li\u1ec7u\n    file.read(size * 8).unpack('d*')\n  end\nend\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-bi\u1ec3u-di\u1ec5n-m\u1ea3ng-d\u01b0\u1edbi-d\u1ea1ng-bitset",children:"\ud83c\udfb2 Bi\u1ec3u Di\u1ec5n M\u1ea3ng D\u01b0\u1edbi D\u1ea1ng BitSet"}),"\n",(0,a.jsx)(e.p,{children:"S\u1eed d\u1ee5ng bi\u1ec3u di\u1ec5n bit \u0111\u1ec3 t\u1ed1i \u01b0u h\xf3a b\u1ed9 nh\u1edb cho c\xe1c t\u1eadp h\u1ee3p s\u1ed1 nguy\xean:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"class BitSet\n  def initialize(size)\n    @size = size\n    @bits = Array.new((size / 32.0).ceil, 0)\n  end\n  \n  def [](index)\n    return nil if index >= @size\n    \n    word_index = index / 32\n    bit_index = index % 32\n    \n    (@bits[word_index] & (1 << bit_index)) != 0\n  end\n  \n  def []=(index, value)\n    return nil if index >= @size\n    \n    word_index = index / 32\n    bit_index = index % 32\n    \n    if value\n      @bits[word_index] |= (1 << bit_index)\n    else\n      @bits[word_index] &= ~(1 << bit_index)\n    end\n  end\n  \n  def to_a\n    (0...@size).select { |i| self[i] }\n  end\n  \n  def union(other)\n    result = BitSet.new(@size)\n    @bits.each_with_index do |word, i|\n      result.instance_variable_get(:@bits)[i] = word | other.instance_variable_get(:@bits)[i]\n    end\n    result\n  end\n  \n  def intersection(other)\n    result = BitSet.new(@size)\n    @bits.each_with_index do |word, i|\n      result.instance_variable_get(:@bits)[i] = word & other.instance_variable_get(:@bits)[i]\n    end\n    result\n  end\nend\n\n# S\u1eed d\u1ee5ng BitSet \u0111\u1ec3 bi\u1ec3u di\u1ec5n t\u1eadp h\u1ee3p hi\u1ec7u qu\u1ea3\nmax_value = 1_000_000\nbitset = BitSet.new(max_value + 1)\n\n# \u0110\xe1nh d\u1ea5u c\xe1c s\u1ed1 nguy\xean t\u1ed1\nrequire 'prime'\nPrime.each(max_value) do |prime|\n  bitset[prime] = true\nend\n\n# Ki\u1ec3m tra s\u1ed1 nguy\xean t\u1ed1 nhanh ch\xf3ng\nbitset[997]  # => true\nbitset[998]  # => false\n\n# T\u1ea1o t\u1eadp h\u1ee3p c\xe1c s\u1ed1 nguy\xean t\u1ed1 trong kho\u1ea3ng\nprimes_under_100 = (0..100).select { |n| bitset[n] }\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-t\u1ea1o-m\u1ea3ng-n-chi\u1ec1u",children:"\ud83e\udde9 T\u1ea1o M\u1ea3ng N Chi\u1ec1u"}),"\n",(0,a.jsx)(e.p,{children:"T\u1ea1o v\xe0 l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng \u0111a chi\u1ec1u m\u1ed9t c\xe1ch linh ho\u1ea1t:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"class NDimensionalArray\n  def initialize(dimensions, default_value = nil, &block)\n    @dimensions = dimensions.dup\n    \n    if @dimensions.empty?\n      @data = default_value\n    else\n      current_dim = @dimensions.shift\n      @data = Array.new(current_dim) do |i|\n        if block_given?\n          NDimensionalArray.new(@dimensions.dup, default_value) { |*coords| block.call(i, *coords) }\n        else\n          NDimensionalArray.new(@dimensions.dup, default_value)\n        end\n      end\n    end\n  end\n  \n  def [](*indices)\n    return @data if indices.empty?\n    \n    current_index = indices.shift\n    if indices.empty?\n      @data[current_index]\n    else\n      @data[current_index][*indices]\n    end\n  end\n  \n  def []=(*indices, value)\n    if indices.size == 1\n      @data[indices[0]] = value\n    else\n      current_index = indices.shift\n      @data[current_index][*indices] = value\n    end\n  end\n  \n  def each(&block)\n    if @data.is_a?(Array)\n      @data.each_with_index do |subarray, i|\n        if subarray.is_a?(NDimensionalArray)\n          subarray.each_with_coords do |value, *coords|\n            yield value, i, *coords\n          end\n        else\n          yield subarray, i\n        end\n      end\n    else\n      yield @data\n    end\n  end\n  \n  def each_with_coords(&block)\n    if @data.is_a?(Array)\n      @data.each_with_index do |subarray, i|\n        if subarray.is_a?(NDimensionalArray)\n          subarray.each_with_coords do |value, *coords|\n            yield value, i, *coords\n          end\n        else\n          yield subarray, i\n        end\n      end\n    else\n      yield @data\n    end\n  end\n  \n  def to_a\n    if @data.is_a?(Array)\n      @data.map { |item| item.is_a?(NDimensionalArray) ? item.to_a : item }\n    else\n      @data\n    end\n  end\nend\n\n# T\u1ea1o ma tr\u1eadn 3x3\nmatrix = NDimensionalArray.new([3, 3], 0)\nmatrix[0, 0] = 1\nmatrix[1, 1] = 5\nmatrix[2, 2] = 9\n\n# T\u1ea1o tensor 3x3x3 v\u1edbi gi\xe1 tr\u1ecb l\xe0 t\u1ed5ng c\xe1c ch\u1ec9 s\u1ed1\ntensor = NDimensionalArray.new([3, 3, 3]) { |i, j, k| i + j + k }\n\n# Truy c\u1eadp gi\xe1 tr\u1ecb\ntensor[1, 2, 0]  # => 3 (1 + 2 + 0)\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-chu\u1ed7i-enumerator-t\xf9y-ch\u1ec9nh",children:"\ud83d\udd17 Chu\u1ed7i Enumerator T\xf9y Ch\u1ec9nh"}),"\n",(0,a.jsx)(e.p,{children:"T\u1ea1o v\xe0 k\u1ebft h\u1ee3p c\xe1c enumerator t\xf9y ch\u1ec9nh \u0111\u1ec3 x\u1eed l\xfd d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ruby",children:"module EnumeratorChaining\n  refine Enumerator do\n    def chain(other)\n      Enumerator.new do |yielder|\n        each { |value| yielder << value }\n        other.each { |value| yielder << value }\n      end\n    end\n    \n    def zip_with(other)\n      Enumerator.new do |yielder|\n        loop do\n          yielder << [self.next, other.next]\n        end\n      rescue StopIteration\n        nil\n      end\n    end\n    \n    def interleave(other)\n      Enumerator.new do |yielder|\n        loop do\n          yielder << self.next\n          yielder << other.next\n        end\n      rescue StopIteration\n        nil\n      end\n    end\n    \n    def batch(size)\n      Enumerator.new do |yielder|\n        buffer = []\n        \n        each do |item|\n          buffer << item\n          \n          if buffer.size >= size\n            yielder << buffer\n            buffer = []\n          end\n        end\n        \n        yielder << buffer unless buffer.empty?\n      end\n    end\n  end\nend\n\nusing EnumeratorChaining\n\n# K\u1ebft h\u1ee3p c\xe1c d\xe3y s\u1ed1\nfibonacci = Enumerator.new do |yielder|\n  a, b = 0, 1\n  loop do\n    yielder << a\n    a, b = b, a + b\n  end\nend\n\nsquares = Enumerator.new do |yielder|\n  n = 0\n  loop do\n    yielder << n * n\n    n += 1\n  end\nend\n\n# K\u1ebft h\u1ee3p hai d\xe3y s\u1ed1\ncombined = fibonacci.lazy.take(10).chain(squares.lazy.take(10))\ncombined.to_a  # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# Gh\xe9p c\u1eb7p c\xe1c ph\u1ea7n t\u1eed\npairs = fibonacci.lazy.take(10).zip_with(squares.lazy)\npairs.take(5).force  # => [[0, 0], [1, 1], [1, 4], [2, 9], [3, 16]]\n\n# Xen k\u1ebd c\xe1c ph\u1ea7n t\u1eed\ninterleaved = fibonacci.lazy.take(5).interleave(squares.lazy.take(5))\ninterleaved.to_a  # => [0, 0, 1, 1, 1, 4, 2, 9, 3, 16]\n\n# X\u1eed l\xfd theo l\xf4\nbatched = (1..10).each.batch(3)\nbatched.to_a  # => [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n"})}),"\n",(0,a.jsx)(e.h2,{id:"-k\u1ebft-lu\u1eadn",children:"\ud83c\udfaf K\u1ebft lu\u1eadn"}),"\n",(0,a.jsx)(e.p,{children:"Nh\u1eefng k\u1ef9 thu\u1eadt chuy\xean gia n\xe0y \u0111\u1ea1i di\u1ec7n cho tr\xecnh \u0111\u1ed9 cao nh\u1ea5t trong vi\u1ec7c l\xe0m vi\u1ec7c v\u1edbi m\u1ea3ng trong Ruby. Ch\xfang kh\xf4ng ch\u1ec9 gi\xfap b\u1ea1n vi\u1ebft code hi\u1ec7u qu\u1ea3 v\xe0 t\u1ed1i \u01b0u m\xe0 c\xf2n m\u1edf ra nh\u1eefng kh\u1ea3 n\u0103ng m\u1edbi trong vi\u1ec7c x\u1eed l\xfd d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p."}),"\n",(0,a.jsx)(e.p,{children:"H\xe3y nh\u1edb r\u1eb1ng, v\u1edbi s\u1ee9c m\u1ea1nh l\u1edbn \u0111i k\xe8m tr\xe1ch nhi\u1ec7m l\u1edbn. Nh\u1eefng k\u1ef9 thu\u1eadt n\xe0y r\u1ea5t m\u1ea1nh m\u1ebd nh\u01b0ng c\u0169ng c\xf3 th\u1ec3 l\xe0m cho code c\u1ee7a b\u1ea1n tr\u1edf n\xean kh\xf3 hi\u1ec3u n\u1ebfu s\u1eed d\u1ee5ng kh\xf4ng \u0111\xfang c\xe1ch. Lu\xf4n c\xe2n nh\u1eafc gi\u1eefa s\u1ef1 ph\u1ee9c t\u1ea1p v\xe0 t\xednh d\u1ec5 \u0111\u1ecdc c\u1ee7a code."}),"\n",(0,a.jsx)(e.p,{children:"B\u1ea1n \u0111\xe3 s\u1eb5n s\xe0ng tr\u1edf th\xe0nh b\u1eadc th\u1ea7y v\u1ec1 m\u1ea3ng trong Ruby ch\u01b0a? H\xe3y th\u1eed nghi\u1ec7m v\xe0 \xe1p d\u1ee5ng nh\u1eefng k\u1ef9 thu\u1eadt n\xe0y v\xe0o d\u1ef1 \xe1n c\u1ee7a b\u1ea1n!"}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:"B\u1ea1n c\xf3 k\u1ef9 thu\u1eadt x\u1eed l\xfd m\u1ea3ng n\xe2ng cao n\xe0o kh\xe1c mu\u1ed1n chia s\u1ebb? H\xe3y \u0111\u1ec3 l\u1ea1i b\xecnh lu\u1eadn b\xean d\u01b0\u1edbi nh\xe9!"})]})}function l(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}}}]);