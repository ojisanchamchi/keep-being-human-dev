"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70513],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(36672);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},81363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/regex/advanced/gsub_with_block","title":"gsub_with_block","description":"\ud83e\udde9 Transform Captures with gsub and Block","source":"@site/docs/ruby/regex/advanced/gsub_with_block.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/gsub_with_block","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/gsub_with_block","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/gsub_with_block.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"g_anchor_scanning","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/g_anchor_scanning"},"next":{"title":"lookaround_assertions","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/lookaround_assertions"}}');var a=t(23420),s=t(65404);const o={},c=void 0,d={},i=[{value:"\ud83e\udde9 Transform Captures with gsub and Block",id:"-transform-captures-with-gsub-and-block",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-transform-captures-with-gsub-and-block",children:"\ud83e\udde9 Transform Captures with gsub and Block"}),"\n",(0,a.jsxs)(n.p,{children:["Combine regex with ",(0,a.jsx)(n.code,{children:"String#gsub"})," blocks to process each match dynamically. Use named captures for clarity and apply custom logic in the block for powerful in-place transformations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"text = 'Order: #123, #456'\nresult = text.gsub(/#(?<id>\\d+)/) do\n  id = Regexp.last_match[:id].to_i\n  \"ORDER-#{format('%05d', id)}\"\nend\n#=> \"Order: ORDER-00123, ORDER-00456\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);