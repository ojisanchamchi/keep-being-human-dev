"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53599],{29970:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/ransack/middle/ransack_sort_pagination","title":"ransack_sort_pagination","description":"\u2195\ufe0f Combining Sorting and Pagination","source":"@site/docs/gems/ransack/middle/ransack_sort_pagination.md","sourceDirName":"gems/ransack/middle","slug":"/gems/ransack/middle/ransack_sort_pagination","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_sort_pagination","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/middle/ransack_sort_pagination.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ransack_group_or_conditions","permalink":"/keep-being-human-dev/docs/gems/ransack/middle/ransack_group_or_conditions"},"next":{"title":"redis_cluster_integration","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_cluster_integration"}}');var r=a(23420),s=a(65404);const i={},o=void 0,c={},d=[{value:"\u2195\ufe0f Combining Sorting and Pagination",id:"\ufe0f-combining-sorting-and-pagination",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-combining-sorting-and-pagination",children:"\u2195\ufe0f Combining Sorting and Pagination"}),"\n",(0,r.jsxs)(n.p,{children:["Integrating Ransack's ",(0,r.jsx)(n.code,{children:"sort_link"})," with pagination gems like Kaminari or WillPaginate helps maintain sort state across pages. Use ",(0,r.jsx)(n.code,{children:"sort_link"})," in table headers and pass ",(0,r.jsx)(n.code,{children:"params: request.query_parameters"})," to your pagination helper to preserve filter & sort params."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-erb",children:'<table>\n  <thead>\n    <tr>\n      <th><%= sort_link(@q, :name, "Name") %></th>\n      <th><%= sort_link(@q, :created_at, "Created At") %></th>\n    </tr>\n  </thead>\n  <tbody>\n    <% @users.each do |user| %>\n      <tr>\n        <td><%= user.name %></td>\n        <td><%= user.created_at.to_date %></td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n\n<%= paginate @users, params: request.query_parameters %>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# In controller\n@q = User.ransack(params[:q])\n@users = @q.result.order(:name).page(params[:page]).per(10)\n"})}),"\n",(0,r.jsx)(n.p,{children:"This approach ensures that when you click on a page link, your current search filters and sort order remain intact."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(36672);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);