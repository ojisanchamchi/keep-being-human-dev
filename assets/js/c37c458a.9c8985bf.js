"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32239],{24563:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/regex/expert/named_captures_with_transform","title":"named_captures_with_transform","description":"\ud83d\ude80 Leverage Named Captures for Structured Data","source":"@site/docs/ruby/regex/expert/named_captures_with_transform.md","sourceDirName":"ruby/regex/expert","slug":"/ruby/regex/expert/named_captures_with_transform","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/named_captures_with_transform","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/expert/named_captures_with_transform.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inline_toggle_modifiers","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/inline_toggle_modifiers"},"next":{"title":"recursive_regex_for_nested","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/recursive_regex_for_nested"}}');var a=t(23420),s=t(65404);const o={},u=void 0,c={},d=[{value:"\ud83d\ude80 Leverage Named Captures for Structured Data",id:"-leverage-named-captures-for-structured-data",level:2}];function i(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-leverage-named-captures-for-structured-data",children:"\ud83d\ude80 Leverage Named Captures for Structured Data"}),"\n",(0,a.jsx)(r.p,{children:"Use named capture groups to extract meaningful data directly into a hash. This approach makes regex matches self-documenting and avoids magic index references. You can even transform matches in one go by iterating through the named groups."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:'pattern = /^(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})$/\nif date_str = "2024-06-15".match(pattern)\n  result = date_str.named_captures.transform_keys(&:to_sym)\n  # => { year: "2024", month: "06", day: "15" }\nend\n'})}),"\n",(0,a.jsx)(r.p,{children:"You can further convert types:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"result.transform_values! { |v| v.to_i }\n# => { year: 2024, month: 6, day: 15 }\n"})})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>u});var n=t(36672);const a={},s=n.createContext(a);function o(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);