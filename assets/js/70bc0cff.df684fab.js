"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77084],{42979:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/fibers/middle/fiber_cooperative_scheduler","title":"fiber_cooperative_scheduler","description":"\u23ed\ufe0f Implementing a Simple Cooperative Scheduler","source":"@site/docs/ruby/fibers/middle/fiber_cooperative_scheduler.md","sourceDirName":"ruby/fibers/middle","slug":"/ruby/fibers/middle/fiber_cooperative_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_cooperative_scheduler","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/middle/fiber_cooperative_scheduler.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_basic_usage","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_basic_usage"},"next":{"title":"fiber_to_enumerator","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_to_enumerator"}}');var t=i(23420),s=i(65404);const a={},o=void 0,u={},d=[{value:"\u23ed\ufe0f Implementing a Simple Cooperative Scheduler",id:"\ufe0f-implementing-a-simple-cooperative-scheduler",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-implementing-a-simple-cooperative-scheduler",children:"\u23ed\ufe0f Implementing a Simple Cooperative Scheduler"}),"\n",(0,t.jsx)(n.p,{children:"You can build a basic scheduler by maintaining a queue of fibers and rotating through them. Each fiber yields control voluntarily, enabling cooperative multitasking within a single thread. This pattern is ideal for lightweight task switching without the overhead of threads."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nclass Scheduler\n  def initialize\n    @queue = []\n  end\n\n  def schedule(&block)\n    @queue << Fiber.new { block.call; Fiber.yield }\n  end\n\n  def run\n    until @queue.empty?\n      f = @queue.shift\n      f.resume\n      @queue << f unless f.alive?\n    end\n  end\nend\n\nsched = Scheduler.new\ntasks = [1,2,3]\ntasks.each do |i|\n  sched.schedule { puts \"Task #{i} running\" }\nend\nsched.run\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(36672);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);