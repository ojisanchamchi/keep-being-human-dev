"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5176],{9505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/set/middle/set_algebra_operations","title":"set_algebra_operations","description":"\ud83d\udd04 Perform Set Algebra Operations","source":"@site/docs/ruby/set/middle/set_algebra_operations.md","sourceDirName":"ruby/set/middle","slug":"/ruby/set/middle/set_algebra_operations","permalink":"/keep-being-human-dev/docs/ruby/set/middle/set_algebra_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/set/middle/set_algebra_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"initialize_and_modify_set","permalink":"/keep-being-human-dev/docs/ruby/set/middle/initialize_and_modify_set"},"next":{"title":"non_blocking_io_select","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/non_blocking_io_select"}}');var a=t(23420),s=t(65404);const o={},i=void 0,c={},d=[{value:"\ud83d\udd04 Perform Set Algebra Operations",id:"-perform-set-algebra-operations",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-perform-set-algebra-operations",children:"\ud83d\udd04 Perform Set Algebra Operations"}),"\n",(0,a.jsx)(n.p,{children:"Sets support classic algebraic operations\u2014union, intersection, difference, and symmetric difference\u2014both non-destructively and in-place. Use these to merge or compare collections cleanly."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'set'\n\na = Set.new([1, 2, 3])\nb = Set.new([3, 4, 5])\n\n# Non-mutating\na_union         = a | b   # => #<Set: {1, 2, 3, 4, 5}>\na_intersection  = a & b   # => #<Set: {3}>\na_difference    = a - b   # => #<Set: {1, 2}>\na_sym_diff      = a ^ b   # => #<Set: {1, 2, 4, 5}>\n\n# Mutating (in-place)\na.merge(b)        # a becomes union\nb.subtract([3])   # b removes 3\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(36672);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);