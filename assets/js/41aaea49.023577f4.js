"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52095],{53779:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips","title":"compare_algorithms_with_benchmark_ips","description":"\u26a1 Utilize benchmark-ips for Throughput Metrics","source":"@site/docs/ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips.md","sourceDirName":"ruby/benchmarking/advanced","slug":"/ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transpose_matrix","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/transpose_matrix"},"next":{"title":"customize_benchmark_suite_with_metrics","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics"}}');var a=t(23420),i=t(65404);const s={},o=void 0,c={},m=[{value:"\u26a1 Utilize <code>benchmark-ips</code> for Throughput Metrics",id:"-utilize-benchmark-ips-for-throughput-metrics",level:2}];function h(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.h2,{id:"-utilize-benchmark-ips-for-throughput-metrics",children:["\u26a1 Utilize ",(0,a.jsx)(r.code,{children:"benchmark-ips"})," for Throughput Metrics"]}),"\n",(0,a.jsxs)(r.p,{children:["When your goal is to measure iterations per second rather than elapsed time, ",(0,a.jsx)(r.code,{children:"benchmark-ips"})," gives a more stable view of throughput especially for fast operations. It automatically tunes the number of iterations to minimize noise and provides warmup and measurement phases by default."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"require 'benchmark/ips'\n\nBenchmark.ips do |x|\n  x.report('string concat')   { 'hello' + ' ' + 'world' }\n  x.report('string interpolate') { \"#{'hello'} #{'world'}\" }\n  x.compare!\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var n=t(36672);const a={},i=n.createContext(a);function s(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);