"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41705],{36056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"gems/webmock/advanced/custom_request_matchers_and_callbacks","title":"custom_request_matchers_and_callbacks","description":"\u2699\ufe0f Custom Request Matchers and Callbacks","source":"@site/docs/gems/webmock/advanced/custom_request_matchers_and_callbacks.md","sourceDirName":"gems/webmock/advanced","slug":"/gems/webmock/advanced/custom_request_matchers_and_callbacks","permalink":"/keep-being-human-dev/docs/gems/webmock/advanced/custom_request_matchers_and_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/advanced/custom_request_matchers_and_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_slots","permalink":"/keep-being-human-dev/docs/gems/view_component/middle/using_slots"},"next":{"title":"stub_dynamic_request_patterns","permalink":"/keep-being-human-dev/docs/gems/webmock/advanced/stub_dynamic_request_patterns"}}');var a=t(23420),o=t(65404);const c={},r=void 0,d={},u=[{value:"\u2699\ufe0f Custom Request Matchers and Callbacks",id:"\ufe0f-custom-request-matchers-and-callbacks",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-custom-request-matchers-and-callbacks",children:"\u2699\ufe0f Custom Request Matchers and Callbacks"}),"\n",(0,a.jsxs)(n.p,{children:["For complex scenarios, you can create custom matchers or use callback blocks in ",(0,a.jsx)(n.code,{children:"to_return"})," to inspect and manipulate requests or responses dynamically. This is ideal for testing conditional logic based on headers, bodies, or query params."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'webmock/rspec'\n\n# Custom matcher that checks for JSON API compliance\nWebMock::RequestRegistry.instance.register_global_stub do |request|\n  if request.uri.path == '/api/v2/resource' && request.headers['Content-Type'] =~ /application\\/json/\n    true\n  else\n    false\n  end\nend\n\nRSpec.describe \"Custom matcher with callback\" do\n  include WebMock::API\n\n  before do\n    stub_request(:post, 'https://api.example.com/api/v2/resource')\n      .with(headers: { 'Content-Type' => 'application/json' })\n      .to_return do |request|\n        payload = JSON.parse(request.body)\n        if payload['action'] == 'create'\n          { status: 201, body: { result: 'created' }.to_json }\n        else\n          { status: 400, body: { error: 'unsupported action' }.to_json }\n        end\n      end\n  end\n\n  it \"handles create actions\" do\n    response = Net::HTTP.post(\n      URI('https://api.example.com/api/v2/resource'),\n      { action: 'create' }.to_json,\n      'Content-Type' => 'application/json'\n    )\n\n    expect(response.code).to eq('201')\n    expect(JSON.parse(response.body)['result']).to eq('created')\n  end\n\n  it \"rejects unsupported actions\" do\n    response = Net::HTTP.post(\n      URI('https://api.example.com/api/v2/resource'),\n      { action: 'delete' }.to_json,\n      'Content-Type' => 'application/json'\n    )\n\n    expect(response.code).to eq('400')\n    expect(JSON.parse(response.body)['error']).to eq('unsupported action')\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var s=t(36672);const a={},o=s.createContext(a);function c(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);