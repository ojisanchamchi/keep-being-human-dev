"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79259],{64690:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/models/expert/sti_abstract_base","title":"sti_abstract_base","description":"\ud83c\udfd7\ufe0f Secure STI with an Abstract Base Class","source":"@site/docs/rails/models/expert/sti_abstract_base.md","sourceDirName":"rails/models/expert","slug":"/rails/models/expert/sti_abstract_base","permalink":"/keep-being-human-dev/docs/rails/models/expert/sti_abstract_base","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/expert/sti_abstract_base.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"partitioned_table_models","permalink":"/keep-being-human-dev/docs/rails/models/expert/partitioned_table_models"},"next":{"title":"rails_models_association_counter_cache","permalink":"/keep-being-human-dev/docs/rails/models/middle/rails_models_association_counter_cache"}}');var n=t(23420),r=t(65404);const c={},i=void 0,o={},l=[{value:"\ud83c\udfd7\ufe0f Secure STI with an Abstract Base Class",id:"\ufe0f-secure-sti-with-an-abstract-base-class",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"\ufe0f-secure-sti-with-an-abstract-base-class",children:"\ud83c\udfd7\ufe0f Secure STI with an Abstract Base Class"}),"\n",(0,n.jsx)(s.p,{children:"When using Single Table Inheritance (STI), declare your parent class as abstract to prevent instantiation and migrations confusion. It also allows you to share methods without polluting the child models unnecessarily."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"class Vehicle < ApplicationRecord\n  self.abstract_class = true\n  # shared logic\n  def start_engine\n    # implementation\n  end\nend\n\nclass Car < Vehicle; end\nclass Truck < Vehicle; end\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Migrations apply only once on ",(0,n.jsx)(s.code,{children:"vehicles"})," table, and you avoid accidental ",(0,n.jsx)(s.code,{children:"Vehicle.create"})," calls that can\u2019t be loaded into a concrete subclass."]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>i});var a=t(36672);const n={},r=a.createContext(n);function c(e){const s=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);