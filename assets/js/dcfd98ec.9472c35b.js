"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[91521],{33761:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"ruby/classes_and_modules/advanced/dynamic_delegators","title":"dynamic_delegators","description":"\ud83d\ude80 Generating Delegators Dynamically","source":"@site/docs/ruby/classes_and_modules/advanced/dynamic_delegators.md","sourceDirName":"ruby/classes_and_modules/advanced","slug":"/ruby/classes_and_modules/advanced/dynamic_delegators","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/dynamic_delegators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/advanced/dynamic_delegators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/dynamic_define_method"},"next":{"title":"eigenclass_methods","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/eigenclass_methods"}}');var s=a(23420),t=a(65404);const r={},o=void 0,c={},l=[{value:"\ud83d\ude80 Generating Delegators Dynamically",id:"-generating-delegators-dynamically",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-generating-delegators-dynamically",children:"\ud83d\ude80 Generating Delegators Dynamically"}),"\n",(0,s.jsxs)(n.p,{children:["You can DRY delegation by looping over methods and calling ",(0,s.jsx)(n.code,{children:"def_delegator"})," or ",(0,s.jsx)(n.code,{children:"def_delegators"})," at runtime."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'forwardable'\n\nclass Proxy\n  extend Forwardable\n  METHODS = %i[foo bar baz]\n\n  def initialize(target)\n    @target = target\n  end\n\n  METHODS.each do |meth|\n    def_delegator :@target, meth\n  end\nend\n\nclass Worker\n  def foo; 'foo'; end\n  def bar; 'bar'; end\n  def baz; 'baz'; end\nend\n\nproxy = Proxy.new(Worker.new)\nproxy.bar # => 'bar'\n"})}),"\n",(0,s.jsx)(n.p,{children:"This pattern keeps delegators in sync with your target\u2019s API."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var d=a(36672);const s={},t=d.createContext(s);function r(e){const n=d.useContext(t);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),d.createElement(t.Provider,{value:n},e.children)}}}]);