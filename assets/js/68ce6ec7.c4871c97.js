"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71980],{41743:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/csv/expert/csv_lazy_streaming","title":"csv_lazy_streaming","description":"\ud83d\udd04 Leveraging Lazy Streaming with CSV.open and Enumerator","source":"@site/docs/ruby/csv/expert/csv_lazy_streaming.md","sourceDirName":"ruby/csv/expert","slug":"/ruby/csv/expert/csv_lazy_streaming","permalink":"/keep-being-human-dev/docs/ruby/csv/expert/csv_lazy_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/csv/expert/csv_lazy_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"csv_write_file","permalink":"/keep-being-human-dev/docs/ruby/csv/beginner/csv_write_file"},"next":{"title":"csv_parallel_processing","permalink":"/keep-being-human-dev/docs/ruby/csv/expert/csv_parallel_processing"}}');var s=r(23420),a=r(65404);const o={},i=void 0,c={},l=[{value:"\ud83d\udd04 Leveraging Lazy Streaming with CSV.open and Enumerator",id:"-leveraging-lazy-streaming-with-csvopen-and-enumerator",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-leveraging-lazy-streaming-with-csvopen-and-enumerator",children:"\ud83d\udd04 Leveraging Lazy Streaming with CSV.open and Enumerator"}),"\n",(0,s.jsxs)(n.p,{children:["Maximize memory efficiency by processing CSV rows lazily. Use ",(0,s.jsx)(n.code,{children:"CSV.open"})," with an Enumerator to stream rows without loading the entire file. This approach lets you chain transformations with lazy enumerators and stop early if needed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'require \'csv\'\n\nstream = CSV.open("large.csv", headers: true, col_sep: ",", encoding: "bom|utf-8").lazy\n\nstream\n  .select { |row| row["status"] == "active" }\n  .map    { |row| row.to_h.transform_keys(&:downcase) }\n  .take(1000)\n  .each  { |row| process(row) }\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(36672);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);