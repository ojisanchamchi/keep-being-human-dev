"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63581],{23317:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>u,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/advanced/sequential_return_values","title":"sequential_return_values","description":"\ud83d\udd04 Stub Sequential Return Values for State-dependent Logic","source":"@site/docs/gems/rspec/mocks_and_stubs/advanced/sequential_return_values.md","sourceDirName":"gems/rspec/mocks_and_stubs/advanced","slug":"/gems/rspec/mocks_and_stubs/advanced/sequential_return_values","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/sequential_return_values","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/advanced/sequential_return_values.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"partial_spy_mocks","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/partial_spy_mocks"},"next":{"title":"stub_private_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/stub_private_methods"}}');var r=s(23420),a=s(65404);const u={},c=void 0,o={},i=[{value:"\ud83d\udd04 Stub Sequential Return Values for State-dependent Logic",id:"-stub-sequential-return-values-for-state-dependent-logic",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-stub-sequential-return-values-for-state-dependent-logic",children:"\ud83d\udd04 Stub Sequential Return Values for State-dependent Logic"}),"\n",(0,r.jsx)(t.p,{children:"When testing workflows that change return values over multiple calls, stub methods with ordered responses. This simulates state transitions or external service retries."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'retry_service = double("RetryService")\nallow(retry_service).to receive(:attempt).and_return(false, false, true)\n\nresults = 3.times.map { retry_service.attempt }\nexpect(results).to eq([false, false, true])\n'})}),"\n",(0,r.jsx)(t.p,{children:"Use this pattern for paginated APIs, exponential backoff tests, or multi-step processes."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>u,x:()=>c});var n=s(36672);const r={},a=n.createContext(r);function u(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:u(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);