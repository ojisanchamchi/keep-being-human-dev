"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32456],{17687:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/logging/expert/enhance_lograge_custom_payloads","title":"enhance_lograge_custom_payloads","description":"\ud83d\udcc8 Enhance Lograge with Custom Payloads and Append Ergonomics","source":"@site/docs/rails/logging/expert/enhance_lograge_custom_payloads.md","sourceDirName":"rails/logging/expert","slug":"/rails/logging/expert/enhance_lograge_custom_payloads","permalink":"/keep-being-human-dev/docs/rails/logging/expert/enhance_lograge_custom_payloads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/expert/enhance_lograge_custom_payloads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_active_support_logsubscriber","permalink":"/keep-being-human-dev/docs/rails/logging/expert/custom_active_support_logsubscriber"},"next":{"title":"implement_correlation_id_tracing","permalink":"/keep-being-human-dev/docs/rails/logging/expert/implement_correlation_id_tracing"}}');var r=o(23420),t=o(65404);const s={},i=void 0,c={},l=[{value:"\ud83d\udcc8 Enhance Lograge with Custom Payloads and Append Ergonomics",id:"-enhance-lograge-with-custom-payloads-and-append-ergonomics",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-enhance-lograge-with-custom-payloads-and-append-ergonomics",children:"\ud83d\udcc8 Enhance Lograge with Custom Payloads and Append Ergonomics"}),"\n",(0,r.jsxs)(n.p,{children:["Leverage Lograge to collapse Rails\u2019 multi-line logs into single JSON lines and enrich them with custom payloads (e.g., current_user.id, DB runtime). Define ",(0,r.jsx)(n.code,{children:"custom_options"})," and register appenders for external sinks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/lograge.rb\nRails.application.configure do\n  config.lograge.enabled = true\n  config.lograge.formatter = Lograge::Formatters::Json.new\n  config.lograge.custom_options = lambda do |event|\n    {\n      user_id: event.payload[:user_id],\n      db_runtime: event.payload[:db_runtime],\n      cache_hits: event.payload[:cache_hits]\n    }\n  end\n\n  config.lograge.logger = ActiveSupport::Logger.new('log/production_json.log')\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# in ApplicationController\nbefore_action do\n  request.payload[:user_id] = current_user&.id\nend\n"})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var a=o(36672);const r={},t=a.createContext(r);function s(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);