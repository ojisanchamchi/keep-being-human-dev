"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1717],{65404:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>i});var s=o(36672);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}},72521:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/symbols/beginner/symbol_as_method_identifier","title":"symbol_as_method_identifier","description":"\ud83d\udd11 Refer to Methods Dynamically with Symbols and send","source":"@site/docs/ruby/symbols/beginner/symbol_as_method_identifier.md","sourceDirName":"ruby/symbols/beginner","slug":"/ruby/symbols/beginner/symbol_as_method_identifier","permalink":"/keep-being-human-dev/docs/ruby/symbols/beginner/symbol_as_method_identifier","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/beginner/symbol_as_method_identifier.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_symbol_creation","permalink":"/keep-being-human-dev/docs/ruby/symbols/beginner/dynamic_symbol_creation"},"next":{"title":"symbol_vs_string","permalink":"/keep-being-human-dev/docs/ruby/symbols/beginner/symbol_vs_string"}}');var t=o(23420),r=o(65404);const d={},i=void 0,a={},l=[{value:"\ud83d\udd11 Refer to Methods Dynamically with Symbols and <code>send</code>",id:"-refer-to-methods-dynamically-with-symbols-and-send",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"-refer-to-methods-dynamically-with-symbols-and-send",children:["\ud83d\udd11 Refer to Methods Dynamically with Symbols and ",(0,t.jsx)(n.code,{children:"send"})]}),"\n",(0,t.jsx)(n.p,{children:"Symbols are commonly used to reference method names when calling them dynamically. This pattern keeps your code DRY and flexible."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class Greeter\n  def hello\n    "Hello, world!"\n  end\n  def goodbye\n    "Goodbye, world!"\n  end\nend\n\ng = Greeter.new\n[:hello, :goodbye].each do |method_name|\n  puts g.send(method_name)  # Dynamically calls hello and goodbye\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:["By passing method names as symbols to ",(0,t.jsx)(n.code,{children:"send"}),", you can loop through actions or callbacks without hardcoding each method call."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);