"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56669],{65404:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(36672);const d={},i=n.createContext(d);function r(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},88833:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"rails/testing/middle/dry_test_setup_let_subject","title":"dry_test_setup_let_subject","description":"\ud83c\udfad DRY Test Setup with let and subject","source":"@site/docs/rails/testing/middle/dry_test_setup_let_subject.md","sourceDirName":"rails/testing/middle","slug":"/rails/testing/middle/dry_test_setup_let_subject","permalink":"/keep-being-human-dev/docs/rails/testing/middle/dry_test_setup_let_subject","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/testing/middle/dry_test_setup_let_subject.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"activejob_test_adapter","permalink":"/keep-being-human-dev/docs/rails/testing/middle/activejob_test_adapter"},"next":{"title":"file_uploads_fixture","permalink":"/keep-being-human-dev/docs/rails/testing/middle/file_uploads_fixture"}}');var d=s(23420),i=s(65404);const r={},a=void 0,c={},o=[{value:"\ud83c\udfad DRY Test Setup with <code>let</code> and <code>subject</code>",id:"-dry-test-setup-with-let-and-subject",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(t.h2,{id:"-dry-test-setup-with-let-and-subject",children:["\ud83c\udfad DRY Test Setup with ",(0,d.jsx)(t.code,{children:"let"})," and ",(0,d.jsx)(t.code,{children:"subject"})]}),"\n",(0,d.jsxs)(t.p,{children:["Use ",(0,d.jsx)(t.code,{children:"let"})," to lazily define variables and ",(0,d.jsx)(t.code,{children:"subject"})," to declare the primary object under test. This keeps your setup DRY and focused only on what each example needs. Because ",(0,d.jsx)(t.code,{children:"let"})," is memoized per example, it helps avoid unexpected side effects between tests."]}),"\n",(0,d.jsx)(t.pre,{children:(0,d.jsx)(t.code,{className:"language-ruby",children:"# spec/models/user_spec.rb\ndescribe User, type: :model do\n  subject(:user) { build(:user, admin: is_admin) }\n  let(:is_admin) { true }\n\n  it 'is an admin if flagged' do\n    expect(user).to be_admin\n  end\n\n  context 'when not flagged' do\n    let(:is_admin) { false }\n\n    it 'is not an admin' do\n      expect(user).not_to be_admin\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,d.jsx)(t,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);