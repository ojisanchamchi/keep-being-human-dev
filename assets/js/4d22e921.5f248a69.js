"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[17082],{28774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>c,frontMatter:()=>d,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/threads/expert/thread_pool_with_sized_queue","title":"thread_pool_with_sized_queue","description":"\ud83d\udd27 Implement a Bounded Thread Pool with SizedQueue","source":"@site/docs/ruby/threads/expert/thread_pool_with_sized_queue.md","sourceDirName":"ruby/threads/expert","slug":"/ruby/threads/expert/thread_pool_with_sized_queue","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_pool_with_sized_queue","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/expert/thread_pool_with_sized_queue.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"barrier_synchronization_with_conditionvariable","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/barrier_synchronization_with_conditionvariable"},"next":{"title":"thread_safe_lru_cache_with_monitor","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_safe_lru_cache_with_monitor"}}');var r=t(23420),s=t(65404);const d={},i=void 0,a={},u=[{value:"\ud83d\udd27 Implement a Bounded Thread Pool with SizedQueue",id:"-implement-a-bounded-thread-pool-with-sizedqueue",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-implement-a-bounded-thread-pool-with-sizedqueue",children:"\ud83d\udd27 Implement a Bounded Thread Pool with SizedQueue"}),"\n",(0,r.jsxs)(n.p,{children:["To avoid unbounded thread growth under load and to propagate errors gracefully, combine ",(0,r.jsx)(n.code,{children:"SizedQueue"})," with a fixed worker set. Producers push jobs into the queue, workers pull and execute them, and you can signal shutdown by pushing special sentinel values."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'thread\'\n\nclass ThreadPool\n  def initialize(size, queue_size)\n    @jobs      = SizedQueue.new(queue_size)\n    @workers   = Array.new(size) do |i|\n      Thread.new do\n        loop do\n          job = @jobs.pop\n          break if job == :shutdown\n          begin\n            job.call\n          rescue => e\n            warn "Worker \\\\##{i} failed: #{e.message}"\n          end\n        end\n      end\n    end\n  end\n\n  def schedule(&block)\n    @jobs.push(block)\n  end\n\n  def shutdown\n    @workers.size.times { @jobs.push(:shutdown) }\n    @workers.each(&:join)\n  end\nend\n\n# Usage\npool = ThreadPool.new(5, 50)\n100.times { |i| pool.schedule { puts "Job #{i}" } }\npool.shutdown\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This setup enforces back-pressure (via ",(0,r.jsx)(n.code,{children:"SizedQueue"}),"), catches per-job exceptions, and cleanly joins all threads on shutdown."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>i});var o=t(36672);const r={},s=o.createContext(r);function d(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);