"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9013],{47549:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/middle/yielding_block_methods","title":"yielding_block_methods","description":"\ud83c\udf81 Stub methods that yield to blocks with and_yield","source":"@site/docs/gems/rspec/mocks_and_stubs/middle/yielding_block_methods.md","sourceDirName":"gems/rspec/mocks_and_stubs/middle","slug":"/gems/rspec/mocks_and_stubs/middle/yielding_block_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/yielding_block_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/middle/yielding_block_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_spies_for_assertions","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions"},"next":{"title":"metadata_filtered_shared_examples","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples"}}');var d=t(23420),o=t(65404);const i={},a=void 0,c={},l=[{value:"\ud83c\udf81 Stub methods that yield to blocks with <code>and_yield</code>",id:"-stub-methods-that-yield-to-blocks-with-and_yield",level:2}];function r(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(s.h2,{id:"-stub-methods-that-yield-to-blocks-with-and_yield",children:["\ud83c\udf81 Stub methods that yield to blocks with ",(0,d.jsx)(s.code,{children:"and_yield"})]}),"\n",(0,d.jsxs)(s.p,{children:["For methods that accept blocks (like iterators or callbacks), use ",(0,d.jsx)(s.code,{children:"and_yield"})," to simulate yielding values. You can chain multiple ",(0,d.jsx)(s.code,{children:"and_yield"})," calls to mock each iteration or callback invocation."]}),"\n",(0,d.jsx)(s.pre,{children:(0,d.jsx)(s.code,{className:"language-ruby",children:"RSpec.describe StreamProcessor do\n  it 'processes each line' do\n    stream = double('Stream')\n    allow(stream).to receive(:each).and_yield('line1').and_yield('line2')\n\n    lines = []\n    stream.each { |line| lines << line.upcase }\n\n    expect(lines).to eq(['LINE1', 'LINE2'])\n  end\nend\n"})})]})}function m(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,d.jsx)(s,{...e,children:(0,d.jsx)(r,{...e})}):r(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>a});var n=t(36672);const d={},o=n.createContext(d);function i(e){const s=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),n.createElement(o.Provider,{value:s},e.children)}}}]);