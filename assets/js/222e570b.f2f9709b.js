"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[49402],{56447:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"gems/sidekiq/middle/sidekiq_custom_retry","title":"sidekiq_custom_retry","description":"\ud83d\udd04 Customize Retry Strategies with sidekiqretryin","source":"@site/docs/gems/sidekiq/middle/sidekiq_custom_retry.md","sourceDirName":"gems/sidekiq/middle","slug":"/gems/sidekiq/middle/sidekiq_custom_retry","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_custom_retry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/middle/sidekiq_custom_retry.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sidekiq_custom_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_custom_middleware"},"next":{"title":"sidekiq_schedule_jobs","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_schedule_jobs"}}');var n=t(23420),r=t(65404);const d={},o=void 0,c={},a=[{value:"\ud83d\udd04 Customize Retry Strategies with sidekiq_retry_in",id:"-customize-retry-strategies-with-sidekiq_retry_in",level:2}];function u(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h2,{id:"-customize-retry-strategies-with-sidekiq_retry_in",children:"\ud83d\udd04 Customize Retry Strategies with sidekiq_retry_in"}),"\n",(0,n.jsxs)(i.p,{children:["By default Sidekiq uses an exponential backoff for retries, but you can override this per worker to suit business needs. Define a ",(0,n.jsx)(i.code,{children:"sidekiq_retry_in"})," block to control the delay for each retry attempt."]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-ruby",children:"class EmailWorker\n  include Sidekiq::Worker\n  sidekiq_options retry: 5  # maximum 5 retries\n\n  # Customize retry intervals (in seconds)\n  sidekiq_retry_in do |count|\n    case count\n    when 0 then 30     # 30s after first failure\n    when 1 then 5.minutes\n    when 2 then 30.minutes\n    else 1.hour * count\n    end\n  end\n\n  def perform(recipient_id)\n    # send email logic\n  end\nend\n"})})]})}function m(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},65404:(e,i,t)=>{t.d(i,{R:()=>d,x:()=>o});var s=t(36672);const n={},r=s.createContext(n);function d(e){const i=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);