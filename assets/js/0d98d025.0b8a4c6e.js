"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41711],{56316:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>p,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/compression/middle/file_compression_gzip","title":"file_compression_gzip","description":"\ud83d\udddc\ufe0f Compress and Decompress Files with Zlib::Gzip","source":"@site/docs/ruby/compression/middle/file_compression_gzip.md","sourceDirName":"ruby/compression/middle","slug":"/ruby/compression/middle/file_compression_gzip","permalink":"/keep-being-human-dev/docs/ruby/compression/middle/file_compression_gzip","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/compression/middle/file_compression_gzip.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_chunked_gzip_compression","permalink":"/keep-being-human-dev/docs/ruby/compression/expert/streaming_chunked_gzip_compression"},"next":{"title":"string_compression_deflate","permalink":"/keep-being-human-dev/docs/ruby/compression/middle/string_compression_deflate"}}');var r=i(23420),o=i(65404);const t={},p=void 0,d={},c=[{value:"\ud83d\udddc\ufe0f Compress and Decompress Files with Zlib::Gzip",id:"\ufe0f-compress-and-decompress-files-with-zlibgzip",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-compress-and-decompress-files-with-zlibgzip",children:"\ud83d\udddc\ufe0f Compress and Decompress Files with Zlib::Gzip"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\u2019s built\u2011in Zlib library makes it straightforward to gzip\u2011compress or decompress files without external dependencies. Use ",(0,r.jsx)(n.code,{children:"Zlib::GzipWriter"})," to wrap an IO object and write compressed data, and ",(0,r.jsx)(n.code,{children:"Zlib::GzipReader"})," to read it back. This streaming approach ensures you never load entire files into memory."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'zlib'\n\n# Compress input.txt into input.txt.gz\ndir_in  = 'input.txt'\ndir_out = 'input.txt.gz'\nZlib::GzipWriter.open(dir_out) do |gz|\n  File.open(dir_in, 'rb') do |fp|\n    while chunk = fp.read(16 * 1024) do\n      gz.write(chunk)\n    end\n  end\nend\n\n# Decompress input.txt.gz back into output.txt\nZlib::GzipReader.open(dir_out) do |gz|\n  File.open('output.txt', 'wb') do |fp|\n    while chunk = gz.read(16 * 1024) do\n      fp.write(chunk)\n    end\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>p});var s=i(36672);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);