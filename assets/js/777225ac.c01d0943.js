"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3705],{65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var t=a(36672);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},99934:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/symbols/advanced/symbol_pattern_matching","title":"symbol_pattern_matching","description":"\ud83c\udfaf Advanced Pattern Matching with Symbol Keys","source":"@site/docs/ruby/symbols/advanced/symbol_pattern_matching.md","sourceDirName":"ruby/symbols/advanced","slug":"/ruby/symbols/advanced/symbol_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_pattern_matching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/advanced/symbol_pattern_matching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_dynamic_memoization","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_dynamic_memoization"},"next":{"title":"symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_to_proc"}}');var s=a(23420),r=a(65404);const c={},o=void 0,i={},d=[{value:"\ud83c\udfaf Advanced Pattern Matching with Symbol Keys",id:"-advanced-pattern-matching-with-symbol-keys",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-advanced-pattern-matching-with-symbol-keys",children:"\ud83c\udfaf Advanced Pattern Matching with Symbol Keys"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby 2.7+ introduces structural pattern matching, with symbols frequently serving as hash keys in deconstructable data. Use concise ",(0,s.jsx)(n.code,{children:"case in"})," expressions to match nested hashes and arrays, extracting values into local variables with minimal ceremony."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'response = { status: :ok, data: { id: 42, name: "Alice" } }\n\ncase response\nin { status: :ok, data: { id:, name: } }\n  puts "User ##{id}: #{name}"\nin { status: :error, error: message }\n  warn "Error: #{message}"\nend\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can also match array payloads with symbol constants:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'message = [:update, :cache, { key: "user:1", value: user_data }]\n\ncase message\nin [:update, :cache, { key:, value: }]\n  update_cache(key, value)\nend\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);