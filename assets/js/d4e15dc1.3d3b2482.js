"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76178],{65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>d});var r=s(36672);const n={},c=r.createContext(n);function o(e){const t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(c.Provider,{value:t},e.children)}},92068:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/rspec/middle/rspec_contexts_subject.md","title":"rspec_contexts_subject.md","description":"\ud83d\udcc2 Organizing Tests with context and subject","source":"@site/docs/ruby/rspec/middle/rspec_contexts_subject.md.md","sourceDirName":"ruby/rspec/middle","slug":"/ruby/rspec/middle/rspec_contexts_subject.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_contexts_subject.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/middle/rspec_contexts_subject.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flaky_spec_auto_retry","permalink":"/keep-being-human-dev/docs/ruby/rspec/expert/flaky_spec_auto_retry"},"next":{"title":"rspec_custom_matchers.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_custom_matchers.md"}}');var n=s(23420),c=s(65404);const o={},d=void 0,i={},a=[{value:"\ud83d\udcc2 Organizing Tests with <code>context</code> and <code>subject</code>",id:"-organizing-tests-with-context-and-subject",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h2,{id:"-organizing-tests-with-context-and-subject",children:["\ud83d\udcc2 Organizing Tests with ",(0,n.jsx)(t.code,{children:"context"})," and ",(0,n.jsx)(t.code,{children:"subject"})]}),"\n",(0,n.jsxs)(t.p,{children:["Use ",(0,n.jsx)(t.code,{children:"context"})," blocks to group scenarios by state or input, and declare a ",(0,n.jsx)(t.code,{children:"subject"})," for the primary object under test. This makes examples more declarative and eliminates repetition. Override ",(0,n.jsx)(t.code,{children:"subject"})," or let-bound attributes in nested contexts to customize behavior without duplicating setup."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:'describe OrderProcessor do\n  subject(:processor) { described_class.new(order) }\n  let(:order) { build(:order) }\n\n  context "when order is valid" do\n    it "processes successfully" do\n      expect(processor.process).to be_truthy\n    end\n  end\n\n  context "when payment fails" do\n    before { allow(order).to receive(:pay!).and_raise(PaymentError) }\n\n    it "raises an error" do\n      expect { processor.process }.to raise_error(PaymentError)\n    end\n  end\nend\n'})})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);