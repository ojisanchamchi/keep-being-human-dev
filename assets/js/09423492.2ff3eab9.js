"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1192],{33366:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"gems/sidekiq/advanced/rate_limiting_concurrency","title":"rate_limiting_concurrency","description":"\ud83c\udf9b\ufe0f Rate Limiting and Concurrency Controls","source":"@site/docs/gems/sidekiq/advanced/rate_limiting_concurrency.md","sourceDirName":"gems/sidekiq/advanced","slug":"/gems/sidekiq/advanced/rate_limiting_concurrency","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/rate_limiting_concurrency","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/advanced/rate_limiting_concurrency.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_server_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/custom_server_middleware"},"next":{"title":"unique_job_locking","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/unique_job_locking"}}');var t=r(23420),c=r(65404);const s={},o=void 0,a={},d=[{value:"\ud83c\udf9b\ufe0f Rate Limiting and Concurrency Controls",id:"\ufe0f-rate-limiting-and-concurrency-controls",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-rate-limiting-and-concurrency-controls",children:"\ud83c\udf9b\ufe0f Rate Limiting and Concurrency Controls"}),"\n",(0,t.jsxs)(n.p,{children:["Prevent API throttling or DB overload by applying rate limits or concurrency constraints using the ",(0,t.jsx)(n.code,{children:"sidekiq-throttled"})," gem. You can set custom limits per worker, ensuring jobs adhere to external service quotas."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'sidekiq-throttled'\n\n# app/workers/email_worker.rb\nclass EmailWorker\n  include Sidekiq::Worker\n  include Sidekiq::Throttled::Worker\n\n  # Allow 50 emails per minute, max 5 at a time\n  sidekiq_throttle(\n    concurrency: { limit: 5 },\n    threshold:   { limit: 50, period: 1.minute }\n  )\n\n  def perform(user_id)\n    user = User.find(user_id)\n    EmailService.send_newsletter(user.email)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(36672);const t={},c=i.createContext(t);function s(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);