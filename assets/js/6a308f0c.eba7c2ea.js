"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41068],{15457:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/fibers/middle/fiber_to_enumerator","title":"fiber_to_enumerator","description":"\ud83d\udd17 Converting a Fiber into an Enumerator","source":"@site/docs/ruby/fibers/middle/fiber_to_enumerator.md","sourceDirName":"ruby/fibers/middle","slug":"/ruby/fibers/middle/fiber_to_enumerator","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_to_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/middle/fiber_to_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_cooperative_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_cooperative_scheduler"},"next":{"title":"atomic_file_write","permalink":"/keep-being-human-dev/docs/ruby/file_io/advanced/atomic_file_write"}}');var i=n(23420),o=n(65404);const a={},s=void 0,u={},d=[{value:"\ud83d\udd17 Converting a Fiber into an Enumerator",id:"-converting-a-fiber-into-an-enumerator",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"-converting-a-fiber-into-an-enumerator",children:"\ud83d\udd17 Converting a Fiber into an Enumerator"}),"\n",(0,i.jsxs)(r.p,{children:["Ruby\u2019s ",(0,i.jsx)(r.code,{children:"Enumerator::Producer"})," can wrap a fiber to produce an external iterator. This technique lets you expose fiber logic via the familiar ",(0,i.jsx)(r.code,{children:"each"})," or ",(0,i.jsx)(r.code,{children:"next"})," interface, integrating seamlessly with Ruby\u2019s enumerable methods."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"require 'enumerator'\n\nenum = Enumerator.new do |yielder|\n  fiber = Fiber.new do\n    3.times do |i|\n      yielder << i * i\n    end\n  end\n  fiber.resume until fiber.alive? == false\nend\n\nenum.each do |value|\n  puts \"Value: #{value}\"  # Outputs 0, 1, 4\nend\n"})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(36672);const i={},o=t.createContext(i);function a(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);