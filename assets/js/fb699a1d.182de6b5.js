"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58133],{65404:(e,a,o)=>{o.d(a,{R:()=>t,x:()=>d});var r=o(36672);const n={},c=r.createContext(n);function t(e){const a=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),r.createElement(c.Provider,{value:a},e.children)}},80365:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/proc_lambda_conversion","title":"proc_lambda_conversion","description":"\ud83d\udd01 Convert Proc to Lambda and Vice Versa","source":"@site/docs/ruby/procs_and_lambdas/middle/proc_lambda_conversion.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/proc_lambda_conversion","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/proc_lambda_conversion","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/proc_lambda_conversion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proc_callback","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/proc_callback"},"next":{"title":"perftools_flamegraph_generation","permalink":"/keep-being-human-dev/docs/ruby/profiling/advanced/perftools_flamegraph_generation"}}');var n=o(23420),c=o(65404);const t={},d=void 0,s={},l=[{value:"\ud83d\udd01 Convert Proc to Lambda and Vice Versa",id:"-convert-proc-to-lambda-and-vice-versa",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"-convert-proc-to-lambda-and-vice-versa",children:"\ud83d\udd01 Convert Proc to Lambda and Vice Versa"}),"\n",(0,n.jsxs)(a.p,{children:["You can wrap a Proc into a lambda to enforce arity or convert a lambda into a Proc when you need loose argument behavior. This allows you to adapt preexisting code without duplication. Use ",(0,n.jsx)(a.code,{children:"Kernel#lambda"})," or ",(0,n.jsx)(a.code,{children:"Proc#to_proc"})," conversion techniques."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:"base_proc = Proc.new { |x, y| x * y }\nlambda_from_proc = lambda(&base_proc)\n\nputs lambda_from_proc.call(2,3)      # 6\n# lambda_from_proc.call(2)          # ArgumentError\n\norig_lambda = ->(a){ a ** 2 }\nproc_from_lambda = Proc.new(&orig_lambda)\nputs proc_from_lambda.call         # 0 (nil.to_i squared)\n"})})]})}function m(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}}}]);