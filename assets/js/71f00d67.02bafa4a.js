"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20300],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var a=r(36672);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}},94012:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"rails/helpers/advanced/render_partials_from_helpers","title":"render_partials_from_helpers","description":"\ud83d\udd04 Rendering Partials with Dynamic Locals from Helpers","source":"@site/docs/rails/helpers/advanced/render_partials_from_helpers.md","sourceDirName":"rails/helpers/advanced","slug":"/rails/helpers/advanced/render_partials_from_helpers","permalink":"/keep-being-human-dev/docs/rails/helpers/advanced/render_partials_from_helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/helpers/advanced/render_partials_from_helpers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"injecting_helpers_into_mailers","permalink":"/keep-being-human-dev/docs/rails/helpers/advanced/injecting_helpers_into_mailers"},"next":{"title":"rails_helper_content_tag","permalink":"/keep-being-human-dev/docs/rails/helpers/beginner/rails_helper_content_tag"}}');var t=r(23420),s=r(65404);const i={},l=void 0,o={},c=[{value:"\ud83d\udd04 Rendering Partials with Dynamic Locals from Helpers",id:"-rendering-partials-with-dynamic-locals-from-helpers",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-rendering-partials-with-dynamic-locals-from-helpers",children:"\ud83d\udd04 Rendering Partials with Dynamic Locals from Helpers"}),"\n",(0,t.jsxs)(n.p,{children:["Invoke ",(0,t.jsx)(n.code,{children:"render"})," directly in a helper to consolidate repeated partial logic. Pass in collections, locals, or dynamic partial paths to keep views DRY and maintainable."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/helpers/comments_helper.rb\nmodule CommentsHelper\n  def comment_list(comments)\n    render partial: 'comments/comment', collection: comments, as: :comment\n  end\n\n  def dynamic_comment_view(comment, view_name)\n    partial = \"comments/#{view_name}\"\n    render partial: partial, locals: { comment: comment }\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);