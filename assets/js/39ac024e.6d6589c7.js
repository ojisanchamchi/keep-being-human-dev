"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22856],{65404:(e,t,n)=>{n.d(t,{R:()=>u,x:()=>s});var c=n(36672);const o={},r=c.createContext(o);function u(e){const t=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:u(e.components),c.createElement(r.Provider,{value:t},e.children)}},95068:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>u,metadata:()=>c,toc:()=>i});const c=JSON.parse('{"id":"gems/counter_culture/expert/batch_async_counter_updates","title":"batch_async_counter_updates","description":"\ud83d\udd04 Using Batch Asynchronous Counter Updates with Sidekiq","source":"@site/docs/gems/counter_culture/expert/batch_async_counter_updates.md","sourceDirName":"gems/counter_culture/expert","slug":"/gems/counter_culture/expert/batch_async_counter_updates","permalink":"/keep-being-human-dev/docs/gems/counter_culture/expert/batch_async_counter_updates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/expert/batch_async_counter_updates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"counter_culture_setup","permalink":"/keep-being-human-dev/docs/gems/counter_culture/beginner/counter_culture_setup"},"next":{"title":"multi_level_association_caching","permalink":"/keep-being-human-dev/docs/gems/counter_culture/expert/multi_level_association_caching"}}');var o=n(23420),r=n(65404);const u={},s=void 0,a={},i=[{value:"\ud83d\udd04 Using Batch Asynchronous Counter Updates with Sidekiq",id:"-using-batch-asynchronous-counter-updates-with-sidekiq",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-using-batch-asynchronous-counter-updates-with-sidekiq",children:"\ud83d\udd04 Using Batch Asynchronous Counter Updates with Sidekiq"}),"\n",(0,o.jsxs)(t.p,{children:["When you have high write volume, synchronous counter updates can become a bottleneck. CounterCulture\u2019s ",(0,o.jsx)(t.code,{children:"async: true"})," mode lets you push counter adjustments into a background queue, batching multiple increments into a single DB write for each owner. This reduces lock contention and speeds up your user-facing requests."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\n\n  counter_culture :post,\n    column_name: proc { |model| model.approved? ? 'approved_comments_count' : nil },\n    delta_column: \"approved? ? 1 : 0\",\n    touch: true,\n    async: ->(callback) { CounterCultureJob.perform_later(callback) }\nend\n\n# app/jobs/counter_culture_job.rb\nclass CounterCultureJob < ApplicationJob\n  queue_as :counter_culture\n\n  def perform(callback)\n    CounterCulture::Counter.new.call(callback)\n  end\nend\n"})}),"\n",(0,o.jsxs)(t.p,{children:["By overriding the default job, you can wrap multiple callbacks in a single Sidekiq batch or customize retries. Combine this with ",(0,o.jsx)(t.code,{children:"CounterCulture::BackgroundJob.batch_size"})," to tune how many operations get grouped per batch."]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);