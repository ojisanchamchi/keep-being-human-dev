"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35787],{65404:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>i});var n=t(36672);const o={},r=n.createContext(o);function s(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(r.Provider,{value:a},e.children)}},68123:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/layouts/advanced/layout_variants_by_format","title":"layout_variants_by_format","description":"\ud83c\udfad Layout Variants by Format","source":"@site/docs/rails/layouts/advanced/layout_variants_by_format.md","sourceDirName":"rails/layouts/advanced","slug":"/rails/layouts/advanced/layout_variants_by_format","permalink":"/keep-being-human-dev/docs/rails/layouts/advanced/layout_variants_by_format","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/layouts/advanced/layout_variants_by_format.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"engine_isolated_layouts","permalink":"/keep-being-human-dev/docs/rails/layouts/advanced/engine_isolated_layouts"},"next":{"title":"nested_layouts_with_content_for","permalink":"/keep-being-human-dev/docs/rails/layouts/advanced/nested_layouts_with_content_for"}}');var o=t(23420),r=t(65404);const s={},i=void 0,l={},c=[{value:"\ud83c\udfad Layout Variants by Format",id:"-layout-variants-by-format",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.h2,{id:"-layout-variants-by-format",children:"\ud83c\udfad Layout Variants by Format"}),"\n",(0,o.jsxs)(a.p,{children:["Use view variants to automatically switch layouts based on format (e.g., ",(0,o.jsx)(a.code,{children:":amp"}),", ",(0,o.jsx)(a.code,{children:":turbo_stream"}),"). Define variant-specific layouts by naming conventions and set ",(0,o.jsx)(a.code,{children:"request.variant"})," in a middleware or controller."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-ruby",children:"# app/controllers/application_controller.rb\nbefore_action do\n  request.variant = :amp if params[:amp] == '1'\nend\n"})}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-erb",children:"\x3c!-- app/views/layouts/application.html+amp.html.erb --\x3e\n<!DOCTYPE html><html><body>\n  \x3c!-- AMP-optimized header --\x3e\n  <%= yield %>\n</body></html>\n"})}),"\n",(0,o.jsxs)(a.p,{children:["Rails will pick ",(0,o.jsx)(a.code,{children:"application.html+amp"})," for AMP requests, falling back to ",(0,o.jsx)(a.code,{children:"application.html.erb"})," otherwise. This keeps your code DRY and format-aware."]})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);