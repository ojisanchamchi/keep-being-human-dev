"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24546],{20710:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"sql/general/expert/recursive_cte_hierarchies","title":"recursive_cte_hierarchies","description":"\ud83d\udd01 Recursive CTE for Hierarchical Data","source":"@site/docs/sql/general/expert/recursive_cte_hierarchies.md","sourceDirName":"sql/general/expert","slug":"/sql/general/expert/recursive_cte_hierarchies","permalink":"/keep-being-human-dev/docs/sql/general/expert/recursive_cte_hierarchies","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/general/expert/recursive_cte_hierarchies.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pivot_unpivot","permalink":"/keep-being-human-dev/docs/sql/general/expert/pivot_unpivot"},"next":{"title":"row_level_security","permalink":"/keep-being-human-dev/docs/sql/general/expert/row_level_security"}}');var i=t(23420),a=t(65404);const s={},c=void 0,o={},l=[{value:"\ud83d\udd01 Recursive CTE for Hierarchical Data",id:"-recursive-cte-for-hierarchical-data",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"-recursive-cte-for-hierarchical-data",children:"\ud83d\udd01 Recursive CTE for Hierarchical Data"}),"\n",(0,i.jsx)(r.p,{children:"Leverage recursive Common Table Expressions (CTEs) to traverse tree-like hierarchies in a single query. This approach avoids multiple round-trips and scales with data depth dynamically."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-sql",children:"WITH RECURSIVE org_tree AS (\n  SELECT id, parent_id, name, 1 AS level\n  FROM organization\n  WHERE parent_id IS NULL\n  UNION ALL\n  SELECT o.id, o.parent_id, o.name, t.level + 1\n  FROM organization o\n  JOIN org_tree t ON o.parent_id = t.id\n)\nSELECT *\nFROM org_tree\nORDER BY level, parent_id;\n"})}),"\n",(0,i.jsxs)(r.p,{children:["This returns the entire organizational chart with levels. Add ",(0,i.jsx)(r.code,{children:"PATH"})," concatenation in the CTE for full lineage strings."]})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>c});var n=t(36672);const i={},a=n.createContext(i);function s(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);