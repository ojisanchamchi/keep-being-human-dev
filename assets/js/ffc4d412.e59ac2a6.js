"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90920],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var a=n(36672);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},65827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"ruby/enumerables/middle/each_with_object_hash_building","title":"each_with_object_hash_building","description":"\ud83d\udd27 Build Hashes with eachwithobject","source":"@site/docs/ruby/enumerables/middle/each_with_object_hash_building.md","sourceDirName":"ruby/enumerables/middle","slug":"/ruby/enumerables/middle/each_with_object_hash_building","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/each_with_object_hash_building","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/middle/each_with_object_hash_building.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"merge_infinite_streams","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/merge_infinite_streams"},"next":{"title":"flat_map_group_by_transform","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/flat_map_group_by_transform"}}');var i=n(23420),s=n(65404);const r={},c=void 0,o={},u=[{value:"\ud83d\udd27 Build Hashes with each_with_object",id:"-build-hashes-with-each_with_object",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-build-hashes-with-each_with_object",children:"\ud83d\udd27 Build Hashes with each_with_object"}),"\n",(0,i.jsxs)(t.p,{children:["When you need to accumulate results into a custom structure like a hash or array, ",(0,i.jsx)(t.code,{children:"each_with_object"})," is more concise than initializing externally. You pass an initial object and mutate it within the block, returning the same object at the end."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"languages = ['ruby', 'rails', 'java', 'ruby']\ncounts = languages.each_with_object(Hash.new(0)) do |lang, acc|\n  acc[lang] += 1\nend\n# => {\"ruby\"=>2, \"rails\"=>1, \"java\"=>1}\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);