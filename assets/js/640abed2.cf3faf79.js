"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[60369],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var o=t(36672);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},79443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/methods/beginner/using_blocks","title":"using_blocks","description":"\ud83d\udd04 Yielding to Blocks","source":"@site/docs/ruby/methods/beginner/using_blocks.md","sourceDirName":"ruby/methods/beginner","slug":"/ruby/methods/beginner/using_blocks","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/using_blocks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/beginner/using_blocks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"splat_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/splat_arguments"},"next":{"title":"currying_partial_application","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/currying_partial_application"}}');var s=t(23420),i=t(65404);const r={},c=void 0,l={},a=[{value:"\ud83d\udd04 Yielding to Blocks",id:"-yielding-to-blocks",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-yielding-to-blocks",children:"\ud83d\udd04 Yielding to Blocks"}),"\n",(0,s.jsxs)(n.p,{children:["Methods can accept blocks, allowing you to pass chunks of code. Use ",(0,s.jsx)(n.code,{children:"yield"})," inside the method to invoke the block, making your method more flexible."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'def repeat(times)\n  times.times { yield }\nend\n\nrepeat(3) { puts "Hello!" }\n# Output:\n# Hello!\n# Hello!\n# Hello!\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);