"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2930],{65404:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>c});var t=n(36672);const a={},r=t.createContext(a);function i(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:s},e.children)}},96746:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"sql/sqlite/advanced/recursive_ctes","title":"recursive_ctes","description":"\ud83d\udd04 Use Recursive Common Table Expressions (CTEs)","source":"@site/docs/sql/sqlite/advanced/recursive_ctes.md","sourceDirName":"sql/sqlite/advanced","slug":"/sql/sqlite/advanced/recursive_ctes","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/recursive_ctes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/sqlite/advanced/recursive_ctes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pragma_performance_tuning","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/pragma_performance_tuning"},"next":{"title":"rtree_spatial_indexing","permalink":"/keep-being-human-dev/docs/sql/sqlite/advanced/rtree_spatial_indexing"}}');var a=n(23420),r=n(65404);const i={},c=void 0,o={},l=[{value:"\ud83d\udd04 Use Recursive Common Table Expressions (CTEs)",id:"-use-recursive-common-table-expressions-ctes",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"-use-recursive-common-table-expressions-ctes",children:"\ud83d\udd04 Use Recursive Common Table Expressions (CTEs)"}),"\n",(0,a.jsx)(s.p,{children:"Recursive CTEs let you traverse hierarchical data (e.g., organizational charts, folder trees) without client-side loops. Define a base case and a recursive union, and SQLite will iterate until no new rows appear. This technique offloads recursion to the database for cleaner SQL."}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-sql",children:"-- Define a table of employees with manager relationships\nWITH RECURSIVE team(id, manager_id, level) AS (\n  SELECT id, manager_id, 0 FROM employees WHERE id = 1  -- CEO\n  UNION ALL\n  SELECT e.id, e.manager_id, t.level + 1\n  FROM employees e\n  JOIN team t ON e.manager_id = t.id\n)\nSELECT * FROM team ORDER BY level;\n"})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);