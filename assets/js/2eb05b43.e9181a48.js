"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[37408],{33233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/sockets/middle/socket_select_multiplex","title":"socket_select_multiplex","description":"\u2699\ufe0f Handling Multiple Sockets with select","source":"@site/docs/ruby/sockets/middle/socket_select_multiplex.md","sourceDirName":"ruby/sockets/middle","slug":"/ruby/sockets/middle/socket_select_multiplex","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/socket_select_multiplex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/middle/socket_select_multiplex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"zero_copy_sendfile","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/zero_copy_sendfile"},"next":{"title":"tcp_client_basic","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/tcp_client_basic"}}');var c=n(23420),o=n(65404);const i={},l=void 0,r={},d=[{value:"\u2699\ufe0f Handling Multiple Sockets with <code>select</code>",id:"\ufe0f-handling-multiple-sockets-with-select",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h2,{id:"\ufe0f-handling-multiple-sockets-with-select",children:["\u2699\ufe0f Handling Multiple Sockets with ",(0,c.jsx)(t.code,{children:"select"})]}),"\n",(0,c.jsxs)(t.p,{children:["When your server needs to manage multiple clients without blocking, Ruby\u2019s ",(0,c.jsx)(t.code,{children:"IO.select"})," is your friend. This example demonstrates how to wait on multiple sockets (server + clients) and only read from sockets ready for I/O."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:'require \'socket\'\n\nserver = TCPServer.new(4000)\nclients = []\n\nloop do\n  # Build the list: server + all connected clients\n  ready = IO.select([server] + clients)\n\n  ready[0].each do |io|\n    if io == server\n      client = server.accept\n      clients << client\n      puts "New client connected"\n    else\n      data = io.gets\n      if data\n        io.puts "Echo: #{data.chomp}"\n      else\n        puts "Client disconnected"\n        clients.delete(io)\n        io.close\n      end\n    end\n  end\nend\n'})}),"\n",(0,c.jsx)(t.p,{children:"This approach avoids one thread per connection, improves scalability, and keeps resource usage low."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var s=n(36672);const c={},o=s.createContext(c);function i(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);