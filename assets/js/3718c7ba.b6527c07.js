"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33591],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(36672);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},98984:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/routing/expert/dynamic_route_macros","title":"dynamic_route_macros","description":"\u2728 DRY Route Macros with Metaprogramming","source":"@site/docs/rails/routing/expert/dynamic_route_macros.md","sourceDirName":"rails/routing/expert","slug":"/rails/routing/expert/dynamic_route_macros","permalink":"/keep-being-human-dev/docs/rails/routing/expert/dynamic_route_macros","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/routing/expert/dynamic_route_macros.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_db_driven_routes","permalink":"/keep-being-human-dev/docs/rails/routing/expert/dynamic_db_driven_routes"},"next":{"title":"localized_routes_i18n","permalink":"/keep-being-human-dev/docs/rails/routing/expert/localized_routes_i18n"}}');var o=r(23420),s=r(65404);const i={},a=void 0,c={},d=[{value:"\u2728 DRY Route Macros with Metaprogramming",id:"-dry-route-macros-with-metaprogramming",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-dry-route-macros-with-metaprogramming",children:"\u2728 DRY Route Macros with Metaprogramming"}),"\n",(0,o.jsxs)(n.p,{children:["For large APIs or admin panels with repeated patterns (e.g., versioned namespaces or nested admin resources), define your own route macros to keep ",(0,o.jsx)(n.code,{children:"routes.rb"})," clean and DRY. You can extend the ",(0,o.jsx)(n.code,{children:"ActionDispatch::Routing::Mapper"})," to add custom methods, injecting common scopes, constraints, or defaults."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# config/initializers/route_macros.rb\nmodule ActionDispatch::Routing\n  class Mapper\n    def versioned_api(version, **options)\n      namespace :api do\n        namespace "v#{version}" do\n          constraints ApiVersionConstraint.new(version: version, default: options[:default]) do\n            yield\n          end\n        end\n      end\n    end\n  end\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  versioned_api(1, default: true) do\n    resources :posts\n  end\n\n  versioned_api(2) do\n    resources :posts, only: [:index, :show]\n  end\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);