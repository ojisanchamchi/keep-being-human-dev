"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88284],{55814:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gems/rspec/advanced/custom_matcher_chainable","title":"custom_matcher_chainable","description":"\ud83d\udee0\ufe0f Custom Matcher with Chainable Methods","source":"@site/docs/gems/rspec/advanced/custom_matcher_chainable.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/custom_matcher_chainable","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/custom_matcher_chainable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/custom_matcher_chainable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"composite_matcher_operators","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/composite_matcher_operators"},"next":{"title":"filtering_by_custom_tags","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/filtering_by_custom_tags"}}');var n=t(23420),c=t(65404);const r={},o=void 0,i={},d=[{value:"\ud83d\udee0\ufe0f Custom Matcher with Chainable Methods",id:"\ufe0f-custom-matcher-with-chainable-methods",level:2}];function m(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"\ufe0f-custom-matcher-with-chainable-methods",children:"\ud83d\udee0\ufe0f Custom Matcher with Chainable Methods"}),"\n",(0,n.jsx)(s.p,{children:"RSpec\u2019s custom matchers let you encapsulate complex comparison logic and share it across examples. By defining chainable methods, you can build versatile matchers that adjust behavior based on chained parameters. This pattern keeps specs readable and DRY when you need nuanced assertions."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"# spec/support/matchers/validate_json_schema.rb\nRSpec::Matchers.define :validate_json_schema do |schema|\n  match do |json|\n    JSON::Validator.valid?(schema, json)\n  end\n  chain :with_errors do |errors|\n    @expected_errors = errors\n  end\n  failure_message do |json|\n    \"expected \\\\#{json} to match \\\\#{schema}, got errors: \\\\#{@expected_errors.inspect}\"\n  end\nend\n\n# Usage in spec\nexpect(response.body).to validate_json_schema('user_schema.json').with_errors(['id is missing'])\n"})})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>o});var a=t(36672);const n={},c=a.createContext(n);function r(e){const s=a.useContext(c);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),a.createElement(c.Provider,{value:s},e.children)}}}]);