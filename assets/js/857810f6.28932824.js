"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23748],{65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var r=s(36672);const n={},a=r.createContext(n);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),r.createElement(a.Provider,{value:t},e.children)}},83557:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"gems/webmock/middle/match_requests_by_headers","title":"match_requests_by_headers","description":"\ud83d\udee1 Match Requests by Headers","source":"@site/docs/gems/webmock/middle/match_requests_by_headers.md","sourceDirName":"gems/webmock/middle","slug":"/gems/webmock/middle/match_requests_by_headers","permalink":"/keep-being-human-dev/docs/gems/webmock/middle/match_requests_by_headers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/middle/match_requests_by_headers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_request_block_stub","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/dynamic_request_block_stub"},"next":{"title":"stub_dynamic_urls_regex","permalink":"/keep-being-human-dev/docs/gems/webmock/middle/stub_dynamic_urls_regex"}}');var n=s(23420),a=s(65404);const o={},c=void 0,d={},u=[{value:"\ud83d\udee1 Match Requests by Headers",id:"-match-requests-by-headers",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-match-requests-by-headers",children:"\ud83d\udee1 Match Requests by Headers"}),"\n",(0,n.jsxs)(t.p,{children:["To ensure your HTTP calls include required headers (such as API keys or custom tokens), you can stub and verify requests based on header values. WebMock\u2019s ",(0,n.jsx)(t.code,{children:"with"})," option allows you to specify expected headers and body patterns, so only requests matching those criteria are stubbed or asserted."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"require 'webmock/rspec'\n\n# Stub a POST request only if it includes the Authorization header and JSON body\nstub_request(:post, 'https://api.example.com/create')\n  .with(\n    headers: { 'Authorization' => 'Bearer token123', 'Content-Type' => 'application/json' },\n    body: /\"name\":\"Test User\"/\n  )\n  .to_return(status: 201, body: '{\"success\":true}', headers: {})\n\n# Make the request in your code\nresponse = Net::HTTP.start('api.example.com', 443, use_ssl: true) do |http|\n  req = Net::HTTP::Post.new('/create', 'Content-Type' => 'application/json', 'Authorization' => 'Bearer token123')\n  req.body = { name: 'Test User' }.to_json\n  http.request(req)\nend\n\n# Verify that the stubbed request was made\nexpect(WebMock).to have_requested(:post, 'https://api.example.com/create')\n  .with(headers: { 'Authorization' => 'Bearer token123' })\n"})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}}}]);