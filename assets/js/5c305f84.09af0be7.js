"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76375],{43691:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>p,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"gems/bcrypt/advanced/add_pepper_to_bcrypt","title":"add_pepper_to_bcrypt","description":"\ud83d\udd11 Adding a Pepper for Extra Security","source":"@site/docs/gems/bcrypt/advanced/add_pepper_to_bcrypt.md","sourceDirName":"gems/bcrypt/advanced","slug":"/gems/bcrypt/advanced/add_pepper_to_bcrypt","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/add_pepper_to_bcrypt","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/bcrypt/advanced/add_pepper_to_bcrypt.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"querying_tagged_models","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/querying_tagged_models"},"next":{"title":"async_password_rehash","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/async_password_rehash"}}');var s=r(23420),a=r(65404);const p={},d=void 0,c={},o=[{value:"\ud83d\udd11 Adding a Pepper for Extra Security",id:"-adding-a-pepper-for-extra-security",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-adding-a-pepper-for-extra-security",children:"\ud83d\udd11 Adding a Pepper for Extra Security"}),"\n",(0,s.jsxs)(t.p,{children:["A pepper is a secret key stored outside the database that\u2019s concatenated with the password before hashing. It defends against database leaks even if the salt is known. Use Rails\u2019 ",(0,s.jsx)(t.code,{children:"secret_key_base"})," or a dedicated ",(0,s.jsx)(t.code,{children:"PEPPER"})," env var for this purpose."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  require 'bcrypt'\n\n  def password=(new_password)\n    pepper   = Rails.application.credentials.pepper || ENV.fetch('PASSWORD_PEPPER')\n    salted   = \"#{new_password}#{pepper}\"\n    self.password_digest = BCrypt::Password.create(salted, cost: bcrypt_cost)\n  end\n\n  def authenticate(unencrypted_password)\n    pepper = Rails.application.credentials.pepper || ENV.fetch('PASSWORD_PEPPER')\n    bcrypt = BCrypt::Password.new(password_digest)\n    bcrypt.is_password?(\"#{unencrypted_password}#{pepper}\") && self\n  end\n\n  private\n\n  def bcrypt_cost\n    Rails.env.test? ? BCrypt::Engine::MIN_COST : BCrypt::Engine.cost\n  end\nend\n"})}),"\n",(0,s.jsx)(t.p,{children:"Rotate your pepper periodically and invalidate existing sessions to force users to re-sign in after a rotation."})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>p,x:()=>d});var n=r(36672);const s={},a=n.createContext(s);function p(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:p(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);