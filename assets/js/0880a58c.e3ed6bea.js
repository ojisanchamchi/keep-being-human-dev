"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59930],{55991:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>u,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/beginner/manual_lock_unlock","title":"manual_lock_unlock","description":"\ud83e\udd1d Manually Lock and Unlock","source":"@site/docs/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock.md","sourceDirName":"ruby/concurrency_and_mutexes/beginner","slug":"/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"initialize_mutex_per_resource","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource"},"next":{"title":"shared_counter_with_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/shared_counter_with_mutex"}}');var t=c(23420),a=c(65404);const u={},o=void 0,s={},l=[{value:"\ud83e\udd1d Manually Lock and Unlock",id:"-manually-lock-and-unlock",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-manually-lock-and-unlock",children:"\ud83e\udd1d Manually Lock and Unlock"}),"\n",(0,t.jsxs)(n.p,{children:["While ",(0,t.jsx)(n.code,{children:"synchronize"})," is concise, you can manually call ",(0,t.jsx)(n.code,{children:"lock"})," and ",(0,t.jsx)(n.code,{children:"unlock"})," for more control. Always use an ",(0,t.jsx)(n.code,{children:"ensure"})," block to guarantee the mutex is released, even if an exception is raised."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nmutex = Mutex.new\n\ndef safe_update(mutex)\n  mutex.lock\n  begin\n    # critical code here\n    puts \"Working in thread #{Thread.current.object_id}\"\n  ensure\n    mutex.unlock\n  end\nend\n\nthreads = 3.times.map { Thread.new { safe_update(mutex) } }\nthreads.each(&:join)\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},65404:(e,n,c)=>{c.d(n,{R:()=>u,x:()=>o});var r=c(36672);const t={},a=r.createContext(t);function u(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:u(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);