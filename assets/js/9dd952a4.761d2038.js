"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[29843],{12714:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>_,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/active_record_associations/advanced/multi_table_join_with_has_many_through","title":"multi_table_join_with_has_many_through","description":"\ud83d\udca0 Multi-Table Join with has_many\xa0Through","source":"@site/docs/rails/active_record_associations/advanced/multi_table_join_with_has_many_through.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/multi_table_join_with_has_many_through","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/multi_table_join_with_has_many_through","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/multi_table_join_with_has_many_through.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inverse_of_and_eager_preloading","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/inverse_of_and_eager_preloading"},"next":{"title":"polymorphic_counter_cache_optimization","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization"}}');var s=n(23420),o=n(65404);const i={},r=void 0,c={},l=[{value:"\ud83d\udca0 Multi-Table Join with has_many\xa0Through",id:"-multi-table-join-with-has_manythrough",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-multi-table-join-with-has_manythrough",children:"\ud83d\udca0 Multi-Table Join with has_many\xa0Through"}),"\n",(0,s.jsx)(a.p,{children:"Chain multiple join models to navigate complex many-to-many relationships across tables. This lets you reach deeply nested resources via concise association calls. It avoids manual SQL and keeps your AR models expressive."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"class Company < ApplicationRecord\n  has_many :departments\n  has_many :teams, through: :departments\n  has_many :members, through: :teams, source: :users\nend\n\nclass Department < ApplicationRecord\n  belongs_to :company\n  has_many :teams\nend\n\nclass Team < ApplicationRecord\n  belongs_to :department\n  has_many :users\nend\n"})})]})}function _(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>r});var t=n(36672);const s={},o=t.createContext(s);function i(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);