"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54358],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(36672);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},94206:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/metaprogramming/expert/dynamic_define_method_with_closure","title":"dynamic_define_method_with_closure","description":"\ud83d\udee0\ufe0f Dynamic Methods with define_method and Closures","source":"@site/docs/ruby/metaprogramming/expert/dynamic_define_method_with_closure.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/dynamic_define_method_with_closure","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dynamic_define_method_with_closure","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/dynamic_define_method_with_closure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_constant_loading_with_const_missing","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing"},"next":{"title":"eigenclass_singleton_method_customization","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/eigenclass_singleton_method_customization"}}');var o=t(23420),r=t(65404);const s={},a=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Dynamic Methods with define_method and Closures",id:"\ufe0f-dynamic-methods-with-define_method-and-closures",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-dynamic-methods-with-define_method-and-closures",children:"\ud83d\udee0\ufe0f Dynamic Methods with define_method and Closures"}),"\n",(0,o.jsxs)(n.p,{children:["Leverage ",(0,o.jsx)(n.code,{children:"define_method"})," to generate multiple methods at runtime, each capturing its surrounding context in a closure. This is ideal for DRYing up repetitive logic while maintaining encapsulated state. Use ",(0,o.jsx)(n.code,{children:"define_method"})," inside loops or iteration blocks to bind parameters elegantly."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class EventHandler\nenabled_events = %w[start stop restart]\nenabled_events.each do |event|\n  define_method(\"on_#{event}\") do |&block|\n    @handlers ||= {}\n    @handlers[event.to_sym] = block\n  end\nend\n\ndef dispatch(event)\n  @handlers[event.to_sym]&.call\nend\nend\n\nhandler = EventHandler.new\nhandler.on_start { puts 'Started!' }\nhandler.dispatch('start')  # => \"Started!\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);