"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35677],{15575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"ruby/enumerables/beginner/accumulate_with_inject","title":"accumulate_with_inject","description":"\u2795 Accumulate Values with inject","source":"@site/docs/ruby/enumerables/beginner/accumulate_with_inject.md","sourceDirName":"ruby/enumerables/beginner","slug":"/ruby/enumerables/beginner/accumulate_with_inject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/accumulate_with_inject","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/beginner/accumulate_with_inject.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"zip_lazy_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/zip_lazy_pattern_matching"},"next":{"title":"exclude_with_reject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/exclude_with_reject"}}');var a=t(23420),u=t(65404);const r={},i=void 0,s={},o=[{value:"\u2795 Accumulate Values with inject",id:"-accumulate-values-with-inject",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-accumulate-values-with-inject",children:"\u2795 Accumulate Values with inject"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"inject"})," (a.k.a. ",(0,a.jsx)(n.code,{children:"reduce"}),") combines all elements by passing an accumulator and each element to the block. Use it for summing, product, or building complex results from an enumerable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'# Sum of numbers\nsum = [1, 2, 3, 4].inject(0) { |acc, n| acc + n }\n# => 10\n\n# Build a hash count\ntokens = %w[a b a c b a]\nfreq = tokens.inject(Hash.new(0)) do |counts, token|\n  counts[token] += 1\n  counts\nend\n# => {"a"=>3, "b"=>2, "c"=>1}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var c=t(36672);const a={},u=c.createContext(a);function r(e){const n=c.useContext(u);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),c.createElement(u.Provider,{value:n},e.children)}}}]);