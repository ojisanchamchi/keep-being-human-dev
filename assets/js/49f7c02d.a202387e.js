"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13808],{65404:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var t=o(36672);const d={},s=t.createContext(d);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},74718:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/symbols/middle/dynamic_method_invocation","title":"dynamic_method_invocation","description":"\ud83d\ude80 Dynamic Method Calls with Symbol and send","source":"@site/docs/ruby/symbols/middle/dynamic_method_invocation.md","sourceDirName":"ruby/symbols/middle","slug":"/ruby/symbols/middle/dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/symbols/middle/dynamic_method_invocation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/middle/dynamic_method_invocation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_definition","permalink":"/keep-being-human-dev/docs/ruby/symbols/middle/dynamic_method_definition"},"next":{"title":"symbol_to_proc_enumeration","permalink":"/keep-being-human-dev/docs/ruby/symbols/middle/symbol_to_proc_enumeration"}}');var d=o(23420),s=o(65404);const i={},r=void 0,c={},a=[{value:"\ud83d\ude80 Dynamic Method Calls with Symbol and <code>send</code>",id:"-dynamic-method-calls-with-symbol-and-send",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h2,{id:"-dynamic-method-calls-with-symbol-and-send",children:["\ud83d\ude80 Dynamic Method Calls with Symbol and ",(0,d.jsx)(n.code,{children:"send"})]}),"\n",(0,d.jsxs)(n.p,{children:["You can use symbols to dispatch methods dynamically at runtime via ",(0,d.jsx)(n.code,{children:"send"})," or its safer counterpart ",(0,d.jsx)(n.code,{children:"public_send"}),". This is handy for building flexible APIs, DSLs, or delegators. Remember to use ",(0,d.jsx)(n.code,{children:"public_send"})," when you want to respect access control and avoid invoking private methods by accident."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'class Greeter\n  def hello(name)\n    "Hello, #{name}!"\n  end\n\n  private def secret\n    "Top Secret"\n  end\nend\n\ngreeter = Greeter.new\nmethod = :hello\nputs greeter.send(method, "World")        # => "Hello, World!"\nputs greeter.public_send(method, "Alice") # => "Hello, Alice!"\n# greeter.public_send(:secret)             # => NoMethodError\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);