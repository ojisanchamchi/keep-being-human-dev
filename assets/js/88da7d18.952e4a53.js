"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97068],{5913:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/method_missing/advanced/lazy_association_proxy","title":"lazy_association_proxy","description":"\ud83d\udce6 Implement a Lazy Association Proxy","source":"@site/docs/ruby/method_missing/advanced/lazy_association_proxy.md","sourceDirName":"ruby/method_missing/advanced","slug":"/ruby/method_missing/advanced/lazy_association_proxy","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/lazy_association_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/advanced/lazy_association_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_method_recording","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/dsl_method_recording"},"next":{"title":"rest_api_client_dynamic","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/rest_api_client_dynamic"}}');var o=a(23420),s=a(65404);const i={},d=void 0,r={},c=[{value:"\ud83d\udce6 Implement a Lazy Association Proxy",id:"-implement-a-lazy-association-proxy",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-implement-a-lazy-association-proxy",children:"\ud83d\udce6 Implement a Lazy Association Proxy"}),"\n",(0,o.jsx)(n.p,{children:"To defer loading expensive associations until use, wrap the association target in a proxy that intercepts missing methods. Only load data on first actual access, then forward method calls to the real object."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class AssociationProxy\n  def initialize(loader)\n    @loader = loader\n    @loaded = false\n  end\n\n  def method_missing(name, *args, &block)\n    load_target unless @loaded\n    @target.public_send(name, *args, &block)\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    load_target unless @loaded\n    @target.respond_to?(name, include_private)\n  end\n\n  private\n\n  def load_target\n    @target = @loader.call\n    @loaded = true\n  end\nend\n\n# Usage in a model\nclass Post\n  def comments\n    @comments_proxy ||= AssociationProxy.new(-> { Comment.where(post_id: id).to_a })\n  end\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var t=a(36672);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);