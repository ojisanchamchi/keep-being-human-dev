"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94299],{44940:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"sql/general/advanced/recursive_cte_hierarchical_queries","title":"recursive_cte_hierarchical_queries","description":"\ud83c\udf33 Use Recursive CTEs for Hierarchical Data","source":"@site/docs/sql/general/advanced/recursive_cte_hierarchical_queries.md","sourceDirName":"sql/general/advanced","slug":"/sql/general/advanced/recursive_cte_hierarchical_queries","permalink":"/keep-being-human-dev/docs/sql/general/advanced/recursive_cte_hierarchical_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/general/advanced/recursive_cte_hierarchical_queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pivot_queries_crosstab","permalink":"/keep-being-human-dev/docs/sql/general/advanced/pivot_queries_crosstab"},"next":{"title":"window_functions_row_number","permalink":"/keep-being-human-dev/docs/sql/general/advanced/window_functions_row_number"}}');var t=a(23420),c=a(65404);const s={},i=void 0,o={},d=[{value:"\ud83c\udf33 Use Recursive CTEs for Hierarchical Data",id:"-use-recursive-ctes-for-hierarchical-data",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-use-recursive-ctes-for-hierarchical-data",children:"\ud83c\udf33 Use Recursive CTEs for Hierarchical Data"}),"\n",(0,t.jsx)(r.p,{children:"Recursive Common Table Expressions (CTEs) handle tree\u2010structured or graph\u2010based data elegantly. Define an anchor query and a recursive member to traverse parent\u2010child relationships."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-sql",children:"WITH RECURSIVE category_tree AS (\n  SELECT id, name, parent_id, 1 AS depth\n  FROM categories\n  WHERE parent_id IS NULL\n  UNION ALL\n  SELECT c.id, c.name, c.parent_id, ct.depth + 1\n  FROM categories c\n  JOIN category_tree ct ON c.parent_id = ct.id\n)\nSELECT * FROM category_tree ORDER BY depth, name;\n"})}),"\n",(0,t.jsx)(r.p,{children:"This builds a depth\u2010annotated hierarchy of categories, suitable for breadcrumbs or organizational charts."})]})}function l(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,r,a)=>{a.d(r,{R:()=>s,x:()=>i});var n=a(36672);const t={},c=n.createContext(t);function s(e){const r=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),n.createElement(c.Provider,{value:r},e.children)}}}]);