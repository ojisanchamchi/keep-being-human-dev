"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32742],{31384:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"gems/solid_queue/expert/dynamic_queue_sharding","title":"dynamic_queue_sharding","description":"\ud83c\udfaf Dynamic Queue Sharding for High Throughput","source":"@site/docs/gems/solid_queue/expert/dynamic_queue_sharding.md","sourceDirName":"gems/solid_queue/expert","slug":"/gems/solid_queue/expert/dynamic_queue_sharding","permalink":"/keep-being-human-dev/docs/gems/solid_queue/expert/dynamic_queue_sharding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/expert/dynamic_queue_sharding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"atomic_job_deduplication","permalink":"/keep-being-human-dev/docs/gems/solid_queue/expert/atomic_job_deduplication"},"next":{"title":"kafka_broker_implementation","permalink":"/keep-being-human-dev/docs/gems/solid_queue/expert/kafka_broker_implementation"}}');var s=r(23420),u=r(65404);const o={},t=void 0,a={},d=[{value:"\ud83c\udfaf Dynamic Queue Sharding for High Throughput",id:"-dynamic-queue-sharding-for-high-throughput",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-dynamic-queue-sharding-for-high-throughput",children:"\ud83c\udfaf Dynamic Queue Sharding for High Throughput"}),"\n",(0,s.jsx)(n.p,{children:"Shard your workload across N queues by hashing a routing key (e.g., user ID). This horizontally scales consumers and reduces lock contention. You can add or remove shards at runtime with minimal disruption by using a rendezvous hash."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# lib/solid_queue/sharder.rb\nrequire 'rendezvous_hash'\n\nclass SolidQueue::Sharder\n  def initialize(nodes)\n    @hash = RendezvousHash.new(nodes)\n  end\n\n  def shard_for(key)\n    @hash.get_node(key)\n  end\nend\n\n# config/initializers/solid_queue.rb\nnodes = Array.new(8) { |i| \"critical_shard_#{i}\" }\nSHARDER = SolidQueue::Sharder.new(nodes)\n\n# Enqueue hook\nclient = SolidQueue::Client.new\nuser_id = current_user.id\nshard = SHARDER.shard_for(user_id)\nclient.enqueue('ProcessUserData', {user_id: user_id}, queue: shard)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var i=r(36672);const s={},u=i.createContext(s);function o(e){const n=i.useContext(u);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(u.Provider,{value:n},e.children)}}}]);