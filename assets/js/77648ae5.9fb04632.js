"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56132],{47126:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ruby/fibers/beginner/simple_enumerator_with_fiber","title":"simple_enumerator_with_fiber","description":"\ud83d\uddd2\ufe0f Building a Simple Enumerator with Fiber","source":"@site/docs/ruby/fibers/beginner/simple_enumerator_with_fiber.md","sourceDirName":"ruby/fibers/beginner","slug":"/ruby/fibers/beginner/simple_enumerator_with_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/simple_enumerator_with_fiber","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/beginner/simple_enumerator_with_fiber.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"passing_values_between_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/passing_values_between_fiber"},"next":{"title":"what_is_a_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/what_is_a_fiber"}}');var t=r(23420),s=r(65404);const a={},o=void 0,u={},l=[{value:"\ud83d\uddd2\ufe0f Building a Simple Enumerator with Fiber",id:"\ufe0f-building-a-simple-enumerator-with-fiber",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-building-a-simple-enumerator-with-fiber",children:"\ud83d\uddd2\ufe0f Building a Simple Enumerator with Fiber"}),"\n",(0,t.jsxs)(n.p,{children:["You can wrap a fiber in an ",(0,t.jsx)(n.code,{children:"Enumerator"})," to create a custom sequence generator. The fiber yields values, and the enumerator handles resume calls under the hood. This is a quick way to build lazy sequences without complex classes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"enum = Enumerator.new do |yielder|\n  i = 1\n  loop do\n    yielder << i\n    i += 1\n  end\nend\n\np enum.take(5)  # => [1, 2, 3, 4, 5]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(36672);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);