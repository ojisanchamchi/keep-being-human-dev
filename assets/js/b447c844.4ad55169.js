"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2463],{59623:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/hashes/middle/merge_with_block","title":"merge_with_block","description":"\ud83d\udd04 Merging Hashes with a Block","source":"@site/docs/ruby/hashes/middle/merge_with_block.md","sourceDirName":"ruby/hashes/middle","slug":"/ruby/hashes/middle/merge_with_block","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/merge_with_block","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/middle/merge_with_block.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"invert_handle_duplicates","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/invert_handle_duplicates"},"next":{"title":"select_and_reject","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/select_and_reject"}}');var t=s(23420),r=s(65404);const c={},o=void 0,i={},l=[{value:"\ud83d\udd04 Merging Hashes with a Block",id:"-merging-hashes-with-a-block",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-merging-hashes-with-a-block",children:"\ud83d\udd04 Merging Hashes with a Block"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Hash#merge"})," can accept a block that determines how to combine values for duplicate keys. This is useful for summing counters, concatenating arrays, or applying custom logic when two hashes collide."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"h1 = { apples: 3, oranges: 2 }\nh2 = { apples: 1, bananas: 4 }\n# Sum counts for duplicate keys\ncombined = h1.merge(h2) { |key, old_val, new_val| old_val + new_val }\n# => { apples: 4, oranges: 2, bananas: 4 }\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also merge nested structures:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"h1 = { data: [1, 2] }\nh2 = { data: [3, 4] }\nmerged = h1.merge(h2) { |_, a, b| a + b }\n# => { data: [1, 2, 3, 4] }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var a=s(36672);const t={},r=a.createContext(t);function c(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);