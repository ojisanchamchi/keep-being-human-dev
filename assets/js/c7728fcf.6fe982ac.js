"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39507],{3276:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/reflection/middle/dynamic_constant_lookup","title":"dynamic_constant_lookup","description":"\ud83d\udce6 Dynamic Constant Lookup and Instantiation","source":"@site/docs/ruby/reflection/middle/dynamic_constant_lookup.md","sourceDirName":"ruby/reflection/middle","slug":"/ruby/reflection/middle/dynamic_constant_lookup","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_constant_lookup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/middle/dynamic_constant_lookup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"singleton_class_hierarchy","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/singleton_class_hierarchy"},"next":{"title":"dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_method_invocation"}}');var i=t(23420),s=t(65404);const a={},c=void 0,r={},d=[{value:"\ud83d\udce6 Dynamic Constant Lookup and Instantiation",id:"-dynamic-constant-lookup-and-instantiation",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-dynamic-constant-lookup-and-instantiation",children:"\ud83d\udce6 Dynamic Constant Lookup and Instantiation"}),"\n",(0,i.jsxs)(n.p,{children:["Ruby\u2019s ",(0,i.jsx)(n.code,{children:"const_get"}),", ",(0,i.jsx)(n.code,{children:"const_defined?"}),", and ",(0,i.jsx)(n.code,{children:"const_set"})," let you reference or create constants by name at runtime. This is useful for plugin systems, dynamic class loading, or namespaced configurations. Always verify existence with ",(0,i.jsx)(n.code,{children:"const_defined?"})," to avoid ",(0,i.jsx)(n.code,{children:"NameError"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'module Vehicles; class Car; end; end\n\ndef build_vehicle(type)\n  namespace = Vehicles\n  if namespace.const_defined?(type)\n    klass = namespace.const_get(type)\n    return klass.new\n  else\n    raise "Unknown vehicle #{type}"\n  end\nend\n\ncar = build_vehicle("Car")  #=> #<Vehicles::Car:0x0000...>\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(36672);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);