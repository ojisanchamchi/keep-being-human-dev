"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47484],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var a=s(36672);const r={},t=a.createContext(r);function i(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(t.Provider,{value:n},e.children)}},77089:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/ranges/advanced/infinite_beginless_ranges","title":"infinite_beginless_ranges","description":"\ud83d\ude80 Endless and Beginless Ranges","source":"@site/docs/ruby/ranges/advanced/infinite_beginless_ranges.md","sourceDirName":"ruby/ranges/advanced","slug":"/ruby/ranges/advanced/infinite_beginless_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/advanced/infinite_beginless_ranges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/advanced/infinite_beginless_ranges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_object_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/advanced/custom_object_ranges"},"next":{"title":"lazy_infinite_sequences","permalink":"/keep-being-human-dev/docs/ruby/ranges/advanced/lazy_infinite_sequences"}}');var r=s(23420),t=s(65404);const i={},d=void 0,c={},o=[{value:"\ud83d\ude80 Endless and Beginless Ranges",id:"-endless-and-beginless-ranges",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-endless-and-beginless-ranges",children:"\ud83d\ude80 Endless and Beginless Ranges"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\xa02.6+ introduced endless (",(0,r.jsx)(n.code,{children:".."}),") and beginless (",(0,r.jsx)(n.code,{children:"..x"}),") ranges, which are perfect for slicing and open\u2011ended queries without manually calculating indices. Use them to grab the tail of an array or substring of a string effortlessly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'arr = [1, 2, 3, 4, 5]\np p arr[2..]      # => [3, 4, 5]        (from index 2 to end)\np p arr[..2]      # => [1, 2, 3]        (from start through index 2)\n\nstr = "abcdef"\np p str[..2]      # => "abc"\n\n# You can even define truly endless ranges\nrange = (10..)\np p range.first(3) # => [10, 11, 12]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);