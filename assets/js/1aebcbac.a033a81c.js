"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51151],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var a=t(36672);const i={},o=a.createContext(i);function d(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),a.createElement(o.Provider,{value:n},e.children)}},87017:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/method_missing/middle/dynamic_delegation","title":"dynamic_delegation","description":"\ud83c\udfaf Dynamic Delegation to an Internal Object","source":"@site/docs/ruby/method_missing/middle/dynamic_delegation.md","sourceDirName":"ruby/method_missing/middle","slug":"/ruby/method_missing/middle/dynamic_delegation","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dynamic_delegation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/middle/dynamic_delegation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_fallback_methods","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dsl_fallback_methods"},"next":{"title":"forwarding_proxy","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/forwarding_proxy"}}');var i=t(23420),o=t(65404);const d={},r=void 0,s={},c=[{value:"\ud83c\udfaf Dynamic Delegation to an Internal Object",id:"-dynamic-delegation-to-an-internal-object",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-dynamic-delegation-to-an-internal-object",children:"\ud83c\udfaf Dynamic Delegation to an Internal Object"}),"\n",(0,i.jsx)(n.p,{children:"Method_missing can route unknown methods to a delegate object, reducing boilerplate delegator code. This is useful when wrapping or decorating an API and you want unimplemented methods forwarded automatically."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class Decorator\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &block)\n    if @target.respond_to?(name)\n      @target.public_send(name, *args, &block)\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @target.respond_to?(name, include_private) || super\n  end\nend\n\nwrapped = Decorator.new("Hello World")\nputs wrapped.upcase  # => "HELLO WORLD"\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);