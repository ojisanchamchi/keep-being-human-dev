"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93292],{11932:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/logging/expert/correlation_id_propagation","title":"correlation_id_propagation","description":"\ud83d\udd17 Propagate Correlation IDs Across Threads & Processes","source":"@site/docs/ruby/logging/expert/correlation_id_propagation.md","sourceDirName":"ruby/logging/expert","slug":"/ruby/logging/expert/correlation_id_propagation","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/correlation_id_propagation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/expert/correlation_id_propagation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_non_blocking_logger","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/async_non_blocking_logger"},"next":{"title":"structured_json_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/expert/structured_json_logging"}}');var t=n(23420),a=n(65404);const s={},i=void 0,c={},d=[{value:"\ud83d\udd17 Propagate Correlation IDs Across Threads &amp; Processes",id:"-propagate-correlation-ids-across-threads--processes",level:2}];function g(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-propagate-correlation-ids-across-threads--processes",children:"\ud83d\udd17 Propagate Correlation IDs Across Threads & Processes"}),"\n",(0,t.jsxs)(r.p,{children:["Maintaining a consistent correlation ID across threads and forked processes is crucial for end\u2011to\u2011end tracing in microservices. This pattern demonstrates how to use ",(0,t.jsx)(r.code,{children:"ActiveSupport::TaggedLogging"})," with thread\u2011local storage and forking hooks to preserve and propagate a request\u2011scoped ID."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"require 'active_support/tagged_logging'\nrequire 'securerandom'\n\nbase_logger = Logger.new(STDOUT)\nlogger = ActiveSupport::TaggedLogging.new(base_logger)\n\n# Middleware to assign correlation ID\nclass CorrelationIdMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    corr_id = env['HTTP_X_CORRELATION_ID'] || SecureRandom.uuid\n    Thread.current[:correlation_id] = corr_id\n    logger.tagged(\"corr_id:#{corr_id}\") { @app.call(env) }\n  ensure\n    Thread.current[:correlation_id] = nil\n  end\nend\n\n# Propagate into new threads\nThread.new do\n  logger.info(\"Log in thread context\")\nend\n\n# Ensure forking preserves context in Passenger\nif defined?(PhusionPassenger)\n  PhusionPassenger.on_event(:starting_worker_process) do |forked|\n    Thread.current[:correlation_id] = SecureRandom.uuid if forked\n  end\nend\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var o=n(36672);const t={},a=o.createContext(t);function s(e){const r=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:r},e.children)}}}]);