"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74105],{65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var d=s(36672);const t={},a=d.createContext(t);function c(e){const n=d.useContext(a);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),d.createElement(a.Provider,{value:n},e.children)}},72561:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>d,toc:()=>r});const d=JSON.parse('{"id":"ruby/classes_and_modules/advanced/extend_class_methods_on_include","title":"extend_class_methods_on_include","description":"\ud83d\udcdd Mixing in Both Instance and Class Methods","source":"@site/docs/ruby/classes_and_modules/advanced/extend_class_methods_on_include.md","sourceDirName":"ruby/classes_and_modules/advanced","slug":"/ruby/classes_and_modules/advanced/extend_class_methods_on_include","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/extend_class_methods_on_include","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/advanced/extend_class_methods_on_include.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"eigenclass_methods","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/eigenclass_methods"},"next":{"title":"forwardable_mixin","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/forwardable_mixin"}}');var t=s(23420),a=s(65404);const c={},o=void 0,i={},r=[{value:"\ud83d\udcdd Mixing in Both Instance and Class Methods",id:"-mixing-in-both-instance-and-class-methods",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-mixing-in-both-instance-and-class-methods",children:"\ud83d\udcdd Mixing in Both Instance and Class Methods"}),"\n",(0,t.jsxs)(n.p,{children:["You can both mix instance methods and extend class methods in a single ",(0,t.jsx)(n.code,{children:"included"})," hook for concise concerns."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module TrackEvents\n  def self.included(base)\n    base.extend(ClassMethods)\n    base.after_create :record_creation\n  end\n\n  def record_creation\n    self.class.log("Created #{self.inspect}")\n  end\n\n  module ClassMethods\n    def log(msg)\n      @events ||= []\n      @events << msg\n>     end\n\n    def events\n      @events || []\n    end\n  end\nend\n\nclass Item\n  include TrackEvents\nend\n\nitem = Item.create\nItem.events # => ["Created #<Item ...>"]\n'})}),"\n",(0,t.jsx)(n.p,{children:"This pattern keeps your concern DRY and self-contained."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);