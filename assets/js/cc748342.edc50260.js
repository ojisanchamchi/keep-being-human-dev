"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4301],{7644:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gems/ransack/advanced/define_custom_predicates","title":"define_custom_predicates","description":"\u2699\ufe0f Define Custom Predicates and Scopes","source":"@site/docs/gems/ransack/advanced/define_custom_predicates.md","sourceDirName":"gems/ransack/advanced","slug":"/gems/ransack/advanced/define_custom_predicates","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/define_custom_predicates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ransack/advanced/define_custom_predicates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_ransacker_computed_fields","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/custom_ransacker_computed_fields"},"next":{"title":"nested_association_query","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/nested_association_query"}}');var c=s(23420),t=s(65404);const r={},i=void 0,o={},d=[{value:"\u2699\ufe0f Define Custom Predicates and Scopes",id:"\ufe0f-define-custom-predicates-and-scopes",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\ufe0f-define-custom-predicates-and-scopes",children:"\u2699\ufe0f Define Custom Predicates and Scopes"}),"\n",(0,c.jsxs)(n.p,{children:["Sometimes built-in predicates (",(0,c.jsx)(n.code,{children:"cont"}),", ",(0,c.jsx)(n.code,{children:"eq"}),", etc.) aren\u2019t enough. You can register custom predicates globally or use ",(0,c.jsx)(n.code,{children:"ransackable_scopes"})," for complex logic."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/ransack.rb\nRansack.configure do |config|\n  # Custom predicate for fuzzy matching using trigram similarity\n  config.add_predicate 'similar_to',\n    arel_predicate: 'matches',\n    formatter: proc { |v| \"%#{v}%\" },\n    validator: proc { |v| v.present? },\n    compounds: false,\n    type: :string\nend\n\n# app/models/article.rb\nclass Article < ApplicationRecord\n  # Allow ransack to call a custom scope\n  scope :published_last_week, -> {\n    where(published_at: 1.week.ago.beginning_of_day..Time.current)\n  }\n\n  def self.ransackable_scopes(auth_object = nil)\n    %i[published_last_week]\n  end\nend\n"})}),"\n",(0,c.jsx)(n.p,{children:"Usage in controller:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"@q = Article.ransack(\n  title_similar_to: 'Rails',\n  published_last_week: true\n)\n@articles = @q.result\n"})}),"\n",(0,c.jsxs)(n.p,{children:["This registers ",(0,c.jsx)(n.code,{children:"similar_to"})," as a new predicate and lets you call the ",(0,c.jsx)(n.code,{children:"published_last_week"})," scope directly in your search form."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(36672);const c={},t=a.createContext(c);function r(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);