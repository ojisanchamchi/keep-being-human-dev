"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84657],{48513:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"rails/testing/expert/test_prof_optimizations","title":"test_prof_optimizations","description":"\ud83c\udfce\ufe0f Profile and Optimize RSpec with test-prof","source":"@site/docs/rails/testing/expert/test_prof_optimizations.md","sourceDirName":"rails/testing/expert","slug":"/rails/testing/expert/test_prof_optimizations","permalink":"/keep-being-human-dev/docs/rails/testing/expert/test_prof_optimizations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/testing/expert/test_prof_optimizations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_capybara_tests","permalink":"/keep-being-human-dev/docs/rails/testing/expert/parallel_capybara_tests"},"next":{"title":"activejob_test_adapter","permalink":"/keep-being-human-dev/docs/rails/testing/middle/activejob_test_adapter"}}');var s=r(23420),o=r(65404);const i={},a=void 0,c={},p=[{value:"\ud83c\udfce\ufe0f Profile and Optimize RSpec with test-prof",id:"\ufe0f-profile-and-optimize-rspec-with-test-prof",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-profile-and-optimize-rspec-with-test-prof",children:"\ud83c\udfce\ufe0f Profile and Optimize RSpec with test-prof"}),"\n",(0,s.jsxs)(t.p,{children:["Leverage the ",(0,s.jsx)(t.strong,{children:"test-prof"})," gem to identify and eliminate slow specs, speed up factories, and reduce redundant setup. You can wrap expensive setups in ",(0,s.jsx)(t.code,{children:"before_all"})," hooks to execute them only once, and use the Factory Profiler to find out which factories are your bottlenecks."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# Gemfile\ngroup :development, :test do\n  gem 'test-prof'\nend\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Add to your ",(0,s.jsx)(t.code,{children:"spec_helper.rb"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'test-prof/recipes/rspec/before_all'\nrequire 'test-prof/recipes/factory_profiler'\n\nRSpec.configure do |config|\n  # Print top 10 slowest examples\n  config.profile_examples = 10\n\n  # Auto-start Factory Profiler\n  FactoryProf.start(filename: 'tmp/factory_prof.html')\nend\n"})}),"\n",(0,s.jsx)(t.p,{children:"In your spec:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"RSpec.describe UserMailer, :before_all do\n  before_all do\n    @user = create(:user)\n  end\n\n  it 'sends welcome email' do\n    expect { UserMailer.welcome(@user).deliver_now }\n      .to change { ActionMailer::Base.deliveries.count }.by(1)\n  end\n\n  it 'has correct subject' do\n    mail = UserMailer.welcome(@user)\n    expect(mail.subject).to eq('Welcome!')\n  end\nend\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Run ",(0,s.jsx)(t.code,{children:"rspec"})," normally and inspect ",(0,s.jsx)(t.code,{children:"tmp/factory_prof.html"})," for hot factories."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(36672);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);