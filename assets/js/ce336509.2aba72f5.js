"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78363],{65404:(e,i,n)=>{n.d(i,{R:()=>c,x:()=>d});var o=n(36672);const l={},t=o.createContext(l);function c(e){const i=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),o.createElement(t.Provider,{value:i},e.children)}},68072:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"ruby/file_io/middle/file_locking.md","title":"file_locking.md","description":"\ud83d\udd12 Locking Files with File#flock","source":"@site/docs/ruby/file_io/middle/file_locking.md.md","sourceDirName":"ruby/file_io/middle","slug":"/ruby/file_io/middle/file_locking.md","permalink":"/keep-being-human-dev/docs/ruby/file_io/middle/file_locking.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/middle/file_locking.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"encoding_handling.md","permalink":"/keep-being-human-dev/docs/ruby/file_io/middle/encoding_handling.md"},"next":{"title":"file_open_block.md","permalink":"/keep-being-human-dev/docs/ruby/file_io/middle/file_open_block.md"}}');var l=n(23420),t=n(65404);const c={},d=void 0,r={},s=[{value:"\ud83d\udd12 Locking Files with File#flock",id:"-locking-files-with-fileflock",level:2}];function a(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h2,{id:"-locking-files-with-fileflock",children:"\ud83d\udd12 Locking Files with File#flock"}),"\n",(0,l.jsxs)(i.p,{children:["Use ",(0,l.jsx)(i.code,{children:"flock"})," to prevent race conditions when multiple processes access the same file. Shared lock (",(0,l.jsx)(i.code,{children:"LOCK_SH"}),") for reading; exclusive lock (",(0,l.jsx)(i.code,{children:"LOCK_EX"}),") for writing."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-ruby",children:"File.open('shared.log', 'a') do |f|\n  f.flock(File::LOCK_EX)\n  f.puts(\"#{Time.now}: new entry\")\n  f.flock(File::LOCK_UN)\nend\n"})})]})}function f(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}}}]);