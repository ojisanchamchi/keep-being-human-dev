"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[7284],{53576:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ruby/enumerables/middle/slice_before_chunk_while","title":"slice_before_chunk_while","description":"\u2702\ufe0f Split Sequences with slicebefore and chunkwhile","source":"@site/docs/ruby/enumerables/middle/slice_before_chunk_while.md","sourceDirName":"ruby/enumerables/middle","slug":"/ruby/enumerables/middle/slice_before_chunk_while","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/slice_before_chunk_while","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/middle/slice_before_chunk_while.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_chaining_enumerables","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/lazy_chaining_enumerables"},"next":{"title":"sum_with_block","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/sum_with_block"}}');var t=s(23420),r=s(65404);const c={},l=void 0,u={},o=[{value:"\u2702\ufe0f Split Sequences with slice_before and chunk_while",id:"\ufe0f-split-sequences-with-slice_before-and-chunk_while",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-split-sequences-with-slice_before-and-chunk_while",children:"\u2702\ufe0f Split Sequences with slice_before and chunk_while"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby\u2019s ",(0,t.jsx)(n.code,{children:"slice_before"})," and ",(0,t.jsx)(n.code,{children:"chunk_while"})," let you partition arrays by patterns without manual index tracking. Use ",(0,t.jsx)(n.code,{children:"slice_before"})," when a single element signals a new group, or ",(0,t.jsx)(n.code,{children:"chunk_while"})," for relations between consecutive elements."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"events = [1, 2, 100, 101, 5, 6]\n# Start a new slice whenever the number > 50\nslices = events.slice_before { |n| n > 50 }.to_a\n# => [[1, 2], [100, 101], [5, 6]]\n\n# Chunk while values are consecutive\nchunks = events.chunk_while { |i, j| j == i + 1 }.to_a\n# => [[1, 2], [100, 101], [5, 6]]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(36672);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);