"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2651],{60052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"rails/encryption/expert/authenticated_encryption_with_aad","title":"authenticated_encryption_with_aad","description":"\ud83d\udee1\ufe0f Add Associated Data for Contextual Integrity","source":"@site/docs/rails/encryption/expert/authenticated_encryption_with_aad.md","sourceDirName":"rails/encryption/expert","slug":"/rails/encryption/expert/authenticated_encryption_with_aad","permalink":"/keep-being-human-dev/docs/rails/encryption/expert/authenticated_encryption_with_aad","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/encryption/expert/authenticated_encryption_with_aad.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_record_attribute_encryption","permalink":"/keep-being-human-dev/docs/rails/encryption/expert/active_record_attribute_encryption"},"next":{"title":"rotate_encryption_keys","permalink":"/keep-being-human-dev/docs/rails/encryption/expert/rotate_encryption_keys"}}');var r=n(23420),i=n(65404);const o={},c=void 0,d={},s=[{value:"\ud83d\udee1\ufe0f Add Associated Data for Contextual Integrity",id:"\ufe0f-add-associated-data-for-contextual-integrity",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-add-associated-data-for-contextual-integrity",children:"\ud83d\udee1\ufe0f Add Associated Data for Contextual Integrity"}),"\n",(0,r.jsx)(t.p,{children:"Using Authenticated Encryption (AEAD) with additional authenticated data (AAD) ensures integrity not just of the ciphertext but of your contextual metadata. This prevents replay or tampering in multi-tenant or audit-critical scenarios. Pass a JSON-encoded AAD blob that is verified on decryption."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# In your service or model:\nprimary_key = Rails.application.key_generator.generate_key(\n  Rails.application.credentials.encryption[:primary_key], 32\n)\nencryptor = ActiveSupport::MessageEncryptor.new(\n  primary_key,\n  cipher: 'aes-256-gcm'\n)\n\n# Construct context\naad = {\n  user_id: current_user.id,\n  request_id: request.uuid,\n  timestamp: Time.current.iso8601\n}.to_json\n\n# Encrypt with AAD\nencrypted_payload = encryptor.encrypt_and_sign(\n  'SuperSecretPayload',\n  authenticated_data: aad\n)\n\n# Decrypt and verify same AAD\ndecrypted = encryptor.decrypt_and_verify(\n  encrypted_payload,\n  authenticated_data: aad\n)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var a=n(36672);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);