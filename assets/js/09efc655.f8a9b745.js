"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75410],{27010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/strings/expert/handle_invalid_bytes_with_scrub","title":"handle_invalid_bytes_with_scrub","description":"\ud83e\udde0 Handle invalid byte sequences with String#scrub","source":"@site/docs/ruby/strings/expert/handle_invalid_bytes_with_scrub.md","sourceDirName":"ruby/strings/expert","slug":"/ruby/strings/expert/handle_invalid_bytes_with_scrub","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/handle_invalid_bytes_with_scrub","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/expert/handle_invalid_bytes_with_scrub.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"grapheme_cluster_counting","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/grapheme_cluster_counting"},"next":{"title":"in_memory_io_with_stringio","permalink":"/keep-being-human-dev/docs/ruby/strings/expert/in_memory_io_with_stringio"}}');var r=t(23420),i=t(65404);const a={},c=void 0,u={},o=[{value:"\ud83e\udde0 Handle invalid byte sequences with String#scrub",id:"-handle-invalid-byte-sequences-with-stringscrub",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-handle-invalid-byte-sequences-with-stringscrub",children:"\ud83e\udde0 Handle invalid byte sequences with String#scrub"}),"\n",(0,r.jsxs)(n.p,{children:["Corrupted or mis\u2011encoded data can raise ",(0,r.jsx)(n.code,{children:"Encoding::InvalidByteSequenceError"}),". Use ",(0,r.jsx)(n.code,{children:"String#scrub"})," to replace or transform invalid bytes in a single pass. You can supply a default replacement or a custom block to map each invalid byte sequence to a new string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'s = "caf\x0f\x0e\faf\xe9".force_encoding("UTF-8")\n# Default replacement: U+FFFD\nputs s.scrub                          # => "caf\ufffd@\ufffd@\xe9"\n# Custom handler:\nputs s.scrub { |bytes| "[#{bytes.unpack1(\'H*\')}]" }\n# => "caf[f][0e][0c]\xe9"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(36672);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);