"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53327],{52560:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/websockets/advanced/dynamic_channel_streaming","title":"dynamic_channel_streaming","description":"\ud83d\udd00 Dynamic Channel Streaming","source":"@site/docs/rails/websockets/advanced/dynamic_channel_streaming.md","sourceDirName":"rails/websockets/advanced","slug":"/rails/websockets/advanced/dynamic_channel_streaming","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/dynamic_channel_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/advanced/dynamic_channel_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_connection_identifiers","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/custom_connection_identifiers"},"next":{"title":"granular_dom_updates","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/granular_dom_updates"}}');var s=a(23420),r=a(65404);const c={},i=void 0,o={},d=[{value:"\ud83d\udd00 Dynamic Channel Streaming",id:"-dynamic-channel-streaming",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-dynamic-channel-streaming",children:"\ud83d\udd00 Dynamic Channel Streaming"}),"\n",(0,s.jsxs)(n.p,{children:["Leverage ",(0,s.jsx)(n.code,{children:"stream_for"})," to create dynamic, model-specific channels and broadcast simultaneously to multiple subscribers. This pattern simplifies broadcasting to individual records or groups by name-spacing streams under model instances."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# app/channels/notifications_channel.rb\nclass NotificationsChannel < ApplicationCable::Channel\n  def subscribed\n    # Start streaming for this user and for all their projects\n    stream_for current_user\n    current_user.projects.each { |p| stream_for p }\n  end\nend\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# anywhere in your application (e.g., a background job)\nNotificationsChannel.broadcast_to(user, title: "New alert!", body: "You have 3 unread messages.")\nProject.find(42).tap do |project|\n  NotificationsChannel.broadcast_to(project, status: "completed")\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>i});var t=a(36672);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);