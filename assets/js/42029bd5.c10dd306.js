"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27299],{5111:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"javascript/turbo/advanced/websocket_turbo_streams","title":"websocket_turbo_streams","description":"\ud83d\udcf6 WebSocket-Powered Turbo Streams via ActionCable","source":"@site/docs/javascript/turbo/advanced/websocket_turbo_streams.md","sourceDirName":"javascript/turbo/advanced","slug":"/javascript/turbo/advanced/websocket_turbo_streams","permalink":"/keep-being-human-dev/docs/javascript/turbo/advanced/websocket_turbo_streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/turbo/advanced/websocket_turbo_streams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_stream_multiplexing","permalink":"/keep-being-human-dev/docs/javascript/turbo/advanced/turbo_stream_multiplexing"},"next":{"title":"basic_turbo_frame","permalink":"/keep-being-human-dev/docs/javascript/turbo/beginner/basic_turbo_frame"}}');var s=r(23420),n=r(65404);const o={},c=void 0,i={},u=[{value:"\ud83d\udcf6 WebSocket-Powered Turbo Streams via ActionCable",id:"-websocket-powered-turbo-streams-via-actioncable",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-websocket-powered-turbo-streams-via-actioncable",children:"\ud83d\udcf6 WebSocket-Powered Turbo Streams via ActionCable"}),"\n",(0,s.jsx)(t.p,{children:"Combine Turbo Streams with ActionCable for full-duplex real-time UIs. Broadcast server-side partial renders as Turbo Stream messages, and let the client automatically update the DOM with zero custom JavaScript."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# app/channels/posts_channel.rb\nclass PostsChannel < ApplicationCable::Channel\n  def subscribed\n    stream_for current_user\n  end\nend\n\n# app/controllers/posts_controller.rb\ndef create\n  @post = Post.create!(post_params)\n  PostsChannel.broadcast_to(\n    current_user,\n    turbo_stream: render_to_string(\n      partial: 'posts/post',\n      locals: { post: @post }\n    )\n  )\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var a=r(36672);const s={},n=a.createContext(s);function o(e){const t=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);