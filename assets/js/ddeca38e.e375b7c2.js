"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57774],{33714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/hashes/expert/custom_deep_merge_with_conflicts","title":"custom_deep_merge_with_conflicts","description":"\ud83d\udd04 Custom Deep Merge with Conflict Resolution","source":"@site/docs/ruby/hashes/expert/custom_deep_merge_with_conflicts.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/custom_deep_merge_with_conflicts","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/custom_deep_merge_with_conflicts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/custom_deep_merge_with_conflicts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chaining_transform_keys_values","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/chaining_transform_keys_values"},"next":{"title":"dynamic_struct_from_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/dynamic_struct_from_hash"}}');var r=t(23420),o=t(65404);const c={},i=void 0,a={},l=[{value:"\ud83d\udd04 Custom Deep Merge with Conflict Resolution",id:"-custom-deep-merge-with-conflict-resolution",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-custom-deep-merge-with-conflict-resolution",children:"\ud83d\udd04 Custom Deep Merge with Conflict Resolution"}),"\n",(0,r.jsxs)(n.p,{children:["Built\u2010in ",(0,r.jsx)(n.code,{children:"Hash#merge"})," is shallow by default. For deeply nested hashes, implement a custom deep\u2010merge method with a block to resolve conflicts on a per\u2010key basis."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class ::Hash\n  def deep_merge(other, &conflict)\n    merger = proc do |key, v1, v2|\n      if v1.is_a?(Hash) && v2.is_a?(Hash)\n        v1.merge(v2, &merger)\n      else\n        conflict ? conflict.call(key, v1, v2) : v2\n      end\n    end\n    merge(other, &merger)\n  end\nend\n\nh1 = { a: { x: 1 }, c: 3 }\nh2 = { a: { x: 2, y: 5 }, b: 4 }\n\nmerged = h1.deep_merge(h2) do |key, oldv, newv|\n  # prefer greater numeric values\n  [oldv, newv].max\nend\n# => { a: { x: 2, y: 5 }, c: 3, b: 4 }\n"})}),"\n",(0,r.jsx)(n.p,{children:"This pattern allows full control over how nested collisions are handled, making merging predictable in complex configurations."})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(36672);const r={},o=s.createContext(r);function c(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);