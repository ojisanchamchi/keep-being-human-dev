"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28770],{65177:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"gems/simple_form/advanced/custom_wrappers","title":"custom_wrappers","description":"\u2699\ufe0f Customize Input Wrappers for Unique Markup","source":"@site/docs/gems/simple_form/advanced/custom_wrappers.md","sourceDirName":"gems/simple_form/advanced","slug":"/gems/simple_form/advanced/custom_wrappers","permalink":"/keep-being-human-dev/docs/gems/simple_form/advanced/custom_wrappers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/simple_form/advanced/custom_wrappers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_rich_text_input","permalink":"/keep-being-human-dev/docs/gems/simple_form/advanced/custom_rich_text_input"},"next":{"title":"nested_associations_cocoon","permalink":"/keep-being-human-dev/docs/gems/simple_form/advanced/nested_associations_cocoon"}}');var a=s(23420),t=s(65404);const o={},i=void 0,p={},c=[{value:"\u2699\ufe0f Customize Input Wrappers for Unique Markup",id:"\ufe0f-customize-input-wrappers-for-unique-markup",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-customize-input-wrappers-for-unique-markup",children:"\u2699\ufe0f Customize Input Wrappers for Unique Markup"}),"\n",(0,a.jsx)(n.p,{children:"By defining custom wrappers in your SimpleForm initializer, you can enforce consistent markup, CSS classes, and JavaScript hooks across your app. Wrappers let you control how labels, inputs, hints, and errors are arranged and rendered. This is especially useful when integrating with custom UI frameworks or implementing design systems."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/simple_form.rb\nSimpleForm.setup do |config|\n  config.wrappers :fancy, tag: 'div', class: 'fancy-group', error_class: 'has-error' do |b|\n    b.use :html5\n    b.use :placeholder\n    b.optional :maxlength\n    b.use :label, wrap_with: { tag: 'span', class: 'fancy-label' }\n    b.wrapper tag: 'div', class: 'fancy-input-wrapper' do |ba|\n      ba.use :input, class: 'fancy-input'\n      ba.use :error, wrap_with: { tag: 'small', class: 'error-text' }\n      ba.use :hint,  wrap_with: { tag: 'p', class: 'hint-text' }\n    end\n  end\n\n  config.default_wrapper = :fancy\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var r=s(36672);const a={},t=r.createContext(a);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);