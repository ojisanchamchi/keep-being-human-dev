"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23265],{2412:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>m,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/rspec/custom_matchers/middle/parameterized_range_matcher","title":"parameterized_range_matcher","description":"\ud83c\udfaf Parameterized Range Matcher","source":"@site/docs/gems/rspec/custom_matchers/middle/parameterized_range_matcher.md","sourceDirName":"gems/rspec/custom_matchers/middle","slug":"/gems/rspec/custom_matchers/middle/parameterized_range_matcher","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/middle/parameterized_range_matcher","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/custom_matchers/middle/parameterized_range_matcher.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_failure_messages","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/middle/custom_failure_messages"},"next":{"title":"advanced_const_mocking","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/advanced_const_mocking"}}');var r=t(23420),c=t(65404);const s={},m=void 0,i={},d=[{value:"\ud83c\udfaf Parameterized Range Matcher",id:"-parameterized-range-matcher",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-parameterized-range-matcher",children:"\ud83c\udfaf Parameterized Range Matcher"}),"\n",(0,r.jsx)(a.p,{children:"Custom matchers can accept arguments to make them reusable and descriptive. Here\u2019s how to define a matcher that checks if a number falls within a given range:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'RSpec::Matchers.define :be_within_range do |min, max|\n  match do |actual|\n    actual >= min && actual <= max\n  end\n\n  description do\n    "be within the range #{min} to #{max}"\n  end\n\n  failure_message do |actual|\n    "expected #{actual} to be between #{min} and #{max}"\n  end\n\n  failure_message_when_negated do |actual|\n    "expected #{actual} not to be between #{min} and #{max}"\n  end\nend\n'})}),"\n",(0,r.jsx)(a.p,{children:"Usage:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"expect(5).to be_within_range(1, 10)\nexpect(15).not_to be_within_range(1, 10)\n"})})]})}function u(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>m});var n=t(36672);const r={},c=n.createContext(r);function s(e){const a=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function m(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);