"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25649],{36169:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/active_record_associations/middle/association_scopes","title":"association_scopes","description":"\ud83d\udd0d Scoping Associations for Reusable Queries","source":"@site/docs/rails/active_record_associations/middle/association_scopes.md","sourceDirName":"rails/active_record_associations/middle","slug":"/rails/active_record_associations/middle/association_scopes","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/association_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/middle/association_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_extensions","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/association_extensions"},"next":{"title":"conditional_associations","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/middle/conditional_associations"}}');var n=o(23420),t=o(65404);const a={},c=void 0,r={},d=[{value:"\ud83d\udd0d Scoping Associations for Reusable Queries",id:"-scoping-associations-for-reusable-queries",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"-scoping-associations-for-reusable-queries",children:"\ud83d\udd0d Scoping Associations for Reusable Queries"}),"\n",(0,n.jsx)(s.p,{children:"Define default scopes on associations using a lambda to create reusable, filtered relationships. This keeps query logic DRY and located in the model rather than scattered in controllers."}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:'class Post < ApplicationRecord\n  has_many :published_comments, -> { where(published: true).order(created_at: :desc) }, class_name: "Comment"\nend\n\n# Fetch only published comments ordered newest first:\npost.published_comments\n'})})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},65404:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>c});var i=o(36672);const n={},t=i.createContext(n);function a(e){const s=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),i.createElement(t.Provider,{value:s},e.children)}}}]);