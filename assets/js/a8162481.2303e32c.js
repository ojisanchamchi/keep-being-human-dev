"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[98454],{46661:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"ruby/blocks/expert/trampoline_pattern_with_procs","title":"trampoline_pattern_with_procs","description":"\ud83d\udd01 Trampoline Pattern with Procs","source":"@site/docs/ruby/blocks/expert/trampoline_pattern_with_procs.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/trampoline_pattern_with_procs","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/trampoline_pattern_with_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/trampoline_pattern_with_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"partial_application_with_proc","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/partial_application_with_proc"},"next":{"title":"block_to_proc_conversion.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/block_to_proc_conversion.md"}}');var o=r(23420),a=r(65404);const s={},c=void 0,i={},p=[{value:"\ud83d\udd01 Trampoline Pattern with Procs",id:"-trampoline-pattern-with-procs",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-trampoline-pattern-with-procs",children:"\ud83d\udd01 Trampoline Pattern with Procs"}),"\n",(0,o.jsx)(t.p,{children:"The trampoline pattern transforms deep recursive calls into an iterative loop, preventing stack overflows for large input sizes. You return a Proc when recursion should continue and a final value otherwise, and a runner repeatedly invokes returned Procs until a non\u2011Proc is produced."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"def trampoline(proc, *args)\n  result = proc.call(*args)\n  while result.is_a?(Proc)\n    result = result.call\n  end\n  result\nend\n\nfact = ->(n, acc = 1) {\n  n.zero? ? acc : -> { fact.call(n - 1, n * acc) }\n}\n\n# Compute factorial of 10000 without blowing the stack\nenormous = trampoline(fact, 10000)\nputs enormous.to_s.size # prints number of digits\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>c});var n=r(36672);const o={},a=n.createContext(o);function s(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);