"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80836],{34042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/logging/advanced/structured_logging_with_lograge","title":"structured_logging_with_lograge","description":"\ud83d\uddc2\ufe0f Structured Logging with Lograge","source":"@site/docs/ruby/logging/advanced/structured_logging_with_lograge.md","sourceDirName":"ruby/logging/advanced","slug":"/ruby/logging/advanced/structured_logging_with_lograge","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/structured_logging_with_lograge","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/advanced/structured_logging_with_lograge.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"silence_and_tagged_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/silence_and_tagged_logging"},"next":{"title":"basic_logger_setup","permalink":"/keep-being-human-dev/docs/ruby/logging/beginner/basic_logger_setup"}}');var o=t(23420),g=t(65404);const a={},i=void 0,s={},c=[{value:"\ud83d\uddc2\ufe0f Structured Logging with Lograge",id:"\ufe0f-structured-logging-with-lograge",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,g.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-structured-logging-with-lograge",children:"\ud83d\uddc2\ufe0f Structured Logging with Lograge"}),"\n",(0,o.jsx)(n.p,{children:"By replacing Rails\u2019 default multi-line logs with Lograge, you get single-line, JSON-formatted entries ideal for log aggregation and analysis. Customize Lograge to include parameters, request IDs, and custom fields."}),"\n",(0,o.jsxs)(n.p,{children:["Example configuration in ",(0,o.jsx)(n.code,{children:"config/environments/production.rb"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'lograge'\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# config/environments/production.rb\nRails.application.configure do\n  config.lograge.enabled = true\n  config.lograge.formatter = Lograge::Formatters::Json.new\n\n  # Add custom payload data\n  config.lograge.custom_payload do |controller|\n    {\n      user_id: controller.current_user&.id,\n      host: controller.request.host\n    }\n  end\n\n  # Filter out sensitive parameters\n  config.lograge.custom_options = lambda do |event|\n    { params: event.payload[:params].except('password', 'credit_card') }\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,g.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(36672);const o={},g=r.createContext(o);function a(e){const n=r.useContext(g);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(g.Provider,{value:n},e.children)}}}]);