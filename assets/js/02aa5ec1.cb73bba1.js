"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56041],{11330:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/classes_and_modules/middle/mixins_with_callbacks","title":"mixins_with_callbacks","description":"\u2699\ufe0f Implementing Callbacks in Mixins","source":"@site/docs/ruby/classes_and_modules/middle/mixins_with_callbacks.md","sourceDirName":"ruby/classes_and_modules/middle","slug":"/ruby/classes_and_modules/middle/mixins_with_callbacks","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/mixins_with_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/middle/mixins_with_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"include_vs_extend","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/include_vs_extend"},"next":{"title":"module_alias_method","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_alias_method"}}');var l=s(23420),i=s(65404);const t={},c=void 0,d={},o=[{value:"\u2699\ufe0f Implementing Callbacks in Mixins",id:"\ufe0f-implementing-callbacks-in-mixins",level:2}];function r(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"\ufe0f-implementing-callbacks-in-mixins",children:"\u2699\ufe0f Implementing Callbacks in Mixins"}),"\n",(0,l.jsx)(n.p,{children:"Create callback hooks inside modules so including classes can register methods to run at specific points. This pattern is common in ORMs and event-driven architectures."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ruby",children:'module Callbacks\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def before(action, method)\n      @callbacks ||= {}\n      @callbacks[action] ||= []\n      @callbacks[action] << method\n    end\n\n    def run_callbacks(action, *args)\n      (@callbacks[action] || []).each { |m| send(m, *args) }\n    end\n  end\n\n  def run(action)\n    self.class.run_callbacks(action, self)\n  end\nend\n\nclass Job\n  include Callbacks\n  before :run, :setup\n\n  def setup(job)\n    puts "Setup \\\\#{job.class}"\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(36672);const l={},i=a.createContext(l);function t(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);