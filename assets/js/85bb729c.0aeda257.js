"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2825],{59623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"rails/models/expert/json_column_virtual_attributes","title":"json_column_virtual_attributes","description":"\ud83d\ude80 Map JSON Columns to Virtual Attributes","source":"@site/docs/rails/models/expert/json_column_virtual_attributes.md","sourceDirName":"rails/models/expert","slug":"/rails/models/expert/json_column_virtual_attributes","permalink":"/keep-being-human-dev/docs/rails/models/expert/json_column_virtual_attributes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/models/expert/json_column_virtual_attributes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_scopes_metaprogramming","permalink":"/keep-being-human-dev/docs/rails/models/expert/dynamic_scopes_metaprogramming"},"next":{"title":"partitioned_table_models","permalink":"/keep-being-human-dev/docs/rails/models/expert/partitioned_table_models"}}');var o=n(23420),r=n(65404);const a={},i=void 0,l={},u=[{value:"\ud83d\ude80 Map JSON Columns to Virtual Attributes",id:"-map-json-columns-to-virtual-attributes",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-map-json-columns-to-virtual-attributes",children:"\ud83d\ude80 Map JSON Columns to Virtual Attributes"}),"\n",(0,o.jsxs)(t.p,{children:["When storing flexible config or metadata in a ",(0,o.jsx)(t.code,{children:"jsonb"})," column, expose keys as virtual attributes for type casting and validation. Use the ",(0,o.jsx)(t.code,{children:"attribute"})," API to define typed getters/setters seamlessly."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  # settings is a jsonb column\n  attribute :settings, :jsonb, default: {}\n  attribute :notify_by_email, :boolean, default: -> { settings['notify_by_email'] }\n\n  def notify_by_email=(val)\n    settings['notify_by_email'] = ActiveModel::Type::Boolean.new.cast(val)\n  end\nend\n"})}),"\n",(0,o.jsx)(t.p,{children:"This pattern keeps your model\u2019s interface clean while leveraging Postgres JSON querying under the hood."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(36672);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);