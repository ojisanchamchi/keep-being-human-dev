"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54246],{39880:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks","title":"procs_in_fiber_callbacks","description":"\ud83d\udd04 Integrating Procs with Fiber-based Concurrency","source":"@site/docs/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proc_and_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/proc_and_lambda_composition"},"next":{"title":"profunctor_style_adapters","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/profunctor_style_adapters"}}');var a=n(23420),t=n(65404);const c={},o=void 0,i={},d=[{value:"\ud83d\udd04 Integrating Procs with Fiber-based Concurrency",id:"-integrating-procs-with-fiber-based-concurrency",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-integrating-procs-with-fiber-based-concurrency",children:"\ud83d\udd04 Integrating Procs with Fiber-based Concurrency"}),"\n",(0,a.jsx)(r.p,{children:"Use procs as lightweight callbacks in Fiber-based cooperative concurrency to manage I/O or CPU-bound tasks. Pass lambdas into fibers to encapsulate state and resume execution precisely where needed."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"require 'fiber'\n\nproducer = Fiber.new do\n  3.times do |i|\n    Fiber.yield i * 2\n  end\nend\n\nconsumer = -> do\n  while value = producer.resume\n    puts \"Consumed: #{value}\"\n  end\nend\n\nconsumer.call\n"})}),"\n",(0,a.jsxs)(r.p,{children:["Encapsulate retry logic, backoff strategies, or streaming transforms as procs, and orchestrate them with ",(0,a.jsx)(r.code,{children:"Fiber.yield"}),"/",(0,a.jsx)(r.code,{children:"resume"})," for fine-grained control."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>o});var s=n(36672);const a={},t=s.createContext(a);function c(e){const r=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);