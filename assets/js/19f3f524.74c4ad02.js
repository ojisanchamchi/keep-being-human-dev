"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34273],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(36672);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},93892:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"ruby/metaprogramming/expert/scoped_monkey_patching_with_refinements","title":"scoped_monkey_patching_with_refinements","description":"\ud83e\udde9 Scoped Monkey Patching with Refinements","source":"@site/docs/ruby/metaprogramming/expert/scoped_monkey_patching_with_refinements.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/scoped_monkey_patching_with_refinements","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/scoped_monkey_patching_with_refinements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/scoped_monkey_patching_with_refinements.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"runtime_instrumentation_tracepoint","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/runtime_instrumentation_tracepoint"},"next":{"title":"unbound_method_rebinding","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/unbound_method_rebinding"}}');var o=t(23420),i=t(65404);const s={},a=void 0,c={},m=[{value:"\ud83e\udde9 Scoped Monkey Patching with Refinements",id:"-scoped-monkey-patching-with-refinements",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-scoped-monkey-patching-with-refinements",children:"\ud83e\udde9 Scoped Monkey Patching with Refinements"}),"\n",(0,o.jsx)(n.p,{children:"Use Ruby refinements to apply method overrides in a controlled, lexically scoped manner. This prevents global side effects and keeps your patch local to the file or module where it\u2019s needed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"module StringExtensions\n  refine String do\n    def shout\n      upcase + '!!!'\n    end\n  end\nend\n\nmodule Speaker\n  using StringExtensions\n\n  def speak(msg)\n    puts msg.shout\n  end\nend\n\nclass Announcer\n  extend Speaker\nend\n\nAnnouncer.speak('hello')   # => \"HELLO!!!\"\n\"hello\".shout             # => NoMethodError outside the refinement scope\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);