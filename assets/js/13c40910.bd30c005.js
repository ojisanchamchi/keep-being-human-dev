"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44140],{31420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>r,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/hashes/advanced/fetch_with_block_defaults","title":"fetch_with_block_defaults","description":"\ud83c\udf9b\ufe0f fetch with Blocks vs Default Values","source":"@site/docs/ruby/hashes/advanced/fetch_with_block_defaults.md","sourceDirName":"ruby/hashes/advanced","slug":"/ruby/hashes/advanced/fetch_with_block_defaults","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/fetch_with_block_defaults","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/advanced/fetch_with_block_defaults.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compact_and_filter_map","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/compact_and_filter_map"},"next":{"title":"grouping_with_each_with_object","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/grouping_with_each_with_object"}}');var a=n(23420),c=n(65404);const i={},o=void 0,u={},d=[{value:"\ud83c\udf9b\ufe0f <code>fetch</code> with Blocks vs Default Values",id:"\ufe0f-fetch-with-blocks-vs-default-values",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h2,{id:"\ufe0f-fetch-with-blocks-vs-default-values",children:["\ud83c\udf9b\ufe0f ",(0,a.jsx)(t.code,{children:"fetch"})," with Blocks vs Default Values"]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"Hash#fetch"})," lets you distinguish missing keys from ",(0,a.jsx)(t.code,{children:"nil"})," values and lazily compute defaults. Using a block avoids creating unused defaults up\u2010front."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"h = {a: 1}\n\n# Default argument (eager)\ndef_value = h.fetch(:b, expensive_computation)\n# expensive_computation runs even if :b exists\n\n# Block form (lazy)\nlazy_value = h.fetch(:b) { expensive_computation }\n# expensive_computation only runs if :b missing\n\n# Handling nil vs missing\nh[:c] = nil\nh.fetch(:c, 'default')  # => nil (key exists)\nh.fetch(:d, 'default')  # => \"default\" (key missing)\n"})})]})}function r(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(36672);const a={},c=s.createContext(a);function i(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);