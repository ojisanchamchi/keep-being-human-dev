"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78290],{45393:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/caching/advanced/custom_cache_versioning","title":"custom_cache_versioning","description":"\ud83d\udee0\ufe0f Custom Cache Versioning Strategies","source":"@site/docs/rails/caching/advanced/custom_cache_versioning.md","sourceDirName":"rails/caching/advanced","slug":"/rails/caching/advanced/custom_cache_versioning","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/custom_cache_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/advanced/custom_cache_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"view_rendering_benchmark","permalink":"/keep-being-human-dev/docs/rails/benchmarking/middle/view_rendering_benchmark"},"next":{"title":"dynamic_fragment_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/dynamic_fragment_caching"}}');var t=c(23420),s=c(65404);const i={},r=void 0,o={},d=[{value:"\ud83d\udee0\ufe0f Custom Cache Versioning Strategies",id:"\ufe0f-custom-cache-versioning-strategies",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-custom-cache-versioning-strategies",children:"\ud83d\udee0\ufe0f Custom Cache Versioning Strategies"}),"\n",(0,t.jsxs)(n.p,{children:["Implement custom ",(0,t.jsx)(n.code,{children:"cache_version"})," methods on models to finely control when fragments expire beyond timestamp changes. This is handy when your model depends on external data or multi-table aggregates."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/product.rb\nclass Product < ApplicationRecord\n  has_many :prices\n\n  def cache_version\n    # Combine record updated_at with associated prices max updated_at\n    [updated_at, prices.maximum(:updated_at)].compact.max\n  end\nend\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-erb",children:"<%= cache [@product, @product.cache_version] do %>\n  \x3c!-- heavy product view --\x3e\n<% end %>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Whenever a price changes, ",(0,t.jsx)(n.code,{children:"cache_version"})," changes, invalidating only the product fragment without touching unrelated caches."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,c)=>{c.d(n,{R:()=>i,x:()=>r});var a=c(36672);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);