"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35370],{44232:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"ruby/classes_and_modules/middle/class_eval_vs_module_eval","title":"class_eval_vs_module_eval","description":"\ud83d\udd79\ufe0f Dynamically Adding Methods with class_eval","source":"@site/docs/ruby/classes_and_modules/middle/class_eval_vs_module_eval.md","sourceDirName":"ruby/classes_and_modules/middle","slug":"/ruby/classes_and_modules/middle/class_eval_vs_module_eval","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/class_eval_vs_module_eval","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/middle/class_eval_vs_module_eval.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tracepoint_execution_tracing","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/tracepoint_execution_tracing"},"next":{"title":"concern_pattern","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/concern_pattern"}}');var t=n(23420),l=n(65404);const d={},c=void 0,o={},r=[{value:"\ud83d\udd79\ufe0f Dynamically Adding Methods with <code>class_eval</code>",id:"\ufe0f-dynamically-adding-methods-with-class_eval",level:2}];function i(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h2,{id:"\ufe0f-dynamically-adding-methods-with-class_eval",children:["\ud83d\udd79\ufe0f Dynamically Adding Methods with ",(0,t.jsx)(s.code,{children:"class_eval"})]}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:"class_eval"})," or ",(0,t.jsx)(s.code,{children:"module_eval"})," to inject methods or constants at runtime. This approach is helpful in metaprogramming for DSLs or dynamic API wrappers."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'class APIClient; end\n\nAPIClient.class_eval do\n  def fetch(resource)\n    "Fetching \\\\#{resource}"\n  end\nend\n\nclient = APIClient.new\nputs client.fetch(\'users\')\n# => "Fetching users"\n'})})]})}function u(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(i,{...e})}):i(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>c});var a=n(36672);const t={},l=a.createContext(t);function d(e){const s=a.useContext(l);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(l.Provider,{value:s},e.children)}}}]);