"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48359],{65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>c});var s=t(36672);const n={},a=s.createContext(n);function i(e){const r=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(a.Provider,{value:r},e.children)}},75030:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"rails/active_record/expert/bulk_upserts_insert_all","title":"bulk_upserts_insert_all","description":"\ud83d\udce6 Bulk Inserts and Upserts with insert_all","source":"@site/docs/rails/active_record/expert/bulk_upserts_insert_all.md","sourceDirName":"rails/active_record/expert","slug":"/rails/active_record/expert/bulk_upserts_insert_all","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/bulk_upserts_insert_all","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/expert/bulk_upserts_insert_all.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_cache_bidi","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/association_cache_bidi"},"next":{"title":"dynamic_scopes_metaprogramming","permalink":"/keep-being-human-dev/docs/rails/active_record/expert/dynamic_scopes_metaprogramming"}}');var n=t(23420),a=t(65404);const i={},c=void 0,l={},o=[{value:"\ud83d\udce6 Bulk Inserts and Upserts with <code>insert_all</code>",id:"-bulk-inserts-and-upserts-with-insert_all",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.h2,{id:"-bulk-inserts-and-upserts-with-insert_all",children:["\ud83d\udce6 Bulk Inserts and Upserts with ",(0,n.jsx)(r.code,{children:"insert_all"})]}),"\n",(0,n.jsxs)(r.p,{children:["Use ",(0,n.jsx)(r.code,{children:"insert_all"})," and ",(0,n.jsx)(r.code,{children:"upsert_all"})," to bypass callbacks for high-throughput writes. Manage constraints and on-conflict behavior directly in SQL for performance."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"records = users.map { |u| { email: u.email, name: u.name, created_at: Time.now, updated_at: Time.now } }\n\nUser.insert_all(records)\n# Upsert example\nUser.upsert_all(records, unique_by: :email)\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);