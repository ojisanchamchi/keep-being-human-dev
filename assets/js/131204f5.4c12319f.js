"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9229],{29444:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/faker/expert/concurrent_load_testing.md","title":"concurrent_load_testing.md","description":"\ud83d\ude80 Leveraging Faker in High-Concurrency Performance and Load Testing","source":"@site/docs/gems/faker/expert/concurrent_load_testing.md.md","sourceDirName":"gems/faker/expert","slug":"/gems/faker/expert/concurrent_load_testing.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/concurrent_load_testing.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faker/expert/concurrent_load_testing.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"seeding_with_faker","permalink":"/keep-being-human-dev/docs/gems/faker/beginner/seeding_with_faker"},"next":{"title":"custom_faker_provider.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/custom_faker_provider.md"}}');var a=r(23420),o=r(65404);const s={},i=void 0,c={},d=[{value:"\ud83d\ude80 Leveraging Faker in High-Concurrency Performance and Load Testing",id:"-leveraging-faker-in-high-concurrency-performance-and-load-testing",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-leveraging-faker-in-high-concurrency-performance-and-load-testing",children:"\ud83d\ude80 Leveraging Faker in High-Concurrency Performance and Load Testing"}),"\n",(0,a.jsxs)(n.p,{children:["For realistic load testing or seeding, integrate Faker into multi-threaded or parallel workflows. Use a thread-safe pool (e.g., ",(0,a.jsx)(n.code,{children:"concurrent-ruby"}),") and clear Faker\u2019s unique generator per thread to avoid collisions and memory bloat. This approach scales data generation under stress tests."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'require \'concurrent\'\n\n# Define generator for a user record\ndef generate_user\n  Faker::UniqueGenerator.clear  # Reset per-thread unique registry\n  {\n    email: Faker::Internet.unique.email,\n    name:  Faker::Name.name,\n    bio:   Faker::Quote.famous_last_words\n  }\nend\n\n# Spawn a fixed thread pool for parallel seeding\npool = Concurrent::FixedThreadPool.new(10)\n1000.times do\n  pool.post do\n    User.create!(generate_user)\n  end\nend\npool.shutdown\npool.wait_for_termination\n\n# Verify count\nputs "Seeded ", User.count, "users"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(36672);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);