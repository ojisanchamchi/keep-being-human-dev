"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1249],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(36672);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},88168:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/metaprogramming/expert/chainable_dsl_with_lambdas","title":"chainable_dsl_with_lambdas","description":"\ud83d\udd27 Chainable DSL via Lambdas","source":"@site/docs/ruby/metaprogramming/expert/chainable_dsl_with_lambdas.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/chainable_dsl_with_lambdas","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/chainable_dsl_with_lambdas","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/chainable_dsl_with_lambdas.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_method_missing_respond_to","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/advanced_method_missing_respond_to"},"next":{"title":"compile_time_code_generation_with_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/compile_time_code_generation_with_eval"}}');var i=a(23420),r=a(65404);const s={},o=void 0,d={},l=[{value:"\ud83d\udd27 Chainable DSL via Lambdas",id:"-chainable-dsl-via-lambdas",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-chainable-dsl-via-lambdas",children:"\ud83d\udd27 Chainable DSL via Lambdas"}),"\n",(0,i.jsx)(n.p,{children:"Design a fluent interface with lambdas that build and return new scopes. This immutability-inspired pattern enables construction of complex queries or configurations without side effects."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class Query\n  def initialize(clauses = [])\n    @clauses = clauses\n  end\n\n  def where(condition)\n    Query.new(@clauses + ["WHERE #{condition}"])\n  end\n\n  def order_by(field)\n    Query.new(@clauses + ["ORDER BY #{field}"])\n  end\n\n  def to_sql\n    "SELECT * FROM table " + @clauses.join(\' \')\n  end\nend\n\nq = Query.new.where("age > 21").order_by("name")\nputs q.to_sql  # => "SELECT * FROM table WHERE age > 21 ORDER BY name"\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);