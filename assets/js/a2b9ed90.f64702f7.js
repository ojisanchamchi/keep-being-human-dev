"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52809],{23813:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/enumerables/advanced/zip_lazy_pattern_matching","title":"zip_lazy_pattern_matching","description":"\ud83d\udd17 Compose and Transform Multiple Enumerables with zip and Lazy","source":"@site/docs/ruby/enumerables/advanced/zip_lazy_pattern_matching.md","sourceDirName":"ruby/enumerables/advanced","slug":"/ruby/enumerables/advanced/zip_lazy_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/zip_lazy_pattern_matching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/advanced/zip_lazy_pattern_matching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"slice_when_custom_breaks","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/slice_when_custom_breaks"},"next":{"title":"accumulate_with_inject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/accumulate_with_inject"}}');var r=a(23420),i=a(65404);const s={},c=void 0,o={},l=[{value:"\ud83d\udd17 Compose and Transform Multiple Enumerables with zip and Lazy",id:"-compose-and-transform-multiple-enumerables-with-zip-and-lazy",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-compose-and-transform-multiple-enumerables-with-zip-and-lazy",children:"\ud83d\udd17 Compose and Transform Multiple Enumerables with zip and Lazy"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"zip"})," to combine enumerables element\u2011wise and then chain lazy operations. Destructure arrays directly in block parameters for clearer transformations."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'names  = %w[alice bob charlie]\nages   = [28, 35, 42]\ncities = %w[NYC LA SF]\n\ninfo = names\n  .zip(ages, cities)\n  .lazy\n  .filter_map do |name, age, city|\n    "#{name.capitalize} (#{age}) from #{city}" if age > 30\n  end\n\np info.to_a\n# => ["Bob (35) from LA", "Charlie (42) from SF"]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(36672);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);