"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56186],{63938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/ranges/expert/custom_infinite_enumerator","title":"custom_infinite_enumerator","description":"\ud83d\udd04 Build a Custom Infinite Enumerator with Ranges","source":"@site/docs/ruby/ranges/expert/custom_infinite_enumerator.md","sourceDirName":"ruby/ranges/expert","slug":"/ruby/ranges/expert/custom_infinite_enumerator","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/custom_infinite_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/expert/custom_infinite_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"cover_vs_include_performance","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/cover_vs_include_performance"},"next":{"title":"endless_and_beginless_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/endless_and_beginless_ranges"}}');var s=t(23420),a=t(65404);const i={},o=void 0,u={},c=[{value:"\ud83d\udd04 Build a Custom Infinite Enumerator with Ranges",id:"-build-a-custom-infinite-enumerator-with-ranges",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-build-a-custom-infinite-enumerator-with-ranges",children:"\ud83d\udd04 Build a Custom Infinite Enumerator with Ranges"}),"\n",(0,s.jsxs)(n.p,{children:["Combine endless ranges with custom step logic to create powerful, infinite streams, such as for retry backoff or sequence generators. By feeding an endless range into ",(0,s.jsx)(n.code,{children:"flat_map"})," or ",(0,s.jsx)(n.code,{children:"map"})," you can yield complex sequences lazily without storing state."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# Fibonacci stream using endless Range\nfib = Enumerator.new do |yielder|\n  a, b = [0, 1]\n  (1..).each do\n    yielder << a\n    a, b = b, a + b\n  end\nend\n\nputs fib.take(10).inspect  # [0,1,1,2,3,5,8,13,21,34]\n\n# Exponential backoff delays\nbackoff = (0..).lazy.map { |i| 2**i }.take(5).force\n# => [1,2,4,8,16]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(36672);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);