"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96099],{65404:(e,s,a)=>{a.d(s,{R:()=>d,x:()=>i});var r=a(36672);const t={},n=r.createContext(t);function d(e){const s=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(n.Provider,{value:s},e.children)}},83184:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>m,contentTitle:()=>i,default:()=>l,frontMatter:()=>d,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"gems/rspec/shared_examples/middle/shared_examples_parameterized_usage","title":"shared_examples_parameterized_usage","description":"\u2699\ufe0f Parameterize shared_examples with parameters","source":"@site/docs/gems/rspec/shared_examples/middle/shared_examples_parameterized_usage.md","sourceDirName":"gems/rspec/shared_examples/middle","slug":"/gems/rspec/shared_examples/middle/shared_examples_parameterized_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/middle/shared_examples_parameterized_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/middle/shared_examples_parameterized_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"shared_examples_basic_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/middle/shared_examples_basic_usage"},"next":{"title":"batch_embeddings_async","permalink":"/keep-being-human-dev/docs/gems/ruby-openai/advanced/batch_embeddings_async"}}');var t=a(23420),n=a(65404);const d={},i=void 0,m={},p=[{value:"\u2699\ufe0f Parameterize shared_examples with parameters",id:"\ufe0f-parameterize-shared_examples-with-parameters",level:2}];function c(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"\ufe0f-parameterize-shared_examples-with-parameters",children:"\u2699\ufe0f Parameterize shared_examples with parameters"}),"\n",(0,t.jsxs)(s.p,{children:["Use block arguments in ",(0,t.jsx)(s.code,{children:"shared_examples"})," to pass different contexts or scopes, avoiding duplication when testing similar behavior with varying inputs. This pattern simplifies adding new cases without rewriting the example group."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:'# spec/support/shared_examples/filterable.rb\nRSpec.shared_examples "filterable model" do |scope_name|\n  let!(:matching_records) { create_list(:user, 2, scope_name => true) }\n  let!(:non_matching_records) { create_list(:user, 2, scope_name => false) }\n\n  it "returns only records where #{scope_name} is true" do\n    expect(described_class.send(scope_name)).to match_array(matching_records)\n  end\nend\n\n# spec/models/user_spec.rb\nRSpec.describe User, type: :model do\n  it_behaves_like "filterable model", :active\n  it_behaves_like "filterable model", :verified\nend\n'})})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);