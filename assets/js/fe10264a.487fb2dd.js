"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34398],{41666:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/blocks/advanced/method_wrapper_with_blocks","title":"method_wrapper_with_blocks","description":"\ud83d\udee0\ufe0f Dynamically Wrapping Methods with Blocks","source":"@site/docs/ruby/blocks/advanced/method_wrapper_with_blocks.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/method_wrapper_with_blocks","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/method_wrapper_with_blocks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/method_wrapper_with_blocks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_infinite_streams","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/lazy_infinite_streams"},"next":{"title":"proc_currying_and_composition","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/proc_currying_and_composition"}}');var a=t(23420),o=t(65404);const s={},c=void 0,d={},i=[{value:"\ud83d\udee0\ufe0f Dynamically Wrapping Methods with Blocks",id:"\ufe0f-dynamically-wrapping-methods-with-blocks",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-dynamically-wrapping-methods-with-blocks",children:"\ud83d\udee0\ufe0f Dynamically Wrapping Methods with Blocks"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"Module#prepend"})," and blocks to wrap existing methods for logging, authorization, or instrumentation, without modifying the original class directly."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'module LoggerWrapper\n  def self.prepended(base)\n    base.instance_methods(false).each do |m|\n      define_method(m) do |*args, &blk|\n        puts "Calling #{m} with #{args.inspect}"\n        result = super(*args, &blk)\n        puts "Done #{m}, returned #{result.inspect}"\n        result\n      end\n    end\n  end\nend\n\nclass Calculator\n  prepend LoggerWrapper\n\n  def add(a, b)\n    a + b\n  end\nend\n\nCalculator.new.add(2,3)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(36672);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);