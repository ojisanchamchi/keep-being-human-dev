"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8797],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(36672);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},66049:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/blocks/expert/advanced_lazy_enumerator_chaining","title":"advanced_lazy_enumerator_chaining","description":"\ud83d\ude80 Advanced Lazy Enumerator Chaining","source":"@site/docs/ruby/blocks/expert/advanced_lazy_enumerator_chaining.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/advanced_lazy_enumerator_chaining","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/advanced_lazy_enumerator_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/advanced_lazy_enumerator_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transforming_map","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/transforming_map"},"next":{"title":"block_instrumentation_with_prepend","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/block_instrumentation_with_prepend"}}');var r=a(23420),o=a(65404);const i={},c=void 0,s={},d=[{value:"\ud83d\ude80 Advanced Lazy Enumerator Chaining",id:"-advanced-lazy-enumerator-chaining",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-advanced-lazy-enumerator-chaining",children:"\ud83d\ude80 Advanced Lazy Enumerator Chaining"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\u2019s ",(0,r.jsx)(n.code,{children:"Enumerator::Lazy"})," builds memory-efficient, infinite sequences that only evaluate when needed. Chain ",(0,r.jsx)(n.code,{children:"select"}),", ",(0,r.jsx)(n.code,{children:"map"}),", and other transformations to process large or unbounded streams without intermediate arrays."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"fib = Enumerator.new do |y|\n  a, b = [0, 1]\n  loop do\n    y << a\n    a, b = b, a + b\n  end\nend.lazy\n\n# Retrieve first 5 even Fibonacci numbers doubled\nresult = fib.select(&:even?).map { |n| n * 2 }.first(5)\nputs result.inspect # => [0, 4, 10, 34, 88]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);