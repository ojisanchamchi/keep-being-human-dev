"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28841],{65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>d});var o=r(36672);const t={},a=o.createContext(t);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(a.Provider,{value:n},e.children)}},87637:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/operators/advanced/operator_overloading.md","title":"operator_overloading.md","description":"\ud83d\udee0 Custom Operator Overloading in Classes","source":"@site/docs/ruby/operators/advanced/operator_overloading.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/operator_overloading.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/operator_overloading.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/operator_overloading.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flip_flop_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/flip_flop_operator.md"},"next":{"title":"pattern_matching_case_in.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/pattern_matching_case_in.md"}}');var t=r(23420),a=r(65404);const s={},d=void 0,i={},c=[{value:"\ud83d\udee0 Custom Operator Overloading in Classes",id:"-custom-operator-overloading-in-classes",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-custom-operator-overloading-in-classes",children:"\ud83d\udee0 Custom Operator Overloading in Classes"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby lets you define or override operators (",(0,t.jsx)(n.code,{children:"+"}),", ",(0,t.jsx)(n.code,{children:"-"}),", ",(0,t.jsx)(n.code,{children:"[]"}),", etc.) in your classes for intuitive DSLs. Always follow operator semantics (e.g., non-mutating vs. mutating) and return self or a new object accordingly."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class Matrix2D\n  def initialize(a,b,c,d)\n    @m = [a,b,c,d]\n  end\n  def +(other)\n    a,b,c,d = @m.zip(other.instance_variable_get(:@m)).map { |x,y| x+y }\n    Matrix2D.new(a,b,c,d)\n  end\n  def to_s\n    "[#{@m[0]}, #{@m[1]}; #{@m[2]}, #{@m[3]}]"\n  end\nend\n\nm1 = Matrix2D.new(1,2,3,4)\nm2 = Matrix2D.new(5,6,7,8)\nputs (m1 + m2).to_s  # => [6, 8; 10, 12]\n'})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);