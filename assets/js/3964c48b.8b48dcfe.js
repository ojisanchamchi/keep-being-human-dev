"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73886],{65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var t=s(36672);const i={},a=t.createContext(i);function c(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:n},e.children)}},66935:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>_,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original","title":"class_spy_on_new_with_and_call_original","description":"\ud83e\udd16 Tracking Instantiation with classspy and andcall_original","source":"@site/docs/gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original.md","sourceDirName":"gems/rspec/mocks_and_stubs/expert","slug":"/gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/expert/class_spy_on_new_with_and_call_original.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stub_return_value","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/stub_return_value"},"next":{"title":"complex_block_yields_with_and_yield","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/expert/complex_block_yields_with_and_yield"}}');var i=s(23420),a=s(65404);const c={},r=void 0,o={},l=[{value:"\ud83e\udd16 Tracking Instantiation with <code>class_spy</code> and <code>and_call_original</code>",id:"-tracking-instantiation-with-class_spy-and-and_call_original",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-tracking-instantiation-with-class_spy-and-and_call_original",children:["\ud83e\udd16 Tracking Instantiation with ",(0,i.jsx)(n.code,{children:"class_spy"})," and ",(0,i.jsx)(n.code,{children:"and_call_original"})]}),"\n",(0,i.jsxs)(n.p,{children:["Combine ",(0,i.jsx)(n.code,{children:"class_spy"})," with ",(0,i.jsx)(n.code,{children:"and_call_original"})," to monitor ",(0,i.jsx)(n.code,{children:".new"})," calls while preserving the original constructor behavior. This is crucial when verifying that factories or service objects are built with the correct arguments without altering their logic."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class WidgetFactory\n  def initialize(size)\n    @size = size\n  end\n\n  def build\n    # build logic returning a widget\n    \"widget(#{@size})\"\n  end\nend\n\nRSpec.describe WidgetFactory do\n  it 'spies on .new and still calls the real constructor' do\n    factory_spy = class_spy('WidgetFactory').as_stubbed_const\n    allow(WidgetFactory).to receive(:new).and_call_original\n\n    instance = WidgetFactory.new(5)\n    result = instance.build\n\n    expect(factory_spy).to have_received(:new).with(5)\n    expect(result).to eq('widget(5)')\n  end\nend\n"})})]})}function _(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);