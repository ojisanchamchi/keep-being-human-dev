"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61537],{24807:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/net_http/advanced/streaming_large_responses","title":"streaming_large_responses","description":"\ud83d\udce6 Stream Large Responses to Reduce Memory Footprint","source":"@site/docs/ruby/net_http/advanced/streaming_large_responses.md","sourceDirName":"ruby/net_http/advanced","slug":"/ruby/net_http/advanced/streaming_large_responses","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/streaming_large_responses","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/advanced/streaming_large_responses.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"persistent_http_connections","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/persistent_http_connections"},"next":{"title":"basic_get_request","permalink":"/keep-being-human-dev/docs/ruby/net_http/beginner/basic_get_request"}}');var s=n(23420),o=n(65404);const a={},i=void 0,d={},c=[{value:"\ud83d\udce6 Stream Large Responses to Reduce Memory Footprint",id:"-stream-large-responses-to-reduce-memory-footprint",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-stream-large-responses-to-reduce-memory-footprint",children:"\ud83d\udce6 Stream Large Responses to Reduce Memory Footprint"}),"\n",(0,s.jsxs)(t.p,{children:["When downloading large payloads you can yield chunks as they arrive to avoid loading the entire response into memory. Use ",(0,s.jsx)(t.code,{children:"Net::HTTP.start"})," with a block and ",(0,s.jsx)(t.code,{children:"response.read_body"})," to process data incrementally, which is perfect for file downloads or streaming APIs."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"uri = URI('https://example.com/large-file.zip')\nNet::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|\n  request = Net::HTTP::Get.new(uri)\n  http.request(request) do |response|\n    File.open('large-file.zip', 'wb') do |file|\n      response.read_body do |chunk|\n        file.write(chunk)\n      end\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(36672);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);