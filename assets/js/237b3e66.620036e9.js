"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39193],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(36672);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}},83847:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"rails/views/expert/viewcomponent_deep_dive","title":"viewcomponent_deep_dive","description":"\ud83c\udfa8 Deep-dive into Rails ViewComponent Patterns","source":"@site/docs/rails/views/expert/viewcomponent_deep_dive.md","sourceDirName":"rails/views/expert","slug":"/rails/views/expert/viewcomponent_deep_dive","permalink":"/keep-being-human-dev/docs/rails/views/expert/viewcomponent_deep_dive","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/views/expert/viewcomponent_deep_dive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"view_rendering_profiler","permalink":"/keep-being-human-dev/docs/rails/views/expert/view_rendering_profiler"},"next":{"title":"collection_rendering","permalink":"/keep-being-human-dev/docs/rails/views/middle/collection_rendering"}}');var i=t(23420),s=t(65404);const r={},a=void 0,p={},c=[{value:"\ud83c\udfa8 Deep-dive into Rails ViewComponent Patterns",id:"-deep-dive-into-rails-viewcomponent-patterns",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-deep-dive-into-rails-viewcomponent-patterns",children:"\ud83c\udfa8 Deep-dive into Rails ViewComponent Patterns"}),"\n",(0,i.jsx)(n.p,{children:"Extract complex UI logic into reusable, testable ViewComponents to keep your views thin and maintainable. Implement composition by nesting components and passing child components via slots instead of partials."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/components/comment_list_component.rb\nclass CommentListComponent < ViewComponent::Base\n  renders_many :comments, CommentComponent\nend\n\n# app/components/comment_component.rb\nclass CommentComponent < ViewComponent::Base\n  def initialize(author:, content:)\n    @author = author\n    @content = content\n  end\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Use slots to define optional regions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/components/card_component.rb\nclass CardComponent < ViewComponent::Base\n  renders_one :header\n  renders_one :footer\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"This pattern scales for highly dynamic UI compositions without polluting view templates."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);