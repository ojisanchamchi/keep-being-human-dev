"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34871],{40564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rails/i18n/expert/complex_pluralization_rules","title":"complex_pluralization_rules","description":"\ud83d\udee0\ufe0f Complex Pluralization Rules for Arabic","source":"@site/docs/rails/i18n/expert/complex_pluralization_rules.md","sourceDirName":"rails/i18n/expert","slug":"/rails/i18n/expert/complex_pluralization_rules","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/complex_pluralization_rules","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/i18n/expert/complex_pluralization_rules.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"caching_translations_memcache","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/caching_translations_memcache"},"next":{"title":"custom_active_record_backend","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/custom_active_record_backend"}}');var i=t(23420),o=t(65404);const a={},c=void 0,s={},l=[{value:"\ud83d\udee0\ufe0f Complex Pluralization Rules for Arabic",id:"\ufe0f-complex-pluralization-rules-for-arabic",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-complex-pluralization-rules-for-arabic",children:"\ud83d\udee0\ufe0f Complex Pluralization Rules for Arabic"}),"\n",(0,i.jsxs)(n.p,{children:["Languages like Arabic require more than the default ",(0,i.jsx)(n.code,{children:":one"}),"/",(0,i.jsx)(n.code,{children:":other"})," categories. You can register a custom pluralization rule via a ",(0,i.jsx)(n.code,{children:"Proc"})," to correctly map counts to the six Arabic forms."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/arabic_pluralization.rb\nI18n.backend.store_translations(:ar, {\n  i18n: {\n    plural: {\n      keys:   [:zero, :one, :two, :few, :many, :other],\n      rule:   lambda do |n|\n        case n\n        when 0             then :zero\n        when 1             then :one\n        when 2             then :two\n        when 3..10         then :few\n        when 11..99        then :many\n        else                   :other\n        end\n      end\n    }\n  }\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Define your translations in ",(0,i.jsx)(n.code,{children:"ar.yml"})," under these new keys and Rails will route counts correctly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'en:\n  notifications:\n    zero: "No notifications"\n    one: "1 notification"\n    two: "%{count} notifications"\n    few: "%{count} notifications"\n    many: "%{count} notifications"\n    other: "%{count} notifications"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(36672);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);