"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46393],{2894:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/active_record_migrations/advanced/custom_enum_types","title":"custom_enum_types","description":"\ud83d\udee0\ufe0f Define Custom PostgreSQL Enum Types","source":"@site/docs/rails/active_record_migrations/advanced/custom_enum_types.md","sourceDirName":"rails/active_record_migrations/advanced","slug":"/rails/active_record_migrations/advanced/custom_enum_types","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/custom_enum_types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/advanced/custom_enum_types.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"conditional_migrations","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/conditional_migrations"},"next":{"title":"default_sql_functions","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/default_sql_functions"}}');var o=t(23420),r=t(65404);const a={},i=void 0,c={},d=[{value:"\ud83d\udee0\ufe0f Define Custom PostgreSQL Enum Types",id:"\ufe0f-define-custom-postgresql-enum-types",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-define-custom-postgresql-enum-types",children:"\ud83d\udee0\ufe0f Define Custom PostgreSQL Enum Types"}),"\n",(0,o.jsxs)(n.p,{children:["PostgreSQL enums offer better performance and integrity for fixed sets. Create a new enum type via ",(0,o.jsx)(n.code,{children:"execute"})," and map Rails enums to it. Altering enums requires executing ",(0,o.jsx)(n.code,{children:"ALTER TYPE"})," statements."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class CreateMoodEnumAndAddToUsers < ActiveRecord::Migration[6.1]\n  def up\n    execute <<-SQL\n      CREATE TYPE mood AS ENUM ('happy', 'sad', 'neutral');\n    SQL\n    add_column :users, :mood, :mood, default: 'neutral', null: false\n  end\n\n  def down\n    remove_column :users, :mood\n    execute 'DROP TYPE mood;'\n  end\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(36672);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);