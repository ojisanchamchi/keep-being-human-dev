"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89900],{5094:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"sql/general/middle/parameterized_queries_security","title":"parameterized_queries_security","description":"\ud83d\udd12 Use Parameterized Queries to Prevent SQL Injection","source":"@site/docs/sql/general/middle/parameterized_queries_security.md","sourceDirName":"sql/general/middle","slug":"/sql/general/middle/parameterized_queries_security","permalink":"/keep-being-human-dev/docs/sql/general/middle/parameterized_queries_security","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/general/middle/parameterized_queries_security.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"jsonb_querying","permalink":"/keep-being-human-dev/docs/sql/general/middle/jsonb_querying"},"next":{"title":"query_plan_analysis","permalink":"/keep-being-human-dev/docs/sql/general/middle/query_plan_analysis"}}');var s=n(23420),i=n(65404);const a={},o=void 0,c={},d=[{value:"\ud83d\udd12 Use Parameterized Queries to Prevent SQL Injection",id:"-use-parameterized-queries-to-prevent-sql-injection",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-use-parameterized-queries-to-prevent-sql-injection",children:"\ud83d\udd12 Use Parameterized Queries to Prevent SQL Injection"}),"\n",(0,s.jsx)(r.p,{children:"Instead of concatenating user inputs into SQL strings, use prepared statements or ORM placeholders to safely inject parameters. This protects your application from injection attacks and often improves performance due to query plan caching."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'# Using ActiveRecord\nUser.where("email = ? AND active = ?", params[:email], true)\n\n# Using raw PG connection\nconn.exec_params("SELECT * FROM users WHERE id = $1", [user_id])\n'})})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(36672);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);