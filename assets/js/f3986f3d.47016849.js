"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[99728],{56266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/enumerables/beginner/exclude_with_reject","title":"exclude_with_reject","description":"\ud83d\udeab Exclude Items with reject","source":"@site/docs/ruby/enumerables/beginner/exclude_with_reject.md","sourceDirName":"ruby/enumerables/beginner","slug":"/ruby/enumerables/beginner/exclude_with_reject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/exclude_with_reject","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/beginner/exclude_with_reject.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"accumulate_with_inject","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/accumulate_with_inject"},"next":{"title":"filter_with_select","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/filter_with_select"}}');var s=n(23420),c=n(65404);const i={},o=void 0,u={},l=[{value:"\ud83d\udeab Exclude Items with reject",id:"-exclude-items-with-reject",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-exclude-items-with-reject",children:"\ud83d\udeab Exclude Items with reject"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"reject"})," method is the opposite of ",(0,s.jsx)(t.code,{children:"select"}),": it returns elements for which the block is ",(0,s.jsx)(t.code,{children:"false"}),". Use ",(0,s.jsx)(t.code,{children:"reject"})," to remove unwanted items from an enumerable in a clear, declarative way."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'numbers = [1, 2, 3, 4, 5]\n# Remove odd numbers\nnon_odds = numbers.reject { |n| n.odd? }\n# => [2, 4]\n\nwords = %w[hello world skip_this test]\nfiltered = words.reject { |w| w.start_with?(\'skip\') }\n# => ["hello", "world", "test"]\n'})})]})}function a(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(36672);const s={},c=r.createContext(s);function i(e){const t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);