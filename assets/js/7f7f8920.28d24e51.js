"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[42532],{14463:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/matrix/middle/matrix_basic_operations","title":"matrix_basic_operations","description":"\ud83d\udd22 Working with Basic Matrix Operations","source":"@site/docs/ruby/matrix/middle/matrix_basic_operations.md","sourceDirName":"ruby/matrix/middle","slug":"/ruby/matrix/middle/matrix_basic_operations","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_basic_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/matrix/middle/matrix_basic_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sparse_matrix_lazy_enumerator","permalink":"/keep-being-human-dev/docs/ruby/matrix/expert/sparse_matrix_lazy_enumerator"},"next":{"title":"matrix_enumeration_transform","permalink":"/keep-being-human-dev/docs/ruby/matrix/middle/matrix_enumeration_transform"}}');var a=t(23420),n=t(65404);const s={},o=void 0,c={},d=[{value:"\ud83d\udd22 Working with Basic Matrix Operations",id:"-working-with-basic-matrix-operations",level:2}];function m(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-working-with-basic-matrix-operations",children:"\ud83d\udd22 Working with Basic Matrix Operations"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"Matrix"})," class in Ruby provides a straightforward way to perform addition, subtraction, and multiplication on matrices without manual iteration. Always require the stdlib and initialize matrices using arrays of rows. You can then use ",(0,a.jsx)(r.code,{children:"+"}),", ",(0,a.jsx)(r.code,{children:"-"}),", and ",(0,a.jsx)(r.code,{children:"*"})," operators directly."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:"require 'matrix'\n\nm1 = Matrix[[1, 2], [3, 4]]\nm2 = Matrix[[5, 6], [7, 8]]\n\nsum        = m1 + m2       # => Matrix[[6,8],[10,12]]\ndifference = m2 - m1       # => Matrix[[4,4],[4,4]]\nproduct    = m1 * m2       # => Matrix[[19,22],[43,50]]\n"})}),"\n",(0,a.jsx)(r.p,{children:"Using these operators makes the code concise and readable, avoiding nested loops."})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var i=t(36672);const a={},n=i.createContext(a);function s(e){const r=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(n.Provider,{value:r},e.children)}}}]);