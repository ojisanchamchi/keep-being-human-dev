"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78722],{46238:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"gems/sidekiq/advanced/custom_server_middleware","title":"custom_server_middleware","description":"\u2699\ufe0f Custom Server Middleware for Instrumentation","source":"@site/docs/gems/sidekiq/advanced/custom_server_middleware.md","sourceDirName":"gems/sidekiq/advanced","slug":"/gems/sidekiq/advanced/custom_server_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/custom_server_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/advanced/custom_server_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_retry_backoff","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/custom_retry_backoff"},"next":{"title":"rate_limiting_concurrency","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/rate_limiting_concurrency"}}');var s=n(23420),i=n(65404);const a={},o=void 0,d={},c=[{value:"\u2699\ufe0f Custom Server Middleware for Instrumentation",id:"\ufe0f-custom-server-middleware-for-instrumentation",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"\ufe0f-custom-server-middleware-for-instrumentation",children:"\u2699\ufe0f Custom Server Middleware for Instrumentation"}),"\n",(0,s.jsx)(r.p,{children:"Integrate a custom server middleware to capture metrics or enforce idempotency across all your Sidekiq workers. This allows you to measure job execution times, count failures, and centralize logging without modifying individual worker classes."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'# app/middleware/instrumentation_middleware.rb\nclass InstrumentationMiddleware\n  def call(worker, msg, queue)\n    start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n    yield\n    duration = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start_time\n    StatsD.measure("sidekiq.job.duration", duration, tags: ["worker:#{worker.class.name}"])\n  rescue => e\n    StatsD.increment("sidekiq.job.failure", tags: ["worker:#{worker.class.name}"])\n    raise\n  end\nend\n\n# config/initializers/sidekiq.rb\nSidekiq.configure_server do |config|\n  config.server_middleware do |chain|\n    chain.add InstrumentationMiddleware\n  end\nend\n'})})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(36672);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);