"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16491],{65404:(e,i,t)=>{t.d(i,{R:()=>c,x:()=>s});var n=t(36672);const r={},o=n.createContext(r);function c(e){const i=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(o.Provider,{value:i},e.children)}},94521:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/active_record_querying/expert/optimistic_locking_queries","title":"optimistic_locking_queries","description":"\ud83d\uddc3\ufe0f Optimistic Locking with Conditional Updates","source":"@site/docs/rails/active_record_querying/expert/optimistic_locking_queries.md","sourceDirName":"rails/active_record_querying/expert","slug":"/rails/active_record_querying/expert/optimistic_locking_queries","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/optimistic_locking_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_querying/expert/optimistic_locking_queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lateral_joins","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/lateral_joins"},"next":{"title":"prepared_statements","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/expert/prepared_statements"}}');var r=t(23420),o=t(65404);const c={},s=void 0,a={},d=[{value:"\ud83d\uddc3\ufe0f Optimistic Locking with Conditional Updates",id:"\ufe0f-optimistic-locking-with-conditional-updates",level:2}];function l(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"\ufe0f-optimistic-locking-with-conditional-updates",children:"\ud83d\uddc3\ufe0f Optimistic Locking with Conditional Updates"}),"\n",(0,r.jsxs)(i.p,{children:["Rails\u2019 built-in optimistic locking can be combined with targeted ",(0,r.jsx)(i.code,{children:"update_all"})," calls to avoid race conditions on high-traffic records. Check the ",(0,r.jsx)(i.code,{children:"lock_version"})," within a ",(0,r.jsx)(i.code,{children:"where"})," clause to ensure atomic version bumps and detect conflicts."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ruby",children:'def safe_increment_counter(post_id)\n  Post.where(id: post_id)\n      .where("lock_version = ?", Post.find(post_id).lock_version)\n      .update_all("counter = counter + 1, lock_version = lock_version + 1")\nend\n'})}),"\n",(0,r.jsx)(i.p,{children:"This manual approach reduces the window for stale reads and keeps lock contention minimal for hot rows."})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);