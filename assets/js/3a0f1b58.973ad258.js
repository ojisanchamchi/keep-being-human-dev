"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21743],{65404:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var t=s(36672);const i={},o=t.createContext(i);function d(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(o.Provider,{value:n},e.children)}},87606:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/methods/advanced/method_missing_respond_to_missing","title":"method_missing_respond_to_missing","description":"\ud83d\udd75\ufe0f Advanced methodmissing with respondto_missing?","source":"@site/docs/ruby/methods/advanced/method_missing_respond_to_missing.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/method_missing_respond_to_missing","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_missing_respond_to_missing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/method_missing_respond_to_missing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"memoization_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/memoization_with_arguments"},"next":{"title":"method_object_dispatch","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_object_dispatch"}}');var i=s(23420),o=s(65404);const d={},r=void 0,a={},c=[{value:"\ud83d\udd75\ufe0f Advanced <code>method_missing</code> with <code>respond_to_missing?</code>",id:"\ufe0f-advanced-method_missing-with-respond_to_missing",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"\ufe0f-advanced-method_missing-with-respond_to_missing",children:["\ud83d\udd75\ufe0f Advanced ",(0,i.jsx)(n.code,{children:"method_missing"})," with ",(0,i.jsx)(n.code,{children:"respond_to_missing?"})]}),"\n",(0,i.jsxs)(n.p,{children:["Override ",(0,i.jsx)(n.code,{children:"method_missing"})," judiciously to delegate or synthesize methods, but pair it with ",(0,i.jsx)(n.code,{children:"respond_to_missing?"})," so introspection (and Rails) works correctly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class Config\n  def initialize(settings)\n    @settings = settings\n  end\n\n  def method_missing(name, *args, &block)\n    key = name.to_s.chomp(\"?\")\n    return @settings[key.to_sym] if name.to_s.end_with?('?')\n    super\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    name.to_s.end_with?('?') || super\n  end\nend\n\ncfg = Config.new(debug: true)\np cfg.debug?  # => true\np cfg.respond_to?(:debug?) # => true\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);