"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6382],{65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(36672);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},88949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/enumerables/beginner/iterate_with_each","title":"iterate_with_each","description":"\ud83d\udd01 Iterate with each","source":"@site/docs/ruby/enumerables/beginner/iterate_with_each.md","sourceDirName":"ruby/enumerables/beginner","slug":"/ruby/enumerables/beginner/iterate_with_each","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/iterate_with_each","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/beginner/iterate_with_each.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"find_with_detect","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/find_with_detect"},"next":{"title":"transform_with_map","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/transform_with_map"}}');var a=n(23420),i=n(65404);const s={},o=void 0,c={},u=[{value:"\ud83d\udd01 Iterate with each",id:"-iterate-with-each",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-iterate-with-each",children:"\ud83d\udd01 Iterate with each"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"each"})," method is the most basic way to loop through enumerable collections in Ruby. It yields each element to a block, allowing you to perform operations such as printing, modifying, or accumulating values. Use ",(0,a.jsx)(t.code,{children:"each"})," when you need to process items one by one without changing the original collection."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'numbers = [1, 2, 3, 4, 5]\nnumbers.each do |n|\n  puts "Number: #{n}"\nend\n\n# Shorthand with braces:\nnumbers.each { |n| puts n * 2 }\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);