"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1102],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var c=t(36672);const o={},i=c.createContext(o);function s(e){const n=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),c.createElement(i.Provider,{value:n},e.children)}},89839:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"gems/counter_culture/advanced/dynamic_conditional_counters","title":"dynamic_conditional_counters","description":"\ud83d\udd00 Dynamic Counters with Conditional Logic","source":"@site/docs/gems/counter_culture/advanced/dynamic_conditional_counters.md","sourceDirName":"gems/counter_culture/advanced","slug":"/gems/counter_culture/advanced/dynamic_conditional_counters","permalink":"/keep-being-human-dev/docs/gems/counter_culture/advanced/dynamic_conditional_counters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/advanced/dynamic_conditional_counters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multiple_series","permalink":"/keep-being-human-dev/docs/gems/chartkick/middle/multiple_series"},"next":{"title":"weighted_counter_updates","permalink":"/keep-being-human-dev/docs/gems/counter_culture/advanced/weighted_counter_updates"}}');var o=t(23420),i=t(65404);const s={},r=void 0,a={},u=[{value:"\ud83d\udd00 Dynamic Counters with Conditional Logic",id:"-dynamic-counters-with-conditional-logic",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-dynamic-counters-with-conditional-logic",children:"\ud83d\udd00 Dynamic Counters with Conditional Logic"}),"\n",(0,o.jsxs)(n.p,{children:["When you need to increment counters only for records meeting certain conditions, use a ",(0,o.jsx)(n.code,{children:"Proc"})," for ",(0,o.jsx)(n.code,{children:"column_name"}),". This allows skipping updates or targeting different cache columns based on record state. After defining, run ",(0,o.jsx)(n.code,{children:"counter_culture_fix_counts"})," to backfill existing data."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\n\n  # Only count comments that are not marked as spam\n  counter_culture :post,\n    column_name: ->(comment) { comment.spam? ? nil : 'comments_count' }\nend\n\n# Backfill existing counts\nComment.counter_culture_fix_counts\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In this setup, any comment where ",(0,o.jsx)(n.code,{children:"spam?"})," returns ",(0,o.jsx)(n.code,{children:"true"})," will be skipped (no nil counter), ensuring your ",(0,o.jsx)(n.code,{children:"posts.comments_count"})," only reflects legitimate comments."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);