"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51335],{8387:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/middleware/middle/middleware_insertion_points","title":"middleware_insertion_points","description":"\ud83d\udee0\ufe0f Insert Middleware at Specific Points","source":"@site/docs/rails/middleware/middle/middleware_insertion_points.md","sourceDirName":"rails/middleware/middle","slug":"/rails/middleware/middle/middleware_insertion_points","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/middleware_insertion_points","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/middle/middleware_insertion_points.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_request_logger_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/custom_request_logger_middleware"},"next":{"title":"testing_middleware_integration","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/testing_middleware_integration"}}');var r=n(23420),s=n(65404);const d={},a=void 0,o={},l=[{value:"\ud83d\udee0\ufe0f Insert Middleware at Specific Points",id:"\ufe0f-insert-middleware-at-specific-points",level:2}];function c(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"\ufe0f-insert-middleware-at-specific-points",children:"\ud83d\udee0\ufe0f Insert Middleware at Specific Points"}),"\n",(0,r.jsxs)(i.p,{children:["Rails lets you precisely position middleware relative to built\u2011in components using ",(0,r.jsx)(i.code,{children:"insert_before"})," and ",(0,r.jsx)(i.code,{children:"insert_after"}),". This is especially useful when you depend on data set up by another middleware or need to wrap its behavior."]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-ruby",children:"# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    # Run custom auth check before Rack::Runtime sets X-Runtime\n    config.middleware.insert_before Rack::Runtime, AuthCheckMiddleware\n\n    # Or run a response sanitizer after ActionDispatch::Static serves files\n    config.middleware.insert_after ActionDispatch::Static, ResponseSanitizer\n  end\nend\n"})}),"\n",(0,r.jsxs)(i.p,{children:["The order you inject matters: use ",(0,r.jsx)(i.code,{children:"insert_before"})," to run yours earlier, and ",(0,r.jsx)(i.code,{children:"insert_after"})," to wrap on the way out."]})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>a});var t=n(36672);const r={},s=t.createContext(r);function d(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);