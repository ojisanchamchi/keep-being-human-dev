"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8160],{37234:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing","title":"dynamic_constant_loading_with_const_missing","description":"\ud83d\udce6 Dynamic Constant Loading with const_missing","source":"@site/docs/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_instance_eval_class_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dsl_instance_eval_class_eval"},"next":{"title":"dynamic_define_method_with_closure","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dynamic_define_method_with_closure"}}');var s=t(23420),a=t(65404);const o={},r=void 0,c={},d=[{value:"\ud83d\udce6 Dynamic Constant Loading with const_missing",id:"-dynamic-constant-loading-with-const_missing",level:2}];function m(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"-dynamic-constant-loading-with-const_missing",children:"\ud83d\udce6 Dynamic Constant Loading with const_missing"}),"\n",(0,s.jsxs)(e.p,{children:["Override ",(0,s.jsx)(e.code,{children:"const_missing"})," in a module or class to autoload constants on demand, reducing boot time and dependencies. Use this pattern to implement your own lazy-loading mechanisms or plugin architectures."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ruby",children:"module Plugins\n  PLUGIN_DIR = File.expand_path('plugins', __dir__)\n\n  def self.const_missing(name)\n    file = File.join(PLUGIN_DIR, \"#{name.to_s.downcase}.rb\")\n    if File.exist?(file)\n      require file\n      const_get(name)\n    else\n      super\n    end\n  end\nend\n\n# Accessing Plugins.MyPlugin will autoload 'plugins/myplugin.rb'\n"})})]})}function l(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(m,{...n})}):m(n)}},65404:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(36672);const s={},a=i.createContext(s);function o(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);