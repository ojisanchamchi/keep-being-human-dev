"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40498],{65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(36672);const s={},a=n.createContext(s);function o(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},98836:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"javascript/turbo/expert/turbo_stream_chunked_uploads","title":"turbo_stream_chunked_uploads","description":"\ud83d\udce4 Streaming File Upload Progress with Turbo Streams","source":"@site/docs/javascript/turbo/expert/turbo_stream_chunked_uploads.md","sourceDirName":"javascript/turbo/expert","slug":"/javascript/turbo/expert/turbo_stream_chunked_uploads","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_chunked_uploads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/turbo/expert/turbo_stream_chunked_uploads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_stream_broadcasting","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_broadcasting"},"next":{"title":"turbo_stream_client_hooks","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_client_hooks"}}');var s=r(23420),a=r(65404);const o={},i=void 0,c={},u=[{value:"\ud83d\udce4 Streaming File Upload Progress with Turbo Streams",id:"-streaming-file-upload-progress-with-turbo-streams",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-streaming-file-upload-progress-with-turbo-streams",children:"\ud83d\udce4 Streaming File Upload Progress with Turbo Streams"}),"\n",(0,s.jsx)(t.p,{children:"Implement real-time upload progress by chunking file uploads and sending Turbo Streams back to the client. Use a custom ActionCable channel for progress events."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'// app/javascript/controllers/upload_controller.js\nimport { Controller } from "@hotwired/stimulus"\n\nexport default class extends Controller {\n  async upload(event) {\n    const file = event.target.files[0];\n    const channel = this.application.consumer.subscriptions.create(\n      { channel: "UploadChannel", file_id: file.name },\n      {\n        received: data => Turbo.renderStreamMessage(data)\n      }\n    );\n\n    const chunkSize = 64 * 1024;\n    for (let offset = 0; offset < file.size; offset += chunkSize) {\n      const chunk = file.slice(offset, offset + chunkSize);\n      await fetch(this.data.get("url"), { method: "POST", body: chunk });\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-erb",children:'<input type="file" data-controller="upload" data-upload-url="/uploads" />\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);