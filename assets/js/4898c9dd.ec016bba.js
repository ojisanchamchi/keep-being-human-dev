"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95848],{49042:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>t,contentTitle:()=>r,default:()=>l,frontMatter:()=>d,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/proc_lambda_composition","title":"proc_lambda_composition","description":"\u2699\ufe0f Composing Procs and Lambdas","source":"@site/docs/ruby/procs_and_lambdas/advanced/proc_lambda_composition.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/proc_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_lambda_composition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/proc_lambda_composition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"proc_enumerable_chaining","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/proc_enumerable_chaining"},"next":{"title":"symbol_to_proc_advanced","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/symbol_to_proc_advanced"}}');var s=a(23420),c=a(65404);const d={},r=void 0,t={},i=[{value:"\u2699\ufe0f Composing Procs and Lambdas",id:"\ufe0f-composing-procs-and-lambdas",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-composing-procs-and-lambdas",children:"\u2699\ufe0f Composing Procs and Lambdas"}),"\n",(0,s.jsx)(n.p,{children:"Build complex transformations by composing smaller procs. Define a helper to chain functions, leading to readable, pipeline-like code and easier testing of each stage."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'def compose(*fns)\n  ->(input) { fns.reduce(input) { |memo, fn| fn.call(memo) } }\nend\n\nupcase = ->(s) { s.upcase }\nexclaim = ->(s) { "#{s}!" }\n\nshout = compose(upcase, exclaim)\nputs shout.call("hello world")  # => "HELLO WORLD!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>r});var o=a(36672);const s={},c=o.createContext(s);function d(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);