"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[60122],{65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(36672);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},68323:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor","title":"reentrant_mutex_monitor","description":"\ud83d\udd04 Building a ReentrantMutex with Monitor for Recursive Locks","source":"@site/docs/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor.md","sourceDirName":"ruby/concurrency_and_mutexes/expert","slug":"/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lock_striping_mutex_shard","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard"},"next":{"title":"condition_variable_usage","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/condition_variable_usage"}}');var o=r(23420),i=r(65404);const s={},c=void 0,u={},a=[{value:"\ud83d\udd04 Building a ReentrantMutex with Monitor for Recursive Locks",id:"-building-a-reentrantmutex-with-monitor-for-recursive-locks",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-building-a-reentrantmutex-with-monitor-for-recursive-locks",children:"\ud83d\udd04 Building a ReentrantMutex with Monitor for Recursive Locks"}),"\n",(0,o.jsxs)(n.p,{children:["Ruby\u2019s ",(0,o.jsx)(n.code,{children:"Mutex"})," isn\u2019t reentrant and can deadlock if the same thread re-locks it. Use ",(0,o.jsx)(n.code,{children:"MonitorMixin"})," to craft a reentrant lock that tracks ownership and recursion depth."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'require \'monitor\'\n\nclass ReentrantMutex\n  include MonitorMixin\n\n  def initialize\n    super() # sets up @mon_mutex and @mon_cv\n    @owner = nil\n    @depth = 0\n  end\n\n  def lock\n    mon_enter\n    begin\n      if @owner == Thread.current\n        @depth += 1\n      else\n        @cv.wait_while { @owner }\n        @owner = Thread.current\n        @depth = 1\n      end\n    ensure\n      mon_exit\n    end\n  end\n\n  def unlock\n    mon_enter\n    begin\n      raise "Not owner" unless @owner == Thread.current\n      @depth -= 1\n      if @depth.zero?\n        @owner = nil\n        @cv.signal\n      end\n    ensure\n      mon_exit\n    end\n  end\n\n  def synchronize\n    lock\n    yield\n  ensure\n    unlock\n  end\nend\n\n# Usage\nrm = ReentrantMutex.new\nrm.synchronize do\n  # can call nested rm.synchronize safely\n  rm.synchronize { puts "Reentered!" }\nend\n'})}),"\n",(0,o.jsx)(n.p,{children:"This ensures safe, recursive entry by the same thread and proper signaling upon full unlock."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);