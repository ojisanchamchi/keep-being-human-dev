"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31991],{65404:(n,e,o)=>{o.d(e,{R:()=>t,x:()=>c});var r=o(36672);const s={},a=r.createContext(s);function t(n){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:t(n.components),r.createElement(a.Provider,{value:e},n.children)}},66959:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"rails/logging/advanced/asynchronous_logging","title":"asynchronous_logging","description":"\u26a1 Asynchronous Logger with Concurrent::Async","source":"@site/docs/rails/logging/advanced/asynchronous_logging.md","sourceDirName":"rails/logging/advanced","slug":"/rails/logging/advanced/asynchronous_logging","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/asynchronous_logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/advanced/asynchronous_logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"partial_locals_in_layout.md","permalink":"/keep-being-human-dev/docs/rails/layouts/middle/partial_locals_in_layout.md"},"next":{"title":"custom_log_formatter","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/custom_log_formatter"}}');var s=o(23420),a=o(65404);const t={},c=void 0,i={},g=[{value:"\u26a1 Asynchronous Logger with Concurrent::Async",id:"-asynchronous-logger-with-concurrentasync",level:2}];function l(n){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"-asynchronous-logger-with-concurrentasync",children:"\u26a1 Asynchronous Logger with Concurrent::Async"}),"\n",(0,s.jsxs)(e.p,{children:["Logging can become a bottleneck under high load. Offload I/O by wrapping your logger calls in a background thread or using ",(0,s.jsx)(e.code,{children:"Concurrent::Async"})," to achieve non-blocking log writes."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ruby",children:"# Gemfile\ngem 'concurrent-ruby'\n\n# config/initializers/async_logger.rb\nrequire 'concurrent'\n\nclass AsyncLogger\n  include Concurrent::Async\n\n  def initialize(logger)\n    @logger = logger\n  end\n\n  def info(*args)\n    async do\n      @logger.info(*args)\n    end\n  end\n\n  # Delegate other severity methods similarly...\nend\n\nRails.application.configure do\n  config.logger = AsyncLogger.new(Rails.logger)\nend\n"})})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}}}]);