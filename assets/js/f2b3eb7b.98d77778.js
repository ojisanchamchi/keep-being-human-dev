"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66120],{4912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/security/expert/jwt_with_jwks_rotation","title":"jwt_with_jwks_rotation","description":"\ud83d\udd11 JWT Verification with JWKS & Key Rotation","source":"@site/docs/rails/security/expert/jwt_with_jwks_rotation.md","sourceDirName":"rails/security/expert","slug":"/rails/security/expert/jwt_with_jwks_rotation","permalink":"/keep-being-human-dev/docs/rails/security/expert/jwt_with_jwks_rotation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/security/expert/jwt_with_jwks_rotation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hsts_preload","permalink":"/keep-being-human-dev/docs/rails/security/expert/hsts_preload"},"next":{"title":"rack_attack_dynamic_throttles","permalink":"/keep-being-human-dev/docs/rails/security/expert/rack_attack_dynamic_throttles"}}');var r=n(23420),s=n(65404);const o={},a=void 0,c={},d=[{value:"\ud83d\udd11 JWT Verification with JWKS &amp; Key Rotation",id:"-jwt-verification-with-jwks--key-rotation",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-jwt-verification-with-jwks--key-rotation",children:"\ud83d\udd11 JWT Verification with JWKS & Key Rotation"}),"\n",(0,r.jsx)(t.p,{children:"Use JWKS to fetch rotating RSA public keys. This pattern lets you seamlessly rotate signing keys without downtime or manual credential updates."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# app/services/jwt_service.rb\nrequire 'jwt'\n\nclass JwtService\n  JWKS_URI = 'https://auth.example.com/.well-known/jwks.json'\n\n  def self.decode(token)\n    jwks = JSON.parse(HTTP.get(JWKS_URI).body.to_s)['keys']\n    JWT.decode(token, nil, true,\n      algorithms: ['RS256'],\n      jwks: jwks,\n      jwks_verify: ->(header, jwk_set) {\n        jwk = jwk_set.find { |k| k['kid'] == header['kid'] }\n        raise JWT::VerificationError unless jwk\n        JWT::JWK.import(jwk).public_key\n      }\n    )\n  end\nend\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This fetches the current key set at runtime and picks the right one via ",(0,r.jsx)(t.code,{children:"kid"}),", supporting seamless key rollovers."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(36672);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);