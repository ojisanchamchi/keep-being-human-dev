"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[65009],{25054:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"gems/rspec/shared_examples/beginner/shared_examples_with_arguments","title":"shared_examples_with_arguments","description":"\ud83d\ude80 Pass arguments to shared_examples","source":"@site/docs/gems/rspec/shared_examples/beginner/shared_examples_with_arguments.md","sourceDirName":"gems/rspec/shared_examples/beginner","slug":"/gems/rspec/shared_examples/beginner/shared_examples_with_arguments","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/beginner/shared_examples_with_arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/beginner/shared_examples_with_arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"shared_examples_dry_specs","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/beginner/shared_examples_dry_specs"},"next":{"title":"dynamic_shared_examples_with_metadata","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata"}}');var r=t(23420),n=t(65404);const d={},i=void 0,c={},o=[{value:"\ud83d\ude80 Pass arguments to shared_examples",id:"-pass-arguments-to-shared_examples",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"-pass-arguments-to-shared_examples",children:"\ud83d\ude80 Pass arguments to shared_examples"}),"\n",(0,r.jsxs)(s.p,{children:["You can parameterize your shared examples to test variations of behavior with different inputs. Pass arguments to ",(0,r.jsx)(s.code,{children:"it_behaves_like"})," and reference them inside the shared block to make your specs more flexible."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:'RSpec.shared_examples "a model with attribute" do |attribute|\n  it "validates presence of #{attribute}" do\n    subject.send("#{attribute}=", nil)\n    expect(subject).not_to be_valid\n    expect(subject.errors[attribute]).to include("can\'t be blank")\n  end\nend\n\nRSpec.describe User do\n  subject { described_class.new(password: "secret") }\n\n  it_behaves_like "a model with attribute", :password\nend\n'})})]})}function m(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>d,x:()=>i});var a=t(36672);const r={},n=a.createContext(r);function d(e){const s=a.useContext(n);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(n.Provider,{value:s},e.children)}}}]);