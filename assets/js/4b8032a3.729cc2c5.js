"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51001],{12533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ruby/blocks/middle/custom_each_iterator.md","title":"custom_each_iterator.md","description":"\ud83d\udd04 Define Custom Iterators with yield","source":"@site/docs/ruby/blocks/middle/custom_each_iterator.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/custom_each_iterator.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/custom_each_iterator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/custom_each_iterator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"control_flow_within_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/control_flow_within_blocks.md"},"next":{"title":"default_block_fallback.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/default_block_fallback.md"}}');var c=n(23420),s=n(65404);const i={},r=void 0,d={},l=[{value:"\ud83d\udd04 Define Custom Iterators with <code>yield</code>",id:"-define-custom-iterators-with-yield",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h2,{id:"-define-custom-iterators-with-yield",children:["\ud83d\udd04 Define Custom Iterators with ",(0,c.jsx)(t.code,{children:"yield"})]}),"\n",(0,c.jsxs)(t.p,{children:["Creating your own iterator methods helps encapsulate collection logic. You can use ",(0,c.jsx)(t.code,{children:"yield"})," to pass each element to the block provided by the caller. This approach mimics Ruby\u2019s ",(0,c.jsx)(t.code,{children:"Enumerable"})," behavior and keeps consumer code clean."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"class MyCollection\n  def initialize(items)\n    @items = items\n  end\n\n  def each\n    @items.each do |item|\n      yield(item)\n    end\n    self\n  end\nend\n\ncoll = MyCollection.new([1, 2, 3])\ncoll.each do |n|\n  puts n * 2\nend\n# Outputs:\n# 2\n# 4\n# 6\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var o=n(36672);const c={},s=o.createContext(c);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);