"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28999],{35044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ruby/net_http/advanced/custom_ssl_context","title":"custom_ssl_context","description":"\ud83d\udd10 Customize SSL Context for Enhanced Security","source":"@site/docs/ruby/net_http/advanced/custom_ssl_context.md","sourceDirName":"ruby/net_http/advanced","slug":"/ruby/net_http/advanced/custom_ssl_context","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/custom_ssl_context","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/advanced/custom_ssl_context.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrent_requests_with_threads","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/concurrent_requests_with_threads"},"next":{"title":"persistent_http_connections","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/persistent_http_connections"}}');var c=n(23420),r=n(65404);const o={},i=void 0,u={},a=[{value:"\ud83d\udd10 Customize SSL Context for Enhanced Security",id:"-customize-ssl-context-for-enhanced-security",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"-customize-ssl-context-for-enhanced-security",children:"\ud83d\udd10 Customize SSL Context for Enhanced Security"}),"\n",(0,c.jsxs)(t.p,{children:["Net::HTTP allows you to configure an OpenSSL ",(0,c.jsx)(t.code,{children:"SSLContext"})," to enforce specific ciphers, set custom certificate authorities, or present client certificates. This is crucial for mutual TLS setups and complying with strict security policies."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"require 'openssl'\nuri = URI('https://secure.example.com')\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\ncontext = OpenSSL::SSL::SSLContext.new\ncontext.verify_mode = OpenSSL::SSL::VERIFY_PEER\ncontext.ca_file = '/etc/ssl/certs/ca-bundle.crt'\ncontext.key = OpenSSL::PKey::RSA.new(File.read('client.key'))\ncontext.cert = OpenSSL::X509::Certificate.new(File.read('client.crt'))\nhttp.ssl_version = :TLSv1_2\nhttp.ssl_timeout = 5\nhttp.start { |h| puts h.get(uri.request_uri).body }\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(36672);const c={},r=s.createContext(c);function o(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);