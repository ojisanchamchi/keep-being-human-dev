"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39509],{18937:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/regex/advanced/named_capture_to_hash","title":"named_capture_to_hash","description":"\ud83d\udd16 Map Named Captures to Hash","source":"@site/docs/ruby/regex/advanced/named_capture_to_hash.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/named_capture_to_hash","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/named_capture_to_hash","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/named_capture_to_hash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lookaround_assertions","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/lookaround_assertions"},"next":{"title":"performance_benchmarking","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/performance_benchmarking"}}');var r=n(23420),s=n(65404);const d={},o=void 0,c={},u=[{value:"\ud83d\udd16 Map Named Captures to Hash",id:"-map-named-captures-to-hash",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-map-named-captures-to-hash",children:"\ud83d\udd16 Map Named Captures to Hash"}),"\n",(0,r.jsxs)(a.p,{children:["Harness Ruby\u2019s named capture groups to directly map matched data into a hash for cleaner extraction. Use ",(0,r.jsx)(a.code,{children:"(?<name>...)"})," in your pattern, then call ",(0,r.jsx)(a.code,{children:"MatchData#named_captures"})," to get a ",(0,r.jsx)(a.code,{children:"Hash"})," keyed by your group names. This reduces manual index lookups and improves readability."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'pattern = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/\nmd = pattern.match(\'Date: 2023-07-15\')\nmd.named_captures #=> {"year"=>"2023", "month"=>"07", "day"=>"15"}\n'})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>d,x:()=>o});var t=n(36672);const r={},s=t.createContext(r);function d(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);