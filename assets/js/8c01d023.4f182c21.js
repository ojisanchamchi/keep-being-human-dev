"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87520],{32034:(e,c,n)=>{n.r(c),n.d(c,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/caching/advanced/multi_tier_caching","title":"multi_tier_caching","description":"\ud83e\udde0 Multi-Tier Caching: LocalCache + Redis","source":"@site/docs/rails/caching/advanced/multi_tier_caching.md","sourceDirName":"rails/caching/advanced","slug":"/rails/caching/advanced/multi_tier_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/multi_tier_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/advanced/multi_tier_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"low_level_race_condition_ttl","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/low_level_race_condition_ttl"},"next":{"title":"russian_doll_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/russian_doll_caching"}}');var i=n(23420),a=n(65404);const r={},s=void 0,o={},l=[{value:"\ud83e\udde0 Multi-Tier Caching: LocalCache + Redis",id:"-multi-tier-caching-localcache--redis",level:2}];function d(e){const c={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(c.h2,{id:"-multi-tier-caching-localcache--redis",children:"\ud83e\udde0 Multi-Tier Caching: LocalCache + Redis"}),"\n",(0,i.jsxs)(c.p,{children:["Combine the low-latency ",(0,i.jsx)(c.code,{children:"LocalCache"})," (per-request) with a persistent Redis store to reduce repeated serialization/deserialization within the same request. This two-layer approach speeds up hot-key access without sacrificing cross-request persistence."]}),"\n",(0,i.jsx)(c.pre,{children:(0,i.jsx)(c.code,{className:"language-ruby",children:"# config/environments/production.rb\ngrouped_store = ActiveSupport::Cache::Strategy::LocalCache.new(\n  ActiveSupport::Cache::RedisCacheStore.new(\n    url: ENV['REDIS_URL'],\n    namespace: 'myapp_cache'\n  )\n)\nRails.application.config.cache_store = grouped_store\n"})}),"\n",(0,i.jsx)(c.p,{children:"Now, the first fetch in a request hits Redis, and subsequent fetches for the same key use the in-memory cache, reducing network hops."})]})}function h(e={}){const{wrapper:c}={...(0,a.R)(),...e.components};return c?(0,i.jsx)(c,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,c,n)=>{n.d(c,{R:()=>r,x:()=>s});var t=n(36672);const i={},a=t.createContext(i);function r(e){const c=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(c):{...c,...e}},[c,e])}function s(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:c},e.children)}}}]);