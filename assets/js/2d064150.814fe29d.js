"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[11014],{13445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/ranges/advanced/range_step_usage","title":"range_step_usage","description":"\ud83d\udd01 Advanced Range#step Usage","source":"@site/docs/ruby/ranges/advanced/range_step_usage.md","sourceDirName":"ruby/ranges/advanced","slug":"/ruby/ranges/advanced/range_step_usage","permalink":"/keep-being-human-dev/docs/ruby/ranges/advanced/range_step_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/advanced/range_step_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pattern_matching_with_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/advanced/pattern_matching_with_ranges"},"next":{"title":"check_value_in_range","permalink":"/keep-being-human-dev/docs/ruby/ranges/beginner/check_value_in_range"}}');var s=t(23420),r=t(65404);const c={},i=void 0,o={},d=[{value:"\ud83d\udd01 Advanced <code>Range#step</code> Usage",id:"-advanced-rangestep-usage",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-advanced-rangestep-usage",children:["\ud83d\udd01 Advanced ",(0,s.jsx)(n.code,{children:"Range#step"})," Usage"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Range#step"})," lets you iterate with custom increments\u2014even non\u2011integers or negative steps\u2014providing fine\u2011grained control over progression. Combine it with blocks or convert to arrays for quick sequences."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Floating\u2011point increments\np (0.0..1.0).step(0.2).to_a  # => [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n\n# Negative stepping\n(10..2).step(-2) { |i| puts i }  # prints 10, 8, 6, 4, 2\n\n# Alphabetical stepping via String#succ\np (\'a\'..\'g\').step(2).to_a      # => ["a", "c", "e", "g"]\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var a=t(36672);const s={},r=a.createContext(s);function c(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);