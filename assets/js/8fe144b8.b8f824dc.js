"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20097],{37650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>p,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/networking/middle/http_multipart_upload","title":"http_multipart_upload","description":"\ud83d\uddc2 Perform Multipart File Uploads with Net::HTTP","source":"@site/docs/ruby/networking/middle/http_multipart_upload.md","sourceDirName":"ruby/networking/middle","slug":"/ruby/networking/middle/http_multipart_upload","permalink":"/keep-being-human-dev/docs/ruby/networking/middle/http_multipart_upload","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/middle/http_multipart_upload.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"persistent_http_pipelining","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/persistent_http_pipelining"},"next":{"title":"http_persistent","permalink":"/keep-being-human-dev/docs/ruby/networking/middle/http_persistent"}}');var o=n(23420),i=n(65404);const p={},s=void 0,u={},a=[{value:"\ud83d\uddc2 Perform Multipart File Uploads with Net::HTTP",id:"-perform-multipart-file-uploads-with-nethttp",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-perform-multipart-file-uploads-with-nethttp",children:"\ud83d\uddc2 Perform Multipart File Uploads with Net::HTTP"}),"\n",(0,o.jsxs)(t.p,{children:["Uploading files (images, forms) requires setting up a multipart boundary and encoding the body correctly. Net::HTTP doesn\u2019t provide high\u2011level multipart helpers, so you build the payload manually or use the ",(0,o.jsx)(t.code,{children:"multipart-post"})," gem for convenience."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:'require \'net/http\'\nrequire \'uri\'\nrequire \'securerandom\'\n\nuri = URI(\'https://api.example.com/upload\')\nboundary = SecureRandom.hex(16)\npost_body = []\npost_body << "--#{boundary}\\r\\n"\npost_body << "Content-Disposition: form-data; name=\\"file\\"; filename=\\"photo.jpg\\"\\r\\n"\npost_body << "Content-Type: image/jpeg\\r\\n\\r\\n"\npost_body << File.binread(\'photo.jpg\')\npost_body << "\\r\\n--#{boundary}--\\r\\n"\n\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nrequest = Net::HTTP::Post.new(uri.request_uri)\nrequest[\'Content-Type\'] = "multipart/form-data; boundary=#{boundary}"\nrequest.body = post_body.join\n\nresponse = http.request(request)\nputs response.code, response.body\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>p,x:()=>s});var r=n(36672);const o={},i=r.createContext(o);function p(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:p(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);