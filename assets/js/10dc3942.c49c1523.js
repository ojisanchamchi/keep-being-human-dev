"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90857],{33653:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_record_querying/advanced/dynamic_filter_scopes","title":"dynamic_filter_scopes","description":"\ud83d\udd0d Chain Dynamic Filter Scopes","source":"@site/docs/rails/active_record_querying/advanced/dynamic_filter_scopes.md","sourceDirName":"rails/active_record_querying/advanced","slug":"/rails/active_record_querying/advanced/dynamic_filter_scopes","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/advanced/dynamic_filter_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_querying/advanced/dynamic_filter_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_arel_queries","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/advanced/dynamic_arel_queries"},"next":{"title":"jsonb_querying","permalink":"/keep-being-human-dev/docs/rails/active_record_querying/advanced/jsonb_querying"}}');var r=a(23420),i=a(65404);const s={},c=void 0,o={},d=[{value:"\ud83d\udd0d Chain Dynamic Filter Scopes",id:"-chain-dynamic-filter-scopes",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-chain-dynamic-filter-scopes",children:"\ud83d\udd0d Chain Dynamic Filter Scopes"}),"\n",(0,r.jsxs)(n.p,{children:["Combine multiple optional filters in a single database hit by chaining scopes that accept ",(0,r.jsx)(n.code,{children:"nil"})," gracefully. This pattern prevents conditional logic in controllers and keeps queries composable."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class Order < ApplicationRecord\n  scope :by_status, ->(s) { where(status: s) if s.present? }\n  scope :min_total, ->(amt) { where("total >= ?", amt) if amt.present? }\nend\n\n# Controller\norders = Order.all.by_status(params[:status]).min_total(params[:min_total])\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(36672);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);