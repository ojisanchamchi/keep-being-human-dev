"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83775],{65404:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var a=n(36672);const s={},r=a.createContext(s);function l(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:t},e.children)}},85197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/arrays/advanced/selective_flatten","title":"selective_flatten","description":"\ud83d\udce6 Selective Depth Flattening with flat_map and flatten","source":"@site/docs/ruby/arrays/advanced/selective_flatten.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/selective_flatten","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/selective_flatten","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/selective_flatten.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pipeline_with_tap_then","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/pipeline_with_tap_then"},"next":{"title":"slice_when_chunking","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/slice_when_chunking"}}');var s=n(23420),r=n(65404);const l={},c=void 0,i={},d=[{value:"\ud83d\udce6 Selective Depth Flattening with <code>flat_map</code> and <code>flatten</code>",id:"-selective-depth-flattening-with-flat_map-and-flatten",level:2}];function o(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"-selective-depth-flattening-with-flat_map-and-flatten",children:["\ud83d\udce6 Selective Depth Flattening with ",(0,s.jsx)(t.code,{children:"flat_map"})," and ",(0,s.jsx)(t.code,{children:"flatten"})]}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"flat_map"})," to map and flatten one level in a single pass, then call ",(0,s.jsx)(t.code,{children:"flatten(depth)"})," for deeper levels. This two-step approach avoids unnecessary deep flattening and keeps your intentions clear. Ideal for nested list processing where only certain levels need merging."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"data = [[1, [2, 3]], [4, [5, [6]]]]\n# Flatten one level after mapping:\nstep1 = data.flat_map { |a, b| [a, b] }\n# => [1, [2,3], 4, [5,[6]]]\n\n# Then flatten just one more level:\nresult = step1.flatten(1)\n# => [1, 2, 3, 4, 5, [6]]\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);