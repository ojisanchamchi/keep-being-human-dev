"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[65989],{61564:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/serialization/advanced/marshal_custom_versioning","title":"marshal_custom_versioning","description":"\ud83d\ude80 Custom Marshal Serialization with Versioning and Compression","source":"@site/docs/ruby/serialization/advanced/marshal_custom_versioning.md","sourceDirName":"ruby/serialization/advanced","slug":"/ruby/serialization/advanced/marshal_custom_versioning","permalink":"/keep-being-human-dev/docs/ruby/serialization/advanced/marshal_custom_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/serialization/advanced/marshal_custom_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_shared_examples.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_shared_examples.md"},"next":{"title":"oj_serialization_tuning","permalink":"/keep-being-human-dev/docs/ruby/serialization/advanced/oj_serialization_tuning"}}');var i=a(23420),r=a(65404);const o={},t=void 0,d={},l=[{value:"\ud83d\ude80 Custom Marshal Serialization with Versioning and Compression",id:"-custom-marshal-serialization-with-versioning-and-compression",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-custom-marshal-serialization-with-versioning-and-compression",children:"\ud83d\ude80 Custom Marshal Serialization with Versioning and Compression"}),"\n",(0,i.jsxs)(n.p,{children:["You can define ",(0,i.jsx)(n.code,{children:"_dump"})," and ",(0,i.jsx)(n.code,{children:"_load"})," methods on your classes to manage serialization versioning and apply compression to reduce payload size. This approach ensures backward compatibility when your class structure changes and keeps the serialized data compact."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'json'\nrequire 'zlib'\n\nclass MyClass\n  attr_accessor :name, :data\n  VERSION = 1\n\n  def initialize(name, data)\n    @name = name\n    @data = data\n  end\n\n  # Called by Marshal.dump\n  def _dump(level)\n    payload = { version: VERSION, name: @name, data: @data }.to_json\n    Zlib::Deflate.deflate(payload)\n  end\n\n  # Called by Marshal.load\n  def self._load(compressed)\n    json = Zlib::Inflate.inflate(compressed)\n    h = JSON.parse(json, symbolize_names: true)\n    case h[:version]\n    when 1\n      new(h[:name], h[:data])\n    else\n      raise \"Unsupported version: #{h[:version]}\"\n    end\n  end\nend\n\n# Usage:\nobj = MyClass.new('example', [1, 2, 3])\nserialized = Marshal.dump(obj)\nrestored = Marshal.load(serialized)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var s=a(36672);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);