"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[29418],{39797:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/routing/expert/advanced_route_globbing","title":"advanced_route_globbing","description":"\u2699\ufe0f Advanced Route Globbing and Parameter Extraction","source":"@site/docs/rails/routing/expert/advanced_route_globbing.md","sourceDirName":"rails/routing/expert","slug":"/rails/routing/expert/advanced_route_globbing","permalink":"/keep-being-human-dev/docs/rails/routing/expert/advanced_route_globbing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/routing/expert/advanced_route_globbing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"root_route","permalink":"/keep-being-human-dev/docs/rails/routing/beginner/root_route"},"next":{"title":"api_versioning_constraint","permalink":"/keep-being-human-dev/docs/rails/routing/expert/api_versioning_constraint"}}');var o=t(23420),a=t(65404);const i={},s=void 0,l={},c=[{value:"\u2699\ufe0f Advanced Route Globbing and Parameter Extraction",id:"\ufe0f-advanced-route-globbing-and-parameter-extraction",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-advanced-route-globbing-and-parameter-extraction",children:"\u2699\ufe0f Advanced Route Globbing and Parameter Extraction"}),"\n",(0,o.jsxs)(n.p,{children:["Globbing (",(0,o.jsx)(n.code,{children:"*"}),") routes are powerful for catch-all patterns like nested file paths, deep API resources, or sitemap generation. Combine globbing with a custom constraint to validate or transform the captured segments before the controller sees them."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# config/routes.rb\nRails.application.routes.draw do\n  get 'files/*filepath', to: 'files#show', constraints: lambda { |req|\n    # only allow .md or .txt files\n    req.params[:filepath].match?(/\\.(md|txt)$/)\n  }\nend\n\n# app/controllers/files_controller.rb\nclass FilesController < ApplicationController\n  def show\n    safe_path = params[:filepath]\n    full_path = Rails.root.join('public', 'uploads', safe_path)\n    send_file full_path, disposition: 'inline'\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(36672);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);