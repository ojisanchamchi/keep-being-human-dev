"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38292],{65404:(e,s,r)=>{r.d(s,{R:()=>c,x:()=>i});var a=r(36672);const n={},t=a.createContext(n);function c(e){const s=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),a.createElement(t.Provider,{value:s},e.children)}},67864:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes","title":"parameterized_shared_examples_with_dynamic_classes","description":"\ud83d\ude80 Parameterized Shared Examples with Dynamic Class Resolution","source":"@site/docs/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes.md","sourceDirName":"gems/rspec/shared_examples/expert","slug":"/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_shared_examples_with_metadata","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata"},"next":{"title":"shared_examples_basic_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/middle/shared_examples_basic_usage"}}');var n=r(23420),t=r(65404);const c={},i=void 0,d={},o=[{value:"\ud83d\ude80 Parameterized Shared Examples with Dynamic Class Resolution",id:"-parameterized-shared-examples-with-dynamic-class-resolution",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.h2,{id:"-parameterized-shared-examples-with-dynamic-class-resolution",children:"\ud83d\ude80 Parameterized Shared Examples with Dynamic Class Resolution"}),"\n",(0,n.jsx)(s.p,{children:"Create highly reusable shared examples by parameterizing both resource names and factory names, resolving constants dynamically. This pattern allows you to DRY up CRUD specs for multiple controllers or services."}),"\n",(0,n.jsx)(s.p,{children:"Define the shared examples with dynamic constantization:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"# spec/support/shared_examples/crud_service.rb\nRSpec.shared_examples 'a CRUD service' do |resource_name:, factory: nil|\n  factory ||= resource_name\n  klass = resource_name.to_s.classify.constantize\n\n  describe 'CREATE operation' do\n    subject { service.create(params) }\n    let(:service) { described_class.new }\n    let(:params) { attributes_for(factory) }\n\n    it 'increments record count' do\n      expect { subject }.to change(klass, :count).by(1)\n    end\n  end\n\n  describe 'READ operation' do\n    let!(:record) { create(factory) }\n\n    it 'finds the record' do\n      expect(service.find(record.id)).to eq(record)\n    end\n  end\n\n  describe 'UPDATE operation' do\n    let!(:record) { create(factory) }\n    let(:new_attrs) { attributes_for(factory) }\n\n    it 'updates attributes' do\n      expect { service.update(record.id, new_attrs) }\n        .to change { record.reload.attributes }\n    end\n  end\n\n  describe 'DELETE operation' do\n    let!(:record) { create(factory) }\n\n    it 'removes the record' do\n      expect { service.delete(record.id) }.to change(klass, :count).by(-1)\n    end\n  end\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:"Include it in your service specs with parameters:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-ruby",children:"# spec/services/user_service_spec.rb\nRSpec.describe UserService do\n  include_examples 'a CRUD service', resource_name: :user, factory: :user\nend\n\n# spec/services/article_service_spec.rb\nRSpec.describe ArticleService do\n  include_examples 'a CRUD service', resource_name: :article\nend\n"})}),"\n",(0,n.jsx)(s.p,{children:"This pattern scales to any resource/service pairing, minimizing boilerplate across your test suite."})]})}function l(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);