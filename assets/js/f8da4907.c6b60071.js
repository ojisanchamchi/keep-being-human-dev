"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27374],{13444:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/hashes/expert/identity_vs_equality_key_comparison","title":"identity_vs_equality_key_comparison","description":"\ud83c\udd94 Identity vs. Equality in Hash Keys","source":"@site/docs/ruby/hashes/expert/identity_vs_equality_key_comparison.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/identity_vs_equality_key_comparison","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/identity_vs_equality_key_comparison","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/identity_vs_equality_key_comparison.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_struct_from_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/dynamic_struct_from_hash"},"next":{"title":"immutable_persistent_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/immutable_persistent_hash"}}');var i=s(23420),a=s(65404);const o={},r=void 0,c={},d=[{value:"\ud83c\udd94 Identity vs. Equality in Hash Keys",id:"-identity-vs-equality-in-hash-keys",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-identity-vs-equality-in-hash-keys",children:"\ud83c\udd94 Identity vs. Equality in Hash Keys"}),"\n",(0,i.jsxs)(t.p,{children:["By default, hashes compare keys with ",(0,i.jsx)(t.code,{children:"eql?"})," and ",(0,i.jsx)(t.code,{children:"hash"}),". Use ",(0,i.jsx)(t.code,{children:"compare_by_identity"})," to switch to object\u2010identity (",(0,i.jsx)(t.code,{children:"equal?"}),"), which can be helpful for caching or memoization:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'cache = {}.compare_by_identity\nobj1 = "foo".freeze\nobj2 = "foo".freeze\n\ncache[obj1] = :from_obj1\nputs cache[obj2]  #=> nil, because obj2 is a different object\nputs cache[obj1]  #=> :from_obj1\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Switching comparison strategy can prevent accidental collisions when you need to treat even ",(0,i.jsx)(t.code,{children:"eql?"})," objects as distinct keys."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>r});var n=s(36672);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);