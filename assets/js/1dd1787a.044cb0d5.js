"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8692],{46011:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/sockets/beginner/tcp_client_basics","title":"tcp_client_basics","description":"\ud83e\udd1d Connecting with a TCP Client","source":"@site/docs/ruby/sockets/beginner/tcp_client_basics.md","sourceDirName":"ruby/sockets/beginner","slug":"/ruby/sockets/beginner/tcp_client_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/tcp_client_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/beginner/tcp_client_basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unix_socket_fd_passing","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/unix_socket_fd_passing"},"next":{"title":"tcp_server_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/tcp_server_basics"}}');var c=t(23420),o=t(65404);const r={},i=void 0,a={},d=[{value:"\ud83e\udd1d Connecting with a TCP Client",id:"-connecting-with-a-tcp-client",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-connecting-with-a-tcp-client",children:"\ud83e\udd1d Connecting with a TCP Client"}),"\n",(0,c.jsxs)(n.p,{children:["Use ",(0,c.jsx)(n.code,{children:"TCPSocket"})," to connect to a TCP server by specifying the host and port. Once connected, you can read from and write to the socket just like an IO object."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\n\nsocket = TCPSocket.new('localhost', 2000)\nresponse = socket.gets       # Read one line from the server\nputs \"Server says: #{response.chomp}\"\nsocket.close                # Always close when done\n"})}),"\n",(0,c.jsx)(n.p,{children:"This script connects to the server we created, reads the greeting, prints it, and then closes the socket."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(36672);const c={},o=s.createContext(c);function r(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);