"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23094],{11824:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"ruby/concurrency_and_mutexes/middle/mutex_synchronize","title":"mutex_synchronize","description":"\ud83d\udd12 Using Mutex#synchronize for Critical Sections","source":"@site/docs/ruby/concurrency_and_mutexes/middle/mutex_synchronize.md","sourceDirName":"ruby/concurrency_and_mutexes/middle","slug":"/ruby/concurrency_and_mutexes/middle/mutex_synchronize","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/mutex_synchronize","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/middle/mutex_synchronize.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"double_checked_locking","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/double_checked_locking"},"next":{"title":"mutex_try_lock","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/mutex_try_lock"}}');var r=t(23420),i=t(65404);const o={},s=void 0,u={},d=[{value:"\ud83d\udd12 Using Mutex#synchronize for Critical Sections",id:"-using-mutexsynchronize-for-critical-sections",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-using-mutexsynchronize-for-critical-sections",children:"\ud83d\udd12 Using Mutex#synchronize for Critical Sections"}),"\n",(0,r.jsxs)(n.p,{children:["When multiple threads access shared data, wrapping the critical section in ",(0,r.jsx)(n.code,{children:"Mutex#synchronize"})," ensures only one thread can execute it at a time. This eliminates common race conditions without manually locking and unlocking the mutex."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nclass Counter\n  def initialize\n    @count = 0\n    @mutex = Mutex.new\n  end\n\n  def increment\n    @mutex.synchronize do\n      temp = @count\n      sleep(0.01) # simulate work\n      @count = temp + 1\n    end\n  end\n\n  def value\n    @count\n  end\nend\n\ncounter = Counter.new\nthreads = 10.times.map { Thread.new { 100.times { counter.increment } } }\nthreads.each(&:join)\nputs counter.value # => 1000\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var c=t(36672);const r={},i=c.createContext(r);function o(e){const n=c.useContext(i);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),c.createElement(i.Provider,{value:n},e.children)}}}]);