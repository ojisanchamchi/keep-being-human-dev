"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71717],{65404:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>c});var n=i(36672);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},86109:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/file_io/expert/atomic_file_write","title":"atomic_file_write","description":"\ud83d\udd12 Achieve Atomic Writes with Tempfile, flock, and rename","source":"@site/docs/ruby/file_io/expert/atomic_file_write.md","sourceDirName":"ruby/file_io/expert","slug":"/ruby/file_io/expert/atomic_file_write","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/atomic_file_write","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/expert/atomic_file_write.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_io_eventmachine","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/async_io_eventmachine"},"next":{"title":"memory_map_file","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/memory_map_file"}}');var r=i(23420),o=i(65404);const a={},c=void 0,s={},d=[{value:"\ud83d\udd12 Achieve Atomic Writes with <code>Tempfile</code>, <code>flock</code>, and <code>rename</code>",id:"-achieve-atomic-writes-with-tempfile-flock-and-rename",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h2,{id:"-achieve-atomic-writes-with-tempfile-flock-and-rename",children:["\ud83d\udd12 Achieve Atomic Writes with ",(0,r.jsx)(t.code,{children:"Tempfile"}),", ",(0,r.jsx)(t.code,{children:"flock"}),", and ",(0,r.jsx)(t.code,{children:"rename"})]}),"\n",(0,r.jsxs)(t.p,{children:["To guarantee crash\u2011safe, atomic file updates, write to a temporary file in the same directory, ",(0,r.jsx)(t.code,{children:"fsync"})," it, ",(0,r.jsx)(t.code,{children:"rename"})," it into place, and optionally ",(0,r.jsx)(t.code,{children:"fsync"})," the parent directory."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'tempfile'\n\ndef atomic_write(path)\n  dir = File.dirname(path)\n  Tempfile.open(File.basename(path), dir) do |tmp|\n    tmp.binmode\n    yield tmp\n    tmp.fsync\n    tmp.close\n    File.rename(tmp.path, path)\n    Dir.open(dir) { |d| d.fsync } if File.const_defined?(:FSYNC)\n  end\nend\n\natomic_write('config.yml') do |f|\n  f.write new_yaml_content\nend\n"})}),"\n",(0,r.jsx)(t.p,{children:"This pattern ensures that at no point does the target file appear in a partially\u2011written state, critical for configuration or financial data."})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);