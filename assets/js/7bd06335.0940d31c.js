"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82293],{13557:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rails/middleware/advanced/custom_logging_middleware","title":"custom_logging_middleware","description":"\ud83d\udee0\ufe0f Custom Logging Middleware","source":"@site/docs/rails/middleware/advanced/custom_logging_middleware.md","sourceDirName":"rails/middleware/advanced","slug":"/rails/middleware/advanced/custom_logging_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/advanced/custom_logging_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/advanced/custom_logging_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"conditional_middleware_insertion","permalink":"/keep-being-human-dev/docs/rails/middleware/advanced/conditional_middleware_insertion"},"next":{"title":"middleware_stack_inspection","permalink":"/keep-being-human-dev/docs/rails/middleware/advanced/middleware_stack_inspection"}}');var t=a(23420),d=a(65404);const r={},o=void 0,s={},l=[{value:"\ud83d\udee0\ufe0f Custom Logging Middleware",id:"\ufe0f-custom-logging-middleware",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-custom-logging-middleware",children:"\ud83d\udee0\ufe0f Custom Logging Middleware"}),"\n",(0,t.jsxs)(n.p,{children:["Creating a custom logging middleware lets you capture detailed request and response information without polluting controllers. This approach is useful for auditing, custom metrics, or integrating with external logging services. Implement the ",(0,t.jsx)(n.code,{children:"call"})," method, log before and after the downstream app, and ensure you properly forward the ",(0,t.jsx)(n.code,{children:"env"})," and response."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/middleware/custom_logging_middleware.rb\nclass CustomLoggingMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    start_time = Time.now\n    Rails.logger.info(\"[CustomLogger] Started #{env['REQUEST_METHOD']} #{env['PATH_INFO']}\")\n\n    status, headers, response = @app.call(env)\n\n    duration = ((Time.now - start_time) * 1000).round(2)\n    Rails.logger.info(\"[CustomLogger] Completed in #{duration}ms with status #{status}\")\n\n    [status, headers, response]\n  end\nend\n\n# config/application.rb\nconfig.middleware.use CustomLoggingMiddleware\n"})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var i=a(36672);const t={},d=i.createContext(t);function r(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(d.Provider,{value:n},e.children)}}}]);