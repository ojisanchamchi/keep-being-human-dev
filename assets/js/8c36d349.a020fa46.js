"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84833],{20758:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/blocks/advanced/fibers_and_blocks","title":"fibers_and_blocks","description":"\ud83d\udd04 Using Fibers for Cooperative Concurrency","source":"@site/docs/ruby/blocks/advanced/fibers_and_blocks.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/fibers_and_blocks","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/fibers_and_blocks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/fibers_and_blocks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"destructuring_block_params","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/destructuring_block_params"},"next":{"title":"internal_dsl_with_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/internal_dsl_with_instance_eval"}}');var t=r(23420),c=r(65404);const o={},a=void 0,i={},d=[{value:"\ud83d\udd04 Using Fibers for Cooperative Concurrency",id:"-using-fibers-for-cooperative-concurrency",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-using-fibers-for-cooperative-concurrency",children:"\ud83d\udd04 Using Fibers for Cooperative Concurrency"}),"\n",(0,t.jsx)(n.p,{children:"Combine Fibers and blocks to write asynchronous-style code without callbacks. A Fiber can yield back to the caller at pause points in the block, enabling cooperative multitasking within a single thread."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'def async_task(&block)\n  f = Fiber.new do\n    block.call\n    :done\n  end\n  f.resume until f.alive? == false\nend\n\nasync_task do\n  puts "Step 1"\n  Fiber.yield\n  puts "Step 2"\n  Fiber.yield\n  puts "Finished"\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(36672);const t={},c=s.createContext(t);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);