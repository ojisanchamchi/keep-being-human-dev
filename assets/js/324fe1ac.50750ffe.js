"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88240],{65404:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var s=n(36672);const t={},c=s.createContext(t);function i(e){const r=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(c.Provider,{value:r},e.children)}},75224:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/sockets/expert/fiber_scheduler_socket_server","title":"fiber_scheduler_socket_server","description":"\u26a1 High-Concurrency Socket Server with Fiber Scheduler","source":"@site/docs/ruby/sockets/expert/fiber_scheduler_socket_server.md","sourceDirName":"ruby/sockets/expert","slug":"/ruby/sockets/expert/fiber_scheduler_socket_server","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/fiber_scheduler_socket_server","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/expert/fiber_scheduler_socket_server.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_tls_alpn_ocsp","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/custom_tls_alpn_ocsp"},"next":{"title":"zero_copy_sendfile","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/zero_copy_sendfile"}}');var t=n(23420),c=n(65404);const i={},o=void 0,l={},d=[{value:"\u26a1 High-Concurrency Socket Server with Fiber Scheduler",id:"-high-concurrency-socket-server-with-fiber-scheduler",level:2}];function u(e){const r={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-high-concurrency-socket-server-with-fiber-scheduler",children:"\u26a1 High-Concurrency Socket Server with Fiber Scheduler"}),"\n",(0,t.jsx)(r.p,{children:"Ruby 3 introduces a global scheduler API to integrate blocking I/O into fibers transparently. You can write synchronous\u2010style socket code while scaling to millions of connections."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"require 'socket'\nrequire 'fiber'\n\n# Install an EventMachine\u2010like reactor\nrequire 'io/wait'\nFiber.set_scheduler(->(fiber, io, event) do\n  io.public_send(\"wait_#{event}\")\n  fiber.transfer\nend)\n\ndef handle(client)\n  # This appears blocking but uses Fiber scheduler under the hood\n  while data = client.gets\n    client.write \"Echo: \".upcase\n  end\n  client.close\nend\n\nserver = TCPServer.new('0.0.0.0', 12345)\n\nloop do\n  sock = server.accept\n  Fiber.schedule { handle(sock) }\nend\n\n# Keep the main fiber alive\nFiber.current.resume\n"})}),"\n",(0,t.jsx)(r.p,{children:"Advanced notes:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["The scheduler converts ",(0,t.jsx)(r.code,{children:"io.wait_readable"}),"/",(0,t.jsx)(r.code,{children:"io.wait_writable"})," into fiber suspensions."]}),"\n",(0,t.jsxs)(r.li,{children:["You can layer any event library (e.g., ",(0,t.jsx)(r.code,{children:"libev"})," or ",(0,t.jsx)(r.code,{children:"nio4r"}),") by supplying a custom scheduler."]}),"\n",(0,t.jsxs)(r.li,{children:["Monitor file descriptors and timers for timeouts and cancellation via ",(0,t.jsx)(r.code,{children:"Fiber.schedule"}),"."]}),"\n",(0,t.jsx)(r.li,{children:"Ideal for building microservices that require massive concurrency with minimal threading overhead."}),"\n"]})]})}function a(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);