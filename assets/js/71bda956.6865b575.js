"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2990],{9344:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/logging/advanced/tagged_logging_context","title":"tagged_logging_context","description":"\ud83c\udff7\ufe0f Advanced Tagged Logging","source":"@site/docs/rails/logging/advanced/tagged_logging_context.md","sourceDirName":"rails/logging/advanced","slug":"/rails/logging/advanced/tagged_logging_context","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/tagged_logging_context","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/advanced/tagged_logging_context.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"structured_json_logging","permalink":"/keep-being-human-dev/docs/rails/logging/advanced/structured_json_logging"},"next":{"title":"custom_log_formatter","permalink":"/keep-being-human-dev/docs/rails/logging/beginner/custom_log_formatter"}}');var g=t(23420),o=t(65404);const i={},s=void 0,r={},d=[{value:"\ud83c\udff7\ufe0f Advanced Tagged Logging",id:"\ufe0f-advanced-tagged-logging",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(n.h2,{id:"\ufe0f-advanced-tagged-logging",children:"\ud83c\udff7\ufe0f Advanced Tagged Logging"}),"\n",(0,g.jsxs)(n.p,{children:["Leverage ",(0,g.jsx)(n.code,{children:"ActiveSupport::TaggedLogging"})," to inject dynamic context (such as user IDs, subdomain, or custom headers) into each log line. Wrap your controller stack to automatically tag all log entries without manually passing parameters."]}),"\n",(0,g.jsx)(n.pre,{children:(0,g.jsx)(n.code,{className:"language-ruby",children:'# app/middleware/log_tags_middleware.rb\nclass LogTagsMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = ActionDispatch::Request.new(env)\n    Rails.logger.tagged("User:#{request.session[:user_id]}", "Host:#{request.host}") do\n      @app.call(env)\n    end\n  end\nend\n\n# config/application.rb\nconfig.middleware.insert_before Rails::Rack::Logger, LogTagsMiddleware\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,g.jsx)(n,{...e,children:(0,g.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(36672);const g={},o=a.createContext(g);function i(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(g):e.components||g:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);