"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[12743],{65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var n=r(36672);const s={},o=n.createContext(s);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(o.Provider,{value:t},e.children)}},93555:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/minitest/advanced/custom_reporter_usage","title":"custom_reporter_usage","description":"\ud83c\udfa8 Implement a Custom Reporter","source":"@site/docs/ruby/minitest/advanced/custom_reporter_usage.md","sourceDirName":"ruby/minitest/advanced","slug":"/ruby/minitest/advanced/custom_reporter_usage","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/custom_reporter_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/minitest/advanced/custom_reporter_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_minitest_plugin","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/custom_minitest_plugin"},"next":{"title":"parallel_test_execution","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/parallel_test_execution"}}');var s=r(23420),o=r(65404);const i={},a=void 0,u={},c=[{value:"\ud83c\udfa8 Implement a Custom Reporter",id:"-implement-a-custom-reporter",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-implement-a-custom-reporter",children:"\ud83c\udfa8 Implement a Custom Reporter"}),"\n",(0,s.jsxs)(t.p,{children:["Custom reporters allow you to tailor test output to your team\u2019s needs, integrating progress bars, JUnit XML, or CI-friendly summaries. You can either use ",(0,s.jsx)(t.code,{children:"minitest-reporters"})," or roll your own by subclassing ",(0,s.jsx)(t.code,{children:"Minitest::AbstractReporter"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# Gemfile\ngem 'minitest-reporters'\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# test_helper.rb\nrequire 'minitest/reporters'\nMinitest::Reporters.use! [\n  Minitest::Reporters::ProgressReporter.new,\n  Minitest::Reporters::JUnitReporter.new(report_dir: 'tmp/test-reports')\n]\n"})}),"\n",(0,s.jsx)(t.p,{children:"Or build a minimal custom reporter:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'minitest'\nclass SummaryReporter < Minitest::AbstractReporter\n  def record(result)\n    puts \"\u2705 #{result.name} (#{result.time.round(3)}s)\"\n  end\nend\nMinitest.reporter << SummaryReporter.new\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);