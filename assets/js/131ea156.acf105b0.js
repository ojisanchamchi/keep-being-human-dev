"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45414],{65404:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(36672);const o={},r=s.createContext(o);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},70102:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/sidekiq/advanced/unique_job_locking","title":"unique_job_locking","description":"\ud83d\udd12 Ensuring Unique Jobs with sidekiq-unique-jobs","source":"@site/docs/gems/sidekiq/advanced/unique_job_locking.md","sourceDirName":"gems/sidekiq/advanced","slug":"/gems/sidekiq/advanced/unique_job_locking","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/unique_job_locking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/advanced/unique_job_locking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rate_limiting_concurrency","permalink":"/keep-being-human-dev/docs/gems/sidekiq/advanced/rate_limiting_concurrency"},"next":{"title":"create_basic_worker","permalink":"/keep-being-human-dev/docs/gems/sidekiq/beginner/create_basic_worker"}}');var o=i(23420),r=i(65404);const t={},c=void 0,u={},d=[{value:"\ud83d\udd12 Ensuring Unique Jobs with sidekiq-unique-jobs",id:"-ensuring-unique-jobs-with-sidekiq-unique-jobs",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-ensuring-unique-jobs-with-sidekiq-unique-jobs",children:"\ud83d\udd12 Ensuring Unique Jobs with sidekiq-unique-jobs"}),"\n",(0,o.jsxs)(n.p,{children:["Avoid duplicate job enqueues by leveraging ",(0,o.jsx)(n.code,{children:"sidekiq-unique-jobs"}),". This gem provides various lock strategies (",(0,o.jsx)(n.code,{children:"until_executed"}),", ",(0,o.jsx)(n.code,{children:"while_executing"}),", etc.) to guarantee idempotency at enqueue or runtime."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'sidekiq-unique-jobs', '~> 7.1'\n\n# app/workers/data_sync_worker.rb\nclass DataSyncWorker\n  include Sidekiq::Worker\n\n  sidekiq_options unique: :until_executed,\n                  unique_args: ->(args) { [args.first['record_id']] },\n                  lock_expiration: 2.hours\n\n  def perform(record_id)\n    RecordSyncService.new(record_id).sync!\n  end\nend\n\n# config/initializers/sidekiq.rb\nSidekiqUniqueJobs.configure do |config|\n  config.lock_info = true  # log lock acquisition/release details\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);