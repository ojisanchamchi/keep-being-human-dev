"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78381],{18389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"ruby/threads/expert/timeout_handling_with_thread_handle_interrupt","title":"timeout_handling_with_thread_handle_interrupt","description":"\u23f1\ufe0f Enforce Timeouts with Thread.handle_interrupt","source":"@site/docs/ruby/threads/expert/timeout_handling_with_thread_handle_interrupt.md","sourceDirName":"ruby/threads/expert","slug":"/ruby/threads/expert/timeout_handling_with_thread_handle_interrupt","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/timeout_handling_with_thread_handle_interrupt","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/expert/timeout_handling_with_thread_handle_interrupt.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_safe_lru_cache_with_monitor","permalink":"/keep-being-human-dev/docs/ruby/threads/expert/thread_safe_lru_cache_with_monitor"},"next":{"title":"graceful_thread_lifecycle","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/graceful_thread_lifecycle"}}');var i=n(23420),a=n(65404);const d={},s=void 0,o={},h=[{value:"\u23f1\ufe0f Enforce Timeouts with Thread.handle_interrupt",id:"\ufe0f-enforce-timeouts-with-threadhandle_interrupt",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\ufe0f-enforce-timeouts-with-threadhandle_interrupt",children:"\u23f1\ufe0f Enforce Timeouts with Thread.handle_interrupt"}),"\n",(0,i.jsxs)(t.p,{children:["To timeout blocking operations (e.g., IO, ",(0,i.jsx)(t.code,{children:"sleep"}),") without leaking threads, use ",(0,i.jsx)(t.code,{children:"Thread.handle_interrupt"})," to turn blocking calls into interruptible sections. This yields deterministic cancellation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'def with_timeout(seconds)\n  result = nil\n  th = Thread.new do\n    Thread.handle_interrupt(StandardError => :on_blocking) do\n      result = yield\n    end\n  end\n\n  begin\n    Timeout.timeout(seconds) { th.join }\n  rescue Timeout::Error\n    th.raise(StandardError, "Operation timed out after #{seconds}s")\n    th.join\n    raise\n  end\n\n  result\nend\n\n# Usage\nbegin\n  with_timeout(1) do\n    sleep 2  # this sleep is now interruptible\n    "done"\n  end\nrescue => e\n  puts e.message  # => Operation timed out after 1s\nend\n'})}),"\n",(0,i.jsxs)(t.p,{children:["This approach integrates Ruby\u2019s interrupt mechanism with standard ",(0,i.jsx)(t.code,{children:"Timeout"}),", avoiding orphaned threads."]})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>s});var r=n(36672);const i={},a=r.createContext(i);function d(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);