"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47030],{31465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive","title":"mock_expectation_receive","description":"\ud83c\udfaf Mock Method Call Expectations","source":"@site/docs/gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive.md","sourceDirName":"gems/rspec/mocks_and_stubs/beginner","slug":"/gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"instance_double_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/instance_double_usage"},"next":{"title":"stub_return_value","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/stub_return_value"}}');var c=n(23420),o=n(65404);const a={},r=void 0,i={},d=[{value:"\ud83c\udfaf Mock Method Call Expectations",id:"-mock-method-call-expectations",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"-mock-method-call-expectations",children:"\ud83c\udfaf Mock Method Call Expectations"}),"\n",(0,c.jsxs)(t.p,{children:["Mocks let you set expectations on how many times and with what arguments a method should be called. Use ",(0,c.jsx)(t.code,{children:"expect"})," with ",(0,c.jsx)(t.code,{children:"receive"})," to verify interactions and catch unintended behavior."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"RSpec.describe Cart do\n  describe '#add_item' do\n    it 'adds an item to the cart' do\n      cart = Cart.new\n      item = double('Item')\n\n      expect(cart).to receive(:add).with(item).once\n\n      cart.add_item(item)\n    end\n  end\nend\n"})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(36672);const c={},o=s.createContext(c);function a(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);