"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24662],{58959:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rails/websockets/expert/redis_sentinel_scaling","title":"redis_sentinel_scaling","description":"\ud83d\ude80 Scaling ActionCable with Redis Sentinel and Pub/Sub","source":"@site/docs/rails/websockets/expert/redis_sentinel_scaling.md","sourceDirName":"rails/websockets/expert","slug":"/rails/websockets/expert/redis_sentinel_scaling","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/redis_sentinel_scaling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/expert/redis_sentinel_scaling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prometheus_monitoring","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/prometheus_monitoring"},"next":{"title":"broadcast_to_user","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/broadcast_to_user"}}');var i=s(23420),r=s(65404);const a={},o=void 0,l={},c=[{value:"\ud83d\ude80 Scaling ActionCable with Redis Sentinel and Pub/Sub",id:"-scaling-actioncable-with-redis-sentinel-and-pubsub",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-scaling-actioncable-with-redis-sentinel-and-pubsub",children:"\ud83d\ude80 Scaling ActionCable with Redis Sentinel and Pub/Sub"}),"\n",(0,i.jsxs)(n.p,{children:["Leverage Redis Sentinel for high availability and automatic failover when scaling WebSocket servers. Configure multiple Sentinel instances in ",(0,i.jsx)(n.code,{children:"config/cable.yml"})," and handle dynamic master discovery for robust Pub/Sub."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# config/cable.yml\ndevelopment:\n  adapter: redis\n  url: redis://master-redis.example.com:6379/1\n  channel_prefix: myapp_development\n  sentinel:\n    hosts:\n      - host: sentinel1.example.com\n        port: 26379\n      - host: sentinel2.example.com\n        port: 26379\n    role: master\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/redis.rb\nActionCable.server.config.redis = {\n  url: nil,\n  sentinels: Rails.application.config_for(:cable)['development']['sentinel']['hosts'],\n  role: :master,\n  password: ENV['REDIS_PASSWORD']\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This setup ensures ActionCable auto-detects the current master Redis node and reconnects seamlessly if a failover occurs."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(36672);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);