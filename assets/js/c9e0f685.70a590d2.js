"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9893],{18657:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/controllers/advanced/actioncable_integration","title":"actioncable_integration","description":"\ud83c\udf10 Integrate WebSockets with ActionCable in Controllers","source":"@site/docs/rails/controllers/advanced/actioncable_integration.md","sourceDirName":"rails/controllers/advanced","slug":"/rails/controllers/advanced/actioncable_integration","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/actioncable_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/advanced/actioncable_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"quick_reload_application_code","permalink":"/keep-being-human-dev/docs/rails/console/middle/quick_reload_application_code"},"next":{"title":"bulk_insert_update","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/bulk_insert_update"}}');var a=t(23420),r=t(65404);const c={},i=void 0,s={},l=[{value:"\ud83c\udf10 Integrate WebSockets with ActionCable in Controllers",id:"-integrate-websockets-with-actioncable-in-controllers",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-integrate-websockets-with-actioncable-in-controllers",children:"\ud83c\udf10 Integrate WebSockets with ActionCable in Controllers"}),"\n",(0,a.jsxs)(n.p,{children:["Trigger broadcasts from controller actions to update clients in real-time. Use ",(0,a.jsx)(n.code,{children:"ActionCable.server.broadcast"})," in your create/update/destroy actions."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class CommentsController < ApplicationController\n  def create\n    @comment = Comment.create!(comment_params)\n    ActionCable.server.broadcast(\n      \"comments_#{@comment.post_id}\",\n      render_to_string(partial: 'comments/comment', locals: { comment: @comment })\n    )\n    head :ok\n  end\nend\n"})}),"\n",(0,a.jsx)(n.p,{children:"On the client-side, subscribe to the channel and append new comments dynamically."})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var o=t(36672);const a={},r=o.createContext(a);function c(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);