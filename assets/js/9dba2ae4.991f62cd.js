"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59623],{10119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/active_record/beginner/update_records","title":"update_records","description":"\ud83d\udee0\ufe0f Update Records with update and assign_attributes","source":"@site/docs/rails/active_record/beginner/update_records.md","sourceDirName":"rails/active_record/beginner","slug":"/rails/active_record/beginner/update_records","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/update_records","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/beginner/update_records.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sorting_results","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/sorting_results"},"next":{"title":"validations_intro","permalink":"/keep-being-human-dev/docs/rails/active_record/beginner/validations_intro"}}');var s=n(23420),a=n(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Update Records with <code>update</code> and <code>assign_attributes</code>",id:"\ufe0f-update-records-with-update-and-assign_attributes",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"\ufe0f-update-records-with-update-and-assign_attributes",children:["\ud83d\udee0\ufe0f Update Records with ",(0,s.jsx)(t.code,{children:"update"})," and ",(0,s.jsx)(t.code,{children:"assign_attributes"})]}),"\n",(0,s.jsxs)(t.p,{children:["Updating records is simple: call ",(0,s.jsx)(t.code,{children:"update"})," on an instance or chain it on the class. For more control, use ",(0,s.jsx)(t.code,{children:"assign_attributes"})," then ",(0,s.jsx)(t.code,{children:"save"}),". This lets you validate or modify fields before persisting."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"user = User.find(1)\n# Updates and saves in one step (returns boolean)\nuser.update(name: 'Bob')\n\n# Assign without saving\nuser.assign_attributes(email: 'bob@example.com')\nuser.save # returns true/false depending on validations\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(36672);const s={},a=r.createContext(s);function i(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);