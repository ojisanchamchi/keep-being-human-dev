"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71937],{65404:(e,r,a)=>{a.d(r,{R:()=>d,x:()=>o});var t=a(36672);const s={},n=t.createContext(s);function d(e){const r=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(n.Provider,{value:r},e.children)}},72499:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/threads/middle/thread_local_variables","title":"thread_local_variables","description":"\ud83e\uddf5 Leverage Thread-local Variables","source":"@site/docs/ruby/threads/middle/thread_local_variables.md","sourceDirName":"ruby/threads/middle","slug":"/ruby/threads/middle/thread_local_variables","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/thread_local_variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/middle/thread_local_variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"queue_producer_consumer","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/queue_producer_consumer"},"next":{"title":"custom_uri_scheme","permalink":"/keep-being-human-dev/docs/ruby/uri/advanced/custom_uri_scheme"}}');var s=a(23420),n=a(65404);const d={},o=void 0,c={},i=[{value:"\ud83e\uddf5 Leverage Thread-local Variables",id:"-leverage-thread-local-variables",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-leverage-thread-local-variables",children:"\ud83e\uddf5 Leverage Thread-local Variables"}),"\n",(0,s.jsxs)(r.p,{children:["Store per-thread data using ",(0,s.jsx)(r.code,{children:"Thread#[]"})," to avoid cross-talk. This is handy for caching or context passing without global state."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'Thread.new do\n  Thread.current[:request_id] = SecureRandom.uuid\n  puts "Handling request #{Thread.current[:request_id]}"\n  # ... perform work, other methods can read Thread.current[:request_id]\nend.join\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Each thread has its own ",(0,s.jsx)(r.code,{children:":request_id"}),", so you can safely log or track data without collisions."]})]})}function u(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);