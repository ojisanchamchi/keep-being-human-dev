"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41576],{43278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/pundit/expert/pundit_dynamic_context_scopes","title":"pundit_dynamic_context_scopes","description":"\ud83c\udfd7\ufe0f Construct Dynamic Policy Scopes with Context","source":"@site/docs/gems/pundit/expert/pundit_dynamic_context_scopes.md","sourceDirName":"gems/pundit/expert","slug":"/gems/pundit/expert/pundit_dynamic_context_scopes","permalink":"/keep-being-human-dev/docs/gems/pundit/expert/pundit_dynamic_context_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/pundit/expert/pundit_dynamic_context_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pundit_install_setup","permalink":"/keep-being-human-dev/docs/gems/pundit/beginner/pundit_install_setup"},"next":{"title":"pundit_rspec_custom_matchers","permalink":"/keep-being-human-dev/docs/gems/pundit/expert/pundit_rspec_custom_matchers"}}');var s=t(23420),c=t(65404);const i={},r=void 0,p={},d=[{value:"\ud83c\udfd7\ufe0f Construct Dynamic Policy Scopes with Context",id:"\ufe0f-construct-dynamic-policy-scopes-with-context",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-construct-dynamic-policy-scopes-with-context",children:"\ud83c\udfd7\ufe0f Construct Dynamic Policy Scopes with Context"}),"\n",(0,s.jsxs)(n.p,{children:["When you need to scope records based on both user attributes and runtime parameters (e.g., tenant IDs or feature flags), pass an extra context hash into your policy scope. Override the ",(0,s.jsx)(n.code,{children:"initialize"})," signature in your ",(0,s.jsx)(n.code,{children:"Scope"})," class to accept and store this context, then use it in ",(0,s.jsx)(n.code,{children:"resolve"})," to build complex SQL queries without N+1 pitfalls."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# app/policies/post_policy.rb\nclass PostPolicy < ApplicationPolicy\n  class Scope\n    attr_reader :user, :scope, :context\n\n    # Accept a context hash alongside user and scope\n    def initialize(user, scope, context = {})\n      @user    = user\n      @scope   = scope\n      @context = context\n    end\n\n    def resolve\n      records = scope.all\n\n      # Filter by tenant if provided in context\n      records = records.where(tenant_id: context[:tenant_id]) if context[:tenant_id]\n\n      # Public posts only for non-admins\n      records = records.where(published: true) unless user.admin?\n\n      # Eager\u2011load associations to avoid N+1\n      records = records.includes(:comments, :author)\n\n      records\n    end\n  end\nend\n\n# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  include Pundit\n\n  # Extend policy_scope to accept context\n  def policy_scope(scope, context: {})\n    Pundit.policy_scope!(pundit_user, scope, context)\n  end\nend\n\n# Usage in controller\nclass PostsController < ApplicationController\n  def index\n    @posts = policy_scope(Post, context: { tenant_id: current_tenant.id })\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(36672);const s={},c=o.createContext(s);function i(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);