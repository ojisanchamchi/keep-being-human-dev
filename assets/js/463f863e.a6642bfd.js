"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6256],{2870:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"ruby/methods/advanced/method_object_dispatch","title":"method_object_dispatch","description":"\ud83c\udf00 Dynamic Dispatch with Method Objects","source":"@site/docs/ruby/methods/advanced/method_object_dispatch.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/method_object_dispatch","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_object_dispatch","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/method_object_dispatch.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_missing_respond_to_missing","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_missing_respond_to_missing"},"next":{"title":"prepend_for_method_wrapping","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/prepend_for_method_wrapping"}}');var o=n(23420),a=n(65404);const d={},c=void 0,i={},r=[{value:"\ud83c\udf00 Dynamic Dispatch with Method Objects",id:"-dynamic-dispatch-with-method-objects",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-dynamic-dispatch-with-method-objects",children:"\ud83c\udf00 Dynamic Dispatch with Method Objects"}),"\n",(0,o.jsx)(t.p,{children:"Storing method objects in collections enables dynamic dispatch and decoupling. You can queue or filter operations as first\u2011class entities rather than stringly\u2011typed method names."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"class TaskRunner\n  def initialize(tasks = [])\n    @tasks = tasks.map { |obj, meth| obj.method(meth) }\n  end\n\n  def run_all(*args)\n    @tasks.each { |m| m.call(*args) }\n  end\nend\n\nrunner = TaskRunner.new([[Logger.new, :info], [Notifier.new, :send_email]])\nrunner.run_all('Hello')\n"})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var s=n(36672);const o={},a=s.createContext(o);function d(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);