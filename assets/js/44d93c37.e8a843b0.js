"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82010],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(36672);const a={},s=i.createContext(a);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},70464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/hashes/advanced/auto_vivification","title":"auto_vivification","description":"\ud83c\udf31 Auto\u2010Vivification for Nested Hashes","source":"@site/docs/ruby/hashes/advanced/auto_vivification.md","sourceDirName":"ruby/hashes/advanced","slug":"/ruby/hashes/advanced/auto_vivification","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/auto_vivification","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/advanced/auto_vivification.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"write_append_modes.md","permalink":"/keep-being-human-dev/docs/ruby/file_io/middle/write_append_modes.md"},"next":{"title":"compact_and_filter_map","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/compact_and_filter_map"}}');var a=n(23420),s=n(65404);const o={},r=void 0,d={},c=[{value:"\ud83c\udf31 Auto\u2010Vivification for Nested Hashes",id:"-autovivification-for-nested-hashes",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-autovivification-for-nested-hashes",children:"\ud83c\udf31 Auto\u2010Vivification for Nested Hashes"}),"\n",(0,a.jsxs)(t.p,{children:["Ruby Hashes don\u2019t auto-vivify nested keys by default. Use ",(0,a.jsx)(t.code,{children:"Hash.new"})," with a default proc to create missing sub\u2010hashes on assignment. This simplifies building deep structures without manual checks."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"nested = Hash.new { |h, k| h[k] = Hash.new(&h.default_proc) }\n\nnested[:user][:profile][:settings][:theme] = 'dark'\n# => { :user => { :profile => { :settings => { :theme => \"dark\" } } } }\n\n# You can assign arbitrarily deep without initializing intermediate levels.\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);