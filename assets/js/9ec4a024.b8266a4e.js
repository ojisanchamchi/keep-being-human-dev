"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34921],{17550:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/proc_and_lambda_composition","title":"proc_and_lambda_composition","description":"\u2699\ufe0f Composing Procs and Lambdas into Pipelines","source":"@site/docs/ruby/procs_and_lambdas/expert/proc_and_lambda_composition.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/proc_and_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/proc_and_lambda_composition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/proc_and_lambda_composition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metaprogramming_with_define_method","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method"},"next":{"title":"procs_in_fiber_callbacks","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks"}}');var a=o(23420),t=o(65404);const r={},c=void 0,i={},p=[{value:"\u2699\ufe0f Composing Procs and Lambdas into Pipelines",id:"\ufe0f-composing-procs-and-lambdas-into-pipelines",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-composing-procs-and-lambdas-into-pipelines",children:"\u2699\ufe0f Composing Procs and Lambdas into Pipelines"}),"\n",(0,a.jsxs)(n.p,{children:["Complex data transformations become elegant pipelines by composing small procs. Define a ",(0,a.jsx)(n.code,{children:"compose"})," helper that chains callables, allowing left-to-right or right-to-left execution for clear, functional-style code."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'def compose(*fns)\n  ->(input) { fns.reduce(input) { |acc, fn| fn.call(acc) } }\nend\n\nstrip = ->(s) { s.strip }\ndowncase = ->(s) { s.downcase }\nexclaim = ->(s) { "#{s}!" }\n\npipeline = compose(strip, downcase, exclaim)\nputs pipeline.call("  HeLLo WOrLd  ")  # => "hello world!"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"#curry"})," with composition to inject configuration objects or context seamlessly."]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var s=o(36672);const a={},t=s.createContext(a);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);