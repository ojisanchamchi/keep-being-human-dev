"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80732],{58754:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>_,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/active_record_associations/advanced/dynamic_associations_definition","title":"dynamic_associations_definition","description":"\ud83d\udd27 Dynamic Association Definitions via Metaprogramming","source":"@site/docs/rails/active_record_associations/advanced/dynamic_associations_definition.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/dynamic_associations_definition","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/dynamic_associations_definition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/dynamic_associations_definition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"deep_nested_attributes_with_reject_if","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/deep_nested_attributes_with_reject_if"},"next":{"title":"habtm_to_has_many_through_with_extra","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra"}}');var s=n(23420),t=n(65404);const o={},r=void 0,c={},d=[{value:"\ud83d\udd27 Dynamic Association Definitions via Metaprogramming",id:"-dynamic-association-definitions-via-metaprogramming",level:2}];function m(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"-dynamic-association-definitions-via-metaprogramming",children:"\ud83d\udd27 Dynamic Association Definitions via Metaprogramming"}),"\n",(0,s.jsx)(i.p,{children:"Generate associations at runtime using metaprogramming to handle similarly structured models dynamically. This reduces boilerplate when multiple models share identical association patterns but differ in names or classes."}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ruby",children:'module HasHistory\n  def has_versioned_records_for(*models)\n    models.each do |model_name|\n      has_many "#{model_name}_versions", -> { order(created_at: :desc) },\n               class_name: "#{model_name.to_s.classify}Version"\n    end\n  end\nend\n\nActiveRecord::Base.extend(HasHistory)\n\nclass Document < ApplicationRecord\n  has_versioned_records_for :revision\nend\n'})})]})}function _(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var a=n(36672);const s={},t=a.createContext(s);function o(e){const i=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(t.Provider,{value:i},e.children)}}}]);