"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[64369],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(36672);const s={},c=o.createContext(s);function i(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(c.Provider,{value:n},e.children)}},87715:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"gems/view_component/middle/using_slots","title":"using_slots","description":"\u2728 Using Slots for Dynamic Content","source":"@site/docs/gems/view_component/middle/using_slots.md","sourceDirName":"gems/view_component/middle","slug":"/gems/view_component/middle/using_slots","permalink":"/keep-being-human-dev/docs/gems/view_component/middle/using_slots","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/view_component/middle/using_slots.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"testing_components_with_rspec","permalink":"/keep-being-human-dev/docs/gems/view_component/middle/testing_components_with_rspec"},"next":{"title":"custom_request_matchers_and_callbacks","permalink":"/keep-being-human-dev/docs/gems/webmock/advanced/custom_request_matchers_and_callbacks"}}');var s=t(23420),c=t(65404);const i={},r=void 0,d={},a=[{value:"\u2728 Using Slots for Dynamic Content",id:"-using-slots-for-dynamic-content",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-using-slots-for-dynamic-content",children:"\u2728 Using Slots for Dynamic Content"}),"\n",(0,s.jsx)(n.p,{children:"Slots allow you to define flexible content areas within your component, making it easier to compose UI elements. You can declare multiple slots and provide default content if none is supplied by the caller."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# app/components/card_component.rb\nclass CardComponent < ViewComponent::Base\n  renders_one :header\n  renders_one :body\n  renders_one :footer, -> { tag.div("Default Footer", class: "footer") }\nend\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-erb",children:"<%= render(CardComponent.new) do |c| %>\n  <% c.header do %>\n    <h2>Title Goes Here</h2>\n  <% end %>\n  <% c.body do %>\n    <p>This is the body of the card.</p>\n  <% end %>\n<% end %>\n"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);