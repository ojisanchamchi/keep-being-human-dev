"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88691],{49838:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"gems/devise/advanced/multiple_user_scopes.md","title":"multiple_user_scopes.md","description":"\ud83d\udcc2 Multiple User Scopes with Custom Sessions","source":"@site/docs/gems/devise/advanced/multiple_user_scopes.md.md","sourceDirName":"gems/devise/advanced","slug":"/gems/devise/advanced/multiple_user_scopes.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/multiple_user_scopes.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/advanced/multiple_user_scopes.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"devise_jwt_integration.md","permalink":"/keep-being-human-dev/docs/gems/devise/advanced/devise_jwt_integration.md"},"next":{"title":"configure_routes","permalink":"/keep-being-human-dev/docs/gems/devise/beginner/configure_routes"}}');var r=n(23420),t=n(65404);const i={},d=void 0,c={},a=[{value:"\ud83d\udcc2 Multiple User Scopes with Custom Sessions",id:"-multiple-user-scopes-with-custom-sessions",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"-multiple-user-scopes-with-custom-sessions",children:"\ud83d\udcc2 Multiple User Scopes with Custom Sessions"}),"\n",(0,r.jsxs)(s.p,{children:["When your app has multiple Devise models (e.g., ",(0,r.jsx)(s.code,{children:"User"})," and ",(0,r.jsx)(s.code,{children:"Admin"}),"), isolate their sessions and routes to prevent conflicts and reuse controllers. Specify custom controllers and scope routes to customize behavior, redirects, and views per role."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"# config/routes.rb\ndevise_for :admins,\n           controllers: { sessions: 'admins/sessions' }\n\ndevise_for :users\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"# app/controllers/admins/sessions_controller.rb\nclass Admins::SessionsController < Devise::SessionsController\n  # Redirect admins to dashboard\n  def after_sign_in_path_for(resource)\n    admin_dashboard_path\n  end\nend\n"})}),"\n",(0,r.jsx)(s.p,{children:"Customize user sessions independently:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"# app/controllers/users/sessions_controller.rb\nclass Users::SessionsController < Devise::SessionsController\n  layout 'public'\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>d});var o=n(36672);const r={},t=o.createContext(r);function i(e){const s=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(t.Provider,{value:s},e.children)}}}]);