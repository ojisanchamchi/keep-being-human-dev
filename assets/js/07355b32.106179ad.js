"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21274],{32369:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"gems/faker/expert/dynamic_locale_fallback.md","title":"dynamic_locale_fallback.md","description":"\ud83c\udf0d Extending Faker with Dynamic Fallback Locales for Content Variation","source":"@site/docs/gems/faker/expert/dynamic_locale_fallback.md.md","sourceDirName":"gems/faker/expert","slug":"/gems/faker/expert/dynamic_locale_fallback.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/dynamic_locale_fallback.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faker/expert/dynamic_locale_fallback.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_faker_provider.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/custom_faker_provider.md"},"next":{"title":"faker_locale_configuration","permalink":"/keep-being-human-dev/docs/gems/faker/middle/faker_locale_configuration"}}');var l=n(23420),r=n(65404);const o={},c=void 0,i={},s=[{value:"\ud83c\udf0d Extending Faker with Dynamic Fallback Locales for Content Variation",id:"-extending-faker-with-dynamic-fallback-locales-for-content-variation",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.h2,{id:"-extending-faker-with-dynamic-fallback-locales-for-content-variation",children:"\ud83c\udf0d Extending Faker with Dynamic Fallback Locales for Content Variation"}),"\n",(0,l.jsx)(a.p,{children:"When localizing test data, you might need fallbacks if a translation is missing or empty. You can implement a dynamic fallback mechanism by cycling through a prioritized list of locales. This ensures robust data generation across cultures without interruptions."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-ruby",children:"# Setup primary and fallback locales\nFaker::Config.locale = 'de'\nFaker::Config.available_locales = ['de', 'es', 'en']\n\n# Fallback method for any Faker call\ndef fallback_faker(method_chain)\n  Faker::Config.available_locales.each do |loc|\n    Faker::Config.locale = loc\n    value = method_chain.reduce(Faker) { |obj, m| obj.send(m) }\n    return value unless value.nil? || value.to_s.empty?\n  end\n  nil\nend\n\n# Example: Try German, then Spanish, then English\nputs fallback_faker([:Book, :title])   #=> \"Der Zauberberg\" or first available\nputs fallback_faker([:Name, :first_name]) #=> Fallback across locales\n"})})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>c});var t=n(36672);const l={},r=t.createContext(l);function o(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);