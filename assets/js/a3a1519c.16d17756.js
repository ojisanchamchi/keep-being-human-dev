"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[327],{33835:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"ruby/constants/expert/custom_const_missing_autoload","title":"custom_const_missing_autoload","description":"\ud83d\udce6 Custom const_missing for Lazy Autoload Fallback","source":"@site/docs/ruby/constants/expert/custom_const_missing_autoload.md","sourceDirName":"ruby/constants/expert","slug":"/ruby/constants/expert/custom_const_missing_autoload","permalink":"/keep-being-human-dev/docs/ruby/constants/expert/custom_const_missing_autoload","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/constants/expert/custom_const_missing_autoload.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"naming_conventions_for_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/beginner/naming_conventions_for_constants"},"next":{"title":"deep_freeze_constants","permalink":"/keep-being-human-dev/docs/ruby/constants/expert/deep_freeze_constants"}}');var o=t(23420),r=t(65404);const a={},c=void 0,i={},u=[{value:"\ud83d\udce6 Custom <code>const_missing</code> for Lazy Autoload Fallback",id:"-custom-const_missing-for-lazy-autoload-fallback",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-custom-const_missing-for-lazy-autoload-fallback",children:["\ud83d\udce6 Custom ",(0,o.jsx)(n.code,{children:"const_missing"})," for Lazy Autoload Fallback"]}),"\n",(0,o.jsxs)(n.p,{children:["Override ",(0,o.jsx)(n.code,{children:"const_missing"})," in your namespace to catch unresolved constants and autoload files or generate classes on the fly. This technique reduces upfront ",(0,o.jsx)(n.code,{children:"require"})," statements and supports convention-over-configuration by mapping constant names to file paths. Use ",(0,o.jsx)(n.code,{children:"super"})," after your logic to preserve Ruby\u2019s standard error handling when a constant truly doesn\u2019t exist."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"module Services\n  def self.const_missing(name)\n    file = name.to_s\n                .gsub(/([A-Z])/, '_\\\\1')\n                .downcase\n                .sub(/^_/, '')\n    path = Rails.root.join('app', 'services', \"#{file}.rb\")\n    if File.exist?(path)\n      require_dependency path\n      return const_get(name)\n    end\n    super\n  end\nend\n\n# Now referencing Services::UserNotifier will trigger loading app/services/user_notifier.rb\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(36672);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);