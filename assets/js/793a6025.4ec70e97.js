"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4978],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(36672);const a={},d=s.createContext(a);function o(e){const t=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(d.Provider,{value:t},e.children)}},72852:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>g});const s=JSON.parse('{"id":"gems/acts-as-taggable-on/middle/querying_tagged_models","title":"querying_tagged_models","description":"\ud83d\udd0d Querying Tagged Models","source":"@site/docs/gems/acts-as-taggable-on/middle/querying_tagged_models.md","sourceDirName":"gems/acts-as-taggable-on/middle","slug":"/gems/acts-as-taggable-on/middle/querying_tagged_models","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/querying_tagged_models","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/middle/querying_tagged_models.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multiple_tag_contexts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/multiple_tag_contexts"},"next":{"title":"add_pepper_to_bcrypt","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/add_pepper_to_bcrypt"}}');var a=n(23420),d=n(65404);const o={},r=void 0,i={},g=[{value:"\ud83d\udd0d Querying Tagged Models",id:"-querying-tagged-models",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-querying-tagged-models",children:"\ud83d\udd0d Querying Tagged Models"}),"\n",(0,a.jsxs)(t.p,{children:["Use helper scopes to fetch records tagged with one or multiple tags. ",(0,a.jsx)(t.code,{children:"tagged_with"})," supports parameters like ",(0,a.jsx)(t.code,{children:"any: true"})," or ",(0,a.jsx)(t.code,{children:"exclude"})," for flexible queries."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# Find posts tagged with both \"rails\" and \"testing\"\nPost.tagged_with(['rails', 'testing'], on: :tags)\n\n# Find posts tagged with any of the given tags\nPost.tagged_with(['backend', 'api'], on: :tags, any: true)\n\n# Exclude posts with a specific tag\nPost.tagged_with('deprecated', on: :tags, exclude: true)\n"})}),"\n",(0,a.jsx)(t.p,{children:"You can also chain with ActiveRecord for pagination or ordering:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"Post.tagged_with('ruby', on: :tags).order(created_at: :desc).limit(10)\n"})})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);