"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43234],{52010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"ruby/threads/middle/mutex_synchronize_shared_data","title":"mutex_synchronize_shared_data","description":"\ud83d\udd12 Synchronize with Mutex","source":"@site/docs/ruby/threads/middle/mutex_synchronize_shared_data.md","sourceDirName":"ruby/threads/middle","slug":"/ruby/threads/middle/mutex_synchronize_shared_data","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/mutex_synchronize_shared_data","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/middle/mutex_synchronize_shared_data.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"graceful_thread_lifecycle","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/graceful_thread_lifecycle"},"next":{"title":"queue_producer_consumer","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/queue_producer_consumer"}}');var d=t(23420),s=t(65404);const a={},o=void 0,c={},i=[{value:"\ud83d\udd12 Synchronize with Mutex",id:"-synchronize-with-mutex",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-synchronize-with-mutex",children:"\ud83d\udd12 Synchronize with Mutex"}),"\n",(0,d.jsxs)(n.p,{children:["When multiple threads modify shared state, wrap critical sections in a ",(0,d.jsx)(n.code,{children:"Mutex"})," to avoid race conditions. Use ",(0,d.jsx)(n.code,{children:"Mutex#synchronize"})," to automatically lock and unlock around your code block."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"counter = 0\nmutex   = Mutex.new\n\nthreads = 10.times.map do\n  Thread.new do\n    1_000.times do\n      mutex.synchronize do\n        counter += 1\n      end\n    end\n  end\nend\n\nthreads.each(&:join)\nputs counter  # => 10000\n"})}),"\n",(0,d.jsxs)(n.p,{children:["This pattern ensures only one thread at a time updates ",(0,d.jsx)(n.code,{children:"counter"}),", preventing lost increments."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(36672);const d={},s=r.createContext(d);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);