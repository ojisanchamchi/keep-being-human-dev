"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39724],{27323:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_support/advanced/reloader_hooks","title":"reloader_hooks","description":"\ud83d\udd04 Hook into Rails Reloader for Clean State","source":"@site/docs/rails/active_support/advanced/reloader_hooks.md","sourceDirName":"rails/active_support/advanced","slug":"/rails/active_support/advanced/reloader_hooks","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/reloader_hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/advanced/reloader_hooks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"per_thread_registry","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/per_thread_registry"},"next":{"title":"tagged_logging","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/tagged_logging"}}');var a=r(23420),n=r(65404);const s={},i=void 0,c={},d=[{value:"\ud83d\udd04 Hook into Rails Reloader for Clean State",id:"-hook-into-rails-reloader-for-clean-state",level:2}];function l(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h2,{id:"-hook-into-rails-reloader-for-clean-state",children:"\ud83d\udd04 Hook into Rails Reloader for Clean State"}),"\n",(0,a.jsxs)(o.p,{children:["Use ",(0,a.jsx)(o.code,{children:"ActiveSupport::Reloader"})," callbacks to reset or reload resources between code reloads in development or between requests in certain multithreaded servers. This helps avoid stale state, especially when caching external configurations or connections."]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-ruby",children:"# config/initializers/reloader.rb\nActiveSupport::Reloader.to_prepare do\n  # Reload YAML config or reset client caches\n  MyFeatureFlagService.reload!\nend\n\n# Also run once at boot\nActiveSupport::Reloader.before_class_unload do\n  MyFeatureFlagService.shutdown_connections!\nend\n"})})]})}function p(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,o,r)=>{r.d(o,{R:()=>s,x:()=>i});var t=r(36672);const a={},n=t.createContext(a);function s(e){const o=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(n.Provider,{value:o},e.children)}}}]);