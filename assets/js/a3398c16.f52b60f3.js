"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33853],{32647:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"ruby/classes_and_modules/middle/module_alias_method","title":"module_alias_method","description":"\u21aa\ufe0f Preserving Original Methods with alias_method","source":"@site/docs/ruby/classes_and_modules/middle/module_alias_method.md","sourceDirName":"ruby/classes_and_modules/middle","slug":"/ruby/classes_and_modules/middle/module_alias_method","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_alias_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/middle/module_alias_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mixins_with_callbacks","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/mixins_with_callbacks"},"next":{"title":"module_function_usage","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_function_usage"}}');var d=s(23420),t=s(65404);const i={},o=void 0,l={},r=[{value:"\u21aa\ufe0f Preserving Original Methods with <code>alias_method</code>",id:"\ufe0f-preserving-original-methods-with-alias_method",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h2,{id:"\ufe0f-preserving-original-methods-with-alias_method",children:["\u21aa\ufe0f Preserving Original Methods with ",(0,d.jsx)(n.code,{children:"alias_method"})]}),"\n",(0,d.jsxs)(n.p,{children:["When overriding methods in modules, use ",(0,d.jsx)(n.code,{children:"alias_method"})," to keep a reference to the original. This enables you to wrap or conditionally call the original implementation without losing it."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'module Tracker\n  def save\n    track_changes\n    original_save\n  end\n\n  def self.included(base)\n    base.class_eval do\n      alias_method :original_save, :save\n      include Tracker\n    end\n  end\n\n  def track_changes\n    puts "Tracked changes"\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(36672);const d={},t=a.createContext(d);function i(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);