"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19667],{15672:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"ruby/regex/middle/lookahead_lookbehind","title":"lookahead_lookbehind","description":"\ud83d\udc40 Employ Lookahead and Lookbehind Assertions","source":"@site/docs/ruby/regex/middle/lookahead_lookbehind.md","sourceDirName":"ruby/regex/middle","slug":"/ruby/regex/middle/lookahead_lookbehind","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/lookahead_lookbehind","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/middle/lookahead_lookbehind.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inline_modifiers","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/inline_modifiers"},"next":{"title":"match_data_usage","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/match_data_usage"}}');var a=n(23420),r=n(65404);const t={},s=void 0,i={},l=[{value:"\ud83d\udc40 Employ Lookahead and Lookbehind Assertions",id:"-employ-lookahead-and-lookbehind-assertions",level:2}];function c(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h2,{id:"-employ-lookahead-and-lookbehind-assertions",children:"\ud83d\udc40 Employ Lookahead and Lookbehind Assertions"}),"\n",(0,a.jsxs)(o.p,{children:["Lookaround lets you assert context without consuming characters. Use ",(0,a.jsx)(o.code,{children:"(?=\u2026)"})," and ",(0,a.jsx)(o.code,{children:"(?!\u2026)"})," for lookahead, ",(0,a.jsx)(o.code,{children:"(?<=\u2026)"})," and ",(0,a.jsx)(o.code,{children:"(?<!\u2026)"})," for lookbehind."]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-ruby",children:"# Match 'foo' only if followed by 'bar'\n'foobar'.scan(/foo(?=bar)/)  # => [\"foo\"]\n# Match digits only if preceded by a dollar sign\n'$100 and 200'.scan(/(?<=\\$)\\d+/) # => [\"100\"]\n"})}),"\n",(0,a.jsx)(o.p,{children:"Lookaround is perfect for validating or extracting data based on context."})]})}function u(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},65404:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>s});var d=n(36672);const a={},r=d.createContext(a);function t(e){const o=d.useContext(r);return d.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),d.createElement(r.Provider,{value:o},e.children)}}}]);