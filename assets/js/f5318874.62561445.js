"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87405],{13985:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/json/expert/high_performance_json_parsing_with_oj","title":"high_performance_json_parsing_with_oj","description":"\u26a1 High-Performance JSON Parsing with Oj","source":"@site/docs/ruby/json/expert/high_performance_json_parsing_with_oj.md","sourceDirName":"ruby/json/expert","slug":"/ruby/json/expert/high_performance_json_parsing_with_oj","permalink":"/keep-being-human-dev/docs/ruby/json/expert/high_performance_json_parsing_with_oj","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/json/expert/high_performance_json_parsing_with_oj.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_json_serialization_for_complex_objects","permalink":"/keep-being-human-dev/docs/ruby/json/expert/custom_json_serialization_for_complex_objects"},"next":{"title":"streaming_json_parsing_with_sc_handler","permalink":"/keep-being-human-dev/docs/ruby/json/expert/streaming_json_parsing_with_sc_handler"}}');var s=r(23420),i=r(65404);const t={},a=void 0,c={},d=[{value:"\u26a1 High-Performance JSON Parsing with Oj",id:"-high-performance-json-parsing-with-oj",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-high-performance-json-parsing-with-oj",children:"\u26a1 High-Performance JSON Parsing with Oj"}),"\n",(0,s.jsxs)(n.p,{children:["Oj is a blazing-fast JSON parser and serializer implemented in C. Using its strict, object, or Rails compatibility modes and fine-tuned options such as ",(0,s.jsx)(n.code,{children:"symbol_keys"}),", ",(0,s.jsx)(n.code,{children:"bigdecimal_load"}),", and ",(0,s.jsx)(n.code,{children:"mode"})," can drastically improve throughput in CPU-bound workloads. Here's how to configure and benchmark Oj against the stdlib JSON:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'oj'\nrequire 'json'\n\n# Configure Oj for Rails compatibility:\nOj.default_options = {\n  mode: :compat,       # make Oj behave like JSON gem\n  symbol_keys: true,   # parse keys to symbols\n  bigdecimal_load: :bigdecimal, # preserve precision\n  use_to_json: true    # fallback to obj.to_json if defined\n}\n\n# Sample payload\npayload = File.read('large.json')\n\n# Benchmark\nrequire 'benchmark'\nBenchmark.bm(10) do |x|\n  x.report('stdlib JSON') { JSON.parse(payload) }\n  x.report('Oj parse')   { Oj.load(payload) }\nend\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Experiment with ",(0,s.jsx)(n.code,{children:"mode: :strict"}),", ",(0,s.jsx)(n.code,{children:":object"}),", and ",(0,s.jsx)(n.code,{children:":null"})," to balance conformance versus performance, and tune ",(0,s.jsx)(n.code,{children:"int_precision"})," or ",(0,s.jsx)(n.code,{children:"float_precision"})," for numeric accuracy optimizations."]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var o=r(36672);const s={},i=o.createContext(s);function t(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);