"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43533],{65404:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>p});var t=r(36672);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}},98194:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>p,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/file_io/expert/streaming_encryption","title":"streaming_encryption","description":"\ud83d\udd10 Stream Encrypt/Decrypt Files with OpenSSL Cipher Streams","source":"@site/docs/ruby/file_io/expert/streaming_encryption.md","sourceDirName":"ruby/file_io/expert","slug":"/ruby/file_io/expert/streaming_encryption","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/streaming_encryption","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/expert/streaming_encryption.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sparse_file_manipulation","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/sparse_file_manipulation"},"next":{"title":"zero_copy_sendfile","permalink":"/keep-being-human-dev/docs/ruby/file_io/expert/zero_copy_sendfile"}}');var i=r(23420),s=r(65404);const c={},p=void 0,o={},a=[{value:"\ud83d\udd10 Stream Encrypt/Decrypt Files with OpenSSL Cipher Streams",id:"-stream-encryptdecrypt-files-with-openssl-cipher-streams",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-stream-encryptdecrypt-files-with-openssl-cipher-streams",children:"\ud83d\udd10 Stream Encrypt/Decrypt Files with OpenSSL Cipher Streams"}),"\n",(0,i.jsxs)(n.p,{children:["For large-file encryption without buffering entire files, chain Ruby\u2019s ",(0,i.jsx)(n.code,{children:"OpenSSL::Cipher"})," with IO streaming. This keeps memory usage constant and integrates with any IO object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\ncipher = OpenSSL::Cipher.new('aes-256-gcm')\ncipher.encrypt\nkey = cipher.random_key\niv  = cipher.random_iv\n\nencrypted = File.open('secret.enc', 'wb')\nencrypted.write(iv)\n\niobuf = ''\nFile.open('secret.tar.gz', 'rb') do |input|\n  while input.read(4096, iobuf)\n    encrypted.write(cipher.update(iobuf))\n  end\nend\nencrypted.write(cipher.final)\nencrypted.close\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use similar logic with ",(0,i.jsx)(n.code,{children:"cipher.auth_tag"})," to append GCM authentication tag. On decryption, read ",(0,i.jsx)(n.code,{children:"iv"}),", set ",(0,i.jsx)(n.code,{children:"cipher.decrypt"}),", and stream through ",(0,i.jsx)(n.code,{children:"cipher.update"})," + ",(0,i.jsx)(n.code,{children:"cipher.final"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);