"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75487],{65404:(e,o,n)=>{n.d(o,{R:()=>r,x:()=>a});var d=n(36672);const t={},s=d.createContext(t);function r(e){const o=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),d.createElement(s.Provider,{value:o},e.children)}},97930:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"gems/geocoder/middle/model_geocoding_setup","title":"model_geocoding_setup","description":"\ud83d\udccd Setup Forward and Reverse Geocoding","source":"@site/docs/gems/geocoder/middle/model_geocoding_setup.md","sourceDirName":"gems/geocoder/middle","slug":"/gems/geocoder/middle/model_geocoding_setup","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/model_geocoding_setup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/geocoder/middle/model_geocoding_setup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"distance_queries_near_scope","permalink":"/keep-being-human-dev/docs/gems/geocoder/middle/distance_queries_near_scope"},"next":{"title":"custom_httparty_parser","permalink":"/keep-being-human-dev/docs/gems/httparty/advanced/custom_httparty_parser"}}');var t=n(23420),s=n(65404);const r={},a=void 0,i={},c=[{value:"\ud83d\udccd Setup Forward and Reverse Geocoding",id:"-setup-forward-and-reverse-geocoding",level:2}];function l(e){const o={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"-setup-forward-and-reverse-geocoding",children:"\ud83d\udccd Setup Forward and Reverse Geocoding"}),"\n",(0,t.jsx)(o.p,{children:"Integrate Geocoder into your ActiveRecord models to automatically convert addresses to coordinates (forward geocoding) and vice versa (reverse geocoding). This lets you store latitude/longitude in the database and display human\u2011readable locations when needed."}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsxs)(o.li,{children:["Add Geocoder to your Gemfile and run ",(0,t.jsx)(o.code,{children:"bundle install"}),":"]}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:"# Gemfile\ngem 'geocoder'\n"})}),"\n",(0,t.jsxs)(o.ol,{start:"2",children:["\n",(0,t.jsx)(o.li,{children:"Generate latitude and longitude columns:"}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-bash",children:"rails generate migration AddLatitudeAndLongitudeToUsers latitude:float longitude:float\nrails db:migrate\n"})}),"\n",(0,t.jsxs)(o.ol,{start:"3",children:["\n",(0,t.jsx)(o.li,{children:"Configure the model:"}),"\n"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:"class User < ApplicationRecord\n  # Forward geocoding: address -> latitude, longitude\n  geocoded_by :address\n  after_validation :geocode, if: ->(obj){ obj.address.present? && obj.address_changed? }\n\n  # Reverse geocoding: latitude, longitude -> city, state\n  reverse_geocoded_by :latitude, :longitude do |obj, results|\n    if (loc = results.first)\n      obj.city  = loc.city\n      obj.state = loc.state\n    end\n  end\n  after_validation :reverse_geocode, if: ->(obj){ obj.latitude_changed? || obj.longitude_changed? }\nend\n"})}),"\n",(0,t.jsxs)(o.p,{children:["Now saving or updating a user\u2019s ",(0,t.jsx)(o.code,{children:"address"})," populates ",(0,t.jsx)(o.code,{children:"latitude"}),"/",(0,t.jsx)(o.code,{children:"longitude"}),", and updating coordinates populates city/state."]})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);