"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18480],{23205:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/metaprogramming/middle/dynamic_delegation_forwardable","title":"dynamic_delegation_forwardable","description":"\ud83d\udd17 Dynamic Delegation with Forwardable","source":"@site/docs/ruby/metaprogramming/middle/dynamic_delegation_forwardable.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/dynamic_delegation_forwardable","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_delegation_forwardable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/dynamic_delegation_forwardable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_callbacks","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_callbacks"},"next":{"title":"dynamic_method_define","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_method_define"}}');var t=a(23420),d=a(65404);const i={},o=void 0,m={},c=[{value:"\ud83d\udd17 Dynamic Delegation with Forwardable",id:"-dynamic-delegation-with-forwardable",level:2}];function s(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-dynamic-delegation-with-forwardable",children:"\ud83d\udd17 Dynamic Delegation with Forwardable"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Forwardable"})," module lets you delegate methods to an internal object. Combine it with metaprogramming to create delegators based on configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'forwardable'\n\nclass Presenter\n  extend Forwardable\n\n  def initialize(record)\n    @record = record\n    define_delegators :@record, *record_class_fields\n  end\n\n  def record_class_fields\n    @record.class.attribute_names.map(&:to_sym)\n  end\nend\n\n# Assuming ActiveRecord model User with attributes :name, :email\npresenter = Presenter.new(User.new(name: 'Bob', email: 'b@example.com'))\nputs presenter.name  # => \"Bob\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(36672);const t={},d=r.createContext(t);function i(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);