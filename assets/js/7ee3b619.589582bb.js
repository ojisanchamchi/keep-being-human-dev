"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84921],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(36672);const c={},u=a.createContext(c);function r(e){const t=a.useContext(u);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(u.Provider,{value:t},e.children)}},76738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"ruby/enumerables/advanced/each_with_object_stateful_accumulation","title":"each_with_object_stateful_accumulation","description":"\ud83d\udee0\ufe0f Efficient Stateful Accumulation with eachwithobject","source":"@site/docs/ruby/enumerables/advanced/each_with_object_stateful_accumulation.md","sourceDirName":"ruby/enumerables/advanced","slug":"/ruby/enumerables/advanced/each_with_object_stateful_accumulation","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/each_with_object_stateful_accumulation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/advanced/each_with_object_stateful_accumulation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chunk_while_dynamic_grouping","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/chunk_while_dynamic_grouping"},"next":{"title":"external_iterators_enum_for","permalink":"/keep-being-human-dev/docs/ruby/enumerables/advanced/external_iterators_enum_for"}}');var c=n(23420),u=n(65404);const r={},i=void 0,o={},s=[{value:"\ud83d\udee0\ufe0f Efficient Stateful Accumulation with each_with_object",id:"\ufe0f-efficient-stateful-accumulation-with-each_with_object",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"\ufe0f-efficient-stateful-accumulation-with-each_with_object",children:"\ud83d\udee0\ufe0f Efficient Stateful Accumulation with each_with_object"}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"each_with_object"})," carries a mutable object through an iteration, perfect for building hashes, arrays, or nested data structures without external state variables."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"# Group odd numbers by modulo 5\nnumbers = (1..20).lazy.select(&:odd?)\ngrouped = numbers.each_with_object(Hash.new { |h, k| h[k] = [] }) do |n, h|\n  h[n % 5] << n\nend\n\np grouped\n# => {1=>[1, 6, 11, 16], 3=>[3, 8, 13, 18], 0=>[5, 10, 15, 20], 2=>[2, 7, 12, 17], 4=>[4, 9, 14, 19]}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,u.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);