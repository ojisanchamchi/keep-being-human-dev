"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80613],{6133:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/webmock/expert/dynamic_request_block_stub","title":"dynamic_request_block_stub","description":"\ud83e\udd16 Dynamic Stub Responses with Request-Based Logic","source":"@site/docs/gems/webmock/expert/dynamic_request_block_stub.md","sourceDirName":"gems/webmock/expert","slug":"/gems/webmock/expert/dynamic_request_block_stub","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/dynamic_request_block_stub","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/webmock/expert/dynamic_request_block_stub.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chunked_streaming_response","permalink":"/keep-being-human-dev/docs/gems/webmock/expert/chunked_streaming_response"},"next":{"title":"match_requests_by_headers","permalink":"/keep-being-human-dev/docs/gems/webmock/middle/match_requests_by_headers"}}');var o=n(23420),a=n(65404);const r={},c=void 0,i={},d=[{value:"\ud83e\udd16 Dynamic Stub Responses with Request-Based Logic",id:"-dynamic-stub-responses-with-request-based-logic",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"-dynamic-stub-responses-with-request-based-logic",children:"\ud83e\udd16 Dynamic Stub Responses with Request-Based Logic"}),"\n",(0,o.jsx)(s.p,{children:"Use block-based stubs to inspect incoming requests and craft conditional responses. This approach is ideal for testing APIs with role-based access, feature flags, or custom headers without creating multiple static stubs."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:'require \'webmock\'\ninclude WebMock::API\n\nWebMock.disable_net_connect!(allow_localhost: false)\n\n# Dynamic stub based on request payload\nstub_request(:post, %r{https://api\\.example\\.com/resources})\n  .to_return do |request|\n    data = JSON.parse(request.body)\n    if data["id"] == "admin"\n      {\n        status: 200,\n        body: { message: "Welcome, admin!" }.to_json,\n        headers: { \'Content-Type\' => \'application/json\' }\n      }\n    else\n      {\n        status: 403,\n        body: { error: "Forbidden" }.to_json,\n        headers: { \'Content-Type\' => \'application/json\' }\n      }\n    end\n  end\n\n# Example requests\nresponse_admin = Net::HTTP.post(\n  URI("https://api.example.com/resources"),\n  { id: \'admin\' }.to_json,\n  "Content-Type" => "application/json"\n)\nputs response_admin.body\n# => {"message":"Welcome, admin!"}\n\nresponse_guest = Net::HTTP.post(\n  URI("https://api.example.com/resources"),\n  { id: \'guest\' }.to_json,\n  "Content-Type" => "application/json"\n)\nputs response_guest.body\n# => {"error":"Forbidden"}\n'})})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(36672);const o={},a=t.createContext(o);function r(e){const s=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);