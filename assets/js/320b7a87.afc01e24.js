"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79877],{65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>t});var r=a(36672);const s={},d=r.createContext(s);function o(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(d.Provider,{value:n},e.children)}},78390:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/error_handling_wrappers","title":"error_handling_wrappers","description":"\ud83d\udea8 Error Handling and Wrapping Using Lambdas","source":"@site/docs/ruby/procs_and_lambdas/advanced/error_handling_wrappers.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/error_handling_wrappers","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/error_handling_wrappers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/error_handling_wrappers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_definitions","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/dynamic_method_definitions"},"next":{"title":"lambda_currying","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/lambda_currying"}}');var s=a(23420),d=a(65404);const o={},t=void 0,i={},c=[{value:"\ud83d\udea8 Error Handling and Wrapping Using Lambdas",id:"-error-handling-and-wrapping-using-lambdas",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-error-handling-and-wrapping-using-lambdas",children:"\ud83d\udea8 Error Handling and Wrapping Using Lambdas"}),"\n",(0,s.jsx)(n.p,{children:"Encapsulate error-handling logic in a lambda to isolate rescue clauses and return uniform result objects or defaults. This approach makes your core code paths error-agnostic and simplifies retry logic."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'safe = ->(fn, fallback = nil) {\n  ->(*args) {\n    fn.call(*args)\n  rescue StandardError => e\n    {error: e, result: fallback}\n  }\n}\n\n# Wrap an unstable operation\nunstable = ->(x) { raise "oops" if x.zero?; 100 / x }\nsafe_unstable = safe.call(unstable, 0)\n\nputs safe_unstable.call(0)  # => {:error=>#<RuntimeError: oops>, :result=>0}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);