"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70025],{18265:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/regex/middle/non_capturing_groups","title":"non_capturing_groups","description":"\ud83d\udeab Use Non-Capturing Groups When You Don\u2019t Need Backreferences","source":"@site/docs/ruby/regex/middle/non_capturing_groups.md","sourceDirName":"ruby/regex/middle","slug":"/ruby/regex/middle/non_capturing_groups","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/non_capturing_groups","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/middle/non_capturing_groups.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"named_capture_groups","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/named_capture_groups"},"next":{"title":"regexp_union","permalink":"/keep-being-human-dev/docs/ruby/regex/middle/regexp_union"}}');var o=r(23420),u=r(65404);const a={},s=void 0,c={},i=[{value:"\ud83d\udeab Use Non-Capturing Groups When You Don\u2019t Need Backreferences",id:"-use-non-capturing-groups-when-you-dont-need-backreferences",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-use-non-capturing-groups-when-you-dont-need-backreferences",children:"\ud83d\udeab Use Non-Capturing Groups When You Don\u2019t Need Backreferences"}),"\n",(0,o.jsxs)(n.p,{children:["Non-capturing groups ",(0,o.jsx)(n.code,{children:"(?:\u2026)"})," group subpatterns without storing the match, improving performance and avoiding numbered capture shifts. Use them for alternation or grouping without the overhead."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# Without non-capturing, you get unwanted groups\npattern1 = /(foo|bar)-(baz)/\npattern1.match(\'foo-baz\').captures # => ["foo", "baz"]\n\n# With non-capturing\npattern2 = /(?:foo|bar)-(baz)/\npattern2.match(\'bar-baz\').captures  # => ["baz"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"Reserve capturing groups for the data you actually need to reference later."})]})}function d(e={}){const{wrapper:n}={...(0,u.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(36672);const o={},u=t.createContext(o);function a(e){const n=t.useContext(u);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(u.Provider,{value:n},e.children)}}}]);