"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39046],{63905:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>u,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/fibers/expert/cooperative_fiber_scheduler","title":"cooperative_fiber_scheduler","description":"\ud83d\udee0 Building a Cooperative Fiber Scheduler","source":"@site/docs/ruby/fibers/expert/cooperative_fiber_scheduler.md","sourceDirName":"ruby/fibers/expert","slug":"/ruby/fibers/expert/cooperative_fiber_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/cooperative_fiber_scheduler","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/expert/cooperative_fiber_scheduler.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_io_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_io_multiplexing"},"next":{"title":"fiber_lazy_enumerator","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/fiber_lazy_enumerator"}}');var t=n(23420),s=n(65404);const u={},o=void 0,a={},c=[{value:"\ud83d\udee0 Building a Cooperative Fiber Scheduler",id:"-building-a-cooperative-fiber-scheduler",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-building-a-cooperative-fiber-scheduler",children:"\ud83d\udee0 Building a Cooperative Fiber Scheduler"}),"\n",(0,t.jsx)(r.p,{children:"Create a mini scheduler that round\u2011robins through Fibers, resuming only when they voluntarily yield. This design ensures predictable execution order and lets Fibers share CPU cooperatively without OS threads."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'class FiberScheduler\n  def initialize\n    @queue = []\n  end\n\n  def schedule(&block)\n    @queue << Fiber.new { block.call }\n  end\n\n  def run\n    until @queue.empty?\n      fiber = @queue.shift\n      if fiber.alive?\n        reason = fiber.resume\n        @queue << fiber if fiber.alive? && reason == :yield\n      end\n    end\n  end\nend\n\n# Usage\ntasker = FiberScheduler.new\n5.times { |i| tasker.schedule { 10.times { puts "Task #{i}"; Fiber.yield(:yield) } }\n}\ntasker.run\n'})})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>u,x:()=>o});var i=n(36672);const t={},s=i.createContext(t);function u(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:u(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);