"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57900],{52350:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/reflection/advanced/runtime_constant_injection","title":"runtime_constant_injection","description":"\u2699\ufe0f Inject or Override Constants at Runtime","source":"@site/docs/ruby/reflection/advanced/runtime_constant_injection.md","sourceDirName":"ruby/reflection/advanced","slug":"/ruby/reflection/advanced/runtime_constant_injection","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/runtime_constant_injection","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/advanced/runtime_constant_injection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_source_reloader","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/method_source_reloader"},"next":{"title":"tracepoint_method_tracing","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/tracepoint_method_tracing"}}');var r=t(23420),o=t(65404);const c={},i=void 0,s={},d=[{value:"\u2699\ufe0f Inject or Override Constants at Runtime",id:"\ufe0f-inject-or-override-constants-at-runtime",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-inject-or-override-constants-at-runtime",children:"\u2699\ufe0f Inject or Override Constants at Runtime"}),"\n",(0,r.jsxs)(n.p,{children:["Leverage ",(0,r.jsx)(n.code,{children:"Module.const_get"}),", ",(0,r.jsx)(n.code,{children:"Module.const_set"}),", and ",(0,r.jsx)(n.code,{children:"Kernel#remove_const"})," to dynamically override or inject constants (e.g., feature flags or adapters) without restarting your application. Wrap it in a custom loader to hot-swap behavior in production."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module PaymentGateways; end\n\n# Dynamically load or swap gateway implementations\ndef load_gateway(name, impl)\n  if PaymentGateways.const_defined?(name)\n    PaymentGateways.send(:remove_const, name)\n  end\n  PaymentGateways.const_set(name, impl)\nend\n\n# Usage\nclass StripeAdapter; def charge; 'stripe charged'; end; end\nload_gateway(:Gateway, StripeAdapter)\nputs PaymentGateways::Gateway.new.charge  # => \"stripe charged\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var a=t(36672);const r={},o=a.createContext(r);function c(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);