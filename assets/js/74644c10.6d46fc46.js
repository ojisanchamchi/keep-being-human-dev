"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20064],{65404:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>r});var t=n(36672);const s={},c=t.createContext(s);function o(e){const a=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(c.Provider,{value:a},e.children)}},93682:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"gems/acts-as-taggable-on/middle/caching_tag_counts","title":"caching_tag_counts","description":"\ud83d\udcc8 Caching Tag Counts for Performance","source":"@site/docs/gems/acts-as-taggable-on/middle/caching_tag_counts.md","sourceDirName":"gems/acts-as-taggable-on/middle","slug":"/gems/acts-as-taggable-on/middle/caching_tag_counts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/caching_tag_counts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/middle/caching_tag_counts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hierarchical_tags_with_ancestry","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry"},"next":{"title":"multiple_tag_contexts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/multiple_tag_contexts"}}');var s=n(23420),c=n(65404);const o={},r=void 0,i={},g=[{value:"\ud83d\udcc8 Caching Tag Counts for Performance",id:"-caching-tag-counts-for-performance",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-caching-tag-counts-for-performance",children:"\ud83d\udcc8 Caching Tag Counts for Performance"}),"\n",(0,s.jsx)(a.p,{children:"For large data sets, counting tags on the fly can be slow. Enable caching to store tag counts on your models, speeding up queries and views."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# Generate a migration to add cached column\nrails generate migration AddCachedTagListToPosts cached_tag_list:string\n\n# In your model\nclass Post < ApplicationRecord\n  acts_as_taggable_on :tags\n  acts_as_taggable_on :tags, cache_column: :cached_tag_list\nend\n"})}),"\n",(0,s.jsx)(a.p,{children:"Rebuild the cache for existing records:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"Post.find_each(&:save)\n"})}),"\n",(0,s.jsx)(a.p,{children:"Now you can search by cached tags directly and avoid heavy joins:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'Post.where("cached_tag_list LIKE ?", "%ruby%")\n'})})]})}function l(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);