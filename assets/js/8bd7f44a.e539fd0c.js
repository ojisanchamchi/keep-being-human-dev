"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56941],{27759:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"ruby/tempfiles/advanced/atomic_tempfile_replacement","title":"atomic_tempfile_replacement","description":"\ud83d\ude80 Atomic File Replacement with Tempfile","source":"@site/docs/ruby/tempfiles/advanced/atomic_tempfile_replacement.md","sourceDirName":"ruby/tempfiles/advanced","slug":"/ruby/tempfiles/advanced/atomic_tempfile_replacement","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/advanced/atomic_tempfile_replacement","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/tempfiles/advanced/atomic_tempfile_replacement.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tap_debugging","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/tap_debugging"},"next":{"title":"encrypted_tempfile_openssl","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/advanced/encrypted_tempfile_openssl"}}');var a=n(23420),r=n(65404);const c={},s=void 0,l={},o=[{value:"\ud83d\ude80 Atomic File Replacement with Tempfile",id:"-atomic-file-replacement-with-tempfile",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-atomic-file-replacement-with-tempfile",children:"\ud83d\ude80 Atomic File Replacement with Tempfile"}),"\n",(0,a.jsxs)(t.p,{children:["When you need to update a file without risking partial writes, create the Tempfile in the same directory as the target and rename it once everything is flushed. This guarantees atomic replacement: readers will either see the old or the new file, never a corrupt intermediate. Always ",(0,a.jsx)(t.code,{children:"fsync"})," before renaming to force data to disk."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"require 'tempfile'\nrequire 'fileutils'\n\ntarget = '/var/app/config/settings.yml'\n\nTempfile.create(['settings', '.yml'], File.dirname(target)) do |tmp|\n  tmp.write new_yaml_content\n  tmp.flush            # push to OS buffers\n  tmp.fsync            # push to disk\n  tmp.close            # release the handle\n\n  FileUtils.mv(tmp.path, target)  # atomic replace\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>s});var i=n(36672);const a={},r=i.createContext(a);function c(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);