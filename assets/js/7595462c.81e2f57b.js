"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72966],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(36672);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},75686:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/performance/expert/two_level_caching","title":"two_level_caching","description":"\ud83d\udd12 Implement Two-Level Caching with Redis & MemoryStore","source":"@site/docs/rails/performance/expert/two_level_caching.md","sourceDirName":"rails/performance/expert","slug":"/rails/performance/expert/two_level_caching","permalink":"/keep-being-human-dev/docs/rails/performance/expert/two_level_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/performance/expert/two_level_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_live_responses","permalink":"/keep-being-human-dev/docs/rails/performance/expert/streaming_live_responses"},"next":{"title":"batch_processing_with_find_each","permalink":"/keep-being-human-dev/docs/rails/performance/middle/batch_processing_with_find_each"}}');var a=r(23420),s=r(65404);const i={},o=void 0,c={},l=[{value:"\ud83d\udd12 Implement Two-Level Caching with Redis &amp; MemoryStore",id:"-implement-two-level-caching-with-redis--memorystore",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-implement-two-level-caching-with-redis--memorystore",children:"\ud83d\udd12 Implement Two-Level Caching with Redis & MemoryStore"}),"\n",(0,a.jsx)(n.p,{children:"Combine a process\u2011local LRU cache with a shared Redis layer to achieve sub-millisecond hits for hot objects and still benefit from cross\u2011process cache warming."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/cache_stores.rb\nRails.application.config.cache_store = :redis_cache_store,\n  { url: ENV['REDIS_URL'], namespace: 'cache', expires_in: 12.hours }\n\nMemoryStore = ActiveSupport::Cache::MemoryStore.new(size: 64.megabytes)\n\nmodule TwoLevelCache\n  def self.read(key)\n    MemoryStore.fetch(key) do\n      Rails.cache.read(key)\n    end\n  end\n\n  def self.write(key, value)\n    MemoryStore.write(key, value)\n    Rails.cache.write(key, value)\n  end\nend\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# Usage\nTwoLevelCache.write('user:42', user_json)\njson = TwoLevelCache.read('user:42')\n"})}),"\n",(0,a.jsx)(n.p,{children:"This arrangement slashes average latency under high QPS while maintaining a fallback to Redis on process restarts."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);