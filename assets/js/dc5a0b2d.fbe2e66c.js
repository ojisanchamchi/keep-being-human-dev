"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81942],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(36672);const r={},o=t.createContext(r);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},76736:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"rails/action_cable/middle/manual_broadcast_controller","title":"manual_broadcast_controller","description":"\ud83d\udcac Manually Broadcast from Controllers","source":"@site/docs/rails/action_cable/middle/manual_broadcast_controller.md","sourceDirName":"rails/action_cable/middle","slug":"/rails/action_cable/middle/manual_broadcast_controller","permalink":"/keep-being-human-dev/docs/rails/action_cable/middle/manual_broadcast_controller","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/middle/manual_broadcast_controller.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_stream_identifiers","permalink":"/keep-being-human-dev/docs/rails/action_cable/middle/dynamic_stream_identifiers"},"next":{"title":"model_callback_streaming","permalink":"/keep-being-human-dev/docs/rails/action_cable/middle/model_callback_streaming"}}');var r=a(23420),o=a(65404);const s={},c=void 0,l={},i=[{value:"\ud83d\udcac Manually Broadcast from Controllers",id:"-manually-broadcast-from-controllers",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-manually-broadcast-from-controllers",children:"\ud83d\udcac Manually Broadcast from Controllers"}),"\n",(0,r.jsxs)(n.p,{children:["Sometimes you need to push custom data or triggers. Use ",(0,r.jsx)(n.code,{children:"ActionCable.server.broadcast"})," inside controllers or service objects to push arbitrary payloads to a channel."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/messages_controller.rb\nclass MessagesController < ApplicationController\n  def create\n    @message = Message.create!(message_params)\n    ActionCable.server.broadcast(\n      \"chat_room_#{@message.room_id}_notifications\",\n      content: render_to_string(partial: 'messages/notification', locals: { message: @message })\n    )\n    head :ok\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"On the client side, listen for the same stream and insert the rendered HTML:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// app/javascript/channels/chat_room_notifications_channel.js\nconsumer.subscriptions.create(\n  { channel: 'ChatRoomChannel', room_id: ROOM_ID },\n  {\n    received(data) {\n      document.getElementById('notifications').insertAdjacentHTML('beforeend', data.content);\n    }\n  }\n);\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);