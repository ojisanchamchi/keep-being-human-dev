"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61369],{65404:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>a});var r=n(36672);const t={},s=r.createContext(t);function d(e){const i=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(s.Provider,{value:i},e.children)}},95894:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"gems/redis/middle/rate_limiter_redis","title":"rate_limiter_redis","description":"\ud83d\udea6 Rate Limiting with Redis Sliding Window","source":"@site/docs/gems/redis/middle/rate_limiter_redis.md","sourceDirName":"gems/redis/middle","slug":"/gems/redis/middle/rate_limiter_redis","permalink":"/keep-being-human-dev/docs/gems/redis/middle/rate_limiter_redis","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/middle/rate_limiter_redis.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fragment_caching_redis","permalink":"/keep-being-human-dev/docs/gems/redis/middle/fragment_caching_redis"},"next":{"title":"session_store_redis","permalink":"/keep-being-human-dev/docs/gems/redis/middle/session_store_redis"}}');var t=n(23420),s=n(65404);const d={},a=void 0,o={},l=[{value:"\ud83d\udea6 Rate Limiting with Redis Sliding Window",id:"-rate-limiting-with-redis-sliding-window",level:2}];function m(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-rate-limiting-with-redis-sliding-window",children:"\ud83d\udea6 Rate Limiting with Redis Sliding Window"}),"\n",(0,t.jsx)(i.p,{children:"Implement a sliding-window rate limiter using sorted sets to track request timestamps. This pattern helps enforce per-user or per-IP limits without external libraries and leverages Redis atomic operations."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:"# app/services/rate_limiter.rb\nclass RateLimiter\n  WINDOW_SIZE = 60  # seconds\n  LIMIT = 100       # max requests per window\n\n  def initialize(user_id)\n    @user_key = \"rate_limit:#{user_id}\"\n  end\n\n  def allowed?\n    now = Time.now.to_i\n    result = redis.multi do |r|\n      r.zadd @user_key, now, now\n      r.zremrangebyscore @user_key, 0, now - WINDOW_SIZE\n      r.zcard @user_key\n      r.expire @user_key, WINDOW_SIZE\n    end\n    result.last <= LIMIT\n  end\n\n  private\n\n  def redis\n    @redis ||= Redis.new(url: ENV['REDIS_URL'])\n  end\nend\n"})})]})}function c(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);