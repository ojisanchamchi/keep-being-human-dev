"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1552],{25198:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/versioning/middle/versioning_route_constraints","title":"versioning_route_constraints","description":"\ud83d\ude80 Leverage Route Constraints for Version Management","source":"@site/docs/rails/versioning/middle/versioning_route_constraints.md","sourceDirName":"rails/versioning/middle","slug":"/rails/versioning/middle/versioning_route_constraints","permalink":"/keep-being-human-dev/docs/rails/versioning/middle/versioning_route_constraints","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/versioning/middle/versioning_route_constraints.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"versioning_namespaces","permalink":"/keep-being-human-dev/docs/rails/versioning/middle/versioning_namespaces"},"next":{"title":"capture-safeconcat","permalink":"/keep-being-human-dev/docs/rails/views/advanced/capture-safeconcat"}}');var o=s(23420),i=s(65404);const t={},a=void 0,c={},d=[{value:"\ud83d\ude80 Leverage Route Constraints for Version Management",id:"-leverage-route-constraints-for-version-management",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-leverage-route-constraints-for-version-management",children:"\ud83d\ude80 Leverage Route Constraints for Version Management"}),"\n",(0,o.jsx)(n.p,{children:"Route constraints allow fine\u2011grained control over incoming requests based on path or header values. Define a constraint class to detect the version and route accordingly."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# lib/api_version_constraint.rb\nclass ApiVersionConstraint\n  def initialize(version)\n    @version = version\n  end\n\n  def matches?(req)\n    req.headers['Accept-Version'] == @version\n  end\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  namespace :api do\n    scope constraints: ApiVersionConstraint.new('v1') do\n      resources :users\n    end\n    scope constraints: ApiVersionConstraint.new('v2') do\n      resources :users, only: [:index, :show]\n    end\n  end\nend\n"})}),"\n",(0,o.jsx)(n.p,{children:"This approach decouples routing logic and makes version checks reusable across multiple endpoints."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(36672);const o={},i=r.createContext(o);function t(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);