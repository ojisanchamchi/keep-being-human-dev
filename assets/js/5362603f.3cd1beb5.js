"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21670],{61350:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions","title":"using_spies_for_assertions","description":"\ud83d\udd75\ufe0f Use spies for post-execution assertions","source":"@site/docs/gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions.md","sourceDirName":"gems/rspec/mocks_and_stubs/middle","slug":"/gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/middle/using_spies_for_assertions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stubbing_chained_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/stubbing_chained_methods"},"next":{"title":"yielding_block_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/yielding_block_methods"}}');var i=n(23420),o=n(65404);const r={},c=void 0,a={},d=[{value:"\ud83d\udd75\ufe0f Use spies for post-execution assertions",id:"\ufe0f-use-spies-for-post-execution-assertions",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"\ufe0f-use-spies-for-post-execution-assertions",children:"\ud83d\udd75\ufe0f Use spies for post-execution assertions"}),"\n",(0,i.jsx)(s.p,{children:"Instead of setting expectations before calling the code, use a spy to record interactions and assert on them afterwards. This approach keeps your setup cleaner and makes it easier to test conditional calls."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"RSpec.describe NotificationService do\n  it 'notifies the user once' do\n    notifier = spy('Notifier')\n    service = NotificationService.new(notifier)\n\n    service.process(user_id: 42)\n\n    expect(notifier).to have_received(:notify).with(42).once\n  end\nend\n"})})]})}function p(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>c});var t=n(36672);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);