"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57810],{13119:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/blocks/expert/curry_and_compose_procs","title":"curry_and_compose_procs","description":"\ud83d\udd17 Currying and Composing Procs","source":"@site/docs/ruby/blocks/expert/curry_and_compose_procs.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/curry_and_compose_procs","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/curry_and_compose_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/curry_and_compose_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"context_switch_with_instance_exec","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/context_switch_with_instance_exec"},"next":{"title":"dynamic_define_method_with_block","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/dynamic_define_method_with_block"}}');var t=r(23420),c=r(65404);const s={},a=void 0,i={},u=[{value:"\ud83d\udd17 Currying and Composing Procs",id:"-currying-and-composing-procs",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-currying-and-composing-procs",children:"\ud83d\udd17 Currying and Composing Procs"}),"\n",(0,t.jsxs)(n.p,{children:["Currying transforms a multi-argument ",(0,t.jsx)(n.code,{children:"Proc"})," into a chain of functions, enabling partial application. Combine this with simple composition helpers to build powerful data pipelines at runtime."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Currying example\nadder = ->(x, y, z) { x + y + z }.curry\nadd5and = adder.call(2, 3)   # Proc expecting one argument\nputs add5and.call(4)         # => 9\n\n# Composition helper\nclass Proc\n  def compose(other)\n    ->(*args) { self.call(other.call(*args)) }\n  end\nend\n\ndouble = ->(x) { x * 2 }\nsquare = ->(x) { x**2 }\nsquare_then_double = double.compose(square)\nputs square_then_double.call(3) # => 18\n"})})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var o=r(36672);const t={},c=o.createContext(t);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);