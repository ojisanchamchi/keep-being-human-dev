"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41945],{17499:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/active_record_validations/advanced/custom_validator_class","title":"custom_validator_class","description":"\ud83d\udee0 Custom Validator Class","source":"@site/docs/rails/active_record_validations/advanced/custom_validator_class.md","sourceDirName":"rails/active_record_validations/advanced","slug":"/rails/active_record_validations/advanced/custom_validator_class","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/custom_validator_class","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_validations/advanced/custom_validator_class.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_validation_contexts","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/custom_validation_contexts"},"next":{"title":"database_uniqueness_enforcement","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/advanced/database_uniqueness_enforcement"}}');var n=t(23420),o=t(65404);const i={},r=void 0,c={},d=[{value:"\ud83d\udee0 Custom Validator Class",id:"-custom-validator-class",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"-custom-validator-class",children:"\ud83d\udee0 Custom Validator Class"}),"\n",(0,n.jsxs)(a.p,{children:["Creating a dedicated validator class allows you to encapsulate complex validation logic and reuse it across models. By inheriting from ",(0,n.jsx)(a.code,{children:"ActiveModel::EachValidator"}),", you can inject options and tailor error messages."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:'# app/validators/email_format_validator.rb\nclass EmailFormatValidator < ActiveModel::EachValidator\n  EMAIL_REGEX = /\\A[^@\\s]+@[^@\\s]+\\.[^@\\s]+\\z/\n\n  def validate_each(record, attribute, value)\n    return if value =~ EMAIL_REGEX\n\n    record.errors.add(attribute, :invalid_email, message: options[:message] || "is not a valid email")\n  end\nend\n\n# app/models/user.rb\nclass User < ApplicationRecord\n  validates :email, presence: true, email_format: true\nend\n'})})]})}function u(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>r});var s=t(36672);const n={},o=s.createContext(n);function i(e){const a=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);