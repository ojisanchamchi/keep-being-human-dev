"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53938],{26305:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/ranges/expert/endless_and_beginless_ranges","title":"endless_and_beginless_ranges","description":"\ud83e\udd2f Master Endless and Beginless Ranges","source":"@site/docs/ruby/ranges/expert/endless_and_beginless_ranges.md","sourceDirName":"ruby/ranges/expert","slug":"/ruby/ranges/expert/endless_and_beginless_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/endless_and_beginless_ranges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/expert/endless_and_beginless_ranges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_infinite_enumerator","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/custom_infinite_enumerator"},"next":{"title":"pattern_matching_with_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/expert/pattern_matching_with_ranges"}}');var t=s(23420),a=s(65404);const i={},d=void 0,l={},c=[{value:"\ud83e\udd2f Master Endless and Beginless Ranges",id:"-master-endless-and-beginless-ranges",level:2}];function o(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-master-endless-and-beginless-ranges",children:"\ud83e\udd2f Master Endless and Beginless Ranges"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby 2.6 introduced endless (",(0,t.jsx)(n.code,{children:"start.."}),") and beginless (",(0,t.jsx)(n.code,{children:"..end"}),") ranges, which can be used for elegant threshold checks, slicing endless collections, and lazy enumerations. They\u2019re especially powerful when combined with methods like ",(0,t.jsx)(n.code,{children:"lazy"}),", ",(0,t.jsx)(n.code,{children:"take_while"}),", or ",(0,t.jsx)(n.code,{children:"drop_while"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Beginless range to filter early entries\ndata = [5, 10, 15, 20, 25]\nearly = data.drop_while { |n| n < 15 }  # [15, 20, 25]\n\n# Endless range to limit values\nnumbers = (1..)    # infinite Enumerator\nfirst_ten = numbers.take(10)            # [1,2,3,\u2026,10]\n\n# Usage in slicing\narray = %w[a b c d e f]\nslice = array[..3]  # ["a","b","c","d"]\nslice2 = array[2..] # ["c","d","e","f"]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var r=s(36672);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);