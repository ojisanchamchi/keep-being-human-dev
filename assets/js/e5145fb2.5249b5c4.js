"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89635],{65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(36672);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},85359:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"nosql/redis/advanced/redis_pipelining","title":"redis_pipelining","description":"\ud83d\ude80 Use Pipelining for Batch Commands","source":"@site/docs/nosql/redis/advanced/redis_pipelining.md","sourceDirName":"nosql/redis/advanced","slug":"/nosql/redis/advanced/redis_pipelining","permalink":"/keep-being-human-dev/docs/nosql/redis/advanced/redis_pipelining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/nosql/redis/advanced/redis_pipelining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_lua_scripting","permalink":"/keep-being-human-dev/docs/nosql/redis/advanced/redis_lua_scripting"},"next":{"title":"redis_streams","permalink":"/keep-being-human-dev/docs/nosql/redis/advanced/redis_streams"}}');var t=i(23420),r=i(65404);const a={},o=void 0,d={},l=[{value:"\ud83d\ude80 Use Pipelining for Batch Commands",id:"-use-pipelining-for-batch-commands",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-use-pipelining-for-batch-commands",children:"\ud83d\ude80 Use Pipelining for Batch Commands"}),"\n",(0,t.jsx)(n.p,{children:"Pipelining allows you to send multiple commands to Redis without waiting for each response, drastically reducing network round trips and improving throughput. This is particularly useful when you need to execute large numbers of similar operations, such as warming up a cache or bulk-reading data. Remember that pipelined commands are still executed serially on the server, so this optimizes network latency rather than CPU usage."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'require \'redis\'\nredis = Redis.new\n\n# Batch set 1_000 keys using pipelining\nglobal_start = Time.now\nredis.pipelined do\n  1.upto(1000) do |i|\n    redis.set("key:#{i}", "value_#{i}")\n  end\nend\nputs "Pipelined set of 1000 keys took: #{Time.now - global_start}s"\n\n# Batch get those keys\nglobal_start = Time.now\nvalues = redis.pipelined do\n  1.upto(1000) do |i|\n    redis.get("key:#{i}")\n  end\nend\nputs "Pipelined get of 1000 keys took: #{Time.now - global_start}s"\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);