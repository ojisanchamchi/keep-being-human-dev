"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72099],{48721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/layouts/advanced/nested_layouts_with_content_for","title":"nested_layouts_with_content_for","description":"\ud83c\udfd7\ufe0f Nested Layouts with content_for","source":"@site/docs/rails/layouts/advanced/nested_layouts_with_content_for.md","sourceDirName":"rails/layouts/advanced","slug":"/rails/layouts/advanced/nested_layouts_with_content_for","permalink":"/keep-being-human-dev/docs/rails/layouts/advanced/nested_layouts_with_content_for","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/layouts/advanced/nested_layouts_with_content_for.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"layout_variants_by_format","permalink":"/keep-being-human-dev/docs/rails/layouts/advanced/layout_variants_by_format"},"next":{"title":"application_layout","permalink":"/keep-being-human-dev/docs/rails/layouts/beginner/application_layout"}}');var o=n(23420),s=n(65404);const i={},d=void 0,r={},l=[{value:"\ud83c\udfd7\ufe0f Nested Layouts with <code>content_for</code>",id:"\ufe0f-nested-layouts-with-content_for",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.h2,{id:"\ufe0f-nested-layouts-with-content_for",children:["\ud83c\udfd7\ufe0f Nested Layouts with ",(0,o.jsx)(t.code,{children:"content_for"})]}),"\n",(0,o.jsxs)(t.p,{children:["Rails allows nested layouts by yielding to named content blocks. You can define a base layout and then wrap it in more specialized layouts, passing content using ",(0,o.jsx)(t.code,{children:"content_for"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-erb",children:'\x3c!-- app/views/layouts/base.html.erb --\x3e\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= yield(:title) || "MyApp" %></title>\n</head>\n<body>\n  <%= yield %>\n</body>\n</html>\n\n\x3c!-- app/views/layouts/admin.html.erb --\x3e\n<% content_for :title, "Admin Area" %>\n<%= render layout: "base" do %>\n  <div class="admin-header">Admin Panel</div>\n  <%= yield %>\n<% end %>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["In your controller, specify ",(0,o.jsx)(t.code,{children:'layout "admin"'}),", and your views will be wrapped first by ",(0,o.jsx)(t.code,{children:"admin.html.erb"})," and then by ",(0,o.jsx)(t.code,{children:"base.html.erb"}),", allowing fine-grained layout composition."]})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(36672);const o={},s=a.createContext(o);function i(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);