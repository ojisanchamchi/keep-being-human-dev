"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45465],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var t=a(36672);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},70046:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/metaprogramming_with_define_method","title":"metaprogramming_with_define_method","description":"\u2728 Using Lambdas in Metaprogramming and DSLs","source":"@site/docs/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_arity_validation","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/dynamic_arity_validation"},"next":{"title":"proc_and_lambda_composition","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/proc_and_lambda_composition"}}');var r=a(23420),s=a(65404);const i={},d=void 0,o={},c=[{value:"\u2728 Using Lambdas in Metaprogramming and DSLs",id:"-using-lambdas-in-metaprogramming-and-dsls",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-using-lambdas-in-metaprogramming-and-dsls",children:"\u2728 Using Lambdas in Metaprogramming and DSLs"}),"\n",(0,r.jsxs)(n.p,{children:["In DSLs or dynamic APIs, inject lambdas into ",(0,r.jsx)(n.code,{children:"define_method"})," calls to create methods with captured context. This technique builds fluent interfaces and reduces boilerplate significantly."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class ModelBuilder\n  def initialize(&block)\n    instance_eval(&block)\n  end\n\n  def field(name, &transform)\n    define_singleton_method(name) do |value|\n      transform ? transform.call(value) : value\n    end\n  end\nend\n\nuser = ModelBuilder.new do\n  field(:upcase) { |v| v.upcase }\n  field(:double)  { |v| v * 2 }\nend\n\nputs user.upcase("hello") # => "HELLO"\nputs user.double(5)       # => 10\n'})}),"\n",(0,r.jsx)(n.p,{children:"Bind service locators or policy checkers via closures for high-level separation of concerns."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);