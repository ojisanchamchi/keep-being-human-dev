"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[69389],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(36672);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},90338:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/arrays/advanced/balanced_chunk_split","title":"balanced_chunk_split","description":"\ud83d\udd2a Splitting an Array into N Balanced Chunks","source":"@site/docs/ruby/arrays/advanced/balanced_chunk_split.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/balanced_chunk_split","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/balanced_chunk_split","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/balanced_chunk_split.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_streams_integration","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/turbo_streams_integration"},"next":{"title":"combinatorics_with_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/combinatorics_with_arrays"}}');var r=a(23420),s=a(65404);const i={},c=void 0,o={},d=[{value:"\ud83d\udd2a Splitting an Array into N Balanced Chunks",id:"-splitting-an-array-into-n-balanced-chunks",level:2}];function l(e){const n={code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-splitting-an-array-into-n-balanced-chunks",children:"\ud83d\udd2a Splitting an Array into N Balanced Chunks"}),"\n",(0,r.jsxs)(n.p,{children:["To divide an array into ",(0,r.jsx)(n.em,{children:"n"})," parts as evenly as possible, calculate slice sizes and use ",(0,r.jsx)(n.code,{children:"each_with_index"})," to assign elements. This ensures chunks differ by at most one element, useful for parallel processing or pagination."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"def split_into_chunks(arr, n)\n  size, rem = arr.size.divmod(n)\n  arr.each_with_index.with_object(Array.new(n) { [] }) do |(el,i), chunks|\n    idx = i.div(size + (i < rem ? 1 : 0))\n    chunks[idx] << el\n  end\nend\n\np split_into_chunks((1..10).to_a, 3)\n# => [[1,2,3,4], [5,6,7], [8,9,10]]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);