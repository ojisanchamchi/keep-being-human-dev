"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16131],{14358:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/rspec/expert/parallel_testing_db_sharding","title":"parallel_testing_db_sharding","description":"\u26a1\ufe0f Scale Tests with Parallel Testing and Sharded DB","source":"@site/docs/gems/rspec/expert/parallel_testing_db_sharding.md","sourceDirName":"gems/rspec/expert","slug":"/gems/rspec/expert/parallel_testing_db_sharding","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/parallel_testing_db_sharding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/expert/parallel_testing_db_sharding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metadata_dynamic_test_generation","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/metadata_dynamic_test_generation"},"next":{"title":"parametrized_shared_examples","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/parametrized_shared_examples"}}');var n=s(23420),r=s(65404);const d={},i=void 0,o={},c=[{value:"\u26a1\ufe0f Scale Tests with Parallel Testing and Sharded DB",id:"\ufe0f-scale-tests-with-parallel-testing-and-sharded-db",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"\ufe0f-scale-tests-with-parallel-testing-and-sharded-db",children:"\u26a1\ufe0f Scale Tests with Parallel Testing and Sharded DB"}),"\n",(0,n.jsx)(t.p,{children:"Leverage RSpec's parallel feature alongside custom connection handlers for sharded databases. Configure unique database URLs per worker to isolate state and speed up large suites."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"# spec_helper.rb\nif ENV['PARALLEL_WORKERS']\n  RSpec.configure do |config|\n    config.parallelize(processes: ENV['PARALLEL_WORKERS'].to_i)\n    config.before(:suite) do\n      ActiveRecord::Base.configurations['test_shard'] = ActiveRecord::Base.configurations['test'].dup\n    end\n    config.before(:each) do |example|\n      shard_id = RSpec.world.example_groups.index(example.example_group) % ENV['PARALLEL_WORKERS'].to_i\n      ActiveRecord::Base.establish_connection(\"test_shard_#{shard_id}\")\n    end\n  end\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>i});var a=s(36672);const n={},r=a.createContext(n);function d(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);