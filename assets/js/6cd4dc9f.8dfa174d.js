"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81228],{55801:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/environments/advanced/config_for_env_settings","title":"config_for_env_settings","description":"\ud83d\udd27 Environment-Specific YAML Config with config_for","source":"@site/docs/rails/environments/advanced/config_for_env_settings.md","sourceDirName":"rails/environments/advanced","slug":"/rails/environments/advanced/config_for_env_settings","permalink":"/keep-being-human-dev/docs/rails/environments/advanced/config_for_env_settings","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/environments/advanced/config_for_env_settings.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_plugin_rails_generators","permalink":"/keep-being-human-dev/docs/rails/engines_and_plugins/middle/using_plugin_rails_generators"},"next":{"title":"multi_env_credentials","permalink":"/keep-being-human-dev/docs/rails/environments/advanced/multi_env_credentials"}}');var o=i(23420),t=i(65404);const s={},a=void 0,c={},d=[{value:"\ud83d\udd27 Environment-Specific YAML Config with <code>config_for</code>",id:"-environment-specific-yaml-config-with-config_for",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-environment-specific-yaml-config-with-config_for",children:["\ud83d\udd27 Environment-Specific YAML Config with ",(0,o.jsx)(n.code,{children:"config_for"})]}),"\n",(0,o.jsxs)(n.p,{children:["Rails 5.2+ provides ",(0,o.jsx)(n.code,{children:"Rails.application.config_for"})," to load deeply nested, environment-scoped settings from a single YAML file. This keeps your configuration DRY and avoids littering ENV lookups throughout your app. Define your settings in ",(0,o.jsx)(n.code,{children:"config/feature_flags.yml"}),", then load them in an initializer."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# config/feature_flags.yml\ndevelopment:\n  new_dashboard: true\n  api_rate_limit: 100\nstaging:\n  new_dashboard: true\n  api_rate_limit: 50\nproduction:\n  new_dashboard: false\n  api_rate_limit: 10\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'# config/initializers/feature_flags.rb\nFEATURE_FLAGS = Rails.application.config_for(:feature_flags)\nRails.logger.info "Loaded feature flags: #{FEATURE_FLAGS.inspect}"\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/dashboard_controller.rb\nclass DashboardController < ApplicationController\n  def index\n    if FEATURE_FLAGS['new_dashboard']\n      render :new_dashboard\n    else\n      render :legacy_dashboard\n    end\n  end\nend\n"})})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(36672);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);