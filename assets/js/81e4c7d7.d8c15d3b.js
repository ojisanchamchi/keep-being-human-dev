"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13860],{48707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md","title":"monitor_reentrant_mutex.md","description":"\ud83d\udd79 Reentrant Locks with Monitor","source":"@site/docs/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md.md","sourceDirName":"ruby/concurrency_and_mutexes/advanced","slug":"/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"double_checked_locking.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/double_checked_locking.md"},"next":{"title":"initialize_mutex_per_resource","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource"}}');var o=t(23420),c=t(65404);const i={},a=void 0,d={},s=[{value:"\ud83d\udd79 Reentrant Locks with Monitor",id:"-reentrant-locks-with-monitor",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-reentrant-locks-with-monitor",children:"\ud83d\udd79 Reentrant Locks with Monitor"}),"\n",(0,o.jsxs)(n.p,{children:["Ruby's built-in ",(0,o.jsx)(n.code,{children:"Mutex"})," is not reentrant: a thread cannot lock the same mutex twice without deadlocking. ",(0,o.jsx)(n.code,{children:"Monitor"})," (or ",(0,o.jsx)(n.code,{children:"MonitorMixin"}),") solves this by allowing recursive locking within the same thread. This is useful when you have nested synchronized methods."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'monitor'\n\nclass ThreadSafeCounter\n  include MonitorMixin\n\n  def initialize\n    super()  # initialize the MonitorMixin\n    @count = 0\n  end\n\n  def increment\n    synchronize do\n      @count += 1\n      nested_increment\n    end\n  end\n\n  def nested_increment\n    synchronize do\n      # Reentrant lock allows us to enter again\n      @count += 1\n    end\n  end\n\n  def value\n    synchronize { @count }\n  end\nend\n\ncounter = ThreadSafeCounter.new\nthreads = 10.times.map do\n  Thread.new { 1000.times { counter.increment } }\nend\nthreads.each(&:join)\nputs counter.value  # => 20000\n"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(36672);const o={},c=r.createContext(o);function i(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);