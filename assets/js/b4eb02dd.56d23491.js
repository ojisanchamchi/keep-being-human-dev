"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3666],{17353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/xml/expert/custom_sax_handler_performance","title":"custom_sax_handler_performance","description":"\u26a1 Implement Custom SAX Handlers for High-Performance XML Processing","source":"@site/docs/ruby/xml/expert/custom_sax_handler_performance.md","sourceDirName":"ruby/xml/expert","slug":"/ruby/xml/expert/custom_sax_handler_performance","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/custom_sax_handler_performance","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/xml/expert/custom_sax_handler_performance.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parsing_xml_with_nokogiri","permalink":"/keep-being-human-dev/docs/ruby/xml/beginner/parsing_xml_with_nokogiri"},"next":{"title":"nokogiri_builder_namespaces_schema","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_builder_namespaces_schema"}}');var s=t(23420),a=t(65404);const o={},c=void 0,i={},l=[{value:"\u26a1 Implement Custom SAX Handlers for High-Performance XML Processing",id:"-implement-custom-sax-handlers-for-high-performance-xml-processing",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-implement-custom-sax-handlers-for-high-performance-xml-processing",children:"\u26a1 Implement Custom SAX Handlers for High-Performance XML Processing"}),"\n",(0,s.jsxs)(n.p,{children:["For ultra-low-latency parsing (e.g., real-time feeds), write a custom SAX handler by subclassing ",(0,s.jsx)(n.code,{children:"Nokogiri::XML::SAX::Document"}),". This gives you callback-based control over every start tag, text node, and end tag without building a DOM."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'nokogiri'\n\nclass FastSaxHandler < Nokogiri::XML::SAX::Document\n  def initialize\n    @stack = []\n  end\n\n  def start_element(name, attrs = [])\n    # Push a context hash for each element\n    context = { name: name, attrs: attrs.to_h, content: '' }\n    @stack.push(context)\n  end\n\n  def characters(string)\n    # Accumulate text in the current context\n    @stack.last[:content] << string if @stack.any?\n  end\n\n  def end_element(name)\n    ctx = @stack.pop\n    # Process fully read element when closed\n    if name == 'event'\n      handle_event(ctx[:attrs], ctx[:content].strip)\n    end\n  end\n\n  private\n\n  def handle_event(attrs, content)\n    # Custom business logic: push to queue, log, or transform\n    puts \"Event #{attrs['id']}: #{content[0..50]}...\"\n  end\nend\n\nparser = Nokogiri::XML::SAX::Parser.new(FastSaxHandler.new)\nparser.parse_file('stream.xml')\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(36672);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);