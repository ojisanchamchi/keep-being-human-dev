"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88633],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(36672);const s={},c=r.createContext(s);function o(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(c.Provider,{value:n},e.children)}},78037:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"ruby/networking/beginner/tcp_server_example","title":"tcp_server_example","description":"\ud83d\udee1\ufe0f Simple TCP Server","source":"@site/docs/ruby/networking/beginner/tcp_server_example.md","sourceDirName":"ruby/networking/beginner","slug":"/ruby/networking/beginner/tcp_server_example","permalink":"/keep-being-human-dev/docs/ruby/networking/beginner/tcp_server_example","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/beginner/tcp_server_example.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tcp_client_example","permalink":"/keep-being-human-dev/docs/ruby/networking/beginner/tcp_client_example"},"next":{"title":"custom_tls_context","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/custom_tls_context"}}');var s=t(23420),c=t(65404);const o={},i=void 0,a={},l=[{value:"\ud83d\udee1\ufe0f Simple TCP Server",id:"\ufe0f-simple-tcp-server",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-simple-tcp-server",children:"\ud83d\udee1\ufe0f Simple TCP Server"}),"\n",(0,s.jsxs)(n.p,{children:["Ruby's ",(0,s.jsx)(n.code,{children:"TCPServer"})," lets you listen for incoming connections on a specified port. You can accept a client, read its request, send back a response, and then close the connection. This basic echo server will send back any data the client sends."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\n\nserver = TCPServer.new('localhost', 3000)\nputs 'Server running on port 3000...'\nloop do\n  client = server.accept\n  data = client.gets\n  client.puts \"Echo: #{data}\"   # Echoes received data\n  client.close\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);