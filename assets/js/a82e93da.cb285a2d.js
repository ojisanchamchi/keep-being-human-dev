"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22186],{30794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"ruby/reflection/advanced/dynamic_method_generation","title":"dynamic_method_generation","description":"\ud83d\udee0\ufe0f Generate Methods Dynamically via Reflection","source":"@site/docs/ruby/reflection/advanced/dynamic_method_generation.md","sourceDirName":"ruby/reflection/advanced","slug":"/ruby/reflection/advanced/dynamic_method_generation","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/dynamic_method_generation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/advanced/dynamic_method_generation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"range_to_a_and_size","permalink":"/keep-being-human-dev/docs/ruby/ranges/middle/range_to_a_and_size"},"next":{"title":"method_source_reloader","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/method_source_reloader"}}');var i=t(23420),o=t(65404);const r={},d=void 0,c={},s=[{value:"\ud83d\udee0\ufe0f Generate Methods Dynamically via Reflection",id:"\ufe0f-generate-methods-dynamically-via-reflection",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-generate-methods-dynamically-via-reflection",children:"\ud83d\udee0\ufe0f Generate Methods Dynamically via Reflection"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"define_method"})," in combination with ",(0,i.jsx)(n.code,{children:"instance_method"})," and ",(0,i.jsx)(n.code,{children:"parameters"})," to clone or wrap existing methods at runtime. This approach helps you add cross-cutting concerns like logging or authentication without manual duplication."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class ApiClient\n  def get_user(id); # ... end\n  def list_posts;   # ... end\nend\n\nApiClient.instance_methods(false).each do |meth|\n  original = ApiClient.instance_method(meth)\n  ApiClient.define_method(":logged_#{meth}") do |*args, &blk|\n    puts "[LOG] Calling #{meth} with "+args.inspect\n    original.bind(self).call(*args, &blk)\n  end\nend\n\nclient = ApiClient.new\nclient.logged_get_user(42)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var a=t(36672);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);