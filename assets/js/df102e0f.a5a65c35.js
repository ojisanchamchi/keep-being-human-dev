"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[65735],{37228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/pundit/middle/verify_authorization_callbacks","title":"verify_authorization_callbacks","description":"\u2705 Enforce Authorization with after_action Callbacks","source":"@site/docs/gems/pundit/middle/verify_authorization_callbacks.md","sourceDirName":"gems/pundit/middle","slug":"/gems/pundit/middle/verify_authorization_callbacks","permalink":"/keep-being-human-dev/docs/gems/pundit/middle/verify_authorization_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/pundit/middle/verify_authorization_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"policy_scope_in_controller","permalink":"/keep-being-human-dev/docs/gems/pundit/middle/policy_scope_in_controller"},"next":{"title":"custom_ransacker_computed_fields","permalink":"/keep-being-human-dev/docs/gems/ransack/advanced/custom_ransacker_computed_fields"}}');var r=t(23420),i=t(65404);const a={},c=void 0,s={},d=[{value:"\u2705 Enforce Authorization with <code>after_action</code> Callbacks",id:"-enforce-authorization-with-after_action-callbacks",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-enforce-authorization-with-after_action-callbacks",children:["\u2705 Enforce Authorization with ",(0,r.jsx)(n.code,{children:"after_action"})," Callbacks"]}),"\n",(0,r.jsxs)(n.p,{children:["Automatically verify Pundit checks in every controller action to prevent missing authorizations. Use ",(0,r.jsx)(n.code,{children:"verify_authorized"})," for non-index actions and ",(0,r.jsx)(n.code,{children:"verify_policy_scoped"})," for index actions, and handle ",(0,r.jsx)(n.code,{children:"Pundit::NotAuthorizedError"})," in a centralized place."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class ApplicationController < ActionController::Base\n  include Pundit\n\n  after_action :verify_authorized, except: :index, unless: :devise_controller?\n  after_action :verify_policy_scoped, only: :index, unless: :devise_controller?\n\n  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized\n\n  private\n\n  def user_not_authorized\n    flash[:alert] = "You are not authorized to perform this action."\n    redirect_to(request.referrer || root_path)\n  end\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class PostsController < ApplicationController\n  def show\n    @post = Post.find(params[:id])\n    authorize @post\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(36672);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);