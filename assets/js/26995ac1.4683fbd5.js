"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31151],{62185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>d,toc:()=>a});const d=JSON.parse('{"id":"ruby/define_method/expert/fluent_dsl_builder","title":"fluent_dsl_builder","description":"\ud83d\udd27 Build a Fluent DSL with define_method in Hooks","source":"@site/docs/ruby/define_method/expert/fluent_dsl_builder.md","sourceDirName":"ruby/define_method/expert","slug":"/ruby/define_method/expert/fluent_dsl_builder","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/fluent_dsl_builder","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/expert/fluent_dsl_builder.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_api_client_generator","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/dynamic_api_client_generator"},"next":{"title":"hot_swappable_methods","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/hot_swappable_methods"}}');var s=t(23420),i=t(65404);const o={},r=void 0,l={},a=[{value:"\ud83d\udd27 Build a Fluent DSL with define_method in Hooks",id:"-build-a-fluent-dsl-with-define_method-in-hooks",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-build-a-fluent-dsl-with-define_method-in-hooks",children:"\ud83d\udd27 Build a Fluent DSL with define_method in Hooks"}),"\n",(0,s.jsxs)(n.p,{children:["For internal DSLs, you can dynamically inject chainable methods by defining them in the module\u2019s ",(0,s.jsx)(n.code,{children:"included"})," hook. Using ",(0,s.jsx)(n.code,{children:"define_method"})," inside ",(0,s.jsx)(n.code,{children:"self.included"})," allows classes to declare fluent behaviors concisely, generating methods on-the-fly."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"module Fluent\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def fluent(*names)\n      names.each do |name|\n        define_method(name) do |*args|\n          @chain ||= []\n          @chain << \"#{name}(#{args.join(',')})\"\n          self\n        end\n      end\n    end\n  end\nend\n\nclass Query\n  include Fluent\n  fluent :select, :where, :order\nend\n\nq = Query.new.select('users').where('age>18').order('name')\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var d=t(36672);const s={},i=d.createContext(s);function o(e){const n=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),d.createElement(i.Provider,{value:n},e.children)}}}]);