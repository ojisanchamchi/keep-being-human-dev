"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[65959],{54658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/blocks/expert/dynamic_define_method_with_block","title":"dynamic_define_method_with_block","description":"\ud83d\udee0\ufe0f Dynamic Method Definitions Using Blocks","source":"@site/docs/ruby/blocks/expert/dynamic_define_method_with_block.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/dynamic_define_method_with_block","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/dynamic_define_method_with_block","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/dynamic_define_method_with_block.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"curry_and_compose_procs","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/curry_and_compose_procs"},"next":{"title":"fiber_based_block_control_flow","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/fiber_based_block_control_flow"}}');var c=t(23420),a=t(65404);const i={},r=void 0,s={},d=[{value:"\ud83d\udee0\ufe0f Dynamic Method Definitions Using Blocks",id:"\ufe0f-dynamic-method-definitions-using-blocks",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\ufe0f-dynamic-method-definitions-using-blocks",children:"\ud83d\udee0\ufe0f Dynamic Method Definitions Using Blocks"}),"\n",(0,c.jsxs)(n.p,{children:["Combine ",(0,c.jsx)(n.code,{children:"define_method"})," with blocks to generate methods at runtime, each capturing its own closure and metadata. This technique keeps class definitions DRY and adaptable to configuration or plugin data."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:'class EventHandler\n  [:create, :update, :delete].each do |event|\n    define_method("on_#{event}") do |&callback|\n      @callbacks ||= {}\n      @callbacks[event] = callback\n    end\n  end\n\n  def trigger(event, *args)\n    @callbacks[event]&.call(*args)\n  end\nend\n\nhandler = EventHandler.new\nhandler.on_create { |data| puts "Created: #{data}" }\nhandler.trigger(:create, \'Record1\')\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(36672);const c={},a=o.createContext(c);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);