"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88017],{29944:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"ruby/networking/expert/packet_crafting_raw_sockets","title":"packet_crafting_raw_sockets","description":"\ud83d\udee0\ufe0f Low-Level Packet Crafting with Raw Sockets and PacketGen","source":"@site/docs/ruby/networking/expert/packet_crafting_raw_sockets.md","sourceDirName":"ruby/networking/expert","slug":"/ruby/networking/expert/packet_crafting_raw_sockets","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/packet_crafting_raw_sockets","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/expert/packet_crafting_raw_sockets.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"http2_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/http2_multiplexing"},"next":{"title":"persistent_http_pipelining","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/persistent_http_pipelining"}}');var r=n(23420),s=n(65404);const c={},i=void 0,o={},p=[{value:"\ud83d\udee0\ufe0f Low-Level Packet Crafting with Raw Sockets and PacketGen",id:"\ufe0f-low-level-packet-crafting-with-raw-sockets-and-packetgen",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-low-level-packet-crafting-with-raw-sockets-and-packetgen",children:"\ud83d\udee0\ufe0f Low-Level Packet Crafting with Raw Sockets and PacketGen"}),"\n",(0,r.jsx)(t.p,{children:"Bypass higher\u2011level abstractions to craft custom Ethernet, IP, and ICMP packets using PacketGen. This is invaluable for network diagnostics, sending malformed packets, or simulating advanced protocols."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'packetgen'\n\n# Build an ICMP echo request (ping)\npkt = PacketGen.gen('Eth', dst: 'ff:ff:ff:ff:ff:ff')\n               .add('IP', src: '192.168.1.100', dst: '192.168.1.1')\n               .add('ICMP')\n\n# Set payload and recalculate checksums\ndata = 'RUBYNETWORK'\npkt.payload = data\npkt.calc\n\n# Send raw packet\npkt.to_w\n\n# Capture response with a filter\nresponse = PacketGen.capture(iface: 'eth0', max: 1, timeout: 5, filter: 'icmp and src host 192.168.1.1')\nputs \"Received ICMP response: #{response.first.inspect}\" if response.first\n"})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var a=n(36672);const r={},s=a.createContext(r);function c(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);