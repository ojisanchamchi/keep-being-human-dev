"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92041],{65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(36672);const t={},d=i.createContext(t);function o(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(d.Provider,{value:n},e.children)}},91950:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"ruby/method_missing/advanced/caching_missing_methods","title":"caching_missing_methods","description":"\ud83d\ude80 Cache Dynamically Generated Methods","source":"@site/docs/ruby/method_missing/advanced/caching_missing_methods.md","sourceDirName":"ruby/method_missing/advanced","slug":"/ruby/method_missing/advanced/caching_missing_methods","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/caching_missing_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/advanced/caching_missing_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/scoped_refinements"},"next":{"title":"dsl_method_recording","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/dsl_method_recording"}}');var t=s(23420),d=s(65404);const o={},a=void 0,c={},r=[{value:"\ud83d\ude80 Cache Dynamically Generated Methods",id:"-cache-dynamically-generated-methods",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-cache-dynamically-generated-methods",children:"\ud83d\ude80 Cache Dynamically Generated Methods"}),"\n",(0,t.jsxs)(n.p,{children:["When you intercept undefined methods repeatedly, performance can suffer. Inside ",(0,t.jsx)(n.code,{children:"method_missing"}),", use ",(0,t.jsx)(n.code,{children:"define_singleton_method"})," (or ",(0,t.jsx)(n.code,{children:"define_method"})," on the singleton class) to generate the method the first time it\u2019s called. This way, subsequent calls bypass ",(0,t.jsx)(n.code,{children:"method_missing"})," entirely."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"class DynamicConfig\n  def method_missing(name, *args, &block)\n    if config = load_config_for(name)\n      singleton_class.define_method(name) { config }\n      config\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    load_config_for(name) || super\n  end\n\n  private\n\n  def load_config_for(key)\n    # Expensive lookup, e.g. from file/db\n    { foo: 42, bar: 'baz' }[key]\n  end\nend\n\ncfg = DynamicConfig.new\ncfg.foo  # loads, defines foo\ncfg.foo  # direct call, no method_missing overhead\n"})})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);