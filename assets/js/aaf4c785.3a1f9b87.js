"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16016],{50357:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/views/expert/sse_in_views","title":"sse_in_views","description":"\ud83d\udce6 Implement Server-Sent Events in Views","source":"@site/docs/rails/views/expert/sse_in_views.md","sourceDirName":"rails/views/expert","slug":"/rails/views/expert/sse_in_views","permalink":"/keep-being-human-dev/docs/rails/views/expert/sse_in_views","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/views/expert/sse_in_views.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nested_fragment_caching_strategies","permalink":"/keep-being-human-dev/docs/rails/views/expert/nested_fragment_caching_strategies"},"next":{"title":"streaming_partials_live","permalink":"/keep-being-human-dev/docs/rails/views/expert/streaming_partials_live"}}');var i=s(23420),r=s(65404);const o={},a=void 0,c={},l=[{value:"\ud83d\udce6 Implement Server-Sent Events in Views",id:"-implement-server-sent-events-in-views",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-implement-server-sent-events-in-views",children:"\ud83d\udce6 Implement Server-Sent Events in Views"}),"\n",(0,i.jsx)(n.p,{children:"Stream real-time updates without WebSockets by using Rails SSE in views. Ideal for live notifications or progress bars, SSE keeps an open HTTP connection sending events as plain text."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/notifications_controller.rb\nclass NotificationsController < ApplicationController\n  include ActionController::Live\n\n  def stream\n    response.headers['Content-Type'] = 'text/event-stream'\n    sse = SSE.new(response.stream)\n    begin\n      loop do\n        message = Notification.fetch_next\n        sse.write(message, event: 'notification')\n        sleep 1\n      end\n    ensure\n      sse.close\n    end\n  end\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Client-side subscription:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const source = new EventSource('/notifications/stream')\nsource.addEventListener('notification', e => console.log(e.data))\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(36672);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);