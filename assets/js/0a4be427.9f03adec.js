"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6886],{53071:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/net_http/advanced/concurrent_requests_with_threads","title":"concurrent_requests_with_threads","description":"\u26a1\ufe0f Perform Concurrent Requests with Threads","source":"@site/docs/ruby/net_http/advanced/concurrent_requests_with_threads.md","sourceDirName":"ruby/net_http/advanced","slug":"/ruby/net_http/advanced/concurrent_requests_with_threads","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/concurrent_requests_with_threads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/advanced/concurrent_requests_with_threads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"setup_teardown_hooks","permalink":"/keep-being-human-dev/docs/ruby/minitest/middle/setup_teardown_hooks"},"next":{"title":"custom_ssl_context","permalink":"/keep-being-human-dev/docs/ruby/net_http/advanced/custom_ssl_context"}}');var s=n(23420),o=n(65404);const a={},c=void 0,u={},d=[{value:"\u26a1\ufe0f Perform Concurrent Requests with Threads",id:"\ufe0f-perform-concurrent-requests-with-threads",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-perform-concurrent-requests-with-threads",children:"\u26a1\ufe0f Perform Concurrent Requests with Threads"}),"\n",(0,s.jsxs)(t.p,{children:["Ruby's ",(0,s.jsx)(t.code,{children:"Net::HTTP"})," isn't asynchronous by default, but you can dispatch multiple requests in parallel using threads or thread pools. This pattern accelerates batch operations, such as fetching multiple API endpoints concurrently, and can significantly reduce total latency."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"uris = [\n  URI('https://api.example.com/user'),\n  URI('https://api.example.com/order'),\n  URI('https://api.example.com/product')\n]\nresponses = []\n\nthreads = uris.map do |uri|\n  Thread.new do\n    Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|\n      response = http.get(uri.request_uri)\n      responses << { uri: uri, status: response.code, body: response.body }\n    end\n  end\nend\n\nthreads.each(&:join)\nputs responses\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>c});var r=n(36672);const s={},o=r.createContext(s);function a(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);