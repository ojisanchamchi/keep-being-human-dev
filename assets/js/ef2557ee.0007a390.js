"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70183],{21227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rails/deployment/middle/capistrano_custom_tasks","title":"capistrano_custom_tasks","description":"\ud83d\udeeb Automating Deploy with Capistrano Custom Tasks","source":"@site/docs/rails/deployment/middle/capistrano_custom_tasks.md","sourceDirName":"rails/deployment/middle","slug":"/rails/deployment/middle/capistrano_custom_tasks","permalink":"/keep-being-human-dev/docs/rails/deployment/middle/capistrano_custom_tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/deployment/middle/capistrano_custom_tasks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"zero_downtime_db_migrations","permalink":"/keep-being-human-dev/docs/rails/deployment/expert/zero_downtime_db_migrations"},"next":{"title":"local_asset_precompile","permalink":"/keep-being-human-dev/docs/rails/deployment/middle/local_asset_precompile"}}');var a=n(23420),o=n(65404);const r={},i=void 0,d={},c=[{value:"\ud83d\udeeb Automating Deploy with Capistrano Custom Tasks",id:"-automating-deploy-with-capistrano-custom-tasks",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-automating-deploy-with-capistrano-custom-tasks",children:"\ud83d\udeeb Automating Deploy with Capistrano Custom Tasks"}),"\n",(0,a.jsxs)(t.p,{children:["Capistrano streamlines Rails deployments by letting you define custom tasks for database migrations, asset handling, and service restarts. You can hook into deploy lifecycles (",(0,a.jsx)(t.code,{children:"before"}),", ",(0,a.jsx)(t.code,{children:"after"}),") to ensure steps run in the proper order, reducing manual intervention. Here\u2019s how to add tasks in your ",(0,a.jsx)(t.code,{children:"config/deploy.rb"})," to migrate and restart seamlessly."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# config/deploy.rb\nnamespace :deploy do\n  desc 'Run database migrations'\n  task :migrate_db do\n    on roles(:db) do\n      within release_path do\n        with rails_env: fetch(:rails_env) do\n          execute :rake, 'db:migrate'\n        end\n      end\n    end\n  end\n  before :updated, :migrate_db\n\n  desc 'Restart application via touch'\n  task :restart do\n    on roles(:app) do\n      execute :touch, release_path.join('tmp/restart.txt')\n    end\n  end\n  after :publishing, :restart\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(36672);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);