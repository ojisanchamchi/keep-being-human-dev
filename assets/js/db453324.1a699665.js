"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97072],{28673:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"ruby/classes_and_modules/expert/internal_dsl_included_hook","title":"internal_dsl_included_hook","description":"\ud83e\udde9 Building Internal DSLs with Module#included","source":"@site/docs/ruby/classes_and_modules/expert/internal_dsl_included_hook.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/internal_dsl_included_hook","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/internal_dsl_included_hook","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/internal_dsl_included_hook.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"included_class_macros","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/included_class_macros"},"next":{"title":"module_prepend_over_mixin","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/module_prepend_over_mixin"}}');var t=s(23420),l=s(65404);const a={},i=void 0,o={},c=[{value:"\ud83e\udde9 Building Internal DSLs with <code>Module#included</code>",id:"-building-internal-dsls-with-moduleincluded",level:2}];function r(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"-building-internal-dsls-with-moduleincluded",children:["\ud83e\udde9 Building Internal DSLs with ",(0,t.jsx)(n.code,{children:"Module#included"})]}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"included"})," hook to inject class-level methods when your module is mixed in, crafting a neat internal DSL. This technique initializes configuration, sets up callbacks, or defines macros dynamically on the host class."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"module ActsAsAuditable\n  def self.included(base)\n    base.extend(ClassMethods)\n  end\n\n  module ClassMethods\n    def acts_as_auditable\n      include InstanceMethods\n      before_save :audit_changes\n    end\n  end\n\n  module InstanceMethods\n    def audit_changes\n      # log changes\n    end\n  end\nend\n\nclass User\n  include ActsAsAuditable\n  acts_as_auditable\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"This pattern cleanly separates DSL declaration from implementation details."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var d=s(36672);const t={},l=d.createContext(t);function a(e){const n=d.useContext(l);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),d.createElement(l.Provider,{value:n},e.children)}}}]);