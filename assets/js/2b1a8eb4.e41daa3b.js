"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21418],{8925:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"ruby/concurrency_and_mutexes/middle/double_checked_locking","title":"double_checked_locking","description":"\ud83c\udfd7\ufe0f Lazy Initialization with Double\u2011Checked Locking","source":"@site/docs/ruby/concurrency_and_mutexes/middle/double_checked_locking.md","sourceDirName":"ruby/concurrency_and_mutexes/middle","slug":"/ruby/concurrency_and_mutexes/middle/double_checked_locking","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/double_checked_locking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/middle/double_checked_locking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"condition_variable_usage","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/condition_variable_usage"},"next":{"title":"mutex_synchronize","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/mutex_synchronize"}}');var t=i(23420),o=i(65404);const r={},d=void 0,a={},u=[{value:"\ud83c\udfd7\ufe0f Lazy Initialization with Double\u2011Checked Locking",id:"\ufe0f-lazy-initialization-with-doublechecked-locking",level:2}];function s(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-lazy-initialization-with-doublechecked-locking",children:"\ud83c\udfd7\ufe0f Lazy Initialization with Double\u2011Checked Locking"}),"\n",(0,t.jsx)(n.p,{children:"Double\u2011checked locking avoids repeatedly locking a mutex once the resource is initialized. First, check if the resource is set; if not, acquire the lock and check again before initializing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nclass Configuration\n  @config = nil\n  @mutex = Mutex.new\n\n  def self.instance\n    return @config if @config\n\n    @mutex.synchronize do\n      @config ||= load_config\n    end\n  end\n\n  def self.load_config\n    # expensive operation\n    sleep(0.2)\n    { db: 'postgresql', pool: 5 }\n  end\nend\n\nthreads = 5.times.map { Thread.new { p Configuration.instance } }\nthreads.each(&:join)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var c=i(36672);const t={},o=c.createContext(t);function r(e){const n=c.useContext(o);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),c.createElement(o.Provider,{value:n},e.children)}}}]);