"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10890],{22818:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/sidekiq/expert/sidekiq_dynamic_autoscaling","title":"sidekiq_dynamic_autoscaling","description":"\ud83d\udcc8 Autoscale Sidekiq Concurrency Based on Queue Latency","source":"@site/docs/gems/sidekiq/expert/sidekiq_dynamic_autoscaling.md","sourceDirName":"gems/sidekiq/expert","slug":"/gems/sidekiq/expert/sidekiq_dynamic_autoscaling","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_dynamic_autoscaling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/expert/sidekiq_dynamic_autoscaling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sidekiq_batch_chaining","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_batch_chaining"},"next":{"title":"sidekiq_opentelemetry_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_opentelemetry_middleware"}}');var t=n(23420),c=n(65404);const a={},r=void 0,o={},d=[{value:"\ud83d\udcc8 Autoscale Sidekiq Concurrency Based on Queue Latency",id:"-autoscale-sidekiq-concurrency-based-on-queue-latency",level:2}];function u(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-autoscale-sidekiq-concurrency-based-on-queue-latency",children:"\ud83d\udcc8 Autoscale Sidekiq Concurrency Based on Queue Latency"}),"\n",(0,t.jsx)(i.p,{children:"Leverage sidekiq-autoscaler to dynamically adjust concurrency based on real-time queue latency metrics. This reduces over-provisioning and adapts to load spikes."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:"# Gemfile\ngem 'sidekiq-autoscaler'\n\n# config/initializers/sidekiq_autoscaler.rb\nrequire 'sidekiq/autoscaler'\n\nSidekiq.autoscaler.configure do |c|\n  c.interval = 5               # seconds between metrics checks\n  c.queues  = ['critical', 'default', 'low']\n  c.min     = 5               # minimum concurrency\n  c.max     = 50              # maximum concurrency\n  c.latency_threshold = 1.0   # raise workers if latency > 1s\nend\n\n# start Sidekiq with autoscaler\n# bundle exec sidekiq -r ./config/initializers/sidekiq_autoscaler.rb\n"})})]})}function l(e={}){const{wrapper:i}={...(0,c.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>r});var s=n(36672);const t={},c=s.createContext(t);function a(e){const i=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(c.Provider,{value:i},e.children)}}}]);