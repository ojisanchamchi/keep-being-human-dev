"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13148],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(36672);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}},94060:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/marshal/middle/deep_clone_objects","title":"deep_clone_objects","description":"\ud83d\udd04 Deep Clone Objects","source":"@site/docs/ruby/marshal/middle/deep_clone_objects.md","sourceDirName":"ruby/marshal/middle","slug":"/ruby/marshal/middle/deep_clone_objects","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/deep_clone_objects","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/middle/deep_clone_objects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_marshal_dump_load","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/custom_marshal_dump_load"},"next":{"title":"lu_caching_solver","permalink":"/keep-being-human-dev/docs/ruby/matrix/advanced/lu_caching_solver"}}');var s=t(23420),o=t(65404);const r={},c=void 0,l={},d=[{value:"\ud83d\udd04 Deep Clone Objects",id:"-deep-clone-objects",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-deep-clone-objects",children:"\ud83d\udd04 Deep Clone Objects"}),"\n",(0,s.jsxs)(n.p,{children:["Deep cloning with ",(0,s.jsx)(n.code,{children:"Marshal"})," lets you duplicate complex Ruby objects (including nested arrays and hashes) without retaining references to the originals. This approach is significantly faster than manual deep-copy implementations for large data structures. Use ",(0,s.jsx)(n.code,{children:"Marshal.dump"})," and ",(0,s.jsx)(n.code,{children:"Marshal.load"})," back-to-back to produce an independent copy."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'original = { users: [{ name: "Alice" }, { name: "Bob" }], settings: { theme: "dark" } }\nclone = Marshal.load(Marshal.dump(original))\n\n# Modifying the clone doesn\'t affect the original\nclone[:users][0][:name] = "Carol"\nputs original[:users][0][:name]  # => "Alice"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}}}]);