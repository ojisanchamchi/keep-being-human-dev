"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76708],{65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var d=t(36672);const i={},s=d.createContext(i);function a(e){const n=d.useContext(s);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),d.createElement(s.Provider,{value:n},e.children)}},71171:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>a,metadata:()=>d,toc:()=>r});const d=JSON.parse('{"id":"ruby/classes_and_modules/advanced/dynamic_define_method","title":"dynamic_define_method","description":"\ud83d\udd27 Dynamic Method Definition with define_method","source":"@site/docs/ruby/classes_and_modules/advanced/dynamic_define_method.md","sourceDirName":"ruby/classes_and_modules/advanced","slug":"/ruby/classes_and_modules/advanced/dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/dynamic_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/advanced/dynamic_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"const_missing_autoload","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/const_missing_autoload"},"next":{"title":"dynamic_delegators","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/dynamic_delegators"}}');var i=t(23420),s=t(65404);const a={},o=void 0,c={},r=[{value:"\ud83d\udd27 Dynamic Method Definition with <code>define_method</code>",id:"-dynamic-method-definition-with-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"-dynamic-method-definition-with-define_method",children:["\ud83d\udd27 Dynamic Method Definition with ",(0,i.jsx)(n.code,{children:"define_method"})]}),"\n",(0,i.jsxs)(n.p,{children:["You can DRY up repetitive method patterns by dynamically defining them using ",(0,i.jsx)(n.code,{children:"define_method"}),". This is especially useful for building attribute-like methods or command methods based on a list."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class Report\n  %i[summary details statistics].each do |action|\n    define_method("generate_#{action}") do |options = {}|\n      puts "Generating #{action} with "+options.inspect\n      # ... implementation ...\n    end\n  end\nend\n\nreport = Report.new\nreport.generate_summary(format: :pdf)  # => "Generating summary with {:format=>:pdf}"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can use ",(0,i.jsx)(n.code,{children:"class_eval"})," for more complex definitions, interpolating method bodies dynamically."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);