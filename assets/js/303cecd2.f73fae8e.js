"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59998],{65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>i});var t=s(36672);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}},66037:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/sockets/beginner/udp_socket_basics","title":"udp_socket_basics","description":"\ud83d\udce6 Sending and Receiving with UDP","source":"@site/docs/ruby/sockets/beginner/udp_socket_basics.md","sourceDirName":"ruby/sockets/beginner","slug":"/ruby/sockets/beginner/udp_socket_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/udp_socket_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/beginner/udp_socket_basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tcp_server_basics","permalink":"/keep-being-human-dev/docs/ruby/sockets/beginner/tcp_server_basics"},"next":{"title":"custom_tls_alpn_ocsp","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/custom_tls_alpn_ocsp"}}');var r=s(23420),c=s(65404);const o={},i=void 0,a={},d=[{value:"\ud83d\udce6 Sending and Receiving with UDP",id:"-sending-and-receiving-with-udp",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-sending-and-receiving-with-udp",children:"\ud83d\udce6 Sending and Receiving with UDP"}),"\n",(0,r.jsxs)(n.p,{children:["UDP sockets are connectionless and useful for lightweight, low\u2011latency messages. Use ",(0,r.jsx)(n.code,{children:"UDPSocket"})," to send or bind and receive datagrams."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# udp_server.rb\nrequire 'socket'\n\nserver = UDPSocket.new\nserver.bind('localhost', 3000)\nputs \"UDP server listening on localhost:3000\"\n\nloop do\n  message, sender = server.recvfrom(1024)\n  addr = sender[3]\n  port = sender[1]\n  puts \"Received '#{message}' from \\\\#{addr}:#{port}\"\n  server.send(\"Ack: #{message}\", 0, addr, port)\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# udp_client.rb\nrequire 'socket'\n\nclient = UDPSocket.new\nclient.send(\"Hello UDP!\", 0, 'localhost', 3000)\nack, _ = client.recvfrom(1024)\nputs \"Server acknowledged: #{ack}\"\nclient.close\n"})}),"\n",(0,r.jsx)(n.p,{children:"The server listens for datagrams and replies with an acknowledgment. The client sends a message and waits for the response."})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);