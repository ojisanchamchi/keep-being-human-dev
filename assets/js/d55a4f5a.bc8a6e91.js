"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57660],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(36672);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},86246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/background_jobs/advanced/idempotent_jobs","title":"idempotent_jobs","description":"\ud83d\udd11 Implementing Idempotent Jobs with Sidekiq Unique Jobs","source":"@site/docs/rails/background_jobs/advanced/idempotent_jobs.md","sourceDirName":"rails/background_jobs/advanced","slug":"/rails/background_jobs/advanced/idempotent_jobs","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/idempotent_jobs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/advanced/idempotent_jobs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"token_authentication","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/middle/token_authentication"},"next":{"title":"job_metrics","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/job_metrics"}}');var o=t(23420),s=t(65404);const r={},d=void 0,a={},c=[{value:"\ud83d\udd11 Implementing Idempotent Jobs with Sidekiq Unique Jobs",id:"-implementing-idempotent-jobs-with-sidekiq-unique-jobs",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-implementing-idempotent-jobs-with-sidekiq-unique-jobs",children:"\ud83d\udd11 Implementing Idempotent Jobs with Sidekiq Unique Jobs"}),"\n",(0,o.jsxs)(n.p,{children:["To prevent duplicate job execution, integrate the ",(0,o.jsx)(n.code,{children:"sidekiq-unique-jobs"})," gem. It locks jobs with the same arguments until completion, ensuring idempotency for critical operations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'sidekiq-unique-jobs'\n\n# app/jobs/send_report_job.rb\nclass SendReportJob\n  include Sidekiq::Worker\n  sidekiq_options unique: :until_executed,\n                  unique_args: ->(args) { [\"SendReport\", args.first] }\n\n  def perform(user_id)\n    # expensive report generation logic\n  end\nend\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Configure lock expiry in ",(0,o.jsx)(n.code,{children:"config/initializers/sidekiq.rb"})," to fine\u2011tune dedupe windows."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);