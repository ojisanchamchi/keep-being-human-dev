"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9753],{33314:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/factory_bot_rails/middle/association_strategies","title":"association_strategies","description":"\u2699\ufe0f Choose the Right Strategy for Associations","source":"@site/docs/gems/factory_bot_rails/middle/association_strategies.md","sourceDirName":"gems/factory_bot_rails/middle","slug":"/gems/factory_bot_rails/middle/association_strategies","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/association_strategies","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/middle/association_strategies.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transient_traits_dynamic_associations","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/transient_traits_dynamic_associations"},"next":{"title":"unique_sequences","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/middle/unique_sequences"}}');var i=s(23420),r=s(65404);const a={},n=void 0,c={},d=[{value:"\u2699\ufe0f Choose the Right Strategy for Associations",id:"\ufe0f-choose-the-right-strategy-for-associations",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\ufe0f-choose-the-right-strategy-for-associations",children:"\u2699\ufe0f Choose the Right Strategy for Associations"}),"\n",(0,i.jsxs)(t.p,{children:["FactoryBot offers ",(0,i.jsx)(t.code,{children:"build"}),", ",(0,i.jsx)(t.code,{children:"create"}),", and ",(0,i.jsx)(t.code,{children:"attributes_for"})," strategies. Use ",(0,i.jsx)(t.code,{children:"build"})," when you don't need persistence, ",(0,i.jsx)(t.code,{children:"create"})," for database tests, and ",(0,i.jsx)(t.code,{children:"attributes_for"})," to quickly get a hash of attributes for controller or API specs."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'# spec/factories/articles.rb\nFactoryBot.define do\n  factory :article do\n    title { "Sample Article" }\n    content { "Lorem ipsum..." }\n    association :user, strategy: :build\n  end\nend\n\n# Usage in specs\narticle = build(:article)                     # not saved to DB, user is built but unsaved\narticle = create(:article)                    # saved to DB along with user\nattrs   = attributes_for(:article)             # { title: "Sample Article", content: "...", user_id: nil }\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>n});var o=s(36672);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);