"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74043],{63154:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/arrays/advanced/lazy_enumerators","title":"lazy_enumerators","description":"\ud83d\udc22 Processing Large Arrays Lazily with Enumerator::Lazy","source":"@site/docs/ruby/arrays/advanced/lazy_enumerators.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/lazy_enumerators","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/lazy_enumerators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/lazy_enumerators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"grouping_with_each_with_object","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/grouping_with_each_with_object"},"next":{"title":"pattern_matching_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/pattern_matching_arrays"}}');var t=a(23420),s=a(65404);const o={},i=void 0,c={},d=[{value:"\ud83d\udc22 Processing Large Arrays Lazily with <code>Enumerator::Lazy</code>",id:"-processing-large-arrays-lazily-with-enumeratorlazy",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h2,{id:"-processing-large-arrays-lazily-with-enumeratorlazy",children:["\ud83d\udc22 Processing Large Arrays Lazily with ",(0,t.jsx)(r.code,{children:"Enumerator::Lazy"})]}),"\n",(0,t.jsxs)(r.p,{children:["When working with huge or infinite sequences, convert your array (or Range) to a lazy enumerator to defer computation until needed. Chaining ",(0,t.jsx)(r.code,{children:"lazy.select.map"})," prevents building intermediate arrays and minimizes memory overhead. Call methods like ",(0,t.jsx)(r.code,{children:"first"})," or ",(0,t.jsx)(r.code,{children:"take"})," to realize only the required elements."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"numbers = (1..Float::INFINITY).lazy\neven_squares = numbers.select(&:even?).map { |n| n**2 }\np even_squares.first(5)\n# => [4, 16, 36, 64, 100]\n"})})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,r,a)=>{a.d(r,{R:()=>o,x:()=>i});var n=a(36672);const t={},s=n.createContext(t);function o(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);