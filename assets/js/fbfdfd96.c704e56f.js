"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97134],{35532:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/faker/expert/custom_faker_provider.md","title":"custom_faker_provider.md","description":"\ud83d\udee0\ufe0f Crafting Custom Faker Providers for Domain-specific Data","source":"@site/docs/gems/faker/expert/custom_faker_provider.md.md","sourceDirName":"gems/faker/expert","slug":"/gems/faker/expert/custom_faker_provider.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/custom_faker_provider.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faker/expert/custom_faker_provider.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrent_load_testing.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/concurrent_load_testing.md"},"next":{"title":"dynamic_locale_fallback.md","permalink":"/keep-being-human-dev/docs/gems/faker/expert/dynamic_locale_fallback.md"}}');var t=n(23420),o=n(65404);const i={},s=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Crafting Custom Faker Providers for Domain-specific Data",id:"\ufe0f-crafting-custom-faker-providers-for-domain-specific-data",level:2}];function m(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"\ufe0f-crafting-custom-faker-providers-for-domain-specific-data",children:"\ud83d\udee0\ufe0f Crafting Custom Faker Providers for Domain-specific Data"}),"\n",(0,t.jsxs)(r.p,{children:["Faker allows you to define custom providers to generate domain-specific data. This is ideal when your application requires specialized formats or complex patterns that built-in generators don\u2019t cover. You can create a provider by subclassing ",(0,t.jsx)(r.code,{children:"Faker::Base"}),", defining methods, and then registering it with ",(0,t.jsx)(r.code,{children:"Faker::Base.add_provider"}),". Once registered, you can call it like any other Faker generator."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'module Faker\n  class MyDomain < Base\n    flexible :my_domain\n\n    class << self\n      def transaction_id\n        "TXN-#{rand(1000..9999)}-#{sample(["USD","EUR","JPY"])}"\n      end\n\n      def tracking_code\n        Array.new(3) { rand(65..90).chr }.join + rand(10**6).to_s.rjust(6, \'0\')\n      end\n    end\n  end\nend\n\n# Register the provider globally\nFaker::Base.add_provider(Faker::MyDomain)\n\n# Usage\nFaker::MyDomain.transaction_id  #=> "TXN-4823-EUR"\nFaker::MyDomain.tracking_code   #=> "QWG042519"\n'})})]})}function l(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>s});var a=n(36672);const t={},o=a.createContext(t);function i(e){const r=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:r},e.children)}}}]);