"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[113],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var d=t(36672);const o={},i=d.createContext(o);function s(e){const n=d.useContext(i);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),d.createElement(i.Provider,{value:n},e.children)}},95071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"ruby/syntax/expert/dynamic_define_method","title":"dynamic_define_method","description":"\ud83d\udd27 Dynamic Method Definition with definemethod and method_","source":"@site/docs/ruby/syntax/expert/dynamic_define_method.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/dynamic_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/dynamic_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_variables","permalink":"/keep-being-human-dev/docs/ruby/syntax/beginner/using_variables"},"next":{"title":"eigenclass_dsl","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/eigenclass_dsl"}}');var o=t(23420),i=t(65404);const s={},r=void 0,a={},c=[{value:"\ud83d\udd27 Dynamic Method Definition with <code>define_method</code> and <code>__method__</code>",id:"-dynamic-method-definition-with-define_method-and-__method__",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-dynamic-method-definition-with-define_method-and-__method__",children:["\ud83d\udd27 Dynamic Method Definition with ",(0,o.jsx)(n.code,{children:"define_method"})," and ",(0,o.jsx)(n.code,{children:"__method__"})]}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"define_method"})," within loops or factories to programmatically declare methods. Access ",(0,o.jsx)(n.code,{children:"__method__"})," or ",(0,o.jsx)(n.code,{children:"__callee__"})," inside the block for introspection or logging without hardcoding names."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'%w[start stop restart].each do |action|\n  define_method(action) do |service|\n    puts "#{__method__.upcase}: #{service}"\n    # call systemctl or other command...\n  end\nend\n\n# Now you have start, stop, restart as instance methods\ndevice = Object.new\ndevice.start("nginx")\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);