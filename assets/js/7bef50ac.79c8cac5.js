"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41514],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var o=t(36672);const d={},i=o.createContext(d);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},70091:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/methods/expert/unbound_method_binding","title":"unbound_method_binding","description":"\ud83e\ude9d Binding and Invoking Unbound Methods","source":"@site/docs/ruby/methods/expert/unbound_method_binding.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/unbound_method_binding","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/unbound_method_binding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/unbound_method_binding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"refinements_scope_control","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/refinements_scope_control"},"next":{"title":"alias_method_and_super","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/alias_method_and_super"}}');var d=t(23420),i=t(65404);const r={},s=void 0,a={},u=[{value:"\ud83e\ude9d Binding and Invoking Unbound Methods",id:"-binding-and-invoking-unbound-methods",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-binding-and-invoking-unbound-methods",children:"\ud83e\ude9d Binding and Invoking Unbound Methods"}),"\n",(0,d.jsxs)(n.p,{children:["Extract an ",(0,d.jsx)(n.code,{children:"UnboundMethod"})," via ",(0,d.jsx)(n.code,{children:"instance_method"})," and bind it to different objects to reuse logic across classes. This lets you decouple method definitions and apply them dynamically to any compatible receiver."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"class Greeter\n  def initialize(name)\n    @name = name\n  end\n\n  private\n  attr_reader :name\n\n  def greet(greeting)\n    \"#{greeting}, #{name}\"\n  end\nend\n\nuid = Greeter.instance_method(:greet)\nalice = Greeter.new('Alice')\nbound = uid.bind(alice)\nputs bound.call('Hello')  # => \"Hello, Alice\"\n"})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"class Robot\n  def name; 'R2-D2'; end\nend\nrobot = Robot.new\nputs uid.bind(robot).call('Beep')  # => \"Beep, R2-D2\"\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);