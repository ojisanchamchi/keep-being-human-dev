"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44172],{21226:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/active_record_callbacks/expert/soft_delete_callbacks","title":"soft_delete_callbacks","description":"\ud83d\udd17 Implementing Soft Delete with Callbacks and Scopes","source":"@site/docs/rails/active_record_callbacks/expert/soft_delete_callbacks.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/soft_delete_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/soft_delete_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/soft_delete_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_callbacks_testing","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/rspec_callbacks_testing"},"next":{"title":"around_save_transaction","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/around_save_transaction"}}');var c=a(23420),n=a(65404);const l={},r=void 0,o={},d=[{value:"\ud83d\udd17 Implementing Soft Delete with Callbacks and Scopes",id:"-implementing-soft-delete-with-callbacks-and-scopes",level:2}];function i(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"-implementing-soft-delete-with-callbacks-and-scopes",children:"\ud83d\udd17 Implementing Soft Delete with Callbacks and Scopes"}),"\n",(0,c.jsxs)(t.p,{children:["Use ",(0,c.jsx)(t.code,{children:"before_destroy"})," to mark records as deleted and override default scope. Avoid actual deletes and retain historical data, while ensuring dependent associations are handled gracefully."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  default_scope { where(deleted_at: nil) }\nend\n\nclass Post < ApplicationRecord\n  before_destroy :soft_delete\n\n  private\n\n  def soft_delete\n    update_column(:deleted_at, Time.current)\n    throw(:abort)\n  end\nend\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Queries automatically exclude soft-deleted records. Use ",(0,c.jsx)(t.code,{children:"unscoped"})," to fetch all entries. This technique ensures data retention without complex SQL overrides."]})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(i,{...e})}):i(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>r});var s=a(36672);const c={},n=s.createContext(c);function l(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);