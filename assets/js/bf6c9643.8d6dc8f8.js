"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77320],{60116:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/caching/advanced/russian_doll_caching","title":"russian_doll_caching","description":"\ud83c\udfd7\ufe0f Russian Doll Caching with touch","source":"@site/docs/rails/caching/advanced/russian_doll_caching.md","sourceDirName":"rails/caching/advanced","slug":"/rails/caching/advanced/russian_doll_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/russian_doll_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/advanced/russian_doll_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_tier_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/multi_tier_caching"},"next":{"title":"cache_expiration","permalink":"/keep-being-human-dev/docs/rails/caching/beginner/cache_expiration"}}');var t=c(23420),s=c(65404);const i={},o=void 0,r={},d=[{value:"\ud83c\udfd7\ufe0f Russian Doll Caching with <code>touch</code>",id:"\ufe0f-russian-doll-caching-with-touch",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"\ufe0f-russian-doll-caching-with-touch",children:["\ud83c\udfd7\ufe0f Russian Doll Caching with ",(0,t.jsx)(n.code,{children:"touch"})]}),"\n",(0,t.jsxs)(n.p,{children:["Leverage ActiveRecord's ",(0,t.jsx)(n.code,{children:"touch"})," callbacks to automatically expire parent fragments when nested records change. This pattern ensures that you only rebuild the minimal necessary portion of a view when deep associations are updated, achieving near-zero cache bloat. Implement the ",(0,t.jsx)(n.code,{children:"touch"})," option on associations and use nested ",(0,t.jsx)(n.code,{children:"cache"})," calls in your templates."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments, dependent: :destroy, touch: true\nend\n\n# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\nend\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-erb",children:"\x3c!-- app/views/posts/_post.html.erb --\x3e\n<%= cache @post do %>\n  <h2><%= @post.title %></h2>\n  <%= render @post.comments %>\n<% end %>\n\n\x3c!-- app/views/comments/_comment.html.erb --\x3e\n<%= cache comment do %>\n  <div><%= comment.body %></div>\n<% end %>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now, updating a comment will ",(0,t.jsx)(n.code,{children:"touch"})," its parent ",(0,t.jsx)(n.code,{children:"post"}),", invalidating only the outer fragment."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,c)=>{c.d(n,{R:()=>i,x:()=>o});var a=c(36672);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);