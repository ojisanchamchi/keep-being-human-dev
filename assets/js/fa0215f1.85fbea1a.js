"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82211],{44753:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>u,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"javascript/turbo/expert/turbo_stream_continuous_updates","title":"turbo_stream_continuous_updates","description":"\u23f1 Continuous Streaming with Server-Sent Events","source":"@site/docs/javascript/turbo/expert/turbo_stream_continuous_updates.md","sourceDirName":"javascript/turbo/expert","slug":"/javascript/turbo/expert/turbo_stream_continuous_updates","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_continuous_updates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/turbo/expert/turbo_stream_continuous_updates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_stream_complex_selectors","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_complex_selectors"},"next":{"title":"turbo_stream_streaming_response","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_streaming_response"}}');var s=r(23420),o=r(65404);const a={},u=void 0,i={},c=[{value:"\u23f1 Continuous Streaming with Server-Sent Events",id:"-continuous-streaming-with-server-sent-events",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-continuous-streaming-with-server-sent-events",children:"\u23f1 Continuous Streaming with Server-Sent Events"}),"\n",(0,s.jsx)(t.p,{children:"Combine Turbo Streams with Server-Sent Events (SSE) for continuous updates without WebSockets. Create an SSE endpoint emitting Turbo Stream fragments to update live dashboards or logs."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'# app/controllers/sse_controller.rb\ndef stream\n  response.headers["Content-Type"] = "text/event-stream"\n  sse = SSE.new(response.stream)\n  loop do\n    fragment = render_to_string(partial: "status/line", locals: { line: next_line })\n    sse.write({ turboStream: fragment }, event: "turbo-stream")\n    sleep 1\n  end\nrescue IOError\nensure\n  sse.close\nend\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'<script type="text/javascript">\n  const source = new EventSource("/sse/stream");\n  source.addEventListener("turbo-stream", e => Turbo.renderStreamMessage(e.data));\n<\/script>\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>u});var n=r(36672);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);