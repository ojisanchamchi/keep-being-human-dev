"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95193],{50155:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>_,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy","title":"custom_to_create_bulk_insert_strategy","description":"\ud83d\udd25 Implement Custom to_create for High\u2011Performance Bulk Inserts","source":"@site/docs/gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy.md","sourceDirName":"gems/factory_bot_rails/expert","slug":"/gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/expert/custom_to_create_bulk_insert_strategy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"after_create_callbacks_external_service_setup","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/after_create_callbacks_external_service_setup"},"next":{"title":"transient_traits_dynamic_associations","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/expert/transient_traits_dynamic_associations"}}');var s=r(23420),a=r(65404);const c={},o=void 0,i={},l=[{value:"\ud83d\udd25 Implement Custom <code>to_create</code> for High\u2011Performance Bulk Inserts",id:"-implement-custom-to_create-for-highperformance-bulk-inserts",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"-implement-custom-to_create-for-highperformance-bulk-inserts",children:["\ud83d\udd25 Implement Custom ",(0,s.jsx)(t.code,{children:"to_create"})," for High\u2011Performance Bulk Inserts"]}),"\n",(0,s.jsxs)(t.p,{children:["FactoryBot\u2019s default creation strategy calls ",(0,s.jsx)(t.code,{children:".save!"})," on each instance, which can be slow for large test suites. You can override ",(0,s.jsx)(t.code,{children:"to_create"})," in your factory to leverage ActiveRecord\u2019s ",(0,s.jsx)(t.code,{children:"insert_all"})," or raw SQL for bulk insertion when performance is critical."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'FactoryBot.define do\n  factory :metric do\n    transient do\n      bulk { false }\n    end\n\n    timestamp { Time.current }\n    value { rand(0.0..100.0) }\n\n    to_create do |instance|\n      if instance.bulk\n        Metric.insert_all!([instance.attributes.except("id", "created_at", "updated_at")])\n      else\n        instance.save!\n      end\n    end\n  end\nend\n\n# In spec setup, create 10_000 metrics at once:\nmetrics = build_list(:metric, 10_000, bulk: true)\nmetrics.each(&:save!) # massively faster than one-by-one save!\n'})}),"\n",(0,s.jsx)(t.p,{children:"This approach dramatically reduces DB round\u2011trips by batching inserts, shaving minutes off large test runs."})]})}function _(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>c,x:()=>o});var n=r(36672);const s={},a=n.createContext(s);function c(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);