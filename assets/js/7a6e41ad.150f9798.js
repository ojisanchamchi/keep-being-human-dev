"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9954],{52218:(e,n,d)=>{d.r(n),d.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/methods/middle/dynamic_define_method","title":"dynamic_define_method","description":"\ud83d\udee0\ufe0f Dynamically Defining Methods with define_method","source":"@site/docs/ruby/methods/middle/dynamic_define_method.md","sourceDirName":"ruby/methods/middle","slug":"/ruby/methods/middle/dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/dynamic_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/middle/dynamic_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"default_keyword_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/default_keyword_arguments"},"next":{"title":"forwardable_delegation","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/forwardable_delegation"}}');var i=d(23420),o=d(65404);const a={},r=void 0,s={},c=[{value:"\ud83d\udee0\ufe0f Dynamically Defining Methods with define_method",id:"\ufe0f-dynamically-defining-methods-with-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-dynamically-defining-methods-with-define_method",children:"\ud83d\udee0\ufe0f Dynamically Defining Methods with define_method"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"define_method"})," lets you create methods at runtime based on dynamic requirements, reducing repetitive code. It accepts a symbol and a block, where block arguments become method parameters."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class EventHandler\n  %w[create update delete].each do |action|\n    define_method("on_#{action}") do |record|\n      puts "Handling #{action} for #{record.inspect}"\n    end\n  end\nend\n\nhandler = EventHandler.new\nhandler.on_create({id:1})  #=> Handling create for {:id=>1}\nhandler.on_delete({id:2})  #=> Handling delete for {:id=>2}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,n,d)=>{d.d(n,{R:()=>a,x:()=>r});var t=d(36672);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);