"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46642],{65404:(e,t,n)=>{n.d(t,{R:()=>u,x:()=>r});var c=n(36672);const o={},s=c.createContext(o);function u(e){const t=c.useContext(s);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:u(e.components),c.createElement(s.Provider,{value:t},e.children)}},68375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>d,frontMatter:()=>u,metadata:()=>c,toc:()=>i});const c=JSON.parse('{"id":"gems/counter_culture/beginner/counter_culture_basic_usage","title":"counter_culture_basic_usage","description":"\ud83c\udfaf Basic Usage: Auto-Updating Counters","source":"@site/docs/gems/counter_culture/beginner/counter_culture_basic_usage.md","sourceDirName":"gems/counter_culture/beginner","slug":"/gems/counter_culture/beginner/counter_culture_basic_usage","permalink":"/keep-being-human-dev/docs/gems/counter_culture/beginner/counter_culture_basic_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/beginner/counter_culture_basic_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"weighted_counter_updates","permalink":"/keep-being-human-dev/docs/gems/counter_culture/advanced/weighted_counter_updates"},"next":{"title":"counter_culture_setup","permalink":"/keep-being-human-dev/docs/gems/counter_culture/beginner/counter_culture_setup"}}');var o=n(23420),s=n(65404);const u={},r=void 0,a={},i=[{value:"\ud83c\udfaf Basic Usage: Auto-Updating Counters",id:"-basic-usage-auto-updating-counters",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-basic-usage-auto-updating-counters",children:"\ud83c\udfaf Basic Usage: Auto-Updating Counters"}),"\n",(0,o.jsxs)(t.p,{children:["With Counter Culture configured, any creation or deletion of a ",(0,o.jsx)(t.code,{children:"Comment"})," will automatically update the ",(0,o.jsx)(t.code,{children:"comments_count"})," on its associated ",(0,o.jsx)(t.code,{children:"Post"}),". No manual callbacks needed!"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# creates a post with zero comments\npost = Post.create!(title: 'Hello Counter')\n\n# create a comment and auto-increment post.comments_count\ncomment = post.comments.create!(body: 'Great post!')\nputs post.reload.comments_count  # => 1\n\n# deleting the comment auto-decrements the counter\ncomment.destroy\nputs post.reload.comments_count  # => 0\n"})}),"\n",(0,o.jsx)(t.p,{children:"You can also handle multiple associations or custom column names by passing options:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"class Reply < ApplicationRecord\n  belongs_to :comment\n  counter_culture :comment, column_name: 'replies_count'\nend\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);