"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47606],{65404:(e,o,s)=>{s.d(o,{R:()=>n,x:()=>a});var i=s(36672);const t={},c=i.createContext(t);function n(e){const o=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),i.createElement(c.Provider,{value:o},e.children)}},73467:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>r,contentTitle:()=>a,default:()=>l,frontMatter:()=>n,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"rails/active_record_associations/expert/scoped_polymorphic_association_conditions","title":"scoped_polymorphic_association_conditions","description":"\ud83d\udcda Scoped Polymorphic Association with Conditions","source":"@site/docs/rails/active_record_associations/expert/scoped_polymorphic_association_conditions.md","sourceDirName":"rails/active_record_associations/expert","slug":"/rails/active_record_associations/expert/scoped_polymorphic_association_conditions","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/scoped_polymorphic_association_conditions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/expert/scoped_polymorphic_association_conditions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"polymorphic_counter_cache","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/polymorphic_counter_cache"},"next":{"title":"sti_hierarchical_associations","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/sti_hierarchical_associations"}}');var t=s(23420),c=s(65404);const n={},a=void 0,r={},p=[{value:"\ud83d\udcda Scoped Polymorphic Association with Conditions",id:"-scoped-polymorphic-association-with-conditions",level:2}];function d(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"-scoped-polymorphic-association-with-conditions",children:"\ud83d\udcda Scoped Polymorphic Association with Conditions"}),"\n",(0,t.jsx)(o.p,{children:"Advanced use cases often require scoping polymorphic associations by type and custom conditions. You can leverage lambda scopes to filter specific subclasses and add SQL constraints in one association declaration."}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:"class Attachment < ApplicationRecord\n  belongs_to :attachable, polymorphic: true\n\n  scope :images, -> { where(content_type: ['image/png', 'image/jpeg']) }\nend\n\nclass Product < ApplicationRecord\n  has_many :attachments, as: :attachable\n  has_many :image_attachments, -> { images }, as: :attachable, class_name: 'Attachment'\nend\n"})})]})}function l(e={}){const{wrapper:o}={...(0,c.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);