"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18900],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(36672);const r={},c=t.createContext(r);function i(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:n},e.children)}},88667:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"gems/rspec/beginner/rspec_let_usage","title":"rspec_let_usage","description":"\ud83c\udf9b Using let for Memoization","source":"@site/docs/gems/rspec/beginner/rspec_let_usage.md","sourceDirName":"gems/rspec/beginner","slug":"/gems/rspec/beginner/rspec_let_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/beginner/rspec_let_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/beginner/rspec_let_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_it_blocks","permalink":"/keep-being-human-dev/docs/gems/rspec/beginner/rspec_it_blocks"},"next":{"title":"rspec_setup","permalink":"/keep-being-human-dev/docs/gems/rspec/beginner/rspec_setup"}}');var r=s(23420),c=s(65404);const i={},o=void 0,a={},p=[{value:"\ud83c\udf9b Using let for Memoization",id:"-using-let-for-memoization",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-using-let-for-memoization",children:"\ud83c\udf9b Using let for Memoization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"let"})," defines a memoized helper method. It's lazily evaluated and cached per example. This helps avoid using instance variables and keeps setup clear."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"RSpec.describe User do\n  let(:user) { User.new(name: 'Alice') }\n\n  it 'has the correct name' do\n    expect(user.name).to eq('Alice')\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);