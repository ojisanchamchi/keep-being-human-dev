"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27274],{16246:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>i,frontMatter:()=>d,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/hashes/advanced/nested_transform_keys","title":"nested_transform_keys","description":"\ud83d\udd04 Nested transformkeys and transformvalues","source":"@site/docs/ruby/hashes/advanced/nested_transform_keys.md","sourceDirName":"ruby/hashes/advanced","slug":"/ruby/hashes/advanced/nested_transform_keys","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/nested_transform_keys","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/advanced/nested_transform_keys.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"indifferent_access","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/indifferent_access"},"next":{"title":"recursive_deep_merge","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/recursive_deep_merge"}}');var a=n(23420),t=n(65404);const d={},o=void 0,c={},u=[{value:"\ud83d\udd04 Nested <code>transform_keys</code> and <code>transform_values</code>",id:"-nested-transform_keys-and-transform_values",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.h2,{id:"-nested-transform_keys-and-transform_values",children:["\ud83d\udd04 Nested ",(0,a.jsx)(s.code,{children:"transform_keys"})," and ",(0,a.jsx)(s.code,{children:"transform_values"})]}),"\n",(0,a.jsxs)(s.p,{children:["ActiveSupport adds ",(0,a.jsx)(s.code,{children:"transform_keys"}),"/",(0,a.jsx)(s.code,{children:"transform_values"}),", but they don\u2019t recurse by default. Create recursive variants to normalize keys or values at all depths."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class ::Hash\n  def deep_transform_keys(&block)\n    result = {}\n    each do |key, value|\n      new_key = block.call(key)\n      new_val = value.is_a?(Hash) ? value.deep_transform_keys(&block) : value\n      result[new_key] = new_val\n    end\n    result\n  end\nend\n\nsnake_hash = { 'UserName' => { 'ProfileImage' => 'url' } }\nsnake_hash.deep_transform_keys { |k| k.to_s.gsub(/([a-z])([A-Z])/, '\\1_\\2').downcase }\n# => {\"user_name\"=>{\"profile_image\"=>\"url\"}}\n"})})]})}function i(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>o});var r=n(36672);const a={},t=r.createContext(a);function d(e){const s=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);