"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25061],{65404:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var r=s(36672);const a={},o=r.createContext(a);function t(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},82242:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"gems/bcrypt/advanced/async_password_rehash","title":"async_password_rehash","description":"\ud83d\ude80 Asynchronous Password Rehashing on Login","source":"@site/docs/gems/bcrypt/advanced/async_password_rehash.md","sourceDirName":"gems/bcrypt/advanced","slug":"/gems/bcrypt/advanced/async_password_rehash","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/async_password_rehash","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/bcrypt/advanced/async_password_rehash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"add_pepper_to_bcrypt","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/add_pepper_to_bcrypt"},"next":{"title":"dynamic_bcrypt_cost","permalink":"/keep-being-human-dev/docs/gems/bcrypt/advanced/dynamic_bcrypt_cost"}}');var a=s(23420),o=s(65404);const t={},d=void 0,c={},p=[{value:"\ud83d\ude80 Asynchronous Password Rehashing on Login",id:"-asynchronous-password-rehashing-on-login",level:2}];function i(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-asynchronous-password-rehashing-on-login",children:"\ud83d\ude80 Asynchronous Password Rehashing on Login"}),"\n",(0,a.jsx)(n.p,{children:"When you increase the cost factor, existing passwords need rehashing. Instead of blocking user login, detect outdated hashes at auth time and enqueue a background job to rehash asynchronously."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  require 'bcrypt'\n\n  def authenticate(unencrypted_password)\n    bcrypt = BCrypt::Password.new(password_digest)\n    if bcrypt.is_password?(unencrypted_password)\n      rehash_if_needed\n      self\n    end\n  end\n\n  private\n\n  def rehash_if_needed\n    return unless BCrypt::Password.new(password_digest).cost < BCrypt::Engine.cost\n    PasswordRehashJob.perform_later(id, unencrypted_password: unencrypted_password)\n  end\nend\n\n# app/jobs/password_rehash_job.rb\nclass PasswordRehashJob < ApplicationJob\n  queue_as :default\n\n  def perform(user_id, unencrypted_password:)\n    user = User.find(user_id)\n    user.update!(password: unencrypted_password)\n  end\nend\n"})}),"\n",(0,a.jsx)(n.p,{children:"This non\u2011blocking pattern ensures smooth UX while gradually upgrading all stored password hashes to the new cost."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}}}]);