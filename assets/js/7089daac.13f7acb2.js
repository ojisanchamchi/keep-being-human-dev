"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32950],{65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var r=t(36672);const s={},o=r.createContext(s);function c(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:n},e.children)}},80169:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"sql/general/expert/upsert_on_conflict","title":"upsert_on_conflict","description":"\u2694\ufe0f Upsert with ON CONFLICT","source":"@site/docs/sql/general/expert/upsert_on_conflict.md","sourceDirName":"sql/general/expert","slug":"/sql/general/expert/upsert_on_conflict","permalink":"/keep-being-human-dev/docs/sql/general/expert/upsert_on_conflict","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/general/expert/upsert_on_conflict.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"row_level_security","permalink":"/keep-being-human-dev/docs/sql/general/expert/row_level_security"},"next":{"title":"window_function_advanced_analytics","permalink":"/keep-being-human-dev/docs/sql/general/expert/window_function_advanced_analytics"}}');var s=t(23420),o=t(65404);const c={},i=void 0,a={},l=[{value:"\u2694\ufe0f Upsert with ON CONFLICT",id:"\ufe0f-upsert-with-on-conflict",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-upsert-with-on-conflict",children:"\u2694\ufe0f Upsert with ON CONFLICT"}),"\n",(0,s.jsxs)(n.p,{children:["Perform atomic insert-or-update operations using ",(0,s.jsx)(n.code,{children:"INSERT ... ON CONFLICT"})," to eliminate race conditions and lock overhead from separate SELECT/UPDATE patterns."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO inventory (product_id, quantity)\nVALUES (42, 10)\nON CONFLICT (product_id)\nDO UPDATE SET\n  quantity = inventory.quantity + EXCLUDED.quantity,\n  last_updated = NOW();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This single statement safely increments stock levels or adds new records. You can also add a ",(0,s.jsx)(n.code,{children:"WHERE"})," clause in the ",(0,s.jsx)(n.code,{children:"DO UPDATE"})," for conditional upserts."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);