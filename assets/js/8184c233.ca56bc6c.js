"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22911],{48283:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_record_associations/advanced/polymorphic_counter_cache_optimization","title":"polymorphic_counter_cache_optimization","description":"\ud83d\udc3f\ufe0f Polymorphic Counter Cache Optimization","source":"@site/docs/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/polymorphic_counter_cache_optimization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_table_join_with_has_many_through","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/multi_table_join_with_has_many_through"},"next":{"title":"preloading_with_aggregates","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/preloading_with_aggregates"}}');var a=n(23420),c=n(65404);const i={},r=void 0,s={},d=[{value:"\ud83d\udc3f\ufe0f Polymorphic Counter Cache Optimization",id:"\ufe0f-polymorphic-counter-cache-optimization",level:2}];function l(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h2,{id:"\ufe0f-polymorphic-counter-cache-optimization",children:"\ud83d\udc3f\ufe0f Polymorphic Counter Cache Optimization"}),"\n",(0,a.jsxs)(o.p,{children:["Using ",(0,a.jsx)(o.code,{children:"counter_cache"})," on polymorphic associations lets Rails maintain counts automatically without extra queries. You can specify a custom counter column name to avoid naming collisions and follow project conventions. Remember to backfill the new counter by resetting counters after migration."]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-ruby",children:"# app/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :commentable, polymorphic: true, counter_cache: :comments_count\nend\n\n# app/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments, as: :commentable\nend\n\n# Migration to add counter cache\nclass AddCommentsCountToCommentables < ActiveRecord::Migration[6.1]\n  def change\n    add_column :posts, :comments_count, :integer, default: 0, null: false\n    # Repeat for other polymorphic models if needed\n  end\nend\n\n# Backfill existing counts\nPost.find_each { |p| Post.reset_counters(p.id, :comments) }\n"})})]})}function m(e={}){const{wrapper:o}={...(0,c.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>r});var t=n(36672);const a={},c=t.createContext(a);function i(e){const o=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(c.Provider,{value:o},e.children)}}}]);