"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53846],{65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(36672);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},86416:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/blocks/beginner/block_parameters","title":"block_parameters","description":"\ud83d\udce5 Capturing Block Parameters","source":"@site/docs/ruby/blocks/beginner/block_parameters.md","sourceDirName":"ruby/blocks/beginner","slug":"/ruby/blocks/beginner/block_parameters","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/block_parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/beginner/block_parameters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"trampoline_optimization","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/trampoline_optimization"},"next":{"title":"block_to_proc_conversion","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/block_to_proc_conversion"}}');var a=r(23420),o=r(65404);const s={},c=void 0,i={},l=[{value:"\ud83d\udce5 Capturing Block Parameters",id:"-capturing-block-parameters",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-capturing-block-parameters",children:"\ud83d\udce5 Capturing Block Parameters"}),"\n",(0,a.jsxs)(n.p,{children:["Blocks can take multiple parameters. Simply list them between pipes (",(0,a.jsx)(n.code,{children:"| |"}),"), and Ruby will assign values from the caller."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'items = [["apple", 3], ["banana", 5], ["cherry", 2]]\nitems.each do |fruit, count|\n  puts "We have #{count} #{fruit}s."\nend\n# Output:\n# We have 3 apples.\n# We have 5 bananas.\n# We have 2 cherrys.\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);