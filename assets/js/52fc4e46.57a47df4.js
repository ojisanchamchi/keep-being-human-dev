"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71456],{65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var s=t(36672);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},75486:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/blocks/expert/internal_dsl_with_instance_eval","title":"internal_dsl_with_instance_eval","description":"\ud83d\udcdc Building Internal DSLs with instance_eval","source":"@site/docs/ruby/blocks/expert/internal_dsl_with_instance_eval.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/internal_dsl_with_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/internal_dsl_with_instance_eval","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/internal_dsl_with_instance_eval.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_based_block_control_flow","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/fiber_based_block_control_flow"},"next":{"title":"partial_application_with_proc","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/partial_application_with_proc"}}');var i=t(23420),l=t(65404);const a={},r=void 0,o={},c=[{value:"\ud83d\udcdc Building Internal DSLs with instance_eval",id:"-building-internal-dsls-with-instance_eval",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-building-internal-dsls-with-instance_eval",children:"\ud83d\udcdc Building Internal DSLs with instance_eval"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"instance_eval"})," to execute a block in the context of an object, switching ",(0,i.jsx)(n.code,{children:"self"})," so DSL methods read like native language constructs. This approach leverages closures to capture environment and define concise APIs for configuration or markup."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class HTMLBuilder\n  def initialize(&block)\n    @result = ''\n    instance_eval(&block)\n  end\n\n  def element(name, content = nil, &block)\n    @result << \"<#{name}>\"\n    if block\n      instance_eval(&block)\n    else\n      @result << content.to_s\n    end\n    @result << \"</#{name}>\"\n  end\n\n  def to_s\n    @result\n  end\nend\n\nhtml = HTMLBuilder.new do\n  element :p, 'Hello'\n  element :div do\n    element :span, 'Nested'\n  end\nend\n\nputs html.to_s\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);