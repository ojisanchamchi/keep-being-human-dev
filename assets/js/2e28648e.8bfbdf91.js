"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32309],{32491:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"gems/redis/expert/redis_streams_event_sourcing","title":"redis_streams_event_sourcing","description":"\ud83d\udcdc Event-Driven Architecture with Redis Streams","source":"@site/docs/gems/redis/expert/redis_streams_event_sourcing.md","sourceDirName":"gems/redis/expert","slug":"/gems/redis/expert/redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_streams_event_sourcing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/expert/redis_streams_event_sourcing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_redlock_distributed_lock","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_redlock_distributed_lock"},"next":{"title":"distributed_lock_redlock","permalink":"/keep-being-human-dev/docs/gems/redis/middle/distributed_lock_redlock"}}');var t=s(23420),i=s(65404);const d={},o=void 0,c={},a=[{value:"\ud83d\udcdc Event-Driven Architecture with Redis Streams",id:"-event-driven-architecture-with-redis-streams",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-event-driven-architecture-with-redis-streams",children:"\ud83d\udcdc Event-Driven Architecture with Redis Streams"}),"\n",(0,t.jsx)(r.p,{children:"Use Redis Streams as a lightweight event store to build CQRS/event-driven Rails services. Streams offer persistence, consumer groups, and message acknowledgment, making them ideal for resilient message processing."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"# app/stream_processors/order_processor.rb\nclass OrderProcessor\n  STREAM = 'orders:stream'\n  GROUP = 'order_consumers'\n  CONSUMER = \"worker-#{Socket.gethostname}\"\n\n  def initialize\n    begin\n      REDIS.xgroup('CREATE', STREAM, GROUP, '$', mkstream: true)\n    rescue Redis::CommandError; end\n  end\n\n  def run\n    loop do\n      entries = REDIS.xreadgroup(GROUP, CONSUMER, { STREAM => '>' }, count: 10, block: 1_000)\n      next unless entries\n\n      entries.each do |_, msgs|\n        msgs.each do |id, fields|\n          process_event(id, fields)\n          REDIS.xack(STREAM, GROUP, id)\n        end\n      end\n    end\n  end\n\n  private\n\n  def process_event(id, fields)\n    OrderEventHandler.new(fields).call\n  end\nend\n"})})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,r,s)=>{s.d(r,{R:()=>d,x:()=>o});var n=s(36672);const t={},i=n.createContext(t);function d(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);