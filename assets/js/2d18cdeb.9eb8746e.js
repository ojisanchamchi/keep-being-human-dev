"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77546],{1866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/method_missing/advanced/rest_api_client_dynamic","title":"rest_api_client_dynamic","description":"\ud83c\udf10 Generate REST API Clients Dynamically","source":"@site/docs/ruby/method_missing/advanced/rest_api_client_dynamic.md","sourceDirName":"ruby/method_missing/advanced","slug":"/ruby/method_missing/advanced/rest_api_client_dynamic","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/rest_api_client_dynamic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/advanced/rest_api_client_dynamic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_association_proxy","permalink":"/keep-being-human-dev/docs/ruby/method_missing/advanced/lazy_association_proxy"},"next":{"title":"method_missing_basic_setup","permalink":"/keep-being-human-dev/docs/ruby/method_missing/beginner/method_missing_basic_setup"}}');var i=t(23420),r=t(65404);const a={},o=void 0,d={},c=[{value:"\ud83c\udf10 Generate REST API Clients Dynamically",id:"-generate-rest-api-clients-dynamically",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-generate-rest-api-clients-dynamically",children:"\ud83c\udf10 Generate REST API Clients Dynamically"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"method_missing"})," to map arbitrary method names to HTTP verbs or endpoints on remote services. Combine with ",(0,i.jsx)(n.code,{children:"respond_to_missing?"})," for introspection-friendly clients."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'net/http'\n\nclass ApiClient\n  BASE = URI('https://api.example.com')\n\n  def method_missing(name, *args, &block)\n    http_method, resource = name.to_s.split('_', 2)\n    if %w[get post put delete].include?(http_method)\n      uri = BASE + \"/#{resource}\"\n      request = Net::HTTP.const_get(http_method.capitalize).new(uri)\n      request.body = args.first.to_json if args.first\n      response = Net::HTTP.start(uri.host, uri.port, use_ssl: true) { |h| h.request(request) }\n      JSON.parse(response.body)\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    http_method = name.to_s.split('_', 2).first\n    %w[get post put delete].include?(http_method) || super\n  end\nend\n\nclient = ApiClient.new\nclient.get_users      # GET https://api.example.com/users\nclient.post_orders({ product_id: 1, qty: 2 })\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(36672);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);