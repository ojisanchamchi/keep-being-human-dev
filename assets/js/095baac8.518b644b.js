"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46244],{6685:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/solid_queue/expert/kafka_broker_implementation","title":"kafka_broker_implementation","description":"\ud83d\udee0\ufe0f Custom Kafka Broker Implementation","source":"@site/docs/gems/solid_queue/expert/kafka_broker_implementation.md","sourceDirName":"gems/solid_queue/expert","slug":"/gems/solid_queue/expert/kafka_broker_implementation","permalink":"/keep-being-human-dev/docs/gems/solid_queue/expert/kafka_broker_implementation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/expert/kafka_broker_implementation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_queue_sharding","permalink":"/keep-being-human-dev/docs/gems/solid_queue/expert/dynamic_queue_sharding"},"next":{"title":"batch_enqueueing","permalink":"/keep-being-human-dev/docs/gems/solid_queue/middle/batch_enqueueing"}}');var o=t(23420),r=t(65404);const i={},s=void 0,u={},c=[{value:"\ud83d\udee0\ufe0f Custom Kafka Broker Implementation",id:"\ufe0f-custom-kafka-broker-implementation",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-custom-kafka-broker-implementation",children:"\ud83d\udee0\ufe0f Custom Kafka Broker Implementation"}),"\n",(0,o.jsxs)(n.p,{children:["Extend SolidQueue to publish and consume messages via Kafka for ultra-low latency and at-least-once delivery semantics. Implement the ",(0,o.jsx)(n.code,{children:"Broker"})," interface and leverage the ",(0,o.jsx)(n.code,{children:"ruby-kafka"})," gem."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/brokers/kafka_broker.rb\nrequire 'kafka'\n\nclass KafkaBroker < SolidQueue::Broker\n  def initialize(config)\n    @kafka = Kafka.new(seed_brokers: config[:brokers])\n    @topic = config[:topic]\n  end\n\n  def push(message)\n    @kafka.deliver_message(message.to_json, topic: @topic)\n  end\n\n  def pop(batch_size: 10, timeout: 5)\n    @kafka.each_message(topic: @topic, max_wait_time: timeout, max_bytes_per_partition: batch_size) do |msg|\n      yield JSON.parse(msg.value)\n    end\n  end\nend\n\n# config/initializers/solid_queue.rb\nSolidQueue.configure do |c|\n  c.broker = KafkaBroker.new(\n    brokers: ['kafka1:9092','kafka2:9092'],\n    topic: 'solid_queue_topic'\n  )\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(36672);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);