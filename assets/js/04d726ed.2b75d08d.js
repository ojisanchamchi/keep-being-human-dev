"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85899],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(36672);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},80519:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/blocks/advanced/lazy_infinite_streams","title":"lazy_infinite_streams","description":"\ud83d\udd04 Lazy Infinite Streams with Enumerator::Lazy","source":"@site/docs/ruby/blocks/advanced/lazy_infinite_streams.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/lazy_infinite_streams","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/lazy_infinite_streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/lazy_infinite_streams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"internal_dsl_with_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/internal_dsl_with_instance_eval"},"next":{"title":"method_wrapper_with_blocks","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/method_wrapper_with_blocks"}}');var r=t(23420),i=t(65404);const s={},o=void 0,c={},l=[{value:"\ud83d\udd04 Lazy Infinite Streams with Enumerator::Lazy",id:"-lazy-infinite-streams-with-enumeratorlazy",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-lazy-infinite-streams-with-enumeratorlazy",children:"\ud83d\udd04 Lazy Infinite Streams with Enumerator::Lazy"}),"\n",(0,r.jsx)(n.p,{children:"Leverage Enumerator::Lazy to build potentially infinite, memory-efficient sequences by chaining transformations only when needed. Lazy enumerators defer computation until you call a terminal operation, preventing memory bloat and unnecessary work."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"fib = Enumerator.new do |yielder|\n  a, b = [0, 1]\n  loop do\n    yielder << a\n    a, b = b, a + b\n  end\nend.lazy\n\n# Take first 10 Fibonacci numbers, map and select evens\nresult = fib.take(10)\n            .map { |n| n * 2 }\n            .select(&:even?)\n\np result #=> [0, 4, 6, 16, 30]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);