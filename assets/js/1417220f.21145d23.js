"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9238],{15962:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/arrays/advanced/combinatorics_with_arrays","title":"combinatorics_with_arrays","description":"\ud83d\udd00 Generating Combinations and Permutations","source":"@site/docs/ruby/arrays/advanced/combinatorics_with_arrays.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/combinatorics_with_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/combinatorics_with_arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/combinatorics_with_arrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"balanced_chunk_split","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/balanced_chunk_split"},"next":{"title":"custom_uniq","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/custom_uniq"}}');var r=a(23420),s=a(65404);const o={},i=void 0,c={},d=[{value:"\ud83d\udd00 Generating Combinations and Permutations",id:"-generating-combinations-and-permutations",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-generating-combinations-and-permutations",children:"\ud83d\udd00 Generating Combinations and Permutations"}),"\n",(0,r.jsxs)(n.p,{children:["Ruby\u2019s Array supports ",(0,r.jsx)(n.code,{children:"combination"})," and ",(0,r.jsx)(n.code,{children:"permutation"})," for combinatorial tasks. Use these with a block to process results on the fly without collecting huge intermediate arrays. Useful for algorithmic puzzles, testing scenarios, or statistical sampling."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'letters = %w[a b c d]\n# All 2-letter combinations:\nletters.combination(2) { |combo| p combo }\n# => ["a", "b"], ["a", "c"], ...\n\n# All 3-permutations as arrays:\np letters.permutation(3).to_a\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var t=a(36672);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);