"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13960],{15301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/rspec/expert/metadata_dynamic_test_generation","title":"metadata_dynamic_test_generation","description":"\ud83d\udd16 Generate Specs Dynamically via Metadata","source":"@site/docs/gems/rspec/expert/metadata_dynamic_test_generation.md","sourceDirName":"gems/rspec/expert","slug":"/gems/rspec/expert/metadata_dynamic_test_generation","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/metadata_dynamic_test_generation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/expert/metadata_dynamic_test_generation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hook_order_customization","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/hook_order_customization"},"next":{"title":"parallel_testing_db_sharding","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/parallel_testing_db_sharding"}}');var s=n(23420),r=n(65404);const i={},o=void 0,d={},c=[{value:"\ud83d\udd16 Generate Specs Dynamically via Metadata",id:"-generate-specs-dynamically-via-metadata",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-generate-specs-dynamically-via-metadata",children:"\ud83d\udd16 Generate Specs Dynamically via Metadata"}),"\n",(0,s.jsx)(t.p,{children:"Use metadata-driven iteration to generate boundary tests or permutations without boilerplate. Combine RSpec's metadata filtering and example groups to create dynamic contexts on the fly."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:'RSpec.shared_examples \'validates range\' do |min, max|\n  it "accepts value at boundary #{min}" do\n    expect(subject.validate(min)).to be_truthy\n  end\n\n  it "rejects value below #{min}" do\n    expect(subject.validate(min - 1)).to be_falsey\n  end\nend\n\nRSpec.describe RangeValidator do\n  [{min: 0, max: 10}, {min: -5, max: 5}].each do |bounds|\n    context "with bounds #{bounds}" do\n      subject { described_class.new(bounds[:min], bounds[:max]) }\n      include_examples \'validates range\', bounds[:min], bounds[:max]\n    end\n  end\nend\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(36672);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);