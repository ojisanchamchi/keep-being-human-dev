"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[73826],{65404:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>u});var n=t(36672);const s={},i=n.createContext(s);function a(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(i.Provider,{value:r},e.children)}},87022:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"ruby/regex/expert/recursive_regex_for_nested","title":"recursive_regex_for_nested","description":"\ud83d\udd04 Parse Nested Structures with Recursive Patterns","source":"@site/docs/ruby/regex/expert/recursive_regex_for_nested.md","sourceDirName":"ruby/regex/expert","slug":"/ruby/regex/expert/recursive_regex_for_nested","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/recursive_regex_for_nested","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/expert/recursive_regex_for_nested.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"named_captures_with_transform","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/named_captures_with_transform"},"next":{"title":"regexp_union_optimization","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/regexp_union_optimization"}}');var s=t(23420),i=t(65404);const a={},u=void 0,c={},o=[{value:"\ud83d\udd04 Parse Nested Structures with Recursive Patterns",id:"-parse-nested-structures-with-recursive-patterns",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-parse-nested-structures-with-recursive-patterns",children:"\ud83d\udd04 Parse Nested Structures with Recursive Patterns"}),"\n",(0,s.jsxs)(r.p,{children:["Oniguruma supports recursive subroutine calls to match arbitrarily nested constructs\u2014ideal for parenthesis, XML tags, or quotes. Define a named subpattern that calls itself with ",(0,s.jsx)(r.code,{children:"(?&name)"})," inside."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'nested = /\n  \\(\n    (?:\n      [^()]+      # any non-paren chunk\n      | (?&nested)  # recursive call\n    )*\n  \\)\n/x\n\np "((a(b)c)d)".match?(nested)  # => true\n'})}),"\n",(0,s.jsxs)(r.p,{children:["You can adapt ",(0,s.jsx)(r.code,{children:"nested"})," to match HTML-like tags or other paired delimiters by adjusting the outer delimiters."]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);