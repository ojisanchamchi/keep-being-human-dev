"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[57952],{59166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/expert/fair_fifo_mutex","title":"fair_fifo_mutex","description":"\ud83c\udf9f\ufe0f Implementing a Fair FIFO Mutex with ConditionVariable","source":"@site/docs/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex.md","sourceDirName":"ruby/concurrency_and_mutexes/expert","slug":"/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/expert/fair_fifo_mutex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"waiting_for_threads_join","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/waiting_for_threads_join"},"next":{"title":"lock_striping_mutex_shard","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/lock_striping_mutex_shard"}}');var i=t(23420),a=t(65404);const o={},c=void 0,s={},u=[{value:"\ud83c\udf9f\ufe0f Implementing a Fair FIFO Mutex with ConditionVariable",id:"\ufe0f-implementing-a-fair-fifo-mutex-with-conditionvariable",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-implementing-a-fair-fifo-mutex-with-conditionvariable",children:"\ud83c\udf9f\ufe0f Implementing a Fair FIFO Mutex with ConditionVariable"}),"\n",(0,i.jsxs)(n.p,{children:["Standard ",(0,i.jsx)(n.code,{children:"Mutex"})," can starve threads under heavy load. Use a FIFO queue and ",(0,i.jsx)(n.code,{children:"ConditionVariable"})," to grant lock ownership in arrival order, ensuring fairness and predictable throughput."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class FairMutex\n  def initialize\n    @queue = []\n    @cv = ConditionVariable.new\n    @lock = Mutex.new\n  end\n\n  def synchronize\n    @lock.synchronize do\n      thread_id = Thread.current.object_id\n      @queue << thread_id\n      @cv.wait(@lock) until @queue.first == thread_id\n      begin\n        yield\n      ensure\n        @queue.shift\n        @cv.broadcast\n      end\n    end\n  end\nend\n\n# Usage\na_mutex = FairMutex.new\nthreads = 10.times.map do\n  Thread.new { a_mutex.synchronize { puts "Thread #{Thread.current.object_id} acquired" } }\nend\nthreads.each(&:join)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This ensures no thread bypasses the queue. The ",(0,i.jsx)(n.code,{children:"broadcast"})," wakes all waiters but only the head acquires the lock next."]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(36672);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);