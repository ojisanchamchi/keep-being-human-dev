"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96730],{8579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation","title":"around_each_instrumentation","description":"\ud83d\udd04 Advanced Around Hook Instrumentation","source":"@site/docs/gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/expert","slug":"/gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/expert/around_each_instrumentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_before_hook","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_before_hook"},"next":{"title":"metadata_based_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks"}}');var r=t(23420),s=t(65404);const a={},c=void 0,i={},d=[{value:"\ud83d\udd04 Advanced Around Hook Instrumentation",id:"-advanced-around-hook-instrumentation",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-advanced-around-hook-instrumentation",children:"\ud83d\udd04 Advanced Around Hook Instrumentation"}),"\n",(0,r.jsxs)(n.p,{children:["Use around(",":each",") to wrap example execution with custom instrumentation and guaranteed cleanup. This is ideal for timing, tracing, or managing external resources without polluting your example code. Leverage Ruby\u2019s ",(0,r.jsx)(n.code,{children:"ensure"})," block to always perform teardown, even if an error is raised."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"RSpec.configure do |config|\n  config.around(:each, :instrument) do |example|\n    start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n    begin\n      example.run\n    ensure\n      duration = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start_time\n      RSpec.configuration.reporter.message \"\u23f1\ufe0f #{example.full_description} took #{duration.round(3)}s\"\n      # additional cleanup logic here\n    end\n  end\nend\n\nRSpec.describe MyService, :instrument do\n  it 'processes data efficiently' do\n    expect(MyService.call).to be_success\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"This pattern centralizes timing and cleanup, making your examples declarative and focused on assertions."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(36672);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);