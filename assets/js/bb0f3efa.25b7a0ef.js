"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85122],{29485:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"rails/active_record_migrations/advanced/concurrent_index","title":"concurrent_index","description":"\ud83d\ude80 Add Index Concurrently","source":"@site/docs/rails/active_record_migrations/advanced/concurrent_index.md","sourceDirName":"rails/active_record_migrations/advanced","slug":"/rails/active_record_migrations/advanced/concurrent_index","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/concurrent_index","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/advanced/concurrent_index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"check_constraints","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/check_constraints"},"next":{"title":"conditional_migrations","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/conditional_migrations"}}');var i=r(23420),a=r(65404);const c={},d=void 0,o={},s=[{value:"\ud83d\ude80 Add Index Concurrently",id:"-add-index-concurrently",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-add-index-concurrently",children:"\ud83d\ude80 Add Index Concurrently"}),"\n",(0,i.jsxs)(n.p,{children:["Rails wraps migrations in transactions by default on PostgreSQL, but creating indexes concurrently requires disabling the transaction wrap. You can call ",(0,i.jsx)(n.code,{children:"disable_ddl_transaction!"})," and specify ",(0,i.jsx)(n.code,{children:"algorithm: :concurrently"})," to reduce downtime. This approach ensures the index build does not block writes on large tables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class AddIndexToUsersEmailConcurrently < ActiveRecord::Migration[6.1]\n  disable_ddl_transaction!\n\n  def up\n    add_index :users, :email, unique: true, algorithm: :concurrently\n  end\n\n  def down\n    remove_index :users, :email, algorithm: :concurrently\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var t=r(36672);const i={},a=t.createContext(i);function c(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);