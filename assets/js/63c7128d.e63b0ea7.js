"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[36637],{41482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/data_types/expert/lazy_infinite_sequences","title":"lazy_infinite_sequences","description":"\u267e\ufe0f Lazy Infinite Enumerables with Enumerator::Lazy","source":"@site/docs/ruby/data_types/expert/lazy_infinite_sequences.md","sourceDirName":"ruby/data_types/expert","slug":"/ruby/data_types/expert/lazy_infinite_sequences","permalink":"/keep-being-human-dev/docs/ruby/data_types/expert/lazy_infinite_sequences","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/expert/lazy_infinite_sequences.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"high_precision_arithmetic","permalink":"/keep-being-human-dev/docs/ruby/data_types/expert/high_precision_arithmetic"},"next":{"title":"pattern_matching_hashes","permalink":"/keep-being-human-dev/docs/ruby/data_types/expert/pattern_matching_hashes"}}');var i=t(23420),r=t(65404);const s={},o=void 0,u={},c=[{value:"\u267e\ufe0f Lazy Infinite Enumerables with Enumerator::Lazy",id:"\ufe0f-lazy-infinite-enumerables-with-enumeratorlazy",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-lazy-infinite-enumerables-with-enumeratorlazy",children:"\u267e\ufe0f Lazy Infinite Enumerables with Enumerator::Lazy"}),"\n",(0,i.jsxs)(n.p,{children:["Ruby\u2019s lazy enumerators let you describe potentially infinite sequences without materializing them until needed. Pair them with ",(0,i.jsx)(n.code,{children:"take"}),", ",(0,i.jsx)(n.code,{children:"map"}),", or ",(0,i.jsx)(n.code,{children:"select"})," to derive just the slice you care about."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# Fibonacci sequence as an infinite lazy enumerator\ndef fib_stream\n  Enumerator.new do |yielder|\n    a, b = 0, 1\n    loop do\n      yielder << a\n      a, b = b, a + b\n    end\n  end.lazy\nend\n\n# Compute first 10 Fibonacci numbers divisible by 3\nresult = fib_stream\n  .select { |n| (n % 3).zero? }\n  .take(10)\n  .to_a\n\np result # => [0, 3, 21, 144, 987, ...]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(36672);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);