"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9425],{65404:(e,r,o)=>{o.d(r,{R:()=>a,x:()=>i});var n=o(36672);const t={},s=n.createContext(t);function a(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(s.Provider,{value:r},e.children)}},93664:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"ruby/operators/advanced/spaceship_operator.md","title":"spaceship_operator.md","description":"\ud83d\ude80 Spaceship Operator for Custom Sorting","source":"@site/docs/ruby/operators/advanced/spaceship_operator.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/spaceship_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/spaceship_operator.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/spaceship_operator.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"safe_navigation_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/safe_navigation_operator.md"},"next":{"title":"symbol_to_proc.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/symbol_to_proc.md"}}');var t=o(23420),s=o(65404);const a={},i=void 0,c={},p=[{value:"\ud83d\ude80 Spaceship Operator for Custom Sorting",id:"-spaceship-operator-for-custom-sorting",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-spaceship-operator-for-custom-sorting",children:"\ud83d\ude80 Spaceship Operator for Custom Sorting"}),"\n",(0,t.jsxs)(r.p,{children:["The spaceship operator (",(0,t.jsx)(r.code,{children:"<=>"}),") returns -1, 0, or 1, making it the core of Ruby\u2019s ",(0,t.jsx)(r.code,{children:"<"}),", ",(0,t.jsx)(r.code,{children:">"}),", and sorting logic. Implement it in custom classes to define ordering semantics concisely."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'class Version\n  include Comparable\n  attr_reader :parts\n  def initialize(str)\n    @parts = str.split(\'.\').map(&:to_i)\n  end\n  def <=>(other)\n    parts <=> other.parts\n  end\n  def to_s\n    parts.join(\'.\')\n  end\nend\n\nversions = [Version.new("2.1"), Version.new("1.10"), Version.new("2.0")]\nsorted = versions.sort\nprintf "%s\\n", sorted\n# 1.10\n# 2.0\n# 2.1\n'})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);