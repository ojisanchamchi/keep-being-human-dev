"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74767],{65404:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(36672);const r={},c=t.createContext(r);function o(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(c.Provider,{value:n},e.children)}},81259:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/csv/advanced/custom_converters_casting","title":"custom_converters_casting","description":"\ud83d\udee0\ufe0f Define Custom CSV Converters","source":"@site/docs/ruby/csv/advanced/custom_converters_casting.md","sourceDirName":"ruby/csv/advanced","slug":"/ruby/csv/advanced/custom_converters_casting","permalink":"/keep-being-human-dev/docs/ruby/csv/advanced/custom_converters_casting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/csv/advanced/custom_converters_casting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"manage_version_metadata.md","permalink":"/keep-being-human-dev/docs/ruby/creating_gems/middle/manage_version_metadata.md"},"next":{"title":"lazy_loading_huge_csv","permalink":"/keep-being-human-dev/docs/ruby/csv/advanced/lazy_loading_huge_csv"}}');var r=s(23420),c=s(65404);const o={},a=void 0,d={},i=[{value:"\ud83d\udee0\ufe0f Define Custom CSV Converters",id:"\ufe0f-define-custom-csv-converters",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-define-custom-csv-converters",children:"\ud83d\udee0\ufe0f Define Custom CSV Converters"}),"\n",(0,r.jsxs)(n.p,{children:["The built-in converters (",(0,r.jsx)(n.code,{children:":integer"}),", ",(0,r.jsx)(n.code,{children:":float"}),", ",(0,r.jsx)(n.code,{children:":date"}),") are handy, but you can define your own for specialized data types. Custom converters apply transformations as each field is parsed, keeping your post-processing logic clean."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'csv'\n\nCSV::Converters[:upcase_string] = lambda do |field|\n  field && field.strip.upcase\nend\n\noptions = {\n  headers: true,\n  converters: [:integer, :date, :upcase_string]\n}\n\nCSV.foreach('data.csv', **options) do |row|\n  # row['NAME'] is already upcased\n  puts \"ID: #{row['id']}, Name: #{row['NAME']}\"\nend\n"})}),"\n",(0,r.jsxs)(n.p,{children:["By registering your lambda under ",(0,r.jsx)(n.code,{children:"CSV::Converters"}),", you can reuse it across multiple CSV reads or even gemify a suite of common converters."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);