"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18396],{7893:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"ruby/reflection/advanced/tracepoint_method_tracing","title":"tracepoint_method_tracing","description":"\ud83d\udd0d Trace and Profile Method Calls with TracePoint","source":"@site/docs/ruby/reflection/advanced/tracepoint_method_tracing.md","sourceDirName":"ruby/reflection/advanced","slug":"/ruby/reflection/advanced/tracepoint_method_tracing","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/tracepoint_method_tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/advanced/tracepoint_method_tracing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"runtime_constant_injection","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/runtime_constant_injection"},"next":{"title":"dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/dynamic_method_invocation"}}');var o=t(23420),i=t(65404);const a={},c=void 0,d={},s=[{value:"\ud83d\udd0d Trace and Profile Method Calls with TracePoint",id:"-trace-and-profile-method-calls-with-tracepoint",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-trace-and-profile-method-calls-with-tracepoint",children:"\ud83d\udd0d Trace and Profile Method Calls with TracePoint"}),"\n",(0,o.jsxs)(n.p,{children:["You can hook into Ruby\u2019s execution at a low level using ",(0,o.jsx)(n.code,{children:"TracePoint"}),", enabling you to trace method calls, returns, and line events without modifying the target code. This is useful for profiling, logging, or debugging complex gems or applications."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'trace = TracePoint.new(:call, :return) do |tp|\n  if tp.defined_class == MyService && tp.method_id == :perform\n    if tp.event == :call\n      puts "Calling MyService#perform at line #{tp.lineno}"\n    else\n      puts "Returned from MyService#perform with value: #{tp.return_value.inspect}"\n    end\n  end\nend\n\ntrace.enable\nMyService.new.perform\ntrace.disable\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(36672);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);