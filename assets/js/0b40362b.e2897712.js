"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40506],{24098:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"ruby/blocks/middle/multiple_blocks.md","title":"multiple_blocks.md","description":"\u26a1 Handle Multiple Blocks via Proc Parameters","source":"@site/docs/ruby/blocks/middle/multiple_blocks.md.md","sourceDirName":"ruby/blocks/middle","slug":"/ruby/blocks/middle/multiple_blocks.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/multiple_blocks.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/middle/multiple_blocks.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"filter_and_map_collections.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/filter_and_map_collections.md"},"next":{"title":"yield_with_arguments.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/yield_with_arguments.md"}}');var l=o(23420),r=o(65404);const c={},s=void 0,a={},i=[{value:"\u26a1 Handle Multiple Blocks via <code>Proc</code> Parameters",id:"-handle-multiple-blocks-via-proc-parameters",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.h2,{id:"-handle-multiple-blocks-via-proc-parameters",children:["\u26a1 Handle Multiple Blocks via ",(0,l.jsx)(t.code,{children:"Proc"})," Parameters"]}),"\n",(0,l.jsxs)(t.p,{children:["Ruby doesn\u2019t support two ",(0,l.jsx)(t.code,{children:"&"})," parameters directly, but you can accept extra ",(0,l.jsx)(t.code,{children:"Proc"})," objects explicitly. This is handy for hooks or callbacks in your APIs. Name them clearly to indicate their purpose."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ruby",children:"def with_hooks(main_proc, before_hook = nil, after_hook = nil)\n  before_hook.call if before_hook\n  result = main_proc.call\n  after_hook.call if after_hook\n  result\nend\n\nmain = proc { puts 'Main action'; 42 }\nbefore = proc { puts 'Setup' }\nafter = proc { puts 'Cleanup' }\n\nvalue = with_hooks(main, before, after)\n# Setup\n# Main action\n# Cleanup\n# => 42\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},65404:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>s});var n=o(36672);const l={},r=n.createContext(l);function c(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);