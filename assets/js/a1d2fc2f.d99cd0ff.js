"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31958],{18102:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/controllers/expert/action_cable_integration","title":"action_cable_integration","description":"\ud83d\udd17 Broadcasting from Controllers to Action Cable Channels","source":"@site/docs/rails/controllers/expert/action_cable_integration.md","sourceDirName":"rails/controllers/expert","slug":"/rails/controllers/expert/action_cable_integration","permalink":"/keep-being-human-dev/docs/rails/controllers/expert/action_cable_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/expert/action_cable_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_strong_parameters","permalink":"/keep-being-human-dev/docs/rails/controllers/beginner/using_strong_parameters"},"next":{"title":"advanced_content_negotiation","permalink":"/keep-being-human-dev/docs/rails/controllers/expert/advanced_content_negotiation"}}');var r=t(23420),a=t(65404);const s={},c=void 0,i={},l=[{value:"\ud83d\udd17 Broadcasting from Controllers to Action Cable Channels",id:"-broadcasting-from-controllers-to-action-cable-channels",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-broadcasting-from-controllers-to-action-cable-channels",children:"\ud83d\udd17 Broadcasting from Controllers to Action Cable Channels"}),"\n",(0,r.jsx)(n.p,{children:"Trigger real-time updates by broadcasting messages from controller actions. This decouples business logic from channels and allows fine-grained control over who sees what when mutating server-side state."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class CommentsController < ApplicationController\n  def create\n    comment = Comment.create!(comment_params)\n    ActionCable.server.broadcast(\n      "comments_#{comment.post_id}",\n      id: comment.id,\n      body: comment.body,\n      user: comment.user.name\n    )\n    head :created\n  end\n\n  private\n\n  def comment_params\n    params.require(:comment).permit(:post_id, :body)\n  end\nend\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(36672);const r={},a=o.createContext(r);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);