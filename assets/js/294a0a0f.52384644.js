"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66782],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(36672);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},96696:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/active_storage/advanced/stream_large_files","title":"stream_large_files","description":"\ud83d\ude80 Streaming Large Files with Range Requests","source":"@site/docs/rails/active_storage/advanced/stream_large_files.md","sourceDirName":"rails/active_storage/advanced","slug":"/rails/active_storage/advanced/stream_large_files","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/stream_large_files","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/advanced/stream_large_files.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"direct_upload_throttling","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/direct_upload_throttling"},"next":{"title":"webp_global_variant","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/webp_global_variant"}}');var s=t(23420),r=t(65404);const i={},o=void 0,l={},d=[{value:"\ud83d\ude80 Streaming Large Files with Range Requests",id:"-streaming-large-files-with-range-requests",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-streaming-large-files-with-range-requests",children:"\ud83d\ude80 Streaming Large Files with Range Requests"}),"\n",(0,s.jsxs)(n.p,{children:["For serving huge blobs without loading them fully into memory, use ",(0,s.jsx)(n.code,{children:"send_data"})," with streaming and HTTP range support. This enables resumable downloads and efficient memory usage."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# app/controllers/blobs_controller.rb\nclass BlobsController < ApplicationController\n  include ActionController::Live\n\n  def show\n    blob = ActiveStorage::Blob.find_signed(params[:signed_id])\n    response.headers["Accept-Ranges"] = "bytes"\n    range = request.headers["Range"]\n\n    blob.open do |file|\n      offset, length = parse_range(range, file.size)\n      file.seek(offset)\n      streaming_length = length || (file.size - offset)\n\n      response.status = length ? :partial_content : :ok\n      response.headers["Content-Range"] = "bytes #{offset}-#{offset + streaming_length - 1}/#{file.size}"\n      response.headers["Content-Length"] = streaming_length.to_s\n      send_data(file.read(streaming_length), disposition: "attachment", filename: blob.filename.to_s)\n    end\n  ensure\n    response.stream.close\n  end\n\n  private\n\n  def parse_range(range_header, size)\n    return [0, nil] unless range_header\n    matches = /bytes=(\\d+)-(\\d*)/.match(range_header)\n    start_byte = matches[1].to_i\n    end_byte = matches[2].present? ? matches[2].to_i : size - 1\n    [start_byte, end_byte - start_byte + 1]\n  end\nend\n'})})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);