"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32195],{4446:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"gems/rspec/custom_matchers/advanced/chainable_custom_matchers","title":"chainable_custom_matchers","description":"\ud83d\udd17 Creating Chainable Custom Matchers","source":"@site/docs/gems/rspec/custom_matchers/advanced/chainable_custom_matchers.md","sourceDirName":"gems/rspec/custom_matchers/advanced","slug":"/gems/rspec/custom_matchers/advanced/chainable_custom_matchers","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/advanced/chainable_custom_matchers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/custom_matchers/advanced/chainable_custom_matchers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_subject_definition","permalink":"/keep-being-human-dev/docs/gems/rspec/beginner/rspec_subject_definition"},"next":{"title":"diffable_custom_matchers","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/advanced/diffable_custom_matchers"}}');var a=s(23420),c=s(65404);const r={},o=void 0,d={},i=[{value:"\ud83d\udd17 Creating Chainable Custom Matchers",id:"-creating-chainable-custom-matchers",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-creating-chainable-custom-matchers",children:"\ud83d\udd17 Creating Chainable Custom Matchers"}),"\n",(0,a.jsxs)(n.p,{children:["Chainable matchers let you build flexible expectations by adding extra qualifiers. You can define multiple ",(0,a.jsx)(n.code,{children:"chain"})," blocks inside ",(0,a.jsx)(n.code,{children:"RSpec::Matchers.define"})," to accept additional parameters and accumulate state before evaluating the final ",(0,a.jsx)(n.code,{children:"match"})," block."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# spec/support/matchers/be_json_response.rb\nRSpec::Matchers.define :be_json_response do\n  match do |response|\n    valid_json?(response.body) && status_ok?\n  end\n\n  chain(:with_status) do |expected_status|\n    @expected_status = expected_status\n  end\n\n  chain(:including) do |key|\n    @required_key = key\n  end\n\n  def valid_json?(body)\n    JSON.parse(body)\n    true\n  rescue JSON::ParserError\n    false\n  end\n\n  def status_ok?\n    return response.status == @expected_status if defined?(@expected_status)\n    response.status == 200\n  end\n\n  def matches_including_key?\n    @required_key.nil? || JSON.parse(response.body).key?(@required_key)\n  end\n\n  match do |response|\n    valid_json?(response.body) && status_ok? && matches_including_key?\n  end\nend\n"})}),"\n",(0,a.jsx)(n.p,{children:"Usage:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"expect(response).to be_json_response.with_status(201).including('id')\n"})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(36672);const a={},c=t.createContext(a);function r(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);