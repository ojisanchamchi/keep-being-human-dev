"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82824],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(36672);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},96612:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/sockets/expert/zero_copy_sendfile","title":"zero_copy_sendfile","description":"\ud83d\ude80 Zero-Copy File Transfer with sendfile","source":"@site/docs/ruby/sockets/expert/zero_copy_sendfile.md","sourceDirName":"ruby/sockets/expert","slug":"/ruby/sockets/expert/zero_copy_sendfile","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/zero_copy_sendfile","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/expert/zero_copy_sendfile.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_scheduler_socket_server","permalink":"/keep-being-human-dev/docs/ruby/sockets/expert/fiber_scheduler_socket_server"},"next":{"title":"socket_select_multiplex","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/socket_select_multiplex"}}');var t=r(23420),o=r(65404);const i={},c=void 0,l={},d=[{value:"\ud83d\ude80 Zero-Copy File Transfer with sendfile",id:"-zero-copy-file-transfer-with-sendfile",level:2}];function a(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-zero-copy-file-transfer-with-sendfile",children:"\ud83d\ude80 Zero-Copy File Transfer with sendfile"}),"\n",(0,t.jsxs)(n.p,{children:["When serving large static assets, avoiding user\u2010space copies can drastically reduce CPU and memory overhead. Ruby\u2019s ",(0,t.jsx)(n.code,{children:"IO#sendfile"})," uses the OS ",(0,t.jsx)(n.code,{children:"sendfile(2)"})," syscall under the hood to transfer file data directly between a file descriptor and a socket."]}),"\n",(0,t.jsx)(n.p,{children:"Example: building a minimal HTTP file server with zero-copy:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'require \'socket\'\n\nserver = TCPServer.new(\'0.0.0.0\', 8080)\nputs "Listening on 8080..."\n\nwhile client = server.accept\n  Thread.new(client) do |sock|\n    # Read and ignore the request\n    sock.gets\n\n    # Open the file and send headers\n    File.open(\'large_video.mp4\', \'rb\') do |file|\n      sock.write "HTTP/1.1 200 OK\\r\\n"\n      sock.write "Content-Type: video/mp4\\r\\n"\n      sock.write "Content-Length: #{file.size}\\r\\n"\n      sock.write "Connection: close\\r\\n\\r\\n"\n\n      # Zero-copy transfer\n      sock.sendfile(file)\n    end\n    sock.close\n  end\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"Tips:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Ensure the client socket is in blocking mode (default) for ",(0,t.jsx)(n.code,{children:"sendfile"}),". Nonblocking may return ",(0,t.jsx)(n.code,{children:":wait_writable"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Check error codes: on Linux, you can rescue ",(0,t.jsx)(n.code,{children:"Errno::ENOSYS"})," to fallback to manual reads."]}),"\n",(0,t.jsx)(n.li,{children:"This technique works best under high I/O loads, e.g., CDN or media streaming servers."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);