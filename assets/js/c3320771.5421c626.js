"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80129],{65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(36672);const o={},r=t.createContext(o);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(r.Provider,{value:n},e.children)}},80252:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"gems/rspec/middle/instance_double_usage","title":"instance_double_usage","description":"\ud83d\udce6 Instance Doubles","source":"@site/docs/gems/rspec/middle/instance_double_usage.md","sourceDirName":"gems/rspec/middle","slug":"/gems/rspec/middle/instance_double_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/instance_double_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/middle/instance_double_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_matchers","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/custom_matchers"},"next":{"title":"let_vs_let_bang","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/let_vs_let_bang"}}');var o=s(23420),r=s(65404);const c={},i=void 0,d={},a=[{value:"\ud83d\udce6 Instance Doubles",id:"-instance-doubles",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-instance-doubles",children:"\ud83d\udce6 Instance Doubles"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"instance_double"})," to create strict test doubles that only allow methods defined on the real class. This ensures your stubs match the public API."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class Notifier\n  def notify(user); end\nend\n\nRSpec.describe OrderProcessor do\n  let(:notifier) { instance_double(Notifier) }\n\n  before do\n    allow(notifier).to receive(:notify)\n  end\n\n  it "sends a notification after processing" do\n    subject = OrderProcessor.new(notifier: notifier)\n    subject.process(order)\n    expect(notifier).to have_received(:notify).with(order.user)\n  end\nend\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);