"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[37989],{65404:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>s});var c=t(36672);const n={},r=c.createContext(n);function o(e){const a=c.useContext(r);return c.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),c.createElement(r.Provider,{value:a},e.children)}},95710:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>_,frontMatter:()=>o,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"rails/active_record_callbacks/middle/batch_operations_callbacks","title":"batch_operations_callbacks","description":"\ud83d\ude80 Batch Operations with after_commit oncreate","source":"@site/docs/rails/active_record_callbacks/middle/batch_operations_callbacks.md","sourceDirName":"rails/active_record_callbacks/middle","slug":"/rails/active_record_callbacks/middle/batch_operations_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/batch_operations_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/middle/batch_operations_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"around_save_transaction","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/around_save_transaction"},"next":{"title":"callback_ordering","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/callback_ordering"}}');var n=t(23420),r=t(65404);const o={},s=void 0,i={},l=[{value:"\ud83d\ude80 Batch Operations with after_commit on:",id:"-batch-operations-with-after_commit-on-",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.h2,{id:"-batch-operations-with-after_commit-on-",children:["\ud83d\ude80 Batch Operations with after_commit on: ",":create"]}),"\n",(0,n.jsxs)(a.p,{children:["If you need to enqueue jobs for each record in a bulk insert, use ",(0,n.jsx)(a.code,{children:"after_commit on: :create"})," alongside ",(0,n.jsx)(a.code,{children:"insert_all"})," and call callbacks manually."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-ruby",children:"class Report < ApplicationRecord\n  after_commit :generate_pdf, on: :create\n\n  def self.bulk_create_and_enqueue(reports)\n    insert_all(reports)\n    where(created_at: Time.zone.today.all_day).find_each(&:run_callbacks)\n  end\n\n  def generate_pdf\n    PdfGeneratorJob.perform_later(self.id)\n  end\nend\n"})}),"\n",(0,n.jsxs)(a.p,{children:["This pattern ensures each new ",(0,n.jsx)(a.code,{children:"Report"})," triggers its ",(0,n.jsx)(a.code,{children:"after_commit"})," callback for job enqueuing."]})]})}function _(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);