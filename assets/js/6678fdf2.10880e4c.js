"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26424],{29448:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins","title":"optimize_tag_query_with_joins","description":"\ud83d\ude80 Optimizing Tag Queries with Custom Joins and Eager Loading","source":"@site/docs/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins.md","sourceDirName":"gems/acts-as-taggable-on/advanced","slug":"/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_delimiters_unicode_normalization","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/custom_delimiters_unicode_normalization"},"next":{"title":"polymorphic_tagging_across_models","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models"}}');var i=a(23420),s=a(65404);const o={},r=void 0,c={},d=[{value:"\ud83d\ude80 Optimizing Tag Queries with Custom Joins and Eager Loading",id:"-optimizing-tag-queries-with-custom-joins-and-eager-loading",level:2}];function g(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-optimizing-tag-queries-with-custom-joins-and-eager-loading",children:"\ud83d\ude80 Optimizing Tag Queries with Custom Joins and Eager Loading"}),"\n",(0,i.jsxs)(t.p,{children:["Complex tag-based queries can become slow on large datasets. You can speed them up by crafting custom ",(0,i.jsx)(t.code,{children:"JOIN"})," clauses, adding selected columns, and eager loading related records to reduce N+1 queries."]}),"\n",(0,i.jsxs)(t.p,{children:["Example: Fetching published Articles tagged with both ",(0,i.jsx)(t.code,{children:"ruby"})," and ",(0,i.jsx)(t.code,{children:"rails"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"Article.joins(\n  \"INNER JOIN taggings t1 ON t1.taggable_id = articles.id AND t1.taggable_type = 'Article'\",\n  \"INNER JOIN tags tag1 ON tag1.id = t1.tag_id AND tag1.name = 'ruby'\",\n  \"INNER JOIN taggings t2 ON t2.taggable_id = articles.id AND t2.taggable_type = 'Article'\",\n  \"INNER JOIN tags tag2 ON tag2.id = t2.tag_id AND tag2.name = 'rails'\"\n)\n.where(published: true)\n.select('articles.*, COUNT(*) OVER() AS total_count')\n.includes(:taggings, :tags)\n.limit(20)\n"})}),"\n",(0,i.jsx)(t.p,{children:"This approach:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Uses raw SQL joins for precise control."}),"\n",(0,i.jsxs)(t.li,{children:["Leverages window functions (",(0,i.jsx)(t.code,{children:"COUNT(*) OVER()"}),") to paginate without extra queries."]}),"\n",(0,i.jsxs)(t.li,{children:["Eager loads ",(0,i.jsx)(t.code,{children:":taggings"})," and ",(0,i.jsx)(t.code,{children:":tags"})," to avoid N+1."]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var n=a(36672);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);