"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20120],{28166:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/classes_and_modules/expert/const_missing_dynamic_resolution","title":"const_missing_dynamic_resolution","description":"\ud83d\udd0d Dynamic Constant Resolution with const_missing","source":"@site/docs/ruby/classes_and_modules/expert/const_missing_dynamic_resolution.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/const_missing_dynamic_resolution","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/const_missing_dynamic_resolution","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/const_missing_dynamic_resolution.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concern_pattern_composition","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/concern_pattern_composition"},"next":{"title":"dynamic_method_generation","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/dynamic_method_generation"}}');var o=s(23420),i=s(65404);const c={},a=void 0,r={},d=[{value:"\ud83d\udd0d Dynamic Constant Resolution with <code>const_missing</code>",id:"-dynamic-constant-resolution-with-const_missing",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-dynamic-constant-resolution-with-const_missing",children:["\ud83d\udd0d Dynamic Constant Resolution with ",(0,o.jsx)(n.code,{children:"const_missing"})]}),"\n",(0,o.jsxs)(n.p,{children:["Override ",(0,o.jsx)(n.code,{children:"const_missing"})," to handle missing constants at runtime\u2014ideal for on-the-fly proxy classes or multi-tenant namespaces. Be cautious: always call ",(0,o.jsx)(n.code,{children:"super"})," for truly missing constants to preserve expected ",(0,o.jsx)(n.code,{children:"NameError"})," behavior."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"module ServiceFactory\n  def self.const_missing(name)\n    klass = Class.new do\n      define_method(:call) { |*args| puts \"Calling #{name} with \\\\u{2026}\" }\n    end\n    const_set(name, klass)\n  end\nend\n\nServiceFactory::EmailService.new.call('hi')\n"})}),"\n",(0,o.jsx)(n.p,{children:"This pattern auto-defines service objects under a common module."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var t=s(36672);const o={},i=t.createContext(o);function c(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);