"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[56522],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>d});var t=s(36672);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},79403:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/symbols/expert/dsl_metaprogramming_with_symbols","title":"dsl_metaprogramming_with_symbols","description":"\ud83d\udee0\ufe0f Build Efficient DSLs with Symbols and define_method","source":"@site/docs/ruby/symbols/expert/dsl_metaprogramming_with_symbols.md","sourceDirName":"ruby/symbols/expert","slug":"/ruby/symbols/expert/dsl_metaprogramming_with_symbols","permalink":"/keep-being-human-dev/docs/ruby/symbols/expert/dsl_metaprogramming_with_symbols","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/expert/dsl_metaprogramming_with_symbols.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_vs_string","permalink":"/keep-being-human-dev/docs/ruby/symbols/beginner/symbol_vs_string"},"next":{"title":"secure_dynamic_symbol_creation","permalink":"/keep-being-human-dev/docs/ruby/symbols/expert/secure_dynamic_symbol_creation"}}');var o=s(23420),r=s(65404);const i={},d=void 0,a={},l=[{value:"\ud83d\udee0\ufe0f Build Efficient DSLs with Symbols and define_method",id:"\ufe0f-build-efficient-dsls-with-symbols-and-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-build-efficient-dsls-with-symbols-and-define_method",children:"\ud83d\udee0\ufe0f Build Efficient DSLs with Symbols and define_method"}),"\n",(0,o.jsxs)(n.p,{children:["Leverage symbols for performant DSLs by dynamically defining methods via ",(0,o.jsx)(n.code,{children:"define_method"})," and caching symbol lookups. Instead of ",(0,o.jsx)(n.code,{children:"send"}),", use ",(0,o.jsx)(n.code,{children:"public_send"})," with symbols, and prepare method names upfront to avoid repeated string allocations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class EventHandler\n  EVENT_NAMES = %i[start stop pause resume]\n\n  EVENT_NAMES.each do |evt|\n    define_method("on_#{evt}".to_sym) do |&block|\n      (@handlers ||= {})[evt] = block\n    end\n  end\n\n  def trigger(event, *args)\n    handler = @handlers[event]\n    handler&.call(*args)\n  end\nend\n\n# Usage\ne = EventHandler.new\ne.on_start { puts "Started" }\ne.trigger(:start)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["By defining methods once with symbols and reusing them, you cut down on string-to-symbol conversions at runtime and gain faster dispatch. Combine with ",(0,o.jsx)(n.code,{children:"Module#prepend"})," for advanced hook injection."]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);