"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95975],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var c=n(36672);const o={},a=c.createContext(o);function r(e){const t=c.useContext(a);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),c.createElement(a.Provider,{value:t},e.children)}},69690:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>h});const c=JSON.parse('{"id":"ruby/hashes/advanced/grouping_with_each_with_object","title":"grouping_with_each_with_object","description":"\ud83d\udcca Group and Count Using eachwithobject","source":"@site/docs/ruby/hashes/advanced/grouping_with_each_with_object.md","sourceDirName":"ruby/hashes/advanced","slug":"/ruby/hashes/advanced/grouping_with_each_with_object","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/grouping_with_each_with_object","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/advanced/grouping_with_each_with_object.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fetch_with_block_defaults","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/fetch_with_block_defaults"},"next":{"title":"hash_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/hashes/advanced/hash_pattern_matching"}}');var o=n(23420),a=n(65404);const r={},s=void 0,i={},h=[{value:"\ud83d\udcca Group and Count Using <code>each_with_object</code>",id:"-group-and-count-using-each_with_object",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.h2,{id:"-group-and-count-using-each_with_object",children:["\ud83d\udcca Group and Count Using ",(0,o.jsx)(t.code,{children:"each_with_object"})]}),"\n",(0,o.jsxs)(t.p,{children:["For flexible grouping and counting, ",(0,o.jsx)(t.code,{children:"group_by"})," is common but returns arrays. Use ",(0,o.jsx)(t.code,{children:"each_with_object"})," to accumulate directly into a Hash with counts or transformed values."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:'records = [\n  {category: \'books\', title: \'Ruby 101\'},\n  {category: \'tools\', title: \'Rails Console\'},\n  {category: \'books\', title: \'Metaprogramming Ruby\'}\n]\n\ncounts = records.each_with_object(Hash.new(0)) do |rec, acc|\n  acc[rec[:category]] += 1\nend\n# => {"books"=>2, "tools"=>1}\n\ntitles = records.each_with_object({}) do |rec, acc|\n  acc[rec[:category]] ||= []\n  acc[rec[:category]] << rec[:title]\nend\n# => {"books"=>["Ruby 101", "Metaprogramming Ruby"], "tools"=>["Rails Console"]}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);