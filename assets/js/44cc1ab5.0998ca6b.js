"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16416],{7577:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration","title":"graphql_jwt_pundit_integration","description":"\ud83d\udd11 Secure GraphQL Resolvers with JWT Authentication and Pundit","source":"@site/docs/rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration.md","sourceDirName":"rails/authentication_and_authorization/expert","slug":"/rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/authentication_and_authorization/expert/graphql_jwt_pundit_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_pundit_scope_with_rls","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls"},"next":{"title":"mfa_custom_warden_strategy","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/mfa_custom_warden_strategy"}}');var a=n(23420),i=n(65404);const o={},s=void 0,c={},u=[{value:"\ud83d\udd11 Secure GraphQL Resolvers with JWT Authentication and Pundit",id:"-secure-graphql-resolvers-with-jwt-authentication-and-pundit",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-secure-graphql-resolvers-with-jwt-authentication-and-pundit",children:"\ud83d\udd11 Secure GraphQL Resolvers with JWT Authentication and Pundit"}),"\n",(0,a.jsxs)(t.p,{children:["For API-first Rails apps, authenticating and authorizing GraphQL resolvers at the same time maintains a unified permission model. Decode the JWT in your GraphQL controller, set ",(0,a.jsx)(t.code,{children:"current_user"}),", and pass a Pundit context into the schema. Use ",(0,a.jsx)(t.code,{children:"authorize!"})," in resolvers to guard individual fields or mutations."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# app/controllers/graphql_controller.rb\nclass GraphqlController < ApplicationController\n  def execute\n    token = request.headers['Authorization']&.split(' ')&.last\n    context = { current_user: authenticate_jwt(token) }\n    result = MySchema.execute(\n      params[:query], variables: params[:variables], context: context\n    )\n    render json: result\n  end\n\n  private\n\n  def authenticate_jwt(token)\n    payload = JWT.decode(token, Rails.application.secrets.jwt_secret)[0]\n    User.find(payload['sub'])\n  rescue JWT::DecodeError\n    nil\n  end\nend\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# app/graphql/types/query_type.rb\nfield :project, Types::ProjectType, null: false do\n  argument :id, ID, required: true\nend\ndef project(id:)\n  project = Project.find(id)\n  Pundit.authorize(context[:current_user], project, :show?)\n  project\nend\n"})}),"\n",(0,a.jsx)(t.p,{children:"This pattern ensures every GraphQL field is wrapped in Pundit\u2019s authorization checks while centralizing token decoding logic."})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(36672);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);