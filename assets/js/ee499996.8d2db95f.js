"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68539],{31026:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/logging/advanced/custom_log_formatter_with_metadata","title":"custom_log_formatter_with_metadata","description":"\ud83d\udee0\ufe0f Advanced Custom Log Formatter with Metadata","source":"@site/docs/ruby/logging/advanced/custom_log_formatter_with_metadata.md","sourceDirName":"ruby/logging/advanced","slug":"/ruby/logging/advanced/custom_log_formatter_with_metadata","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/custom_log_formatter_with_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/logging/advanced/custom_log_formatter_with_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_json_parsing","permalink":"/keep-being-human-dev/docs/ruby/json/middle/streaming_json_parsing"},"next":{"title":"silence_and_tagged_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/advanced/silence_and_tagged_logging"}}');var o=a(23420),r=a(65404);const i={},s=void 0,c={},d=[{value:"\ud83d\udee0\ufe0f Advanced Custom Log Formatter with Metadata",id:"\ufe0f-advanced-custom-log-formatter-with-metadata",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"\ufe0f-advanced-custom-log-formatter-with-metadata",children:"\ud83d\udee0\ufe0f Advanced Custom Log Formatter with Metadata"}),"\n",(0,o.jsxs)(t.p,{children:["By subclassing ",(0,o.jsx)(t.code,{children:"Logger::Formatter"})," (or using a proc), you can inject timestamps, severity colors, caller locations, and arbitrary metadata into each log line."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:'# config/initializers/custom_logger.rb\nclass DetailedFormatter < Logger::Formatter\n  SEVERITY_COLORS = {\n    "INFO" => "\\e[32m",\n    "WARN" => "\\e[33m",\n    "ERROR" => "\\e[31m"\n  }\n\n  def call(severity, time, progname, msg)\n    color = SEVERITY_COLORS[severity] || "\\e[0m"\n    caller_loc = caller_locations(5,1).first\n    formatted_time = time.utc.strftime("%Y-%m-%dT%H:%M:%S.%6NZ")\n    metadata = {\n      severity: severity,\n      timestamp: formatted_time,\n      file: caller_loc.path.split(\'/\').last,\n      line: caller_loc.lineno\n    }\n\n    "#{color}[#{metadata[:timestamp]}] #{severity} -- #{metadata[:file]}:#{metadata[:line]}: #{msg}\\e[0m\\n"\n  end\nend\n\nRails.logger.formatter = DetailedFormatter.new\n'})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>s});var n=a(36672);const o={},r=n.createContext(o);function i(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);