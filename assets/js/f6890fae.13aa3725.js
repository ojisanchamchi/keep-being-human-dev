"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8470],{27261:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/operators/expert/inline_rescue_in_operators","title":"inline_rescue_in_operators","description":"\ud83c\udfa9 Inline rescue in Operator Methods","source":"@site/docs/ruby/operators/expert/inline_rescue_in_operators.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/inline_rescue_in_operators","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/inline_rescue_in_operators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/inline_rescue_in_operators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"extending_numeric_precision","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/extending_numeric_precision"},"next":{"title":"pipeline_operator_with_procs","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/pipeline_operator_with_procs"}}');var o=r(23420),i=r(65404);const s={},a=void 0,c={},u=[{value:"\ud83c\udfa9 Inline <code>rescue</code> in Operator Methods",id:"-inline-rescue-in-operator-methods",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-inline-rescue-in-operator-methods",children:["\ud83c\udfa9 Inline ",(0,o.jsx)(n.code,{children:"rescue"})," in Operator Methods"]}),"\n",(0,o.jsxs)(n.p,{children:["Leverage the modifier form ",(0,o.jsx)(n.code,{children:"rescue"})," inside operator definitions to gracefully handle exceptions (e.g., divisions by zero) without breaking fluent operator chains."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class SafeNumber < Numeric\n  def initialize(value)\n    @value = value.to_f\n  end\n\n  def /(other)\n    (@value / other.to_f) rescue Float::INFINITY\n  end\n\n  def to_f; @value; end\nend\n\na = SafeNumber.new(10)\nb = SafeNumber.new(0)\nputs (a / b).to_f  # \u21d2 Infinity\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(36672);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);