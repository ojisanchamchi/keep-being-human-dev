"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88480],{65404:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>c});var n=o(36672);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},85960:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"gems/simple_form/middle/collection_inputs","title":"collection_inputs","description":"\ud83d\udcca Use Collection Inputs for Radios and Selects","source":"@site/docs/gems/simple_form/middle/collection_inputs.md","sourceDirName":"gems/simple_form/middle","slug":"/gems/simple_form/middle/collection_inputs","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/collection_inputs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/simple_form/middle/collection_inputs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_nested_associations","permalink":"/keep-being-human-dev/docs/gems/simple_form/expert/dynamic_nested_associations"},"next":{"title":"custom_input_wrapper","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/custom_input_wrapper"}}');var s=o(23420),i=o(65404);const r={},c=void 0,l={},a=[{value:"\ud83d\udcca Use Collection Inputs for Radios and Selects",id:"-use-collection-inputs-for-radios-and-selects",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-use-collection-inputs-for-radios-and-selects",children:"\ud83d\udcca Use Collection Inputs for Radios and Selects"}),"\n",(0,s.jsxs)(t.p,{children:["When you need to present a list of options, Simple Form\u2019s collection helpers simplify rendering ",(0,s.jsx)(t.code,{children:"<select>"}),", radio buttons, or checkboxes. Pass an ActiveRecord collection or array directly, and customize item wrappers or labels for a cleaner markup."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"= simple_form_for @post do |f|\n  # A grouped select\n  = f.input :category_id,\n            collection: Category.all.group_by(&:group_name),\n            as: :grouped_select,\n            group_label_method: :first,\n            group_method: :last,\n            label_method: :name,\n            value_method: :id,\n            prompt: 'Choose a category'\n\n  # Radio buttons with custom item wrapper class\n  = f.input :status,\n            collection: [['Draft','draft'], ['Published','published']],\n            as: :radio_buttons,\n            item_wrapper_class: 'form-check form-check-inline'\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);