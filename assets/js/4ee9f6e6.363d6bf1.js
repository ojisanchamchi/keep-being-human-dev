"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89041],{26358:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/numbers/expert/expert_bitwise_binary","title":"expert_bitwise_binary","description":"\u2699\ufe0f High-Performance Bitwise and Binary Data Manipulation","source":"@site/docs/ruby/numbers/expert/expert_bitwise_binary.md","sourceDirName":"ruby/numbers/expert","slug":"/ruby/numbers/expert/expert_bitwise_binary","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_bitwise_binary","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/numbers/expert/expert_bitwise_binary.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"expert_bigdecimal_precision","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_bigdecimal_precision"},"next":{"title":"expert_ffi_math_library","permalink":"/keep-being-human-dev/docs/ruby/numbers/expert/expert_ffi_math_library"}}');var i=r(23420),a=r(65404);const s={},o=void 0,c={},d=[{value:"\u2699\ufe0f High-Performance Bitwise and Binary Data Manipulation",id:"\ufe0f-high-performance-bitwise-and-binary-data-manipulation",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"\ufe0f-high-performance-bitwise-and-binary-data-manipulation",children:"\u2699\ufe0f High-Performance Bitwise and Binary Data Manipulation"}),"\n",(0,i.jsxs)(n.p,{children:["Ruby\u2019s ",(0,i.jsx)(n.code,{children:"Integer"})," bitwise operators plus ",(0,i.jsx)(n.code,{children:"String#pack"}),"/",(0,i.jsx)(n.code,{children:"String#unpack"})," let you efficiently parse or compose binary protocols and file formats. Use bitmasks and shifts to extract flags or fields, and stream data with ",(0,i.jsx)(n.code,{children:"StringIO"})," for large payloads."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'stringio'\n\n# Compose a 2-byte header: 0xA5 in first byte, flags in second\nversion = 0xA5\nflags   = (1 << 3) | (0 << 1) | 1  # e.g., bits 3 and 0 set\nheader  = [version, flags].pack('C2')\n\n# Parse back\nbyte1, byte2 = header.unpack('C2')\nis_flag3_set = (byte2 & 0b1000) != 0\n\n# Stream large binary blob\nio = StringIO.new\nio.write(header)\nio.write(binary_payload)\nio.rewind\nwhile chunk = io.read(1024)\n  process(chunk)\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(36672);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);