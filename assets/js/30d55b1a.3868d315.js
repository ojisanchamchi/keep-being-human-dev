"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22632],{22241:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/metaprogramming/middle/dynamic_callbacks","title":"dynamic_callbacks","description":"\u23f0 Building a Callback System","source":"@site/docs/ruby/metaprogramming/middle/dynamic_callbacks.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/dynamic_callbacks","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/dynamic_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_attr_accessors","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_attr_accessors"},"next":{"title":"dynamic_delegation_forwardable","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_delegation_forwardable"}}');var c=n(23420),s=n(65404);const l={},r=void 0,d={},i=[{value:"\u23f0 Building a Callback System",id:"-building-a-callback-system",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.h2,{id:"-building-a-callback-system",children:"\u23f0 Building a Callback System"}),"\n",(0,c.jsx)(a.p,{children:"Implement custom callbacks to hook into your object\u2019s lifecycle. Use metaprogramming to register and trigger callback methods dynamically."}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-ruby",children:'module Callbackable\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def define_callback(name)\n      @callbacks ||= {}\n      @callbacks[name] = []\n\n      define_method("on_#{name}") do |&block|\n        self.class.instance_variable_get(:@callbacks)[name] << block\n      end\n    end\n\n    def callbacks\n      @callbacks || {}\n    end\n  end\n\n  def trigger(name)\n    self.class.callbacks[name].each { |cb| cb.call(self) }\n  end\nend\n\nclass Task\n  include Callbackable\n  define_callback :start\n\n  on_start { |task| puts "Task started: \\\\#{task}" }\n\n  def run\n    trigger(:start)\n  end\nend\n\nTask.new.run  # => "Task started: #<Task:0x...>"\n'})})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,c.jsx)(a,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>l,x:()=>r});var t=n(36672);const c={},s=t.createContext(c);function l(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);