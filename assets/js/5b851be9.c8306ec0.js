"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87692],{45043:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"rails/logging/expert/custom_active_support_logsubscriber","title":"custom_active_support_logsubscriber","description":"\u2699\ufe0f Build a Custom ActiveSupport::LogSubscriber for Domain Events","source":"@site/docs/rails/logging/expert/custom_active_support_logsubscriber.md","sourceDirName":"rails/logging/expert","slug":"/rails/logging/expert/custom_active_support_logsubscriber","permalink":"/keep-being-human-dev/docs/rails/logging/expert/custom_active_support_logsubscriber","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/expert/custom_active_support_logsubscriber.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_buffered_logging","permalink":"/keep-being-human-dev/docs/rails/logging/expert/async_buffered_logging"},"next":{"title":"enhance_lograge_custom_payloads","permalink":"/keep-being-human-dev/docs/rails/logging/expert/enhance_lograge_custom_payloads"}}');var s=o(23420),n=o(65404);const i={},a=void 0,c={},u=[{value:"\u2699\ufe0f Build a Custom ActiveSupport::LogSubscriber for Domain Events",id:"\ufe0f-build-a-custom-activesupportlogsubscriber-for-domain-events",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"\ufe0f-build-a-custom-activesupportlogsubscriber-for-domain-events",children:"\u2699\ufe0f Build a Custom ActiveSupport::LogSubscriber for Domain Events"}),"\n",(0,s.jsxs)(r.p,{children:["Create a ",(0,s.jsx)(r.code,{children:"LogSubscriber"})," to hook into Rails or custom events and emit structured domain-level logs. This isolates logging concerns and allows you to filter by event name or log level."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'# app/log_subscribers/domain_log_subscriber.rb\nclass DomainLogSubscriber < ActiveSupport::LogSubscriber\n  def order_created(event)\n    data = event.payload.slice(:order_id, :user_id, :total)\n    Rails.logger.info("order.created", data)\n  end\nend\n\nDomainLogSubscriber.attach_to(:order)\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"# anywhere in service object\nActiveSupport::Notifications.instrument('order_created.order', order_id: order.id, user_id: order.user.id, total: order.total)\n"})})]})}function d(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,r,o)=>{o.d(r,{R:()=>i,x:()=>a});var t=o(36672);const s={},n=t.createContext(s);function i(e){const r=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);