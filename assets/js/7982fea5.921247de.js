"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16588],{65404:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>c});var n=t(36672);const a={},i=n.createContext(a);function o(e){const s=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:s},e.children)}},77209:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>r,contentTitle:()=>c,default:()=>_,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/active_record_associations/advanced/sti_associations_with_default_scopes","title":"sti_associations_with_default_scopes","description":"\ud83e\uddec STI Associations with Default Scopes","source":"@site/docs/rails/active_record_associations/advanced/sti_associations_with_default_scopes.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/sti_associations_with_default_scopes","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/sti_associations_with_default_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/sti_associations_with_default_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"self_referential_scopes","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/self_referential_scopes"},"next":{"title":"through_association_with_conditions","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/through_association_with_conditions"}}');var a=t(23420),i=t(65404);const o={},c=void 0,r={},d=[{value:"\ud83e\uddec STI Associations with Default Scopes",id:"-sti-associations-with-default-scopes",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"-sti-associations-with-default-scopes",children:"\ud83e\uddec STI Associations with Default Scopes"}),"\n",(0,a.jsxs)(s.p,{children:["Combine Single Table Inheritance (STI) with associations to share tables but vary behavior. Use default scopes or class-level ",(0,a.jsx)(s.code,{children:"primary_key"})," overrides to link STI subclasses to the same join model. This pattern streamlines related records across variants."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class Event < ApplicationRecord\n  # STI base class\n  has_many :attendees, foreign_key: :event_id\nend\n\nclass OnlineEvent < Event\n  default_scope { where(event_type: 'online') }\nend\n\nclass OfflineEvent < Event\n  default_scope { where(event_type: 'offline') }\nend\n\nclass Attendee < ApplicationRecord\n  belongs_to :event\n  # You can still fetch only OnlineEvent attendees\n  scope :online_only, -> { joins(:event).merge(OnlineEvent.all) }\nend\n"})})]})}function _(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);