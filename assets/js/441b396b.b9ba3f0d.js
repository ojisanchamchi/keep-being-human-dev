"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63474],{28697:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rails/authentication_and_authorization/expert/cancancan_ability_caching_preload","title":"cancancan_ability_caching_preload","description":"\u26a1 Cache and Preload Permissions in Cancancan for High-Volume Queries","source":"@site/docs/rails/authentication_and_authorization/expert/cancancan_ability_caching_preload.md","sourceDirName":"rails/authentication_and_authorization/expert","slug":"/rails/authentication_and_authorization/expert/cancancan_ability_caching_preload","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/cancancan_ability_caching_preload","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/authentication_and_authorization/expert/cancancan_ability_caching_preload.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"simple_role_authorization","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/beginner/simple_role_authorization"},"next":{"title":"dynamic_pundit_scope_with_rls","permalink":"/keep-being-human-dev/docs/rails/authentication_and_authorization/expert/dynamic_pundit_scope_with_rls"}}');var t=a(23420),r=a(65404);const c={},o=void 0,s={},l=[{value:"\u26a1 Cache and Preload Permissions in Cancancan for High-Volume Queries",id:"-cache-and-preload-permissions-in-cancancan-for-high-volume-queries",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-cache-and-preload-permissions-in-cancancan-for-high-volume-queries",children:"\u26a1 Cache and Preload Permissions in Cancancan for High-Volume Queries"}),"\n",(0,t.jsxs)(n.p,{children:["When serving large data sets, repeatedly evaluating ",(0,t.jsx)(n.code,{children:"current_ability.can?"})," or using ",(0,t.jsx)(n.code,{children:"accessible_by"})," can be a bottleneck. You can serialize and cache the user\u2019s Ability object in Redis, and preload IDs via single optimized SQL for bulk authorization. This minimizes Ruby-level checks and dramatically reduces query count."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  def current_ability\n    Rails.cache.fetch([:ability, current_user.id], expires_in: 10.minutes) do\n      Ability.new(current_user)\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/ability.rb\nclass Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    user ||= User.new\n    if user.admin?\n      can :manage, :all\n    else\n      # Preload allowed project IDs in one go\n      project_ids = Project.where(public: true)\n                           .or(Project.where(owner_id: user.id)).pluck(:id)\n      can :read, Project, id: project_ids\n      # further rules...\n    end\n  end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"This approach consolidates permission evaluation into a single SQL pluck and reuses the compiled Ability, dramatically speeding up index actions or GraphQL batch loads."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var i=a(36672);const t={},r=i.createContext(t);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);