"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61325],{43952:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>r});const d=JSON.parse('{"id":"ruby/classes_and_modules/advanced/alias_chain_prepend","title":"alias_chain_prepend","description":"\ud83c\udf00 Replacing aliasmethodchain with Module#prepend","source":"@site/docs/ruby/classes_and_modules/advanced/alias_chain_prepend.md","sourceDirName":"ruby/classes_and_modules/advanced","slug":"/ruby/classes_and_modules/advanced/alias_chain_prepend","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/alias_chain_prepend","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/advanced/alias_chain_prepend.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"yield_with_arguments.md","permalink":"/keep-being-human-dev/docs/ruby/blocks/middle/yield_with_arguments.md"},"next":{"title":"autoload_modules","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/autoload_modules"}}');var s=a(23420),c=a(65404);const t={},i=void 0,o={},r=[{value:"\ud83c\udf00 Replacing <code>alias_method_chain</code> with <code>Module#prepend</code>",id:"-replacing-alias_method_chain-with-moduleprepend",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-replacing-alias_method_chain-with-moduleprepend",children:["\ud83c\udf00 Replacing ",(0,s.jsx)(n.code,{children:"alias_method_chain"})," with ",(0,s.jsx)(n.code,{children:"Module#prepend"})]}),"\n",(0,s.jsxs)(n.p,{children:["Rails\u2019 ",(0,s.jsx)(n.code,{children:"alias_method_chain"})," is deprecated\u2014use ",(0,s.jsx)(n.code,{children:"prepend"})," for elegant method wrapping. You preserve ",(0,s.jsx)(n.code,{children:"super"})," chains and avoid hidden aliases."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'module CacheFetch\n  def fetch(key)\n    Rails.cache.read(key) || super\n  end\nend\n\nclass DataStore\n  prepend CacheFetch\n\n  def fetch(key)\n    # expensive lookup...\n    "value"\n  end\nend\n\nDataStore.new.fetch(:foo) # attempts cache, then falls back\n'})}),"\n",(0,s.jsxs)(n.p,{children:["By using ",(0,s.jsx)(n.code,{children:"prepend"}),", you keep the method chain intuitive and reversible."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var d=a(36672);const s={},c=d.createContext(s);function t(e){const n=d.useContext(c);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),d.createElement(c.Provider,{value:n},e.children)}}}]);