"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47098],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(36672);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},74791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/net_http/expert/retry_with_exponential_backoff","title":"retry_with_exponential_backoff","description":"\ud83d\udd01 Implement Custom Retry with Exponential Backoff","source":"@site/docs/ruby/net_http/expert/retry_with_exponential_backoff.md","sourceDirName":"ruby/net_http/expert","slug":"/ruby/net_http/expert/retry_with_exponential_backoff","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/retry_with_exponential_backoff","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/net_http/expert/retry_with_exponential_backoff.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"persistent_connection_pooling","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/persistent_connection_pooling"},"next":{"title":"ssl_certificate_pinning","permalink":"/keep-being-human-dev/docs/ruby/net_http/expert/ssl_certificate_pinning"}}');var s=n(23420),i=n(65404);const o={},a=void 0,p={},c=[{value:"\ud83d\udd01 Implement Custom Retry with Exponential Backoff",id:"-implement-custom-retry-with-exponential-backoff",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-implement-custom-retry-with-exponential-backoff",children:"\ud83d\udd01 Implement Custom Retry with Exponential Backoff"}),"\n",(0,s.jsxs)(t.p,{children:["Network hiccups and transient 5xx errors are inevitable. Build a robust wrapper that retries ",(0,s.jsx)(t.strong,{children:"idempotent"})," requests (GET, HEAD) with exponential backoff, jitter, and max\u2011attempt caps to avoid hammering the server."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'net/http'\n\ndef fetch_with_retry(uri_str, max_attempts: 5)\n  uri = URI(uri_str)\n  attempts = 0\n\n  begin\n    attempts += 1\n    response = Net::HTTP.get_response(uri)\n    raise 'Server error' if response.code.to_i >= 500\n    return response\n  rescue => e\n    raise if attempts >= max_attempts\n    sleep_time = (2**attempts) * 0.5 + rand(0.1..0.5)\n    sleep(sleep_time)\n    retry\n  end\nend\n\nresp = fetch_with_retry('https://api.example.com/resource')\nputs resp.body\n"})}),"\n",(0,s.jsx)(t.p,{children:"This strategy spreads out retries, reduces thundering\u2011herd effects, and keeps your clients polite under load."})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);