"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46478],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var s=n(36672);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},91960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/set/advanced/set_transitive_closure","title":"set_transitive_closure","description":"\ud83c\udf10 Computing Transitive Closure with Set","source":"@site/docs/ruby/set/advanced/set_transitive_closure.md","sourceDirName":"ruby/set/advanced","slug":"/ruby/set/advanced/set_transitive_closure","permalink":"/keep-being-human-dev/docs/ruby/set/advanced/set_transitive_closure","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/set/advanced/set_transitive_closure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"set_thread_safe","permalink":"/keep-being-human-dev/docs/ruby/set/advanced/set_thread_safe"},"next":{"title":"basic_set_operations","permalink":"/keep-being-human-dev/docs/ruby/set/beginner/basic_set_operations"}}');var r=n(23420),i=n(65404);const o={},a=void 0,c={},d=[{value:"\ud83c\udf10 Computing Transitive Closure with Set",id:"-computing-transitive-closure-with-set",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-computing-transitive-closure-with-set",children:"\ud83c\udf10 Computing Transitive Closure with Set"}),"\n",(0,r.jsxs)(t.p,{children:["You can compute the transitive closure of a directed graph efficiently by iterating until no new nodes are discovered. Using ",(0,r.jsx)(t.code,{children:"Set"})," for the visited collection and for each step\u2019s frontier keeps membership checks O(1) on average."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'set'\n\ndef transitive_closure(adj_list, start)\n  visited = Set[start]\n  frontier = Set[start]\n\n  until frontier.empty?\n    next_frontier = Set.new\n    frontier.each do |node|\n      (adj_list[node] || []).each do |neighbor|\n        unless visited.include?(neighbor)\n          visited.add(neighbor)\n          next_frontier.add(neighbor)\n        end\n      end\n    end\n    frontier = next_frontier\n  end\n\n  visited\nend\n\n# Example adjacency list\ngraph = {\n  1 => [2,3],\n  2 => [4],\n  3 => [4,5],\n  4 => [],\n  5 => [1]\n}\n\nclosure = transitive_closure(graph, 1)\nputs closure.to_a.sort.inspect\n# => [1,2,3,4,5]\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);