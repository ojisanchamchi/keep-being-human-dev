"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82774],{6333:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"ruby/directory_management/middle/pattern_based_traversal_with_pathname","title":"pattern_based_traversal_with_pathname","description":"\ud83d\udd0d Pattern-Based Traversal with Pathname and Dir.glob","source":"@site/docs/ruby/directory_management/middle/pattern_based_traversal_with_pathname.md","sourceDirName":"ruby/directory_management/middle","slug":"/ruby/directory_management/middle/pattern_based_traversal_with_pathname","permalink":"/keep-being-human-dev/docs/ruby/directory_management/middle/pattern_based_traversal_with_pathname","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/directory_management/middle/pattern_based_traversal_with_pathname.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_lazy_directory_traversal","permalink":"/keep-being-human-dev/docs/ruby/directory_management/expert/parallel_lazy_directory_traversal"},"next":{"title":"safe_directory_creation_with_fileutils","permalink":"/keep-being-human-dev/docs/ruby/directory_management/middle/safe_directory_creation_with_fileutils"}}');var r=t(23420),i=t(65404);const s={},d=void 0,l={},o=[{value:"\ud83d\udd0d Pattern-Based Traversal with Pathname and Dir.glob",id:"-pattern-based-traversal-with-pathname-and-dirglob",level:2}];function c(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-pattern-based-traversal-with-pathname-and-dirglob",children:"\ud83d\udd0d Pattern-Based Traversal with Pathname and Dir.glob"}),"\n",(0,r.jsxs)(a.p,{children:["Combine ",(0,r.jsx)(a.code,{children:"Pathname"})," with ",(0,r.jsx)(a.code,{children:"Dir.glob"})," for clean, object\u2011oriented file discovery. This lets you apply patterns, filter results, and chain methods on ",(0,r.jsx)(a.code,{children:"Pathname"})," instances for more readable directory management."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"require 'pathname'\n\nbase = Pathname.new('app/models')\n# Find all Ruby files in nested directories\nruby_files = Dir.glob(base.join('**', '*.rb'))\n              .map { |f| Pathname.new(f) }\n\nruby_files.each do |file|\n  puts \"Model: #{file.basename('.rb')}\"\nend\n"})}),"\n",(0,r.jsx)(a.p,{children:"You can further filter by file size or modification time:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'large_files = ruby_files.select { |pn| pn.size > 10 * 1024 }\nputs "Large model files:"\nlarge_files.each { |pn| puts "\u2013 #{pn}" }\n'})})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>d});var n=t(36672);const r={},i=n.createContext(r);function s(e){const a=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:a},e.children)}}}]);