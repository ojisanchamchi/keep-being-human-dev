"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81680],{60443:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/define_method/expert/dynamic_api_client_generator","title":"dynamic_api_client_generator","description":"\ud83d\ude80 Generate API Clients from Spec with define_method","source":"@site/docs/ruby/define_method/expert/dynamic_api_client_generator.md","sourceDirName":"ruby/define_method/expert","slug":"/ruby/define_method/expert/dynamic_api_client_generator","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/dynamic_api_client_generator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/expert/dynamic_api_client_generator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/method_with_arguments"},"next":{"title":"fluent_dsl_builder","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/fluent_dsl_builder"}}');var r=t(23420),a=t(65404);const o={},d=void 0,s={},c=[{value:"\ud83d\ude80 Generate API Clients from Spec with define_method",id:"-generate-api-clients-from-spec-with-define_method",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-generate-api-clients-from-spec-with-define_method",children:"\ud83d\ude80 Generate API Clients from Spec with define_method"}),"\n",(0,r.jsx)(n.p,{children:"When building clients for REST APIs, you can load an external spec (YAML/JSON) and dynamically define endpoint methods. This keeps your client DRY and in sync with the spec, automatically handling path interpolation and HTTP verbs."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'yaml'\nrequire 'net/http'\n\nspec = YAML.load_file('api_spec.yml')\n\nclass ApiClient\n  spec['endpoints'].each do |name, cfg|\n    define_method(name) do |params = {}|\n      path = cfg['path'].gsub(/:\\w+/) { |m| params[m[1..-1].to_sym] }\n      uri  = URI.parse(\"#{cfg['base_url']}#{path}\")\n      req  = Net::HTTP.const_get(cfg['method'].capitalize).new(uri)\n      req.body = params[:body].to_json if params[:body]\n      Net::HTTP.start(uri.host, uri.port) { |http| http.request(req) }\n    end\n  end\nend\n\nclient = ApiClient.new\nclient.get_user(id: 42)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(36672);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);