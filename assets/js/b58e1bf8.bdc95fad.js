"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3402],{51289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/rspec/expert/vcr_webmock_advanced","title":"vcr_webmock_advanced","description":"\ud83c\udf10 Integrate VCR and WebMock for Deterministic External Tests","source":"@site/docs/gems/rspec/expert/vcr_webmock_advanced.md","sourceDirName":"gems/rspec/expert","slug":"/gems/rspec/expert/vcr_webmock_advanced","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/vcr_webmock_advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/expert/vcr_webmock_advanced.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"performance_profiling","permalink":"/keep-being-human-dev/docs/gems/rspec/expert/performance_profiling"},"next":{"title":"metadata_conditional_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/metadata_conditional_hooks"}}');var s=n(23420),c=n(65404);const a={},o=void 0,i={},d=[{value:"\ud83c\udf10 Integrate VCR and WebMock for Deterministic External Tests",id:"-integrate-vcr-and-webmock-for-deterministic-external-tests",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-integrate-vcr-and-webmock-for-deterministic-external-tests",children:"\ud83c\udf10 Integrate VCR and WebMock for Deterministic External Tests"}),"\n",(0,s.jsx)(t.p,{children:"Combine VCR cassettes with WebMock request expectations to assert HTTP interactions precisely. Use custom request matchers and cassette hooks for parameterized URIs and dynamic headers."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# spec_helper.rb\nVCR.configure do |c|\n  c.hook_into :webmock\n  c.configure_rspec_metadata!\n  c.default_cassette_options = { match_requests_on: [:method, :uri, lambda { |r1, r2| r1.headers['X-Auth-Token'] == r2.headers['X-Auth-Token'] }] }\nend\n\nRSpec.describe ExternalClient, :vcr do\n  it 'fetches user data', :vcr do\n    expect(WebMock).to have_requested(:get, /users\\/\\d+/).with(headers: { 'X-Auth-Token' => 'abc123' })\n    ExternalClient.fetch_user(42)\n  end\nend\n"})})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(36672);const s={},c=r.createContext(s);function a(e){const t=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);