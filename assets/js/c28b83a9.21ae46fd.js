"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24247],{56190:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>u,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/middle/sequential_return_values","title":"sequential_return_values","description":"\u23ed\ufe0f Return different values for consecutive calls","source":"@site/docs/gems/rspec/mocks_and_stubs/middle/sequential_return_values.md","sourceDirName":"gems/rspec/mocks_and_stubs/middle","slug":"/gems/rspec/mocks_and_stubs/middle/sequential_return_values","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/sequential_return_values","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/middle/sequential_return_values.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"instance_double_strict_interface","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/instance_double_strict_interface"},"next":{"title":"stubbing_chained_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/stubbing_chained_methods"}}');var r=s(23420),c=s(65404);const u={},o=void 0,a={},i=[{value:"\u23ed\ufe0f Return different values for consecutive calls",id:"\ufe0f-return-different-values-for-consecutive-calls",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-return-different-values-for-consecutive-calls",children:"\u23ed\ufe0f Return different values for consecutive calls"}),"\n",(0,r.jsxs)(n.p,{children:["When your code calls the same method multiple times and you need varied responses, pass multiple arguments to ",(0,r.jsx)(n.code,{children:"and_return"}),". This is ideal for simulating stateful services or counters."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"RSpec.describe CounterUser do\n  it 'uses incremental values' do\n    counter = double('Counter')\n    allow(counter).to receive(:next).and_return(1, 2, 3)\n\n    expect(counter.next).to eq(1)\n    expect(counter.next).to eq(2)\n    expect(counter.next).to eq(3)\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>u,x:()=>o});var t=s(36672);const r={},c=t.createContext(r);function u(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:u(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);