"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88965],{65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var i=t(36672);const o={},r=i.createContext(o);function c(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),i.createElement(r.Provider,{value:n},e.children)}},97308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/networking/advanced/eventmachine_async_io","title":"eventmachine_async_io","description":"\ud83d\udd04 Asynchronous I/O with EventMachine and Fibers","source":"@site/docs/ruby/networking/advanced/eventmachine_async_io.md","sourceDirName":"ruby/networking/advanced","slug":"/ruby/networking/advanced/eventmachine_async_io","permalink":"/keep-being-human-dev/docs/ruby/networking/advanced/eventmachine_async_io","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/advanced/eventmachine_async_io.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_tls_context","permalink":"/keep-being-human-dev/docs/ruby/networking/advanced/custom_tls_context"},"next":{"title":"http2_stream_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/networking/advanced/http2_stream_multiplexing"}}');var o=t(23420),r=t(65404);const c={},a=void 0,s={},d=[{value:"\ud83d\udd04 Asynchronous I/O with EventMachine and Fibers",id:"-asynchronous-io-with-eventmachine-and-fibers",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-asynchronous-io-with-eventmachine-and-fibers",children:"\ud83d\udd04 Asynchronous I/O with EventMachine and Fibers"}),"\n",(0,o.jsxs)(n.p,{children:["Leverage EventMachine for non-blocking I/O and wrap callbacks in Fibers (via ",(0,o.jsx)(n.code,{children:"em-synchrony"}),") to write code in a synchronous style. This yields high concurrency with minimal thread overhead, perfect for long-lived connections like WebSocket clients or microservices."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'eventmachine'\nrequire 'em-synchrony'\nrequire 'em-hiredis'\n\nEM.synchrony do\n  # Asynchronous TCP connection\n  conn = EM::Protocols::LineAndTextProtocol.connect('example.com', 1234)\n\n  # Use fiber to await data effortlessly\n  fiber = Fiber.current\n  handler = Module.new do\n    include EM::P::LineText2\n    def receive_line(line)\n      puts \"Received: #{line}\"\n      Fiber.yield\n    end\n  end\n\n  # Send data and wait for response\n  conn.send_data(\"HELLO\\n\")\n  Fiber.yield\n\n  EM.stop\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);