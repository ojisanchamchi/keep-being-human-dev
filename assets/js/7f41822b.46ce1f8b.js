"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45751],{58665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/set/expert/lazy_unique_filter.md","title":"lazy_unique_filter.md","description":"\ud83c\udf2a\ufe0f Streaming Unique Values with Enumerator::Lazy","source":"@site/docs/ruby/set/expert/lazy_unique_filter.md.md","sourceDirName":"ruby/set/expert","slug":"/ruby/set/expert/lazy_unique_filter.md","permalink":"/keep-being-human-dev/docs/ruby/set/expert/lazy_unique_filter.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/set/expert/lazy_unique_filter.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_hash_eql.md","permalink":"/keep-being-human-dev/docs/ruby/set/expert/custom_hash_eql.md"},"next":{"title":"thread_safe_set.md","permalink":"/keep-being-human-dev/docs/ruby/set/expert/thread_safe_set.md"}}');var i=n(23420),s=n(65404);const a={},u=void 0,o={},d=[{value:"\ud83c\udf2a\ufe0f Streaming Unique Values with Enumerator::Lazy",id:"\ufe0f-streaming-unique-values-with-enumeratorlazy",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\ufe0f-streaming-unique-values-with-enumeratorlazy",children:"\ud83c\udf2a\ufe0f Streaming Unique Values with Enumerator::Lazy"}),"\n",(0,i.jsxs)(t.p,{children:["For very large or infinite streams, you can combine ",(0,i.jsx)(t.code,{children:"Set"})," with ",(0,i.jsx)(t.code,{children:"Enumerator::Lazy"})," to emit each unique item exactly once without loading the full stream into memory. This approach suits log processing or real\u2011time data."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"require 'set'\n\ndef unique_stream(enum)\n  seen = Set.new\n  enum.lazy.select do |item|\n    # `.add?` returns nil if already present\n    seen.add?(item)\n  end\nend\n\n# Simulate infinite sensor readings with duplicates\nreadings = Enumerator.produce { rand(1..5) }\n\n# Take first 10 unique readings\nfirst_ten = unique_stream(readings).first(10)\nputs \"10 unique readings: #{first_ten.inspect}\"\n"})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>u});var r=n(36672);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);