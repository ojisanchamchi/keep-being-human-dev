"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6614],{65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(36672);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}},77863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/reflection/beginner/use_respond_to","title":"use_respond_to","description":"\ud83d\udd0d Check If an Object Responds to a Method","source":"@site/docs/ruby/reflection/beginner/use_respond_to.md","sourceDirName":"ruby/reflection/beginner","slug":"/ruby/reflection/beginner/use_respond_to","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/use_respond_to","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/beginner/use_respond_to.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"list_available_methods","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/list_available_methods"},"next":{"title":"ast_manipulation","permalink":"/keep-being-human-dev/docs/ruby/reflection/expert/ast_manipulation"}}');var r=t(23420),s=t(65404);const a={},c=void 0,i={},d=[{value:"\ud83d\udd0d Check If an Object Responds to a Method",id:"-check-if-an-object-responds-to-a-method",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-check-if-an-object-responds-to-a-method",children:"\ud83d\udd0d Check If an Object Responds to a Method"}),"\n",(0,r.jsxs)(n.p,{children:["Before calling a method dynamically, ensure the object actually implements it to avoid ",(0,r.jsx)(n.code,{children:"NoMethodError"}),". Use ",(0,r.jsx)(n.code,{children:"respond_to?"})," to guard your reflective calls safely."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'user = OpenStruct.new(name: "Amy")\nif user.respond_to?(:name)\n  puts "User name: #{user.name}"\nelse\n  puts "Name not available"\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"This check prevents errors and lets you handle objects that may or may not support specific methods."})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);