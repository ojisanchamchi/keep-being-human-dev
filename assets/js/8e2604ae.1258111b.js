"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[69108],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(36672);const o={},c=s.createContext(o);function r(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(c.Provider,{value:t},e.children)}},72857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle","title":"shared_context_lifecycle","description":"\ud83d\udce6 DRY Specs with Shared Contexts and Hooks","source":"@site/docs/gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/middle","slug":"/gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/middle/shared_context_lifecycle.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metadata_filtered_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/metadata_filtered_hooks"},"next":{"title":"aggregate_failures","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/aggregate_failures"}}');var o=n(23420),c=n(65404);const r={},a=void 0,d={},i=[{value:"\ud83d\udce6 DRY Specs with Shared Contexts and Hooks",id:"-dry-specs-with-shared-contexts-and-hooks",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-dry-specs-with-shared-contexts-and-hooks",children:"\ud83d\udce6 DRY Specs with Shared Contexts and Hooks"}),"\n",(0,o.jsxs)(t.p,{children:["Use ",(0,o.jsx)(t.code,{children:"shared_context"})," to group common hooks and helper methods for multiple example groups. This approach promotes DRY specs and centralized lifecycle management."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# spec/support/api_helpers.rb\nRSpec.shared_context 'API setup' do\n  before(:all) do\n    @api_client = ApiClient.new(base_url: 'http://test.local')\n  end\n\n  after(:all) do\n    @api_client.close\n  end\n\n  let(:auth_token) { @api_client.authenticate('user', 'pass') }\nend\n\n# spec/requests/user_spec.rb\nRSpec.describe 'User API', type: :request do\n  include_context 'API setup'\n\n  it 'fetches user profile' do\n    get '/profile', headers: { 'Authorization' => auth_token }\n    expect(response).to have_http_status(:ok)\n  end\nend\n\n# spec/requests/order_spec.rb\nRSpec.describe 'Order API', type: :request do\n  include_context 'API setup'\n\n  it 'creates an order' do\n    post '/orders', headers: { 'Authorization' => auth_token }, params: { item: 'Book' }\n    expect(response).to have_http_status(:created)\n  end\nend\n"})}),"\n",(0,o.jsx)(t.p,{children:"By extracting shared hooks and data into a context, you keep your specs concise and maintain a single source of truth for lifecycle steps."})]})}function p(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);