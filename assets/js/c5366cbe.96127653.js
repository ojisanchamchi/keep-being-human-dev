"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24826],{65404:(e,s,r)=>{r.d(s,{R:()=>n,x:()=>i});var a=r(36672);const o={},t=a.createContext(o);function n(e){const s=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),a.createElement(t.Provider,{value:s},e.children)}},66524:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"gems/image_processing/advanced/custom_watermark_processor","title":"custom_watermark_processor","description":"\ud83c\udfa8 Custom Watermark Processor","source":"@site/docs/gems/image_processing/advanced/custom_watermark_processor.md","sourceDirName":"gems/image_processing/advanced","slug":"/gems/image_processing/advanced/custom_watermark_processor","permalink":"/keep-being-human-dev/docs/gems/image_processing/advanced/custom_watermark_processor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/image_processing/advanced/custom_watermark_processor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"httparty_reusable_client","permalink":"/keep-being-human-dev/docs/gems/httparty/middle/httparty_reusable_client"},"next":{"title":"persistent_variant_cache","permalink":"/keep-being-human-dev/docs/gems/image_processing/advanced/persistent_variant_cache"}}');var o=r(23420),t=r(65404);const n={},i=void 0,c={},m=[{value:"\ud83c\udfa8 Custom Watermark Processor",id:"-custom-watermark-processor",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"-custom-watermark-processor",children:"\ud83c\udfa8 Custom Watermark Processor"}),"\n",(0,o.jsx)(s.p,{children:"When you need to apply the same watermark across multiple images in a pipeline, build a custom processor class. This gives you a reusable step that can be chained with any other transformations. Below is an example using ImageProcessing with MiniMagick to inject a transparent logo in the bottom\u2010right corner."}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# app/lib/image_processors/watermark_processor.rb\nclass WatermarkProcessor\n  def initialize(logo_path:, gravity: 'SouthEast', dissolve: '30%')\n    @logo_path = logo_path\n    @gravity    = gravity\n    @dissolve   = dissolve\n  end\n\n  # Called by ImageProcessing::Builder\n  def call(image)\n    image.composite(@logo_path) do |c|\n      c.gravity @gravity\n      c.dissolve @dissolve\n    end\n  end\nend\n\n# Usage in your Rails uploader or service\nrequire 'image_processing/mini_magick'\n\nprocessor = ImageProcessing::MiniMagick\n  .source(uploaded_file)\n  .resize_to_limit(1200, 1200)\n  .custom(WatermarkProcessor.new(\n    logo_path: Rails.root.join('app/assets/images/logo.png'),\n    gravity: 'SouthEast',\n    dissolve: '25%'\n  ))\n\nprocessed = processor.call\n# save processed somewhere\n"})})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);