"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9492],{27236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/methods/advanced/memoization_with_arguments","title":"memoization_with_arguments","description":"\ud83d\udcbe Memoizing Methods with Argument Caching","source":"@site/docs/ruby/methods/advanced/memoization_with_arguments.md","sourceDirName":"ruby/methods/advanced","slug":"/ruby/methods/advanced/memoization_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/memoization_with_arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/advanced/memoization_with_arguments.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"forwarding_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/forwarding_arguments"},"next":{"title":"method_missing_respond_to_missing","permalink":"/keep-being-human-dev/docs/ruby/methods/advanced/method_missing_respond_to_missing"}}');var a=t(23420),o=t(65404);const s={},r=void 0,d={},c=[{value:"\ud83d\udcbe Memoizing Methods with Argument Caching",id:"-memoizing-methods-with-argument-caching",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-memoizing-methods-with-argument-caching",children:"\ud83d\udcbe Memoizing Methods with Argument Caching"}),"\n",(0,a.jsxs)(n.p,{children:["Standard memoization (",(0,a.jsx)(n.code,{children:"@var ||= ..."}),") fails with arguments. Use a hash keyed by args to cache method results based on its inputs, useful for expensive computations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class Fibonacci\n  def initialize\n    @cache = {}\n  end\n\n  def fib(n)\n    return n if n < 2\n    @cache[n] ||= fib(n - 1) + fib(n - 2)\n  end\nend\n\nfib = Fibonacci.new\np fib.fib(35)  # computed once, then cached for each n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(36672);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);