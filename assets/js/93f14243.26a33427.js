"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[98665],{65404:(e,a,r)=>{r.d(a,{R:()=>d,x:()=>o});var n=r(36672);const t={},s=n.createContext(t);function d(e){const a=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),n.createElement(s.Provider,{value:a},e.children)}},94002:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/lambda_arity","title":"lambda_arity","description":"\ud83d\udd22 Understand Lambda vs Proc Arity","source":"@site/docs/ruby/procs_and_lambdas/middle/lambda_arity.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/lambda_arity","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/lambda_arity","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/lambda_arity.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"error_handling_proc","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/error_handling_proc"},"next":{"title":"memoization_lambda","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/memoization_lambda"}}');var t=r(23420),s=r(65404);const d={},o=void 0,i={},c=[{value:"\ud83d\udd22 Understand Lambda vs Proc Arity",id:"-understand-lambda-vs-proc-arity",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-understand-lambda-vs-proc-arity",children:"\ud83d\udd22 Understand Lambda vs Proc Arity"}),"\n",(0,t.jsx)(a.p,{children:"Lambdas enforce the exact number of arguments, while Procs are more forgiving. Knowing this distinction helps prevent subtle bugs when you expect strict argument checking. Use lambdas for predictable signatures and procs when flexibility is desired."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"strict = ->(a, b) { a + b }\nloose  = Proc.new { |a, b| a.to_i + b.to_i }\n\nputs strict.call(1, 2)        # 3\n# strict.call(1)              # ArgumentError: wrong number of arguments\nputs loose.call(1)            # 1\nputs loose.call(1,2,3,4)      # 3 (extra args ignored)\n"})})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);