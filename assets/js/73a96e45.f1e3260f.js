"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19097],{33116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ruby/sockets/advanced/non_blocking_io_select","title":"non_blocking_io_select","description":"\ud83d\ude80 Non-blocking I/O with IO.select","source":"@site/docs/ruby/sockets/advanced/non_blocking_io_select.md","sourceDirName":"ruby/sockets/advanced","slug":"/ruby/sockets/advanced/non_blocking_io_select","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/non_blocking_io_select","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/advanced/non_blocking_io_select.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"set_algebra_operations","permalink":"/keep-being-human-dev/docs/ruby/set/middle/set_algebra_operations"},"next":{"title":"ssl_tls_with_openssl","permalink":"/keep-being-human-dev/docs/ruby/sockets/advanced/ssl_tls_with_openssl"}}');var s=t(23420),c=t(65404);const i={},r=void 0,a={},l=[{value:"\ud83d\ude80 Non-blocking I/O with IO.select",id:"-non-blocking-io-with-ioselect",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-non-blocking-io-with-ioselect",children:"\ud83d\ude80 Non-blocking I/O with IO.select"}),"\n",(0,s.jsxs)(n.p,{children:["When handling many simultaneous connections, switching sockets to non\u2011blocking mode and using ",(0,s.jsx)(n.code,{children:"IO.select"})," lets you multiplex reads and writes efficiently without spawning threads per client. You can set a socket to non\u2011blocking via ",(0,s.jsx)(n.code,{children:"fcntl"})," or ",(0,s.jsx)(n.code,{children:"#nonblock!"}),", then monitor arrays of sockets for readiness. This pattern scales better under high concurrency."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\n\nserver = TCPServer.new(4000)\nsockets = [server]\n\nloop do\n  ready_to_read, ready_to_write = IO.select(sockets, sockets, [], 5)\n\n  # Handle ready sockets\n  if ready_to_read\n    ready_to_read.each do |sock|\n      if sock == server\n        client = server.accept_nonblock exception: false\n        if client\n          client.setsockopt(Socket::IPPROTO_TCP, Socket::TCP_NODELAY, 1)\n          sockets << client\n        end\n      else\n        data = sock.read_nonblock(4096, exception: false)\n        if data.nil? || data.empty?\n          sockets.delete(sock)\n          sock.close\n        else\n          sock.write_nonblock \"Echo: #{data}\", exception: false\n        end\n      end\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(36672);const s={},c=o.createContext(s);function i(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);