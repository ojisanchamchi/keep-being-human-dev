"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5842],{65404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>t});var a=n(36672);const s={},d=a.createContext(s);function o(e){const r=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(d.Provider,{value:r},e.children)}},96951:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/error_handling_proc","title":"error_handling_proc","description":"\ud83d\udeab Manage Errors Inside Procs","source":"@site/docs/ruby/procs_and_lambdas/middle/error_handling_proc.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/error_handling_proc","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/error_handling_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/error_handling_proc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"curried_lambda","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/curried_lambda"},"next":{"title":"lambda_arity","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/lambda_arity"}}');var s=n(23420),d=n(65404);const o={},t=void 0,c={},i=[{value:"\ud83d\udeab Manage Errors Inside Procs",id:"-manage-errors-inside-procs",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-manage-errors-inside-procs",children:"\ud83d\udeab Manage Errors Inside Procs"}),"\n",(0,s.jsx)(r.p,{children:"Wrap error-prone code in a Proc to centralize and reuse error handling logic. You can rescue within the Proc and return fallback values or re-raise as needed. This pattern keeps your main code paths clean."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'safe_execute = Proc.new do |&block|\n  begin\n    block.call\n  rescue StandardError => e\n    puts "Error: #{e.message}";\n    nil\n  end\nend\n\nresult = safe_execute.call { 1 / 0 }  # prints "Error: divided by 0"\nputs result                          # nil\n'})})]})}function u(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);