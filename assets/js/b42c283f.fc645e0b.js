"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30229],{11115:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/hashes/expert/immutable_persistent_hash","title":"immutable_persistent_hash","description":"\ud83e\udd76 Immutable Persistent Hash Structures","source":"@site/docs/ruby/hashes/expert/immutable_persistent_hash.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/immutable_persistent_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/immutable_persistent_hash","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/immutable_persistent_hash.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"identity_vs_equality_key_comparison","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/identity_vs_equality_key_comparison"},"next":{"title":"lazy_enumeration_hash_processing","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/lazy_enumeration_hash_processing"}}');var r=s(23420),a=s(65404);const i={},o=void 0,u={},c=[{value:"\ud83e\udd76 Immutable Persistent Hash Structures",id:"-immutable-persistent-hash-structures",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-immutable-persistent-hash-structures",children:"\ud83e\udd76 Immutable Persistent Hash Structures"}),"\n",(0,r.jsx)(t.p,{children:"To enforce immutability and support functional updates, freeze your original hash and write a helper for non\u2010destructive modifications:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"class ::Hash\n  def frozen_merge(other)\n    dup.merge!(other).freeze\n  end\nend\n\nbase = { config: { retries: 3 } }.freeze\nnew_config = base.frozen_merge(config: { timeout: 5 })\n\nputs base      #=> {:config=>{:retries=>3}}\nputs new_config #=> {:config=>{:timeout=>5, :retries=>3}}\n"})}),"\n",(0,r.jsx)(t.p,{children:"By freezing and returning a new object on each change, you can safely share state across threads or cache layers without fear of accidental mutation."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(36672);const r={},a=n.createContext(r);function i(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);