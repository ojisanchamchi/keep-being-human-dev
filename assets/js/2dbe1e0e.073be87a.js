"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71537],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(36672);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}},87185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/controllers/advanced/n_plus_one_query_optimization","title":"n_plus_one_query_optimization","description":"\ud83d\ude80 Optimize N+1 Queries with Eager Loading","source":"@site/docs/rails/controllers/advanced/n_plus_one_query_optimization.md","sourceDirName":"rails/controllers/advanced","slug":"/rails/controllers/advanced/n_plus_one_query_optimization","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/n_plus_one_query_optimization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/advanced/n_plus_one_query_optimization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"jwt_authentication_in_controllers","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/jwt_authentication_in_controllers"},"next":{"title":"rate_limiting_actions","permalink":"/keep-being-human-dev/docs/rails/controllers/advanced/rate_limiting_actions"}}');var s=t(23420),i=t(65404);const r={},a=void 0,c={},l=[{value:"\ud83d\ude80 Optimize N+1 Queries with Eager Loading",id:"-optimize-n1-queries-with-eager-loading",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-optimize-n1-queries-with-eager-loading",children:"\ud83d\ude80 Optimize N+1 Queries with Eager Loading"}),"\n",(0,s.jsxs)(n.p,{children:["By default, ActiveRecord can issue one query per associated record, leading to N+1 issues. In controllers, preload associations to avoid excessive database hits. Use ",(0,s.jsx)(n.code,{children:"includes"})," or ",(0,s.jsx)(n.code,{children:"eager_load"})," when fetching collections, especially for JSON APIs or index pages."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class PostsController < ApplicationController\n  def index\n    # Preloads comments and author in a single query\n    @posts = Post.includes(:comments, :author).order(created_at: :desc)\n    render json: @posts.to_json(include: [:comments, :author])\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also scope your eager loading to specific attributes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"@posts = Post.includes(comments: [:user]).select(:id, :title, :created_at)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);