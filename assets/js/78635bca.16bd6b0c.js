"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90190],{65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>o});var a=n(36672);const t={},i=a.createContext(t);function s(e){const r=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(i.Provider,{value:r},e.children)}},82471:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/performance/expert/middleware_stack_refinement","title":"middleware_stack_refinement","description":"\ud83d\udee0 Trim & Profile Rack Middleware Stack","source":"@site/docs/rails/performance/expert/middleware_stack_refinement.md","sourceDirName":"rails/performance/expert","slug":"/rails/performance/expert/middleware_stack_refinement","permalink":"/keep-being-human-dev/docs/rails/performance/expert/middleware_stack_refinement","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/performance/expert/middleware_stack_refinement.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"gc_jemalloc_tuning","permalink":"/keep-being-human-dev/docs/rails/performance/expert/gc_jemalloc_tuning"},"next":{"title":"partial_expression_indexes","permalink":"/keep-being-human-dev/docs/rails/performance/expert/partial_expression_indexes"}}');var t=n(23420),i=n(65404);const s={},o=void 0,c={},l=[{value:"\ud83d\udee0 Trim &amp; Profile Rack Middleware Stack",id:"-trim--profile-rack-middleware-stack",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-trim--profile-rack-middleware-stack",children:"\ud83d\udee0 Trim & Profile Rack Middleware Stack"}),"\n",(0,t.jsxs)(r.p,{children:["Every middleware adds latency. Use ",(0,t.jsx)(r.code,{children:"rack-mini-profiler"})," or simple timestamp logs to measure their individual costs, then remove or reorder non\u2011critical ones."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:'# config/initializers/middleware_profiler.rb\nRails.application.middleware.each do |m|\n  start = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n  m.call(->(env) { [200, {}, []] }).tap do |_|\n    duration = (Process.clock_gettime(Process::CLOCK_MONOTONIC) - start) * 1000\n    Rails.logger.info "Middleware #{m.name} took #{duration.round(2)}ms"\n  end\nend\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"# In config/application.rb\nconfig.middleware.delete Rack::Lock\nconfig.middleware.insert_before Rack::ConditionalGet, Rack::Deflater\n"})}),"\n",(0,t.jsx)(r.p,{children:"Eliminate or reposition middleware until the average request path is as lean as possible."})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);