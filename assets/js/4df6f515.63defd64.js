"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92514],{12184:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/exceptions/expert/exponential_backoff_retry_logic","title":"exponential_backoff_retry_logic","description":"\u23f3 Implement Exponential Backoff with Retry Logic","source":"@site/docs/ruby/exceptions/expert/exponential_backoff_retry_logic.md","sourceDirName":"ruby/exceptions/expert","slug":"/ruby/exceptions/expert/exponential_backoff_retry_logic","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exponential_backoff_retry_logic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/expert/exponential_backoff_retry_logic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"exception_wrapping_with_cause","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exception_wrapping_with_cause"},"next":{"title":"tracepoint_exception_monitoring","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/tracepoint_exception_monitoring"}}');var i=t(23420),o=t(65404);const a={},s=void 0,c={},p=[{value:"\u23f3 Implement Exponential Backoff with Retry Logic",id:"-implement-exponential-backoff-with-retry-logic",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-implement-exponential-backoff-with-retry-logic",children:"\u23f3 Implement Exponential Backoff with Retry Logic"}),"\n",(0,i.jsx)(n.p,{children:"For transient failures (e.g., network hiccups or rate limits), wrap operations in a retry loop with exponential backoff and jitter. This approach avoids thundering herd issues and respects external service limits."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'def with_exponential_backoff(max_retries: 5, base_delay: 0.5)\n  retries = 0\n\n  begin\n    yield\n  rescue TransientError => e\n    raise if retries >= max_retries\n\n    sleep_time = base_delay * (2**retries) * (0.5 + rand)\n    logger.warn("Retry ##{retries + 1} in #{sleep_time.round(2)}s due to #{e.class}")\n    sleep(sleep_time)\n\n    retries += 1\n    retry\n  end\nend\n\n# Usage\ntoken = with_exponential_backoff do\n  ExternalService.fetch_token  # may raise TransientError\nend\n'})}),"\n",(0,i.jsxs)(n.p,{children:["By including randomized jitter ",(0,i.jsx)(n.code,{children:"(0.5 + rand)"}),", you spread out retries across clients to reduce collision."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(36672);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);