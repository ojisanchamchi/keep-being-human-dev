"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21021],{3283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"rails/active_support/middle/notifications_instrumentation","title":"notifications_instrumentation","description":"\ud83d\udce3 Instrument and Subscribe with ActiveSupport::Notifications","source":"@site/docs/rails/active_support/middle/notifications_instrumentation.md","sourceDirName":"rails/active_support/middle","slug":"/rails/active_support/middle/notifications_instrumentation","permalink":"/keep-being-human-dev/docs/rails/active_support/middle/notifications_instrumentation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/middle/notifications_instrumentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hash_with_indifferent_access","permalink":"/keep-being-human-dev/docs/rails/active_support/middle/hash_with_indifferent_access"},"next":{"title":"numeric_time_extensions","permalink":"/keep-being-human-dev/docs/rails/active_support/middle/numeric_time_extensions"}}');var s=n(23420),o=n(65404);const r={},a=void 0,c={},u=[{value:"\ud83d\udce3 Instrument and Subscribe with <code>ActiveSupport::Notifications</code>",id:"-instrument-and-subscribe-with-activesupportnotifications",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h2,{id:"-instrument-and-subscribe-with-activesupportnotifications",children:["\ud83d\udce3 Instrument and Subscribe with ",(0,s.jsx)(t.code,{children:"ActiveSupport::Notifications"})]}),"\n",(0,s.jsxs)(t.p,{children:["Leverage Rails\u2019 built-in instrumentation to monitor and log key events without tight coupling. Use ",(0,s.jsx)(t.code,{children:"instrument"})," to wrap code and ",(0,s.jsx)(t.code,{children:"subscribe"})," to react to events anywhere in your application."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# Subscribe globally (e.g., in an initializer)\nActiveSupport::Notifications.subscribe('process.action_controller') do |*args|\n  event = ActiveSupport::Notifications::Event.new(*args)\n  Rails.logger.info \"Processed \\\\#{event.payload[:path]} in \\\\#{event.duration.round(1)}ms\"\nend\n\n# Instrument custom code\nActiveSupport::Notifications.instrument('custom.event', foo: 'bar') do\n  sleep(0.1)\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(36672);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);