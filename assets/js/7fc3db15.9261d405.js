"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86634],{50289:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/action_cable/expert/fine_grained_authorization","title":"fine_grained_authorization","description":"\ud83d\udee1\ufe0f Implement Fine\u2011Grained Channel Authorization and Group Subscriptions","source":"@site/docs/rails/action_cable/expert/fine_grained_authorization.md","sourceDirName":"rails/action_cable/expert","slug":"/rails/action_cable/expert/fine_grained_authorization","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/fine_grained_authorization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/expert/fine_grained_authorization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stream_named_room","permalink":"/keep-being-human-dev/docs/rails/action_cable/beginner/stream_named_room"},"next":{"title":"jwt_authentication","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/jwt_authentication"}}');var r=t(23420),i=t(65404);const o={},s=void 0,c={},d=[{value:"\ud83d\udee1\ufe0f Implement Fine\u2011Grained Channel Authorization and Group Subscriptions",id:"\ufe0f-implement-finegrained-channel-authorization-and-group-subscriptions",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-implement-finegrained-channel-authorization-and-group-subscriptions",children:"\ud83d\udee1\ufe0f Implement Fine\u2011Grained Channel Authorization and Group Subscriptions"}),"\n",(0,r.jsxs)(n.p,{children:["Instead of broad channel subscriptions, authorize each stream in ",(0,r.jsx)(n.code,{children:"subscribed"})," using your domain logic. This prevents unauthorized access to data and lets you subscribe a user to multiple dynamic streams (e.g., project or team rooms)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/channels/projects_channel.rb\nclass ProjectsChannel < ApplicationCable::Channel\n  def subscribed\n    project = Project.find(params[:project_id])\n    return reject unless current_user.can_view?(project)\n\n    stream_for project\n    # join a team room too\n    if params[:team_id]\n      team = project.teams.find(params[:team_id])\n      stream_for team if current_user.member_of?(team)\n    end\n  end\n\n  def unsubscribed\n    # cleanup or logging\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Client-side, you can channel multiplex:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"consumer.subscriptions.create(\n  { channel: \"ProjectsChannel\", project_id: 42, team_id: 7 },\n  { received: data => console.log('Update:', data) }\n)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(36672);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);