"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52862],{37374:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/xml/expert/nokogiri_xml_reader_streaming","title":"nokogiri_xml_reader_streaming","description":"\ud83d\ude80 Stream Large XML with Nokogiri::Reader","source":"@site/docs/ruby/xml/expert/nokogiri_xml_reader_streaming.md","sourceDirName":"ruby/xml/expert","slug":"/ruby/xml/expert/nokogiri_xml_reader_streaming","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_xml_reader_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/xml/expert/nokogiri_xml_reader_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nokogiri_builder_namespaces_schema","permalink":"/keep-being-human-dev/docs/ruby/xml/expert/nokogiri_builder_namespaces_schema"},"next":{"title":"build_xml_with_builder","permalink":"/keep-being-human-dev/docs/ruby/xml/middle/build_xml_with_builder"}}');var o=n(23420),i=n(65404);const a={},s=void 0,d={},l=[{value:"\ud83d\ude80 Stream Large XML with Nokogiri::XML::Reader",id:"-stream-large-xml-with-nokogirixmlreader",level:2}];function m(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-stream-large-xml-with-nokogirixmlreader",children:"\ud83d\ude80 Stream Large XML with Nokogiri::XML::Reader"}),"\n",(0,o.jsxs)(r.p,{children:["When you need to process multi-GB XML files without exhausting memory, switch from DOM parsing to a pull parser using ",(0,o.jsx)(r.code,{children:"Nokogiri::XML::Reader"}),". It yields element nodes on demand, letting you inspect or transform only the bits you care about."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"require 'nokogiri'\n\nreader = Nokogiri::XML::Reader(File.open('huge_data.xml'))\nreader.each do |node|\n  # Only process <record> elements\n  next unless node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT && node.name == 'record'\n\n  # Lazily parse this fragment into a Nokogiri::XML::Document\n  fragment = Nokogiri::XML(node.outer_xml)\n  id       = fragment.at_xpath('//record/@id').value\n  content  = fragment.at_xpath('//record/content').text\n  # \u2026perform heavy work or save to DB\u2026\nend\nreader.close\n"})})]})}function c(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var t=n(36672);const o={},i=t.createContext(o);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);