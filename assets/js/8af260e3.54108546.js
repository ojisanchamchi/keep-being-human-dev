"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88840],{25902:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/fibers/expert/async_gem_integration","title":"async_gem_integration","description":"\ud83d\udd0c Integrating Fibers with the Async Gem for Task Coordination","source":"@site/docs/ruby/fibers/expert/async_gem_integration.md","sourceDirName":"ruby/fibers/expert","slug":"/ruby/fibers/expert/async_gem_integration","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_gem_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/expert/async_gem_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"what_is_a_fiber","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/what_is_a_fiber"},"next":{"title":"async_io_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_io_multiplexing"}}');var i=r(23420),s=r(65404);const a={},o=void 0,c={},d=[{value:"\ud83d\udd0c Integrating Fibers with the Async Gem for Task Coordination",id:"-integrating-fibers-with-the-async-gem-for-task-coordination",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-integrating-fibers-with-the-async-gem-for-task-coordination",children:"\ud83d\udd0c Integrating Fibers with the Async Gem for Task Coordination"}),"\n",(0,i.jsxs)(n.p,{children:["Combine ",(0,i.jsx)(n.code,{children:"Fiber"})," with the ",(0,i.jsx)(n.code,{children:"async"})," gem\u2019s reactor to orchestrate low\u2011latency tasks. You can map Fibers onto ",(0,i.jsx)(n.code,{children:"Async::Task"}),"s, leverage ",(0,i.jsx)(n.code,{children:"Async::Semaphore"})," for backpressure, and drop into fiber contexts for fine\u2011grained control when needed."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'async'\nrequire 'async/semaphore'\n\nAsync do |task|\n  semaphore = Async::Semaphore.new(10)\n\n  100.times do |i|\n    semaphore.async do\n      # This block runs inside a Fiber under the Async reactor\n      data = Fiber.current.yield(:waiting)\n      puts \"Processed #{i} with data: #{data}\"\n    end\n  end\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this setup, each ",(0,i.jsx)(n.code,{children:"semaphore.async"})," spawns a Fiber\u2011backed task, and you can manually yield or resume via ",(0,i.jsx)(n.code,{children:"Fiber.current"})," for custom signaling and error propagation."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(36672);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);