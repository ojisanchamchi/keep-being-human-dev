"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41893],{5121:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"ruby/exceptions/expert/exception_wrapping_with_cause","title":"exception_wrapping_with_cause","description":"\ud83d\udca5 Preserve Exception Cause when Wrapping","source":"@site/docs/ruby/exceptions/expert/exception_wrapping_with_cause.md","sourceDirName":"ruby/exceptions/expert","slug":"/ruby/exceptions/expert/exception_wrapping_with_cause","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exception_wrapping_with_cause","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/expert/exception_wrapping_with_cause.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_error_with_metadata","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/custom_error_with_metadata"},"next":{"title":"exponential_backoff_retry_logic","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/exponential_backoff_retry_logic"}}');var i=r(23420),a=r(65404);const s={},o=void 0,c={},p=[{value:"\ud83d\udca5 Preserve Exception Cause when Wrapping",id:"-preserve-exception-cause-when-wrapping",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-preserve-exception-cause-when-wrapping",children:"\ud83d\udca5 Preserve Exception Cause when Wrapping"}),"\n",(0,i.jsxs)(n.p,{children:["When you need to wrap lower-level exceptions while maintaining their backtrace and causal chain, use the built-in ",(0,i.jsx)(n.code,{children:"cause"})," keyword (Ruby\xa02.1+). This lets you re-raise domain-specific errors without losing the original context, which is essential for debugging complex flows."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class MyDomainError < StandardError; end\n\nbegin\n  perform_low_level_operation\nrescue StandardError => e\n  # Wrap the original exception and preserve its backtrace\n  raise MyDomainError.new("High-level operation failed"), cause: e\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can later inspect the chain:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'rescue MyDomainError => err\n  puts err.message              # => "High-level operation failed"\n  puts err.cause.class         # => original exception class\n  puts err.cause.backtrace     # => preserved backtrace array\nend\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(36672);const i={},a=t.createContext(i);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);