"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13183],{47207:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"ruby/marshal/middle/custom_marshal_dump_load","title":"custom_marshal_dump_load","description":"\ud83d\udee0\ufe0f Customize Marshaling with marshaldump and marshalload","source":"@site/docs/ruby/marshal/middle/custom_marshal_dump_load.md","sourceDirName":"ruby/marshal/middle","slug":"/ruby/marshal/middle/custom_marshal_dump_load","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/custom_marshal_dump_load","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/middle/custom_marshal_dump_load.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compress_marshal_data","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/compress_marshal_data"},"next":{"title":"deep_clone_objects","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/deep_clone_objects"}}');var r=s(23420),t=s(65404);const d={},o=void 0,i={},l=[{value:"\ud83d\udee0\ufe0f Customize Marshaling with <code>marshal_dump</code> and <code>marshal_load</code>",id:"\ufe0f-customize-marshaling-with-marshal_dump-and-marshal_load",level:2}];function m(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a.h2,{id:"\ufe0f-customize-marshaling-with-marshal_dump-and-marshal_load",children:["\ud83d\udee0\ufe0f Customize Marshaling with ",(0,r.jsx)(a.code,{children:"marshal_dump"})," and ",(0,r.jsx)(a.code,{children:"marshal_load"})]}),"\n",(0,r.jsxs)(a.p,{children:["Implementing ",(0,r.jsx)(a.code,{children:"marshal_dump"})," and ",(0,r.jsx)(a.code,{children:"marshal_load"})," on your class lets you control exactly what gets serialized and how it\u2019s reconstructed. This is ideal for excluding transient data or transforming attributes during serialization. Define ",(0,r.jsx)(a.code,{children:"marshal_dump"})," to return a serializable representation and ",(0,r.jsx)(a.code,{children:"marshal_load"})," to restore state from that data."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'class Session\n  attr_accessor :user_id, :token, :temp_cache\n\n  def initialize(user_id, token)\n    @user_id = user_id\n    @token = token\n    @temp_cache = {}  # runtime-only data\n  end\n\n  # Only persist user_id and token\n  def marshal_dump\n    { user_id: @user_id, token: @token }\n  end\n\n  def marshal_load(data)\n    @user_id = data[:user_id]\n    @token = data[:token]\n    @temp_cache = {}  # reinitialize runtime data\n  end\nend\n\nsession = Session.new(42, "abc123")\nserialized = Marshal.dump(session)\nrestored = Marshal.load(serialized)\nputs restored.temp_cache  # => {}\n'})})]})}function c(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},65404:(e,a,s)=>{s.d(a,{R:()=>d,x:()=>o});var n=s(36672);const r={},t=n.createContext(r);function d(e){const a=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(t.Provider,{value:a},e.children)}}}]);