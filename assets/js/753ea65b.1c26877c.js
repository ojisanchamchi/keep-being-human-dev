"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22527],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(36672);const r={},s=a.createContext(r);function o(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}},89977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/faraday/expert/custom_instrumentation_middleware","title":"custom_instrumentation_middleware","description":"\ud83d\ude80 Build Custom Instrumentation Middleware","source":"@site/docs/gems/faraday/expert/custom_instrumentation_middleware.md","sourceDirName":"gems/faraday/expert","slug":"/gems/faraday/expert/custom_instrumentation_middleware","permalink":"/keep-being-human-dev/docs/gems/faraday/expert/custom_instrumentation_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faraday/expert/custom_instrumentation_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"faraday_install_config","permalink":"/keep-being-human-dev/docs/gems/faraday/beginner/faraday_install_config"},"next":{"title":"thread_safe_connection_pool","permalink":"/keep-being-human-dev/docs/gems/faraday/expert/thread_safe_connection_pool"}}');var r=n(23420),s=n(65404);const o={},i=void 0,d={},c=[{value:"\ud83d\ude80 Build Custom Instrumentation Middleware",id:"-build-custom-instrumentation-middleware",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-build-custom-instrumentation-middleware",children:"\ud83d\ude80 Build Custom Instrumentation Middleware"}),"\n",(0,r.jsx)(t.p,{children:"When you need fine\u2011grained telemetry on each HTTP interaction, creating a custom Faraday middleware lets you hook into the request lifecycle. You can capture timings, response codes, or custom tags and push them into your metrics backend. This pattern avoids scattering instrumentation across your app and centralizes it in the HTTP layer."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# lib/faraday/instrumentation_middleware.rb\nrequire 'faraday'\n\nclass InstrumentationMiddleware < Faraday::Middleware\n  def call(env)\n    start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n    @app.call(env).on_complete do |response_env|\n      duration = Process.clock_gettime(Process::CLOCK_MONOTONIC) - start_time\n      # Push metrics to your monitoring system\n      Metrics.increment('http.request.count', tags: { method: env.method, host: env.url.host })\n      Metrics.observe('http.request.duration', duration, tags: { method: env.method })\n    end\n  end\nend\n\n# Usage in your Faraday connection\nconn = Faraday.new(url: 'https://api.example.com') do |f|\n  f.use InstrumentationMiddleware         # Insert before adapter\n  f.adapter Faraday.default_adapter        # e.g., :net_http\nend\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);