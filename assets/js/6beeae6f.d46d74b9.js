"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45579],{33885:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/networking/expert/http2_multiplexing","title":"http2_multiplexing","description":"\ud83d\udd78\ufe0f Efficient HTTP/2 Multiplexed Requests with the http2 Gem","source":"@site/docs/ruby/networking/expert/http2_multiplexing.md","sourceDirName":"ruby/networking/expert","slug":"/ruby/networking/expert/http2_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/http2_multiplexing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/expert/http2_multiplexing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_tls_context","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/custom_tls_context"},"next":{"title":"packet_crafting_raw_sockets","permalink":"/keep-being-human-dev/docs/ruby/networking/expert/packet_crafting_raw_sockets"}}');var s=n(23420),i=n(65404);const o={},a=void 0,c={},u=[{value:"\ud83d\udd78\ufe0f Efficient HTTP/2 Multiplexed Requests with the http2 Gem",id:"\ufe0f-efficient-http2-multiplexed-requests-with-the-http2-gem",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-efficient-http2-multiplexed-requests-with-the-http2-gem",children:"\ud83d\udd78\ufe0f Efficient HTTP/2 Multiplexed Requests with the http2 Gem"}),"\n",(0,s.jsxs)(t.p,{children:["Leverage the ",(0,s.jsx)(t.code,{children:"http2"})," gem for full-duplex, multiplexed HTTP/2 connections, reducing latency and maximizing throughput. This approach lets you pipeline multiple streams over a single TCP/TLS session while handling stream events asynchronously."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"require 'http2'\nrequire 'openssl'\n\nuri = URI.parse(\"https://api.example.com\")\nconn = HTTP2::Client.new\n\nsock = TCPSocket.new(uri.host, uri.port)\ntls = OpenSSL::SSL::SSLSocket.new(sock)\ntls.sync_close = true\ntls.connect\n\nconn.on(:frame) { |bytes| tls.write(bytes) }\ntls.on(:read) { |data| conn << data }\n\nstream = conn.new_stream\nstream.headers(\n  \n  {\n    ':method' => 'GET',\n    ':path'   => '/v1/data',\n    ':scheme' => 'https',\n    ':authority' => uri.host\n  }, end_stream: true\n)\n\nstream.on(:data) { |bytes| puts \"Received chunk: \"+bytes }\nstream.on(:close) { puts \"Stream closed\" }\n\n# Run the event loop\nwhile !stream.closed? do\n  data = tls.readpartial(1024) rescue break\n  conn << data\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(36672);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);