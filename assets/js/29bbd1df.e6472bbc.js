"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44631],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(36672);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}},98398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>i});const a=JSON.parse('{"id":"ruby/operators/advanced/boolean_casting.md","title":"boolean_casting.md","description":"\u2705 Double Bang for Strict Boolean Casting","source":"@site/docs/ruby/operators/advanced/boolean_casting.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/boolean_casting.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/boolean_casting.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/boolean_casting.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"verify_certificate_chain","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/verify_certificate_chain"},"next":{"title":"double_splat_args.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/double_splat_args.md"}}');var o=t(23420),r=t(65404);const s={},c=void 0,d={},i=[{value:"\u2705 Double Bang for Strict Boolean Casting",id:"-double-bang-for-strict-boolean-casting",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-double-bang-for-strict-boolean-casting",children:"\u2705 Double Bang for Strict Boolean Casting"}),"\n",(0,o.jsxs)(n.p,{children:["The double bang operator (",(0,o.jsx)(n.code,{children:"!!"}),") converts any object to its boolean equivalent (",(0,o.jsx)(n.code,{children:"true"})," or ",(0,o.jsx)(n.code,{children:"false"}),"). It\u2019s handy in conditional contexts or when you need explicit boolean values instead of truthy/falsy objects."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'def feature_enabled?(config)\n  !!config[:enable_feature]\nend\n\np feature_enabled?(enable_feature: "yes") # => true\np feature_enabled?(enable_feature: nil)   # => false\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);