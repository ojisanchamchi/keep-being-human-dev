"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96971],{26306:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/active_record_associations/beginner/has_and_belongs_to_many_association","title":"has_and_belongs_to_many_association","description":"\ud83d\udd04 Use hasandbelongstomany for Simple Many-to-Many","source":"@site/docs/rails/active_record_associations/beginner/has_and_belongs_to_many_association.md","sourceDirName":"rails/active_record_associations/beginner","slug":"/rails/active_record_associations/beginner/has_and_belongs_to_many_association","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/beginner/has_and_belongs_to_many_association","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/beginner/has_and_belongs_to_many_association.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"eager_loading_associations","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/beginner/eager_loading_associations"},"next":{"title":"has_many_association","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/beginner/has_many_association"}}');var o=s(23420),t=s(65404);const i={},r=void 0,c={},d=[{value:"\ud83d\udd04 Use <code>has_and_belongs_to_many</code> for Simple Many-to-Many",id:"-use-has_and_belongs_to_many-for-simple-many-to-many",level:2}];function _(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-use-has_and_belongs_to_many-for-simple-many-to-many",children:["\ud83d\udd04 Use ",(0,o.jsx)(n.code,{children:"has_and_belongs_to_many"})," for Simple Many-to-Many"]}),"\n",(0,o.jsxs)(n.p,{children:["For a straightforward join table without a model, ",(0,o.jsx)(n.code,{children:"has_and_belongs_to_many"})," connects two models directly. Ensure the join table exists with matching naming."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/models/student.rb\nclass Student < ApplicationRecord\n  has_and_belongs_to_many :courses\nend\n\n# app/models/course.rb\nclass Course < ApplicationRecord\n  has_and_belongs_to_many :students\nend\n"})}),"\n",(0,o.jsxs)(n.p,{children:["With a ",(0,o.jsx)(n.code,{children:"courses_students"})," join table, you can call ",(0,o.jsx)(n.code,{children:"student.courses << course"})," or ",(0,o.jsx)(n.code,{children:"course.students"})," to traverse the association."]})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var a=s(36672);const o={},t=a.createContext(o);function i(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);