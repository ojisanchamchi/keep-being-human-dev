"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94107],{32543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/arrays/middle/destructuring_assignment","title":"destructuring_assignment","description":"\ud83d\udca1 Destructuring Assignment for Easy Extraction","source":"@site/docs/ruby/arrays/middle/destructuring_assignment.md","sourceDirName":"ruby/arrays/middle","slug":"/ruby/arrays/middle/destructuring_assignment","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/destructuring_assignment","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/middle/destructuring_assignment.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bsearch_usage","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/bsearch_usage"},"next":{"title":"dig_nested_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/dig_nested_arrays"}}');var s=t(23420),a=t(65404);const i={},u=void 0,c={},o=[{value:"\ud83d\udca1 Destructuring Assignment for Easy Extraction",id:"-destructuring-assignment-for-easy-extraction",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-destructuring-assignment-for-easy-extraction",children:"\ud83d\udca1 Destructuring Assignment for Easy Extraction"}),"\n",(0,s.jsxs)(n.p,{children:["Destructuring assignment lets you unpack elements from an array into variables in a single line, making your code concise and readable. It\u2019s especially useful when you know the exact positions of the elements you need. You can also use the splat operator (",(0,s.jsx)(n.code,{children:"*"}),") to capture remaining items."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Basic destructuring\nfirst, second, third = ["apple", "banana", "cherry"]\n# first => "apple", second => "banana", third => "cherry"\n\n# Using splat to capture rest\nhead, *tail = [1, 2, 3, 4]\n# head => 1, tail => [2, 3, 4]\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>u});var r=t(36672);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);