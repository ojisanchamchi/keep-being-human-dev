"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[15027],{25150:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/arrays/middle/slice_range_negative","title":"slice_range_negative","description":"\ud83d\udd27 Slicing with Ranges and Negative Indices","source":"@site/docs/ruby/arrays/middle/slice_range_negative.md","sourceDirName":"ruby/arrays/middle","slug":"/ruby/arrays/middle/slice_range_negative","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/slice_range_negative","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/middle/slice_range_negative.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"product_combinations","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/product_combinations"},"next":{"title":"sum_with_block","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/sum_with_block"}}');var a=i(23420),r=i(65404);const s={},c=void 0,d={},o=[{value:"\ud83d\udd27 Slicing with Ranges and Negative Indices",id:"-slicing-with-ranges-and-negative-indices",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-slicing-with-ranges-and-negative-indices",children:"\ud83d\udd27 Slicing with Ranges and Negative Indices"}),"\n",(0,a.jsxs)(n.p,{children:["Ruby\u2019s ",(0,a.jsx)(n.code,{children:"Array#slice"})," and range syntax let you extract subarrays without mutating the original, and negative indices count from the end. This is handy for grabbing chunks or trimming elements without boilerplate loops."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'arr = %w[a b c d e f]\n# Positive range\nsub = arr[1..3]      # => ["b", "c", "d"]\n# Exclusive range\nsub_ex = arr[1...3]  # => ["b", "c"]\n# Negative indices\nlast_two = arr[-2, 2] # => ["e", "f"]\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(36672);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);