"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28347],{14146:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/active_storage/expert/async_variant_generation","title":"async_variant_generation","description":"\u26a1 Asynchronous Variant Generation & Caching Strategy","source":"@site/docs/rails/active_storage/expert/async_variant_generation.md","sourceDirName":"rails/active_storage/expert","slug":"/rails/active_storage/expert/async_variant_generation","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/async_variant_generation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/expert/async_variant_generation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_storage_validate","permalink":"/keep-being-human-dev/docs/rails/active_storage/beginner/active_storage_validate"},"next":{"title":"cdn_signed_url_with_custom_headers","permalink":"/keep-being-human-dev/docs/rails/active_storage/expert/cdn_signed_url_with_custom_headers"}}');var t=a(23420),i=a(65404);const s={},o=void 0,c={},d=[{value:"\u26a1 Asynchronous Variant Generation &amp; Caching Strategy",id:"-asynchronous-variant-generation--caching-strategy",level:2}];function l(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-asynchronous-variant-generation--caching-strategy",children:"\u26a1 Asynchronous Variant Generation & Caching Strategy"}),"\n",(0,t.jsxs)(n.p,{children:["Pre-generate heavy image variants in background jobs and serve them from cache to avoid on\u2011the\u2011fly CPU spikes. Use Sidekiq (or your preferred queue) to call ",(0,t.jsx)(n.code,{children:".processed"})," and store the result in Redis or CDN."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Enqueue variant processing after attach:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/photo.rb\nclass Photo < ApplicationRecord\n  has_one_attached :image\n  after_commit :enqueue_variants, on: :create\n\n  VARIANTS = {\n    thumb: { resize_to_limit: [150, 150] },\n    preview: { resize_to_limit: [800, 600] }\n  }\n\n  def enqueue_variants\n    VARIANTS.each_key do |name|\n      ProcessVariantJob.perform_async(id, name)\n    end\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Background job to process & cache:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# app/jobs/process_variant_job.rb\nclass ProcessVariantJob\n  include Sidekiq::Worker\n  def perform(photo_id, variant_key)\n    photo = Photo.find(photo_id)\n    v = photo.image.variant(Photo::VARIANTS[variant_key]).processed\n    Rails.cache.write("photo_#{photo_id}_#{variant_key}", v.key, expires_in: 12.hours)\n  end\nend\n'})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Serve cached variant in your controller:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"def show\n  key = Rails.cache.read(\"photo_#{params[:id]}_#{params[:variant]}\")\n  redirect_to rails_blob_url(key, disposition: 'inline')\nend\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var r=a(36672);const t={},i=r.createContext(t);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);