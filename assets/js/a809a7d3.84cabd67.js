"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40562],{65404:(e,a,s)=>{s.d(a,{R:()=>d,x:()=>o});var t=s(36672);const r={},n=t.createContext(r);function d(e){const a=t.useContext(n);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(n.Provider,{value:a},e.children)}},88013:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples","title":"metadata_filtered_shared_examples","description":"\ud83c\udff7\ufe0f Metadata-Driven Shared Examples","source":"@site/docs/gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples.md","sourceDirName":"gems/rspec/shared_examples/advanced","slug":"/gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/advanced/metadata_filtered_shared_examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"yielding_block_methods","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/middle/yielding_block_methods"},"next":{"title":"parameterized_shared_examples_dsl","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/advanced/parameterized_shared_examples_dsl"}}');var r=s(23420),n=s(65404);const d={},o=void 0,c={},p=[{value:"\ud83c\udff7\ufe0f Metadata-Driven Shared Examples",id:"\ufe0f-metadata-driven-shared-examples",level:2}];function i(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"\ufe0f-metadata-driven-shared-examples",children:"\ud83c\udff7\ufe0f Metadata-Driven Shared Examples"}),"\n",(0,r.jsx)(a.p,{children:"Leverage RSpec metadata to parameterize and filter shared examples dynamically. By tagging example groups with custom metadata, you can conditionally include or exclude shared behavior without duplicating code."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"# spec/support/shared_examples/resource_behaviors.rb\nRSpec.shared_examples 'resource endpoints' do\n  context 'when resource is created' do\n    it 'returns status 201' do\n      post endpoint, params: valid_params\n      expect(response).to have_http_status(:created)\n    end\n  end\n\n  context 'when unauthorized' do\n    it 'returns status 401' do\n      post endpoint, params: valid_params, headers: { Authorization: 'invalid' }\n      expect(response).to have_http_status(:unauthorized)\n    end\n  end\nend\n\n# spec/controllers/users_controller_spec.rb\nRSpec.describe UsersController, type: :request, resource: :user do\n  let(:endpoint)    { '/users' }\n  let(:valid_params){ { user: attributes_for(:user) } }\n\n  include_examples 'resource endpoints' if RSpec.current_example.metadata[:resource] == :user\nend\n"})}),"\n",(0,r.jsxs)(a.p,{children:["This approach uses ",(0,r.jsx)(a.code,{children:":resource"})," metadata to ensure only the relevant shared examples run in that context. You can expand metadata checks for roles, versions, or feature flags."]})]})}function l(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}}}]);