"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[42828],{24440:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"ruby/data_types/expert/custom_numeric_coercion","title":"custom_numeric_coercion","description":"\ud83d\udd22 Custom Numeric Coercion","source":"@site/docs/ruby/data_types/expert/custom_numeric_coercion.md","sourceDirName":"ruby/data_types/expert","slug":"/ruby/data_types/expert/custom_numeric_coercion","permalink":"/keep-being-human-dev/docs/ruby/data_types/expert/custom_numeric_coercion","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/expert/custom_numeric_coercion.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ruby_symbols","permalink":"/keep-being-human-dev/docs/ruby/data_types/beginner/ruby_symbols"},"next":{"title":"deep_immutable_structures","permalink":"/keep-being-human-dev/docs/ruby/data_types/expert/deep_immutable_structures"}}');var o=t(23420),c=t(65404);const s={},i=void 0,u={},a=[{value:"\ud83d\udd22 Custom Numeric Coercion",id:"-custom-numeric-coercion",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-custom-numeric-coercion",children:"\ud83d\udd22 Custom Numeric Coercion"}),"\n",(0,o.jsxs)(n.p,{children:["Ruby\u2019s ",(0,o.jsx)(n.code,{children:"Numeric"})," protocol allows you to define your own number types that interoperate seamlessly with built\u2011ins. By implementing the ",(0,o.jsx)(n.code,{children:"coerce"})," method you enable Ruby to reorder mixed operations and delegate them back to your class, preserving type fidelity."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class MyRatio < Numeric\n  attr_reader :num, :den\n  def initialize(num, den=1)\n    @num, @den = num, den\n  end\n\n  def +(other)\n    o = coerce(other).first\n    MyRatio.new(num * o.den + o.num * den, den * o.den).reduce\n  end\n\n  def coerce(other)\n    case other\n    when Numeric\n      [MyRatio.new(other,1), self]\n    else\n      raise TypeError, "#{other.class} can\'t be coerced into MyRatio"\n    end\n  end\n\n  protected\n  def reduce\n    g = num.gcd(den)\n    MyRatio.new(num/g, den/g)\n  end\nend\n\nr = MyRatio.new(3,4)\np r + 2       # => MyRatio(11,4)\np 2 + r       # coerce called, => MyRatio(11,4)\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(36672);const o={},c=r.createContext(o);function s(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);