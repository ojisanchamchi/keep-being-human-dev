"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44010],{65404:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>d});var n=t(36672);const o={},a=n.createContext(o);function c(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),n.createElement(a.Provider,{value:r},e.children)}},93126:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>d,default:()=>i,frontMatter:()=>c,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"ruby/threads/advanced/thread_pool_executor_concurrent_ruby","title":"thread_pool_executor_concurrent_ruby","description":"\ud83e\udd39 ThreadPoolExecutor for Scalable Thread Pools","source":"@site/docs/ruby/threads/advanced/thread_pool_executor_concurrent_ruby.md","sourceDirName":"ruby/threads/advanced","slug":"/ruby/threads/advanced/thread_pool_executor_concurrent_ruby","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/thread_pool_executor_concurrent_ruby","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/advanced/thread_pool_executor_concurrent_ruby.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_local_memoization","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/thread_local_memoization"},"next":{"title":"thread_basic_creation","permalink":"/keep-being-human-dev/docs/ruby/threads/beginner/thread_basic_creation"}}');var o=t(23420),a=t(65404);const c={},d=void 0,s={},u=[{value:"\ud83e\udd39 ThreadPoolExecutor for Scalable Thread Pools",id:"-threadpoolexecutor-for-scalable-thread-pools",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-threadpoolexecutor-for-scalable-thread-pools",children:"\ud83e\udd39 ThreadPoolExecutor for Scalable Thread Pools"}),"\n",(0,o.jsxs)(r.p,{children:["Leverage the ",(0,o.jsx)(r.code,{children:"concurrent-ruby"})," gem\u2019s ",(0,o.jsx)(r.code,{children:"ThreadPoolExecutor"})," to control min/max threads, queue size, and fallback strategies without reinventing the wheel. This lets you scale up under load and throttle back when idle."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:'require \'concurrent\'\n\n# Configure a dynamic pool: at least 2 threads, at most 10, with a work queue of 50\nexecutor = Concurrent::ThreadPoolExecutor.new(\n  min_threads: 2,\n  max_threads: 10,\n  max_queue:   50,\n  fallback_policy: :caller_runs # Runs tasks on caller if queue is full\n)\n\n# Submit 100 tasks\n100.times do |i|\n  executor.post do\n    puts "Task \x7f\\(i) running in thread #{Thread.current.object_id}"\n    sleep(rand * 0.1)\n  end\nend\n\n# Graceful shutdown\nexecutor.shutdown\nexecutor.wait_for_termination(5) # seconds",\n'})})]})}function i(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);