"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14299],{63523:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"rails/active_record_callbacks/expert/conditional_chain_callbacks","title":"conditional_chain_callbacks","description":"\ud83d\udcec Chaining Callbacks with Dynamic Conditions","source":"@site/docs/rails/active_record_callbacks/expert/conditional_chain_callbacks.md","sourceDirName":"rails/active_record_callbacks/expert","slug":"/rails/active_record_callbacks/expert/conditional_chain_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/conditional_chain_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/expert/conditional_chain_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concerns_for_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/concerns_for_callbacks"},"next":{"title":"dynamic_callback_definitions","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/expert/dynamic_callback_definitions"}}');var i=a(23420),t=a(65404);const s={},l=void 0,r={},o=[{value:"\ud83d\udcec Chaining Callbacks with Dynamic Conditions",id:"-chaining-callbacks-with-dynamic-conditions",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-chaining-callbacks-with-dynamic-conditions",children:"\ud83d\udcec Chaining Callbacks with Dynamic Conditions"}),"\n",(0,i.jsxs)(n.p,{children:["Leverage Procs in ",(0,i.jsx)(n.code,{children:"if"}),"/",(0,i.jsx)(n.code,{children:"unless"})," options to build dynamic callback chains. This is essential when callback invocation depends on multiple runtime factors."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class Invoice < ApplicationRecord\n  before_save :apply_late_fee, if: ->(invoice) { invoice.due_date.past? && invoice.amount_outstanding > 0 }\n  after_save :send_reminder_email, unless: ->(invoice) { invoice.paid? }\n\n  private\n\n  def apply_late_fee\n    self.late_fee = calculate_fee\n  end\n\n  def send_reminder_email\n    ReminderMailer.remind(self).deliver_later\n  end\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Condition Procs are evaluated per record and support arbitrary business logic, giving you fine-grained control over the callback flow."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var c=a(36672);const i={},t=c.createContext(i);function s(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);