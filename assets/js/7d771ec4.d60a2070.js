"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2515],{65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>t});var u=n(36672);const o={},d=u.createContext(o);function s(e){const r=u.useContext(d);return u.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),u.createElement(d.Provider,{value:r},e.children)}},76998:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>t,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>a});const u=JSON.parse('{"id":"ruby/threads/middle/queue_producer_consumer","title":"queue_producer_consumer","description":"\ud83d\udce6 Use Queue for Producer-Consumer","source":"@site/docs/ruby/threads/middle/queue_producer_consumer.md","sourceDirName":"ruby/threads/middle","slug":"/ruby/threads/middle/queue_producer_consumer","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/queue_producer_consumer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/middle/queue_producer_consumer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mutex_synchronize_shared_data","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/mutex_synchronize_shared_data"},"next":{"title":"thread_local_variables","permalink":"/keep-being-human-dev/docs/ruby/threads/middle/thread_local_variables"}}');var o=n(23420),d=n(65404);const s={},t=void 0,c={},a=[{value:"\ud83d\udce6 Use Queue for Producer-Consumer",id:"-use-queue-for-producer-consumer",level:2}];function i(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-use-queue-for-producer-consumer",children:"\ud83d\udce6 Use Queue for Producer-Consumer"}),"\n",(0,o.jsxs)(r.p,{children:["Ruby's standard ",(0,o.jsx)(r.code,{children:"Queue"})," is thread-safe and ideal for producer-consumer workflows. Producers ",(0,o.jsx)(r.code,{children:"push"})," items and consumers ",(0,o.jsx)(r.code,{children:"pop"}),", automatically blocking when empty."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:'require \'thread\'\n\nqueue = Queue.new\n\n# Producer\nproducer = Thread.new do\n  5.times do |i|\n    queue << "item_#{i}"\n    puts "Produced item_#{i}"\n  end\n  queue << :done\nend\n\n# Consumer\nconsumer = Thread.new do\n  loop do\n    item = queue.pop\n    break if item == :done\n    puts "Consumed #{item}"\n  end\nend\n\nproducer.join\nconsumer.join\n'})})]})}function m(e={}){const{wrapper:r}={...(0,d.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(i,{...e})}):i(e)}}}]);