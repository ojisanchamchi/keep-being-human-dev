"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74988],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(36672);const s={},o=a.createContext(s);function r(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},73379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gems/factory_bot_rails/advanced/transient_dynamic_associations","title":"transient_dynamic_associations","description":"\u2699\ufe0f Transient Attributes for Dynamic Associations","source":"@site/docs/gems/factory_bot_rails/advanced/transient_dynamic_associations.md","sourceDirName":"gems/factory_bot_rails/advanced","slug":"/gems/factory_bot_rails/advanced/transient_dynamic_associations","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/transient_dynamic_associations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/advanced/transient_dynamic_associations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_factorybot_strategy","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/custom_factorybot_strategy"},"next":{"title":"associations.md","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/beginner/associations.md"}}');var s=n(23420),o=n(65404);const r={},i=void 0,c={},d=[{value:"\u2699\ufe0f Transient Attributes for Dynamic Associations",id:"\ufe0f-transient-attributes-for-dynamic-associations",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-transient-attributes-for-dynamic-associations",children:"\u2699\ufe0f Transient Attributes for Dynamic Associations"}),"\n",(0,s.jsxs)(t.p,{children:["Transient attributes let you pass ephemeral values into a factory without persisting them to the model. Combine these with ",(0,s.jsx)(t.code,{children:"after(:create)"})," hooks to dynamically create or modify associated records based on test parameters."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"factory :order do\n  customer\n  total { 100 }\n\n  transient do\n    line_item_count { 3 }\n  end\n\n  after(:create) do |order, evaluator|\n    create_list(:line_item, evaluator.line_item_count, order: order)\n  end\nend\n\n# In your spec:\nlet(:big_order) { create(:order, line_item_count: 10, total: 500) }\nexpect(big_order.line_items.size).to eq(10)\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);