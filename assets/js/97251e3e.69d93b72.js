"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68330],{49867:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/oop/expert/concurrent_ractor_mixins","title":"concurrent_ractor_mixins","description":"\u269b\ufe0f Concurrency-safe Mixins with Ractors and Clone","source":"@site/docs/ruby/oop/expert/concurrent_ractor_mixins.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/concurrent_ractor_mixins","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/concurrent_ractor_mixins","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/concurrent_ractor_mixins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"class_level_exec","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/class_level_exec"},"next":{"title":"dynamic_method_dsl","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/dynamic_method_dsl"}}');var o=t(23420),c=t(65404);const s={},a=void 0,i={},u=[{value:"\u269b\ufe0f Concurrency-safe Mixins with Ractors and Clone",id:"\ufe0f-concurrency-safe-mixins-with-ractors-and-clone",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-concurrency-safe-mixins-with-ractors-and-clone",children:"\u269b\ufe0f Concurrency-safe Mixins with Ractors and Clone"}),"\n",(0,o.jsxs)(n.p,{children:["Design mixins that can work across Ractors without sharing mutable state. Use ",(0,o.jsx)(n.code,{children:"#clone"})," to deep-copy module state and freeze constants to avoid cross-Ractor violations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"module Counter\n  def increment\n    @count ||= 0\n    @count += 1\n  end\n\n  def value\n    @count\n  end\nend\n\nractor1 = Ractor.new do\n  c = Counter.clone\n  c.extend(Counter)\n  3.times { c.increment }\n  c.value\nend\n\nractor2 = Ractor.new do\n  c = Counter.clone\n  c.extend(Counter)\n  2.times { c.increment }\n  c.value\nend\n\nputs ractor1.take  # => 3\nputs ractor2.take  # => 2\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(36672);const o={},c=r.createContext(o);function s(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);