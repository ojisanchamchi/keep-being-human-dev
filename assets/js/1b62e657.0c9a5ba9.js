"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54315],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(36672);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}},65896:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"ruby/blocks/beginner/custom_method_yield","title":"custom_method_yield","description":"\u2699\ufe0f Building Custom Methods with yield","source":"@site/docs/ruby/blocks/beginner/custom_method_yield.md","sourceDirName":"ruby/blocks/beginner","slug":"/ruby/blocks/beginner/custom_method_yield","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/custom_method_yield","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/beginner/custom_method_yield.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"block_to_proc_conversion","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/block_to_proc_conversion"},"next":{"title":"file_resource_management","permalink":"/keep-being-human-dev/docs/ruby/blocks/beginner/file_resource_management"}}');var r=t(23420),s=t(65404);const i={},c=void 0,d={},u=[{value:"\u2699\ufe0f Building Custom Methods with yield",id:"\ufe0f-building-custom-methods-with-yield",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-building-custom-methods-with-yield",children:"\u2699\ufe0f Building Custom Methods with yield"}),"\n",(0,r.jsxs)(n.p,{children:["You can define your own methods that accept blocks by using ",(0,r.jsx)(n.code,{children:"yield"}),". Inside the method, ",(0,r.jsx)(n.code,{children:"yield"})," transfers control to the block you pass in."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'def greet\n  puts "Before greeting"\n  yield if block_given?\n  puts "After greeting"\nend\n\ngreet do\n  puts "Hello from the block!"\nend\n# Output:\n# Before greeting\n# Hello from the block!\n# After greeting\n'})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);