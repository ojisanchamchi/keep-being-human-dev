"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18801],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>t});var r=a(36672);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}},77281:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/serialization/expert/versioned_marshal","title":"versioned_marshal","description":"\ud83d\udce6 Customizing Marshal for Versioned Object Serialization","source":"@site/docs/ruby/serialization/expert/versioned_marshal.md","sourceDirName":"ruby/serialization/expert","slug":"/ruby/serialization/expert/versioned_marshal","permalink":"/keep-being-human-dev/docs/ruby/serialization/expert/versioned_marshal","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/serialization/expert/versioned_marshal.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"oj_object_hooks","permalink":"/keep-being-human-dev/docs/ruby/serialization/expert/oj_object_hooks"},"next":{"title":"active_model_serializer_example","permalink":"/keep-being-human-dev/docs/ruby/serialization/middle/active_model_serializer_example"}}');var i=a(23420),o=a(65404);const s={},t=void 0,l={},d=[{value:"\ud83d\udce6 Customizing Marshal for Versioned Object Serialization",id:"-customizing-marshal-for-versioned-object-serialization",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-customizing-marshal-for-versioned-object-serialization",children:"\ud83d\udce6 Customizing Marshal for Versioned Object Serialization"}),"\n",(0,i.jsxs)(n.p,{children:["When your application objects evolve over time, you need a robust way to maintain backward and forward compatibility. Override ",(0,i.jsx)(n.code,{children:"#_dump"})," to prepend a version tag and ",(0,i.jsx)(n.code,{children:"::load"})," to dispatch on that version, allowing you to gracefully migrate old data. This pattern ensures you can read legacy dumps and upgrade them on the fly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class UserProfile\n  attr_accessor :name, :email, :preferences\n\n  def initialize(name, email, preferences = {})\n    @name = name\n    @email = email\n    @preferences = preferences\n  end\n\n  # Called by Marshal.dump(obj, depth)\n  def _dump(level)\n    version = 2\n    payload = [name, email, preferences].to_yaml\n    [version, payload].pack("nA*")\n  end\n\n  # Called by Marshal.load\n  def self._load(data)\n    version, payload = data.unpack("nA*")\n    case version\n    when 1\n      name, email = YAML.load(payload)\n      prefs = {}\n    when 2\n      name, email, prefs = YAML.load(payload)\n    else\n      raise "Unknown version: \x7f#{version}"\n    end\n\n    new(name, email, prefs)\n  end\nend\n\n# Usage\ndumped = Marshal.dump(UserProfile.new("Alice", "a@example.com", theme: :dark))\nrestored = Marshal.load(dumped)\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);