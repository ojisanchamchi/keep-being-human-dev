"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83806],{33204:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/background_jobs/expert/custom_retry_strategy","title":"custom_retry_strategy","description":"\ud83d\udd27 Custom Retry Strategies & Exponential Backoff in Sidekiq","source":"@site/docs/rails/background_jobs/expert/custom_retry_strategy.md","sourceDirName":"rails/background_jobs/expert","slug":"/rails/background_jobs/expert/custom_retry_strategy","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/custom_retry_strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/expert/custom_retry_strategy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pass_arguments_to_job","permalink":"/keep-being-human-dev/docs/rails/background_jobs/beginner/pass_arguments_to_job"},"next":{"title":"job_orchestration","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/job_orchestration"}}');var s=r(23420),o=r(65404);const a={},i=void 0,c={},d=[{value:"\ud83d\udd27 Custom Retry Strategies &amp; Exponential Backoff in Sidekiq",id:"-custom-retry-strategies--exponential-backoff-in-sidekiq",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-custom-retry-strategies--exponential-backoff-in-sidekiq",children:"\ud83d\udd27 Custom Retry Strategies & Exponential Backoff in Sidekiq"}),"\n",(0,s.jsxs)(t.p,{children:["Override Sidekiq\u2019s default retry logic by defining ",(0,s.jsx)(t.code,{children:"sidekiq_options"})," and using middleware or ",(0,s.jsx)(t.code,{children:"sidekiq_retries_exhausted"})," hooks. This allows you to implement exponential backoff, route exhausted messages to a DLQ, or notify engineers automatically."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"class HardWorker\n  include Sidekiq::Worker\n  sidekiq_options retry: 7, backtrace: true\n\n  sidekiq_retry_in do |count|\n    # exponential backoff: 10s, 60s, 300s, \u2026\n    (10**count) + rand(30)\n  end\n\n  sidekiq_retries_exhausted do |msg, ex|\n    DeadLetterJob.perform_async(msg['class'], msg['args'], ex.message)\n  end\n\n  def perform(*args)\n    # potentially flaky logic\n    do_something_risky!\n  end\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>i});var n=r(36672);const s={},o=n.createContext(s);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);