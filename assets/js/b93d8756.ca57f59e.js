"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92859],{52162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/openssl/middle/aes_gcm_encryption","title":"aes_gcm_encryption","description":"\ud83d\udd12 AES-GCM Encryption","source":"@site/docs/ruby/openssl/middle/aes_gcm_encryption.md","sourceDirName":"ruby/openssl/middle","slug":"/ruby/openssl/middle/aes_gcm_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/aes_gcm_encryption","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/openssl/middle/aes_gcm_encryption.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"streaming_aead_gcm_file_encryption","permalink":"/keep-being-human-dev/docs/ruby/openssl/expert/streaming_aead_gcm_file_encryption"},"next":{"title":"custom_ssl_context","permalink":"/keep-being-human-dev/docs/ruby/openssl/middle/custom_ssl_context"}}');var c=t(23420),s=t(65404);const i={},p=void 0,a={},o=[{value:"\ud83d\udd12 AES-GCM Encryption",id:"-aes-gcm-encryption",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-aes-gcm-encryption",children:"\ud83d\udd12 AES-GCM Encryption"}),"\n",(0,c.jsxs)(n.p,{children:["Using AES in GCM mode gives you authenticated encryption with integrity checks. You can securely encrypt and decrypt data with minimal boilerplate using ",(0,c.jsx)(n.code,{children:"OpenSSL::Cipher"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"require 'openssl'\n\ndef aes_gcm_encrypt(plaintext, key)\n  cipher = OpenSSL::Cipher.new('aes-256-gcm')\n  cipher.encrypt\n  cipher.key = key = key[0..31]\n  iv = cipher.random_iv\n  ciphertext = cipher.update(plaintext) + cipher.final\n  tag = cipher.auth_tag\n  { iv: iv, ciphertext: ciphertext, tag: tag, key: key }\nend\n\ndef aes_gcm_decrypt(iv:, ciphertext:, tag:, key:)\n  cipher = OpenSSL::Cipher.new('aes-256-gcm')\n  cipher.decrypt\n  cipher.key = key\n  cipher.iv = iv\n  cipher.auth_tag = tag\n  cipher.update(ciphertext) + cipher.final\nend\n\n# Usage:\nsecret = \"My super secret message\"\nkey = OpenSSL::Random.random_bytes(32)\nencrypted = aes_gcm_encrypt(secret, key)\ndecrypted = aes_gcm_decrypt(**encrypted)\nputs decrypted # => \"My super secret message\"\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>p});var r=t(36672);const c={},s=r.createContext(c);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);