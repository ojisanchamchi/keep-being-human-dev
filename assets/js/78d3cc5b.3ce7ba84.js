"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96110],{2552:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"gems/acts-as-taggable-on/middle/multiple_tag_contexts","title":"multiple_tag_contexts","description":"\ud83c\udff7\ufe0f Using Multiple Tag Contexts","source":"@site/docs/gems/acts-as-taggable-on/middle/multiple_tag_contexts.md","sourceDirName":"gems/acts-as-taggable-on/middle","slug":"/gems/acts-as-taggable-on/middle/multiple_tag_contexts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/multiple_tag_contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/middle/multiple_tag_contexts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"caching_tag_counts","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/caching_tag_counts"},"next":{"title":"querying_tagged_models","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/middle/querying_tagged_models"}}');var a=s(23420),i=s(65404);const o={},l=void 0,c={},r=[{value:"\ud83c\udff7\ufe0f Using Multiple Tag Contexts",id:"\ufe0f-using-multiple-tag-contexts",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\ufe0f-using-multiple-tag-contexts",children:"\ud83c\udff7\ufe0f Using Multiple Tag Contexts"}),"\n",(0,a.jsxs)(t.p,{children:["With ",(0,a.jsx)(t.code,{children:"acts-as-taggable-on"})," you can define separate tag lists (contexts) on the same model. This helps you organize tags by purpose, like ",(0,a.jsx)(t.code,{children:"skills"})," vs ",(0,a.jsx)(t.code,{children:"interests"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  acts_as_taggable_on :skills, :interests\nend\n\n# In console or controller:\nuser = User.new(name: 'Alice')\nuser.skill_list.add('Ruby', 'JavaScript')\nuser.interest_list.add('Cooking', 'Hiking')\nuser.save\n"})}),"\n",(0,a.jsx)(t.p,{children:"Now you can query or display tags per context:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'user.skill_list    #=> ["Ruby", "JavaScript"]\nuser.interest_list #=> ["Cooking", "Hiking"]\n'})})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>l});var n=s(36672);const a={},i=n.createContext(a);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);