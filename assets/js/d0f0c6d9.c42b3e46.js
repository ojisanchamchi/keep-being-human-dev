"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46351],{47130:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/active_storage/advanced/webp_global_variant","title":"webp_global_variant","description":"\ud83c\udfa8 Global WebP Variant Conversion","source":"@site/docs/rails/active_storage/advanced/webp_global_variant.md","sourceDirName":"rails/active_storage/advanced","slug":"/rails/active_storage/advanced/webp_global_variant","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/webp_global_variant","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_storage/advanced/webp_global_variant.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"stream_large_files","permalink":"/keep-being-human-dev/docs/rails/active_storage/advanced/stream_large_files"},"next":{"title":"active_storage_attach_files","permalink":"/keep-being-human-dev/docs/rails/active_storage/beginner/active_storage_attach_files"}}');var r=n(23420),o=n(65404);const s={},i=void 0,c={},l=[{value:"\ud83c\udfa8 Global WebP Variant Conversion",id:"-global-webp-variant-conversion",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-global-webp-variant-conversion",children:"\ud83c\udfa8 Global WebP Variant Conversion"}),"\n",(0,r.jsx)(a.p,{children:"Force all JPEG/PNG variants to be converted to WebP by default to save bandwidth. Monkey-patch the variant show endpoint to set default format, and configure your image processors accordingly."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"# config/initializers/active_storage.rb\nRails.application.config.to_prepare do\n  ActiveStorage::Variation.wrap_processor(:mini_magick) do |processor_class|\n    Class.new(processor_class) do\n      def process\n        super.tap do |v|\n          v.processor = :mini_magick\n          v.processor_options[:format] ||= 'webp'\n        end\n      end\n    end\n  end\nend\n\n# Now any call without explicit format uses WebP:\nimage_tag user.avatar.variant(resize_to_limit: [800, 800])\n"})})]})}function p(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>i});var t=n(36672);const r={},o=t.createContext(r);function s(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);