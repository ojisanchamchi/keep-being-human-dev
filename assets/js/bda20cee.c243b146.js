"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33517],{65404:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var s=o(36672);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},76960:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/json/expert/custom_json_serialization_for_complex_objects","title":"custom_json_serialization_for_complex_objects","description":"\ud83d\udd27 Custom JSON Serialization for Complex Ruby Objects","source":"@site/docs/ruby/json/expert/custom_json_serialization_for_complex_objects.md","sourceDirName":"ruby/json/expert","slug":"/ruby/json/expert/custom_json_serialization_for_complex_objects","permalink":"/keep-being-human-dev/docs/ruby/json/expert/custom_json_serialization_for_complex_objects","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/json/expert/custom_json_serialization_for_complex_objects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"json_parse_basics","permalink":"/keep-being-human-dev/docs/ruby/json/beginner/json_parse_basics"},"next":{"title":"high_performance_json_parsing_with_oj","permalink":"/keep-being-human-dev/docs/ruby/json/expert/high_performance_json_parsing_with_oj"}}');var r=o(23420),t=o(65404);const i={},a=void 0,c={},l=[{value:"\ud83d\udd27 Custom JSON Serialization for Complex Ruby Objects",id:"-custom-json-serialization-for-complex-ruby-objects",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-custom-json-serialization-for-complex-ruby-objects",children:"\ud83d\udd27 Custom JSON Serialization for Complex Ruby Objects"}),"\n",(0,r.jsxs)(n.p,{children:["When serializing domain models or value objects, override ",(0,r.jsx)(n.code,{children:"as_json"})," and ",(0,r.jsx)(n.code,{children:"to_json"})," methods to control output, handle circular references, and inject metadata. Combine with JSON gem\u2019s ",(0,r.jsx)(n.code,{children:"JSON.create_id"})," for full object restoration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"require 'json'\n\nclass User\n  attr_accessor :id, :name, :profile\n\n  def initialize(id, name, profile)\n    @id = id\n    @name = name\n    @profile = profile\n  end\n\n  # embed the class name for recreation\n  def as_json(*)\n    {\n      JSON.create_id => self.class.name,\n      'id' => @id,\n      'name' => @name,\n      'profile' => @profile.as_json\n    }\n  end\n\n  def to_json(*args)\n    as_json.to_json(*args)\n  end\nend\n\nclass Profile\n  attr_accessor :bio, :avatar_url\n\n  def as_json(*)\n    { 'bio' => @bio, 'avatar_url' => @avatar_url }\n  end\nend\n\n# Register classes for JSON.load\nJSON.add_create_id(User)\nJSON.add_create_id(Profile)\n\n# Serialize\nuser = User.new(1, 'Alice', Profile.new('Dev', '/pics/alice.png'))\njson_str = JSON.generate(user)\n\n# Deserialize with object restoration\nrestored = JSON.load(json_str)\np restored.inspect\n"})}),"\n",(0,r.jsx)(n.p,{children:"This approach ensures round\u2011trip fidelity, supports polymorphism, and can be extended with metadata, versioning fields, or encryption hooks at serialization time."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);