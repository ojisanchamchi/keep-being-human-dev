"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54569],{40808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>d,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/dynamic_arity_validation","title":"dynamic_arity_validation","description":"\u2696\ufe0f Enforcing Arity and Argument Types at Runtime","source":"@site/docs/ruby/procs_and_lambdas/expert/dynamic_arity_validation.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/dynamic_arity_validation","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/dynamic_arity_validation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/dynamic_arity_validation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"currying_and_partial_application","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/currying_and_partial_application"},"next":{"title":"metaprogramming_with_define_method","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/metaprogramming_with_define_method"}}');var r=t(23420),i=t(65404);const d={},s=void 0,c={},o=[{value:"\u2696\ufe0f Enforcing Arity and Argument Types at Runtime",id:"\ufe0f-enforcing-arity-and-argument-types-at-runtime",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\ufe0f-enforcing-arity-and-argument-types-at-runtime",children:"\u2696\ufe0f Enforcing Arity and Argument Types at Runtime"}),"\n",(0,r.jsxs)(n.p,{children:["Lambdas enforce arity by default, but you can add runtime type checks inside procs for stricter contracts. Combine ",(0,r.jsx)(n.code,{children:"#lambda"})," with custom validators to fail early on unexpected inputs, improving reliability in critical code paths."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'type_checked = lambda do |a, b|\n  raise TypeError, "Expected Integer" unless a.is_a?(Integer) && b.is_a?(Integer)\n  a * b\nend\n\nputs type_checked.call(3, 4)    # => 12\nputs type_checked.call("3", 4) # => TypeError: Expected Integer\n'})}),"\n",(0,r.jsx)(n.p,{children:"Wrap these in helper methods to generate families of typed lambdas dynamically."})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var a=t(36672);const r={},i=a.createContext(r);function d(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);