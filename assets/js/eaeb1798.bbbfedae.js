"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53263],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(36672);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},81909:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models","title":"polymorphic_tagging_across_models","description":"\ud83c\udff7\ufe0f Implementing Polymorphic Tagging Across Models with a Single Context","source":"@site/docs/gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models.md","sourceDirName":"gems/acts-as-taggable-on/advanced","slug":"/gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/advanced/polymorphic_tagging_across_models.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"optimize_tag_query_with_joins","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/advanced/optimize_tag_query_with_joins"},"next":{"title":"add_tags_to_model","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/beginner/add_tags_to_model"}}');var s=a(23420),o=a(65404);const i={},c=void 0,r={},l=[{value:"\ud83c\udff7\ufe0f Implementing Polymorphic Tagging Across Models with a Single Context",id:"\ufe0f-implementing-polymorphic-tagging-across-models-with-a-single-context",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-implementing-polymorphic-tagging-across-models-with-a-single-context",children:"\ud83c\udff7\ufe0f Implementing Polymorphic Tagging Across Models with a Single Context"}),"\n",(0,s.jsxs)(n.p,{children:["ActsAsTaggableOn supports tagging multiple ActiveRecord models under the same context by leveraging polymorphic associations. This allows you to, for example, tag both ",(0,s.jsx)(n.code,{children:"Article"})," and ",(0,s.jsx)(n.code,{children:"Video"})," with a single ",(0,s.jsx)(n.code,{children:":topics"})," context and query them uniformly."]}),"\n",(0,s.jsx)(n.p,{children:"First, ensure your models use the same tag context and polymorphic interface:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class Article < ApplicationRecord\n  acts_as_taggable_on :topics\nend\n\nclass Video < ApplicationRecord\n  acts_as_taggable_on :topics\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can now tag records:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"article = Article.create(title: 'Rails Tips')\nvideo   = Video.create(title: 'Rails Caching')\n\narticle.topic_list.add('ruby', 'rails')\nvideo.topic_list.add('performance', 'caching')\n\narticle.save\nvideo.save\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Query across both models using a single join on ",(0,s.jsx)(n.code,{children:"Tagging"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"Tagging.joins(:tag)\n       .where(context: 'topics', tags: { name: 'rails' })\n       .includes(:taggable)\n       .map(&:taggable) # returns both Articles and Videos tagged 'rails'\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);