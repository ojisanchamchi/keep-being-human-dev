"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44844],{30930:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rails/websockets/middle/setup_channels_streams","title":"setup_channels_streams","description":"\ud83d\ude80 Organizing Channels and Streams","source":"@site/docs/rails/websockets/middle/setup_channels_streams.md","sourceDirName":"rails/websockets/middle","slug":"/rails/websockets/middle/setup_channels_streams","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/setup_channels_streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/middle/setup_channels_streams.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_adapter_optimization","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/redis_adapter_optimization"},"next":{"title":"turbo_streams_integration","permalink":"/keep-being-human-dev/docs/rails/websockets/middle/turbo_streams_integration"}}');var t=s(23420),r=s(65404);const i={},o=void 0,c={},l=[{value:"\ud83d\ude80 Organizing Channels and Streams",id:"-organizing-channels-and-streams",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-organizing-channels-and-streams",children:"\ud83d\ude80 Organizing Channels and Streams"}),"\n",(0,t.jsxs)(n.p,{children:["When working with WebSockets in Rails, you can structure your channels to mirror your resources, keeping real-time logic clean. Define subscription behavior in ",(0,t.jsx)(n.code,{children:"subscribed"})," and manage your streams via ",(0,t.jsx)(n.code,{children:"stream_from"})," or ",(0,t.jsx)(n.code,{children:"stream_for"})," to ensure clients only receive relevant updates."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    # Stream for a specific chat room\n    stream_from "chat_room_#{params[:room]}"\n  end\n\n  def unsubscribed\n    # Cleanup logic if needed\n  end\nend\n\n# app/javascript/channels/chat_channel.js\nimport consumer from "channels/consumer"\n\nconsumer.subscriptions.create({ channel: "ChatChannel", room: "general" }, {\n  received(data) {\n    console.log("New message:", data)\n  }\n})\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(36672);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);