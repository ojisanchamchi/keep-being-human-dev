"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13131],{15139:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/image_processing/middle/background_processing","title":"background_processing","description":"\ud83d\ude80 Offload Heavy Image Processing to Background Jobs","source":"@site/docs/gems/image_processing/middle/background_processing.md","sourceDirName":"gems/image_processing/middle","slug":"/gems/image_processing/middle/background_processing","permalink":"/keep-being-human-dev/docs/gems/image_processing/middle/background_processing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/image_processing/middle/background_processing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_processing_pipeline","permalink":"/keep-being-human-dev/docs/gems/image_processing/expert/parallel_processing_pipeline"},"next":{"title":"chain_transformations","permalink":"/keep-being-human-dev/docs/gems/image_processing/middle/chain_transformations"}}');var r=s(23420),a=s(65404);const i={},t=void 0,c={},d=[{value:"\ud83d\ude80 Offload Heavy Image Processing to Background Jobs",id:"-offload-heavy-image-processing-to-background-jobs",level:2}];function g(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-offload-heavy-image-processing-to-background-jobs",children:"\ud83d\ude80 Offload Heavy Image Processing to Background Jobs"}),"\n",(0,r.jsx)(n.p,{children:"Generating large variants synchronously can block web requests. Use ActiveJob (e.g. Sidekiq) to process in the background and cache the result for fast delivery:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/models/photo.rb\nclass Photo < ApplicationRecord\n  has_one_attached :image\n  after_commit :process_image_async, on: :create\n\n  private\n\n  def process_image_async\n    ImageProcessingJob.perform_later(id)\n  end\nend\n\n# app/jobs/image_processing_job.rb\nclass ImageProcessingJob < ApplicationJob\n  queue_as :default\n\n  def perform(photo_id)\n    photo = Photo.find(photo_id)\n    # This will generate and cache the variant\n    photo.image.variant(resize_to_limit: [1000, 1000], auto_orient: true).processed\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"In your views, the first user to hit the variant URL triggers processing; subsequent requests serve the cached file instantly."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var o=s(36672);const r={},a=o.createContext(r);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);