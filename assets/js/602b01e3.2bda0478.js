"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32204],{14655:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"rails/active_record/advanced/bulk_upsert_with_upsert_all","title":"bulk_upsert_with_upsert_all","description":"\ud83d\udd25 Bulk Upsert with upsert_all","source":"@site/docs/rails/active_record/advanced/bulk_upsert_with_upsert_all.md","sourceDirName":"rails/active_record/advanced","slug":"/rails/active_record/advanced/bulk_upsert_with_upsert_all","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/bulk_upsert_with_upsert_all","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record/advanced/bulk_upsert_with_upsert_all.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"asynchronous_querying_load_async","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/asynchronous_querying_load_async"},"next":{"title":"common_table_expressions_cte","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/common_table_expressions_cte"}}');var n=r(23420),a=r(65404);const i={},c=void 0,u={},o=[{value:"\ud83d\udd25 Bulk Upsert with <code>upsert_all</code>",id:"-bulk-upsert-with-upsert_all",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.h2,{id:"-bulk-upsert-with-upsert_all",children:["\ud83d\udd25 Bulk Upsert with ",(0,n.jsx)(t.code,{children:"upsert_all"})]}),"\n",(0,n.jsx)(t.p,{children:"Rails 6+ supports bulk upsert to efficiently insert or update multiple records in one query. This is ideal for syncing large datasets without N+1 overhead."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:'Order.upsert_all([\n  { id: 1, status: "shipped", updated_at: Time.current },\n  { id: 2, status: "pending", updated_at: Time.current }\n], unique_by: :id)\n'})}),"\n",(0,n.jsxs)(t.p,{children:["This will insert new rows or update existing ones based on the ",(0,n.jsx)(t.code,{children:":id"})," unique constraint."]})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>c});var s=r(36672);const n={},a=s.createContext(n);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);