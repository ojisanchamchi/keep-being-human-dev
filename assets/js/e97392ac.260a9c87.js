"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6970],{32341:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/middleware/expert/stale_while_revalidate_cache_middleware","title":"stale_while_revalidate_cache_middleware","description":"\u26a1 Advanced Stale-While-Revalidate Caching","source":"@site/docs/rails/middleware/expert/stale_while_revalidate_cache_middleware.md","sourceDirName":"rails/middleware/expert","slug":"/rails/middleware/expert/stale_while_revalidate_cache_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/expert/stale_while_revalidate_cache_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/expert/stale_while_revalidate_cache_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rotating_security_header_injector","permalink":"/keep-being-human-dev/docs/rails/middleware/expert/rotating_security_header_injector"},"next":{"title":"conditional_middleware_loading","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/conditional_middleware_loading"}}');var r=t(23420),d=t(65404);const l={},s=void 0,i={},c=[{value:"\u26a1 Advanced Stale-While-Revalidate Caching",id:"-advanced-stale-while-revalidate-caching",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-advanced-stale-while-revalidate-caching",children:"\u26a1 Advanced Stale-While-Revalidate Caching"}),"\n",(0,r.jsx)(a.p,{children:"Implement a reverse\u2010proxy\u2013style middleware that serves stale GET responses while asynchronously revalidating the cache. This ensures sub-second responses under load and gradually refreshes your cache in the background. Use Redis (or Memcached) for storage, spin off a separate thread for revalidation, and attach ETag headers for conditional updates."}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:"class StaleWhileRevalidate\n  def initialize(app, store:, ttl: 300)\n    @app  = app\n    @store = store\n    @ttl  = ttl\n  end\n\n  def call(env)\n    return @app.call(env) unless env['REQUEST_METHOD'] == 'GET'\n\n    cache_key = \"swrr:#{env['PATH_INFO']}\"\n    entry = @store.get(cache_key)\n\n    if entry && Time.now.to_i - entry[:fetched_at] < @ttl\n      headers = entry[:headers].merge('X-Cache' => 'HIT')\n      return [entry[:status], headers, [entry[:body]]]\n    end\n\n    if entry\n      Thread.new { revalidate(env, cache_key) }\n      headers = entry[:headers].merge('X-Cache' => 'STALE')\n      return [entry[:status], headers, [entry[:body]]]\n    end\n\n    status, headers, body = @app.call(env)\n    full_body = '' ; body.each { |chunk| full_body << chunk }\n    @store.set(cache_key, {status: status, headers: headers, body: full_body, fetched_at: Time.now.to_i}, ex: @ttl)\n    [status, headers.merge('X-Cache' => 'MISS'), [full_body]]\n  end\n\n  private\n\n  def revalidate(env, key)\n    status, headers, body = @app.call(env.dup)\n    full_body = '' ; body.each { |chunk| full_body << chunk }\n    @store.set(key, {status: status, headers: headers, body: full_body, fetched_at: Time.now.to_i}, ex: @ttl)\n  end\nend\n\n# config/application.rb\nRails.application.config.middleware.use StaleWhileRevalidate,\n  store: Redis.new(url: ENV['REDIS_URL']), ttl: 120\n"})})]})}function h(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>l,x:()=>s});var n=t(36672);const r={},d=n.createContext(r);function l(e){const a=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(d.Provider,{value:a},e.children)}}}]);