"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59438],{38857:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>p,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"gems/flipper/expert/multi_region_adapter","title":"multi_region_adapter","description":"\ud83d\udd27 Implement a Multi-Region Flipper Adapter with Fallback","source":"@site/docs/gems/flipper/expert/multi_region_adapter.md","sourceDirName":"gems/flipper/expert","slug":"/gems/flipper/expert/multi_region_adapter","permalink":"/keep-being-human-dev/docs/gems/flipper/expert/multi_region_adapter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/flipper/expert/multi_region_adapter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_instrumentation_statsd","permalink":"/keep-being-human-dev/docs/gems/flipper/expert/custom_instrumentation_statsd"},"next":{"title":"flipper_custom_user_groups","permalink":"/keep-being-human-dev/docs/gems/flipper/middle/flipper_custom_user_groups"}}');var n=t(23420),i=t(65404);const p={},l=void 0,s={},o=[{value:"\ud83d\udd27 Implement a Multi-Region Flipper Adapter with Fallback",id:"-implement-a-multi-region-flipper-adapter-with-fallback",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-implement-a-multi-region-flipper-adapter-with-fallback",children:"\ud83d\udd27 Implement a Multi-Region Flipper Adapter with Fallback"}),"\n",(0,n.jsx)(r.p,{children:"In latency-sensitive or high-availability setups with multiple Redis clusters, wrap two adapters to read from a primary region and fallback to a secondary on errors. This ensures resilience: writes go only to the primary, and reads transparently recover from failures, providing continuous feature gating across regions."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"# lib/flipper/multi_region_adapter.rb\nclass Flipper::Adapters::MultiRegion\n  def initialize(primary, fallback)\n    @primary, @fallback = primary, fallback\n  end\n\n  def add(feature, gate, thing)\n    @primary.add(feature, gate, thing)\n  rescue StandardError\n    @fallback.add(feature, gate, thing)\n  end\n\n  def remove(feature, gate, thing)\n    @primary.remove(feature, gate, thing)\n  rescue StandardError\n    @fallback.remove(feature, gate, thing)\n  end\n\n  def get(feature)\n    @primary.get(feature)\n  rescue StandardError\n    @fallback.get(feature)\n  end\n\n  def features\n    (@primary.features + @fallback.features).uniq\n  end\nend\n\n# config/initializers/flipper.rb\nrequire 'flipper/adapters/multi_region'\n\nredis_primary  = Redis.new(url: ENV['PRIMARY_REDIS'])\nredis_fallback = Redis.new(url: ENV['FALLBACK_REDIS'])\n\nprimary_adapter  = Flipper::Adapters::Redis.new(redis_primary)\nfallback_adapter = Flipper::Adapters::Redis.new(redis_fallback)\n\nFlipper.configure do |config|\n  config.adapter = Flipper::Adapters::MultiRegion.new(primary_adapter, fallback_adapter)\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>p,x:()=>l});var a=t(36672);const n={},i=a.createContext(n);function p(e){const r=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:p(e.components),a.createElement(i.Provider,{value:r},e.children)}}}]);