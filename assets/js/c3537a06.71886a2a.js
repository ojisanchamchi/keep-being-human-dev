"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79272],{44407:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"ruby/reflection/middle/dynamic_method_invocation","title":"dynamic_method_invocation","description":"\ud83d\udce8 Dynamic Invocation with send and public_send","source":"@site/docs/ruby/reflection/middle/dynamic_method_invocation.md","sourceDirName":"ruby/reflection/middle","slug":"/ruby/reflection/middle/dynamic_method_invocation","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_method_invocation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/middle/dynamic_method_invocation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_constant_lookup","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/dynamic_constant_lookup"},"next":{"title":"instance_variable_inspection","permalink":"/keep-being-human-dev/docs/ruby/reflection/middle/instance_variable_inspection"}}');var o=t(23420),c=t(65404);const d={},s=void 0,a={},r=[{value:"\ud83d\udce8 Dynamic Invocation with <code>send</code> and <code>public_send</code>",id:"-dynamic-invocation-with-send-and-public_send",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-dynamic-invocation-with-send-and-public_send",children:["\ud83d\udce8 Dynamic Invocation with ",(0,o.jsx)(n.code,{children:"send"})," and ",(0,o.jsx)(n.code,{children:"public_send"})]}),"\n",(0,o.jsxs)(n.p,{children:["Dynamically calling methods by name is powerful for implementing flexible APIs, delegates, or command patterns. Use ",(0,o.jsx)(n.code,{children:"public_send"})," to avoid bypassing visibility constraints, and fall back to ",(0,o.jsx)(n.code,{children:"send"})," only when you must access private or protected methods. Always check ",(0,o.jsx)(n.code,{children:"respond_to?"})," to handle missing methods gracefully."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class Printer\n  def format(text); "<<#{text}>>"; end\n  private\ndef secret; "42"; end\nend\n\np = Printer.new\nif p.respond_to?(:format)\n  puts p.public_send(:format, "Hello")  #=> <<Hello>>\nend\n\n# Access private method only if you really need to\nputs p.send(:secret)  #=> "42"\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var i=t(36672);const o={},c=i.createContext(o);function d(e){const n=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);