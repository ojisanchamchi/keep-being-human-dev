"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75029],{30064:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/fibers/expert/fiber_lazy_enumerator","title":"fiber_lazy_enumerator","description":"\ud83d\udd04 Implementing Generators and Lazy Enumerators","source":"@site/docs/ruby/fibers/expert/fiber_lazy_enumerator.md","sourceDirName":"ruby/fibers/expert","slug":"/ruby/fibers/expert/fiber_lazy_enumerator","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/fiber_lazy_enumerator","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/expert/fiber_lazy_enumerator.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"cooperative_fiber_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/cooperative_fiber_scheduler"},"next":{"title":"fiber_arguments","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_arguments"}}');var a=r(23420),i=r(65404);const s={},o=void 0,u={},c=[{value:"\ud83d\udd04 Implementing Generators and Lazy Enumerators",id:"-implementing-generators-and-lazy-enumerators",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-implementing-generators-and-lazy-enumerators",children:"\ud83d\udd04 Implementing Generators and Lazy Enumerators"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"Fiber"})," to build custom generators that yield sequence values on demand. Wrapping your Fiber in an ",(0,a.jsx)(n.code,{children:"Enumerator"})," gives you built\u2011in lazy iteration, backpressure control, and composability with Ruby\u2019s Enumerable API."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"def fibonacci_generator\n  Fiber.new do\n    a, b = 0, 1\n    loop do\n      Fiber.yield a\n      a, b = b, a + b\n    end\n  end\nend\n\nfib = Enumerator.new do |yielder|\n  gen = fibonacci_generator\n  loop { yielder << gen.resume }\nend\n\n# Lazy take first 10 fib numbers\niusages = fib.take(10)\nputs usages.inspect # => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(36672);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);