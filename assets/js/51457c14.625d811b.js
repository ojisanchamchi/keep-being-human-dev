"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86021],{46175:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>u,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"gems/counter_culture/advanced/weighted_counter_updates","title":"weighted_counter_updates","description":"\u2696\ufe0f Weighted Counter Updates with delta_magnitude","source":"@site/docs/gems/counter_culture/advanced/weighted_counter_updates.md","sourceDirName":"gems/counter_culture/advanced","slug":"/gems/counter_culture/advanced/weighted_counter_updates","permalink":"/keep-being-human-dev/docs/gems/counter_culture/advanced/weighted_counter_updates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/advanced/weighted_counter_updates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_conditional_counters","permalink":"/keep-being-human-dev/docs/gems/counter_culture/advanced/dynamic_conditional_counters"},"next":{"title":"counter_culture_basic_usage","permalink":"/keep-being-human-dev/docs/gems/counter_culture/beginner/counter_culture_basic_usage"}}');var c=n(23420),d=n(65404);const u={},o=void 0,a={},i=[{value:"\u2696\ufe0f Weighted Counter Updates with <code>delta_magnitude</code>",id:"\ufe0f-weighted-counter-updates-with-delta_magnitude",level:2}];function s(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h2,{id:"\ufe0f-weighted-counter-updates-with-delta_magnitude",children:["\u2696\ufe0f Weighted Counter Updates with ",(0,c.jsx)(t.code,{children:"delta_magnitude"})]}),"\n",(0,c.jsxs)(t.p,{children:["By default, CounterCulture adds or subtracts one per record change. For scenarios where you need to sum a numeric field (e.g., quantity or price), use the ",(0,c.jsx)(t.code,{children:"delta_magnitude"})," option. This computes the delta dynamically on create, update, and destroy actions."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"# app/models/line_item.rb\nclass LineItem < ApplicationRecord\n  belongs_to :order\n\n  # Instead of +1, add the quantity of each line item to order.items_count\n  counter_culture :order,\n    column_name: 'items_count',\n    delta_magnitude: ->(line_item) { line_item.quantity }\nend\n\n# Run backfill to correct existing orders\nLineItem.counter_culture_fix_counts\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Here, whenever a ",(0,c.jsx)(t.code,{children:"LineItem"})," is created, updated, or destroyed, the ",(0,c.jsx)(t.code,{children:"order.items_count"})," will change by the line item's ",(0,c.jsx)(t.code,{children:"quantity"}),", accurately reflecting total items rather than just record count."]})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(s,{...e})}):s(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>u,x:()=>o});var r=n(36672);const c={},d=r.createContext(c);function u(e){const t=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:u(e.components),r.createElement(d.Provider,{value:t},e.children)}}}]);