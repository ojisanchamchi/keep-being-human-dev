"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90922],{65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(36672);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}},92544:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"gems/httparty/expert/httparty_persistent_connections","title":"httparty_persistent_connections","description":"\ud83d\udd25 Leveraging Persistent HTTP Connections","source":"@site/docs/gems/httparty/expert/httparty_persistent_connections.md","sourceDirName":"gems/httparty/expert","slug":"/gems/httparty/expert/httparty_persistent_connections","permalink":"/keep-being-human-dev/docs/gems/httparty/expert/httparty_persistent_connections","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/httparty/expert/httparty_persistent_connections.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"query_params_usage","permalink":"/keep-being-human-dev/docs/gems/httparty/beginner/query_params_usage"},"next":{"title":"httparty_typhoeus_adapter","permalink":"/keep-being-human-dev/docs/gems/httparty/expert/httparty_typhoeus_adapter"}}');var r=n(23420),o=n(65404);const i={},a=void 0,c={},p=[{value:"\ud83d\udd25 Leveraging Persistent HTTP Connections",id:"-leveraging-persistent-http-connections",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-leveraging-persistent-http-connections",children:"\ud83d\udd25 Leveraging Persistent HTTP Connections"}),"\n",(0,r.jsxs)(t.p,{children:["By default, HTTParty opens a new TCP connection for each request. For high\u2011throughput services, you can enable TCP keep\u2011alive and connection pooling to reduce latency and resource usage. Here\u2019s how to configure a persistent connection pool using the ",(0,r.jsx)(t.code,{children:"persistent"})," option:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'httparty'\n\nclass ApiClient\n  include HTTParty\n  base_uri 'https://api.example.com'\n\n  # Enable keep\u2011alive with a pool of 5 connections and 30s idle timeout\n  default_options.merge!(persistent: { pool_size: 5, idle_timeout: 30 })\n\n  def fetch_user(id)\n    self.class.get(\"/users/#{id}\")\n  end\nend\n\nclient = ApiClient.new\n100.times do |i|\n  Thread.new { puts client.fetch_user(i).code }\nend.join\n"})}),"\n",(0,r.jsx)(t.p,{children:"This setup reuses up to 5 live connections. You\u2019ll see dramatic improvements in throughput, especially under concurrent load."})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);