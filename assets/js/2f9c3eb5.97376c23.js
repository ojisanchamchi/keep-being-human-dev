"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43948],{65404:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>t});var i=n(36672);const o={},a=i.createContext(o);function r(e){const s=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:s},e.children)}},97367:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>_,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rails/sessions_and_cookies/advanced/json_hybrid_session_serializer","title":"json_hybrid_session_serializer","description":"\ud83d\udee0\ufe0f Use Hybrid JSON Session Serializer for Safe Migration","source":"@site/docs/rails/sessions_and_cookies/advanced/json_hybrid_session_serializer.md","sourceDirName":"rails/sessions_and_cookies/advanced","slug":"/rails/sessions_and_cookies/advanced/json_hybrid_session_serializer","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/advanced/json_hybrid_session_serializer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/sessions_and_cookies/advanced/json_hybrid_session_serializer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"x_frame_options","permalink":"/keep-being-human-dev/docs/rails/security/middle/x_frame_options"},"next":{"title":"rotate_cookie_encryption_keys","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys"}}');var o=n(23420),a=n(65404);const r={},t=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Use Hybrid JSON Session Serializer for Safe Migration",id:"\ufe0f-use-hybrid-json-session-serializer-for-safe-migration",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"\ufe0f-use-hybrid-json-session-serializer-for-safe-migration",children:"\ud83d\udee0\ufe0f Use Hybrid JSON Session Serializer for Safe Migration"}),"\n",(0,o.jsxs)(s.p,{children:["Switching your session serializer from ",(0,o.jsx)(s.code,{children:":marshal"})," to ",(0,o.jsx)(s.code,{children:":json"})," hardens against remote code injection but may break existing sessions. Using the ",(0,o.jsx)(s.code,{children:":hybrid"})," mode lets Rails read old Marshal blobs and write new JSON payloads, easing a zero-downtime rollout."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ruby",children:"# config/initializers/session_serializer.rb\nRails.application.config.action_dispatch.cookies_serializer = :hybrid\n# Now Rails will:\n# 1. Read both Marshal and JSON sessions\n# 2. Always write JSON for new sessions\n\n# Example of storing complex data:\nclass Cart\n  attr_accessor :items\n  def initialize(items = [])\n    @items = items\n  end\n  def as_json(*)\n    { items: items }\n  end\nend\n\n# In a controller:\ndef add_to_cart\n  session[:cart] ||= Cart.new\n  session[:cart].items << params[:item_id]\nend\n\ndef show_cart\n  @cart = session[:cart] # Rails auto-deserializes JSON back to Hash\nend\n"})})]})}function _(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);