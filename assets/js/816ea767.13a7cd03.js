"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[70896],{65404:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>c});var n=t(36672);const i={},a=n.createContext(i);function o(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:r},e.children)}},87300:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"ruby/methods/expert/currying_partial_application","title":"currying_partial_application","description":"\ud83c\udf9b\ufe0f Currying and Partial Application with Method#curry","source":"@site/docs/ruby/methods/expert/currying_partial_application.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/currying_partial_application","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/currying_partial_application","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/currying_partial_application.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_blocks","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/using_blocks"},"next":{"title":"delegation_with_forwardable","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/delegation_with_forwardable"}}');var i=t(23420),a=t(65404);const o={},c=void 0,s={},l=[{value:"\ud83c\udf9b\ufe0f Currying and Partial Application with Method#curry",id:"\ufe0f-currying-and-partial-application-with-methodcurry",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"\ufe0f-currying-and-partial-application-with-methodcurry",children:"\ud83c\udf9b\ufe0f Currying and Partial Application with Method#curry"}),"\n",(0,i.jsxs)(r.p,{children:["Convert methods to curried ",(0,i.jsx)(r.code,{children:"Proc"})," objects for flexible partial application and pipeline-style composition of operations. This is useful for building higher-order functions and reusable processing chains."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"def multiply(a, b, c)\n  a * b * c\nend\n\ncurried = method(:multiply).curry\npartial = curried.call(2, 3)\nputs partial.call(4)  # => 24\n"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:"adder = ->(x, y) { x + y }.curry\nadd_five = adder.call(5)\nputs add_five.call(10)  # => 15\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);