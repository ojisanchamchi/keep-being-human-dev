"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86691],{65404:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var t=n(36672);const s={},c=t.createContext(s);function r(e){const a=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(c.Provider,{value:a},e.children)}},90811:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"gems/acts-as-taggable-on/expert/advanced_search_and_caching","title":"advanced_search_and_caching","description":"\u26a1 Advanced Tag Search and Caching Strategies","source":"@site/docs/gems/acts-as-taggable-on/expert/advanced_search_and_caching.md","sourceDirName":"gems/acts-as-taggable-on/expert","slug":"/gems/acts-as-taggable-on/expert/advanced_search_and_caching","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/expert/advanced_search_and_caching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/acts-as-taggable-on/expert/advanced_search_and_caching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"setup_gem","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/beginner/setup_gem"},"next":{"title":"hierarchical_tags_with_ancestry","permalink":"/keep-being-human-dev/docs/gems/acts-as-taggable-on/expert/hierarchical_tags_with_ancestry"}}');var s=n(23420),c=n(65404);const r={},i=void 0,d={},o=[{value:"\u26a1 Advanced Tag Search and Caching Strategies",id:"-advanced-tag-search-and-caching-strategies",level:2}];function g(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-advanced-tag-search-and-caching-strategies",children:"\u26a1 Advanced Tag Search and Caching Strategies"}),"\n",(0,s.jsx)(a.p,{children:"For high-traffic applications, optimize tag lookups by combining raw SQL search with fragment caching. This reduces N+1 queries and speeds up tag-heavy pages."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'# In your model, define a custom scope using PostgreSQL ILIKE for partial matches\nclass Article < ApplicationRecord\n  acts_as_taggable_on :topics\n\n  scope :search_by_tag, ->(query) {\n    joins(:tags).where("tags.name ILIKE ?", "%#{sanitize_sql_like(query)}%")\n  }\nend\n\n# In your controller, cache expensive tag index\nclass ArticlesController < ApplicationController\n  def index\n    cache_key = "articles/tag_index/#{params[:q]}"\n    @articles = Rails.cache.fetch(cache_key, expires_in: 30.minutes) do\n      if params[:q].present?\n        Article.search_by_tag(params[:q]).to_a\n      else\n        Article.all.to_a\n      end\n    end\n  end\nend\n'})}),"\n",(0,s.jsx)(a.p,{children:"Additionally, use a background job to prewarm caches after tag updates:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"class Tagging < ApplicationRecord\n  after_commit { TagCacheWarmer.perform_later(self.taggable_type) }\nend\n"})}),"\n",(0,s.jsx)(a.p,{children:"This ensures your tag-based listings remain snappy even under heavy load."})]})}function l(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);