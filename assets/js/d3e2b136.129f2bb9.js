"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80277],{59373:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/syntax/middle/dig_method","title":"dig_method","description":"\ud83d\udd73\ufe0f Accessing Nested Data with dig","source":"@site/docs/ruby/syntax/middle/dig_method.md","sourceDirName":"ruby/syntax/middle","slug":"/ruby/syntax/middle/dig_method","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/dig_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/middle/dig_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"destructuring_assignment","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/destructuring_assignment"},"next":{"title":"frozen_string_literal","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/frozen_string_literal"}}');var i=t(23420),d=t(65404);const r={},a=void 0,c={},o=[{value:"\ud83d\udd73\ufe0f Accessing Nested Data with <code>dig</code>",id:"\ufe0f-accessing-nested-data-with-dig",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"\ufe0f-accessing-nested-data-with-dig",children:["\ud83d\udd73\ufe0f Accessing Nested Data with ",(0,i.jsx)(n.code,{children:"dig"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"dig"})," allows safe retrieval of deeply nested values from hashes and arrays without intermediate ",(0,i.jsx)(n.code,{children:"nil"})," checks. It returns ",(0,i.jsx)(n.code,{children:"nil"})," if any level is missing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'config = { db: { host: "localhost", credentials: { user: "admin" } } }\n# Without dig:\nuser = config[:db] && config[:db][:credentials] && config[:db][:credentials][:user]\n\n# With dig:\nuser = config.dig(:db, :credentials, :user)\n# => "admin"\n\n# If a key is missing:\nconfig.dig(:db, :missing, :key) #=> nil\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(36672);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);