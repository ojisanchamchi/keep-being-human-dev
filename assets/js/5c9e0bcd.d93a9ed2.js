"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23486],{28860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/caching/expert/race_condition_ttl","title":"race_condition_ttl","description":"\ud83d\udd25 Mitigate Cache Stampede with :raceconditionttl","source":"@site/docs/rails/caching/expert/race_condition_ttl.md","sourceDirName":"rails/caching/expert","slug":"/rails/caching/expert/race_condition_ttl","permalink":"/keep-being-human-dev/docs/rails/caching/expert/race_condition_ttl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/expert/race_condition_ttl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"localcache_with_remote_store","permalink":"/keep-being-human-dev/docs/rails/caching/expert/localcache_with_remote_store"},"next":{"title":"raw_store_bypass_serialization","permalink":"/keep-being-human-dev/docs/rails/caching/expert/raw_store_bypass_serialization"}}');var c=n(23420),a=n(65404);const o={},r=void 0,s={},d=[{value:"\ud83d\udd25 Mitigate Cache Stampede with <code>:race_condition_ttl</code>",id:"-mitigate-cache-stampede-with-race_condition_ttl",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h2,{id:"-mitigate-cache-stampede-with-race_condition_ttl",children:["\ud83d\udd25 Mitigate Cache Stampede with ",(0,c.jsx)(t.code,{children:":race_condition_ttl"})]}),"\n",(0,c.jsxs)(t.p,{children:["When multiple processes miss the cache simultaneously, you risk a thundering herd hitting your database. Rails 5.2+ introduces the ",(0,c.jsx)(t.code,{children:":race_condition_ttl"})," option to serve stale data for a short window while one process regenerates fresh data in the background. This balances consistency and performance under high load."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:'# Return stale value for up to 10s while a single process recomputes\nRails.cache.fetch("expensive_report", expires_in: 5.minutes, race_condition_ttl: 10.seconds) do\n  ExpensiveService.generate_report\nend\n'})}),"\n",(0,c.jsxs)(t.p,{children:["You can also hook into ",(0,c.jsx)(t.code,{children:"ActiveSupport::Notifications"})," to log or enqueue background jobs when regeneration begins."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(36672);const c={},a=i.createContext(c);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);