"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75509],{2958:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/arrays/middle/dig_nested_arrays","title":"dig_nested_arrays","description":"\ud83d\udd0d Using dig to Safely Access Nested Arrays","source":"@site/docs/ruby/arrays/middle/dig_nested_arrays.md","sourceDirName":"ruby/arrays/middle","slug":"/ruby/arrays/middle/dig_nested_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/dig_nested_arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/middle/dig_nested_arrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"destructuring_assignment","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/destructuring_assignment"},"next":{"title":"lazy_enumerators","permalink":"/keep-being-human-dev/docs/ruby/arrays/middle/lazy_enumerators"}}');var t=r(23420),d=r(65404);const a={},i=void 0,o={},c=[{value:"\ud83d\udd0d Using <code>dig</code> to Safely Access Nested Arrays",id:"-using-dig-to-safely-access-nested-arrays",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h2,{id:"-using-dig-to-safely-access-nested-arrays",children:["\ud83d\udd0d Using ",(0,t.jsx)(s.code,{children:"dig"})," to Safely Access Nested Arrays"]}),"\n",(0,t.jsxs)(s.p,{children:["Ruby\u2019s ",(0,t.jsx)(s.code,{children:"dig"})," method lets you fetch deeply nested elements without chaining ",(0,t.jsx)(s.code,{children:"[]"})," calls or worrying about ",(0,t.jsx)(s.code,{children:"nil"})," errors. This simplifies traversing multi-dimensional arrays or JSON-like structures."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"nested = [[{id: 1}, {id: 2}], [{id: 3}]]\n# Without dig:\nval = nested[0] && nested[0][1] && nested[0][1][:id]\n# With dig:\nval = nested.dig(0, 1, :id)  # => 2\n"})})]})}function l(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,s,r)=>{r.d(s,{R:()=>a,x:()=>i});var n=r(36672);const t={},d=n.createContext(t);function a(e){const s=n.useContext(d);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(d.Provider,{value:s},e.children)}}}]);