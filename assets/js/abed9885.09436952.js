"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92187],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var o=r(36672);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}},96402:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>g,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/logging/expert/async_buffered_logging","title":"async_buffered_logging","description":"\ud83d\ude80 Apply Asynchronous Buffered Logging to Prevent I/O Bottlenecks","source":"@site/docs/rails/logging/expert/async_buffered_logging.md","sourceDirName":"rails/logging/expert","slug":"/rails/logging/expert/async_buffered_logging","permalink":"/keep-being-human-dev/docs/rails/logging/expert/async_buffered_logging","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/logging/expert/async_buffered_logging.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tagged_logging","permalink":"/keep-being-human-dev/docs/rails/logging/beginner/tagged_logging"},"next":{"title":"custom_active_support_logsubscriber","permalink":"/keep-being-human-dev/docs/rails/logging/expert/custom_active_support_logsubscriber"}}');var t=r(23420),s=r(65404);const i={},a=void 0,g={},l=[{value:"\ud83d\ude80 Apply Asynchronous Buffered Logging to Prevent I/O Bottlenecks",id:"-apply-asynchronous-buffered-logging-to-prevent-io-bottlenecks",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-apply-asynchronous-buffered-logging-to-prevent-io-bottlenecks",children:"\ud83d\ude80 Apply Asynchronous Buffered Logging to Prevent I/O Bottlenecks"}),"\n",(0,t.jsxs)(n.p,{children:["Use a background thread or a gem like ",(0,t.jsx)(n.code,{children:"logging-rails"})," with a buffer to batch and flush log events, reducing sync I/O overhead. Configure thresholds (size or time) and fallback to sync mode on errors."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'concurrent-ruby'\n\n# config/initializers/async_logger.rb\nbuffer = Concurrent::Array.new\nthread = Thread.new do\n  loop do\n    if buffer.size >= 50\n      Rails.logger.info(buffer.shift(50))\n    end\n    sleep 1\n  end\nend\n\nmodule AsyncLog\n  def info(message, **meta)\n    buffer << { message: message, meta: meta, level: :info }\n  end\nend\n\nRails.logger.extend(AsyncLog)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# anywhere in the app\ndef notify_service\n  Rails.logger.info('external_service.notify', payload: params)\nend\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);