"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39578],{65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(36672);const o={},d=i.createContext(o);function a(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(d.Provider,{value:n},e.children)}},92802:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"ruby/oop/advanced/dynamic_method_definition","title":"dynamic_method_definition","description":"\ud83c\udf00 Dynamic Method Definition with define_method","source":"@site/docs/ruby/oop/advanced/dynamic_method_definition.md","sourceDirName":"ruby/oop/advanced","slug":"/ruby/oop/advanced/dynamic_method_definition","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/dynamic_method_definition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/advanced/dynamic_method_definition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"class_eval_vs_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/class_eval_vs_instance_eval"},"next":{"title":"eigenclass_for_class_macros","permalink":"/keep-being-human-dev/docs/ruby/oop/advanced/eigenclass_for_class_macros"}}');var o=t(23420),d=t(65404);const a={},s=void 0,c={},r=[{value:"\ud83c\udf00 Dynamic Method Definition with <code>define_method</code>",id:"-dynamic-method-definition-with-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h2,{id:"-dynamic-method-definition-with-define_method",children:["\ud83c\udf00 Dynamic Method Definition with ",(0,o.jsx)(n.code,{children:"define_method"})]}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"define_method"})," in combination with metaprogramming to DRY up repetitive method definitions. This pattern is powerful when building attribute-based behaviors dynamically."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'class Settings\n  %i[timeout retries verbose].each do |attr|\n    define_method(attr) do\n      @config ||= {}\n      @config[attr]\n    end\n\n    define_method("#{attr}=") do |value|\n      @config ||= {}\n      @config[attr] = value\n    end\n  end\nend\n\ns = Settings.new\ns.timeout = 30\nputs s.timeout  # => 30\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);