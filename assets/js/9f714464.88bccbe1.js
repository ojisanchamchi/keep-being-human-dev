"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25108],{3434:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"gems/vcr/beginner/basic_cassette_usage","title":"basic_cassette_usage","description":"\ud83c\udf9e\ufe0f Record and Replay HTTP Interactions","source":"@site/docs/gems/vcr/beginner/basic_cassette_usage.md","sourceDirName":"gems/vcr/beginner","slug":"/gems/vcr/beginner/basic_cassette_usage","permalink":"/keep-being-human-dev/docs/gems/vcr/beginner/basic_cassette_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/vcr/beginner/basic_cassette_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"vcr_custom_request_matching","permalink":"/keep-being-human-dev/docs/gems/vcr/advanced/vcr_custom_request_matching"},"next":{"title":"install_and_configure_vcr","permalink":"/keep-being-human-dev/docs/gems/vcr/beginner/install_and_configure_vcr"}}');var r=s(23420),a=s(65404);const c={},o=void 0,i={},d=[{value:"\ud83c\udf9e\ufe0f Record and Replay HTTP Interactions",id:"\ufe0f-record-and-replay-http-interactions",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"\ufe0f-record-and-replay-http-interactions",children:"\ud83c\udf9e\ufe0f Record and Replay HTTP Interactions"}),"\n",(0,r.jsxs)(t.p,{children:["Use VCR cassettes to wrap code that makes HTTP requests so responses are recorded on first run and replayed thereafter. You can use RSpec metadata or explicitly call ",(0,r.jsx)(t.code,{children:"VCR.use_cassette"}),". This ensures your tests stay fast and deterministic."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# Using RSpec metadata (requires config.configure_rspec_metadata!)\ndescribe 'External API fetch', :vcr do\n  it 'retrieves user info' do\n    response = Net::HTTP.get(URI('https://api.example.com/user/1'))\n    expect(response).to include('username')\n  end\nend\n\n# Or explicitly:\nVCR.use_cassette('user_fetch') do\n  response = HTTP.get('https://api.example.com/user/1')\n  puts response.to_s\nend\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>c,x:()=>o});var n=s(36672);const r={},a=n.createContext(r);function c(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);