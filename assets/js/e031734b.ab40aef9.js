"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33672],{46419:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"rails/configuration/expert/railtie_initialization_hooks","title":"railtie_initialization_hooks","description":"\ud83d\ude80 Hook into Railtie Initialization Phases for Granular Configuration","source":"@site/docs/rails/configuration/expert/railtie_initialization_hooks.md","sourceDirName":"rails/configuration/expert","slug":"/rails/configuration/expert/railtie_initialization_hooks","permalink":"/keep-being-human-dev/docs/rails/configuration/expert/railtie_initialization_hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/configuration/expert/railtie_initialization_hooks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_env_encrypted_credentials","permalink":"/keep-being-human-dev/docs/rails/configuration/expert/multi_env_encrypted_credentials"},"next":{"title":"custom_app_config","permalink":"/keep-being-human-dev/docs/rails/configuration/middle/custom_app_config"}}');var t=n(23420),a=n(65404);const r={},s=void 0,l={},c=[{value:"\ud83d\ude80 Hook into Railtie Initialization Phases for Granular Configuration",id:"-hook-into-railtie-initialization-phases-for-granular-configuration",level:2}];function d(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-hook-into-railtie-initialization-phases-for-granular-configuration",children:"\ud83d\ude80 Hook into Railtie Initialization Phases for Granular Configuration"}),"\n",(0,t.jsxs)(i.p,{children:["For ultimate control, inject configuration or patch framework components by tapping into ",(0,t.jsx)(i.code,{children:"before_configuration"}),", ",(0,t.jsx)(i.code,{children:"before_eager_load"}),", and ",(0,t.jsx)(i.code,{children:"after_initialize"})," in your ",(0,t.jsx)(i.code,{children:"Rails::Application"})," or custom ",(0,t.jsx)(i.code,{children:"Railtie"}),". This lets you override ENV defaults, adjust autoload paths, or monkey\u2011patch gems before they boot."]}),"\n",(0,t.jsxs)(i.p,{children:["In ",(0,t.jsx)(i.code,{children:"config/application.rb"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:"module MyApp\n  class Application < Rails::Application\n    # 1) Modify ENV or load external secrets before any config is read\n    config.before_configuration do\n      ENV['API_TIMEOUT'] ||= '15'\n    end\n\n    # 2) Adjust eager_load or autoload paths before classes are loaded\n    config.before_eager_load do\n      config.autoload_paths << Rails.root.join('lib', 'patches')\n    end\n\n    # 3) Extend or patch behavior after full initialization\n    config.after_initialize do\n      ActiveSupport::Notifications.subscribe('sql.active_record') do |*args|\n        event = ActiveSupport::Notifications::Event.new(*args)\n        Rails.logger.debug \"SQL (#{event.duration.round(1)}ms): #{event.payload[:sql]}\"\n      end\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>s});var o=n(36672);const t={},a=o.createContext(t);function r(e){const i=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(a.Provider,{value:i},e.children)}}}]);