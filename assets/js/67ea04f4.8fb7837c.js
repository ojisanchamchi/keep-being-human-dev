"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28270],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(36672);const c={},r=t.createContext(c);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},65470:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"rails/active_support/advanced/concern_modularization","title":"concern_modularization","description":"\ud83d\udee0\ufe0f Modularize Shared Behavior with ActiveSupport::Concern","source":"@site/docs/rails/active_support/advanced/concern_modularization.md","sourceDirName":"rails/active_support/advanced","slug":"/rails/active_support/advanced/concern_modularization","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/concern_modularization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/advanced/concern_modularization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_cache_fetch_multi","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/advanced_cache_fetch_multi"},"next":{"title":"custom_inflections","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/custom_inflections"}}');var c=a(23420),r=a(65404);const i={},o=void 0,d={},s=[{value:"\ud83d\udee0\ufe0f Modularize Shared Behavior with ActiveSupport::Concern",id:"\ufe0f-modularize-shared-behavior-with-activesupportconcern",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\ufe0f-modularize-shared-behavior-with-activesupportconcern",children:"\ud83d\udee0\ufe0f Modularize Shared Behavior with ActiveSupport::Concern"}),"\n",(0,c.jsx)(n.p,{children:"ActiveSupport::Concern streamlines mixins by cleanly separating class methods, instance methods, and callbacks. You can bundle scopes, validations, or lifecycle hooks and include them in multiple models without polluting the global namespace. This keeps your code DRY and well organized."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# app/models/concerns/archivable.rb\nmodule Archivable\n  extend ActiveSupport::Concern\n\n  included do\n    scope :archived, -> { where.not(archived_at: nil) }\n    before_save :set_archived_at, if: :archived_changed?\n  end\n\n  def archive!\n    update!(archived: true)\n  end\n\n  class_methods do\n    def purge_archived\n      archived.delete_all\n    end\n  end\n\n  private\n\n  def set_archived_at\n    self.archived_at = Time.current\n  end\nend\n\n# Use in a model\nclass Document < ApplicationRecord\n  include Archivable\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);