"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[98207],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(36672);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},94056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"ruby/metaprogramming/middle/alias_method_wrapping","title":"alias_method_wrapping","description":"\ud83d\udd04 Wrapping Methods with alias_method","source":"@site/docs/ruby/metaprogramming/middle/alias_method_wrapping.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/alias_method_wrapping","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/alias_method_wrapping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/alias_method_wrapping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unbound_method_rebinding","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/unbound_method_rebinding"},"next":{"title":"ar_dynamic_scopes","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/ar_dynamic_scopes"}}');var a=t(23420),o=t(65404);const r={},s=void 0,d={},m=[{value:"\ud83d\udd04 Wrapping Methods with alias_method",id:"-wrapping-methods-with-alias_method",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-wrapping-methods-with-alias_method",children:"\ud83d\udd04 Wrapping Methods with alias_method"}),"\n",(0,a.jsxs)(n.p,{children:["Use ",(0,a.jsx)(n.code,{children:"alias_method"})," to wrap existing methods without monkey-patching. This gives you a safe way to add behavior before or after the original implementation."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'class Notifier\n  def notify(user)\n    # original notification logic\n    puts "Notifying \\\\#{user}"\n  end\n\n  alias_method :original_notify, :notify\n\n  def notify(user)\n    puts "[LOG] About to notify"\n    original_notify(user)\n    puts "[LOG] Notification sent"\n  end\nend\n\nNotifier.new.notify(\'Alice\')\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);