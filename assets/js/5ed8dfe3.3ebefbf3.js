"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80967],{1828:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/beginner/proc_vs_lambda_argument_handling","title":"proc_vs_lambda_argument_handling","description":"\ud83c\udfaf Proc vs Lambda: Argument Handling","source":"@site/docs/ruby/procs_and_lambdas/beginner/proc_vs_lambda_argument_handling.md","sourceDirName":"ruby/procs_and_lambdas/beginner","slug":"/ruby/procs_and_lambdas/beginner/proc_vs_lambda_argument_handling","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/proc_vs_lambda_argument_handling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/beginner/proc_vs_lambda_argument_handling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"passing_proc_to_method","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/passing_proc_to_method"},"next":{"title":"storing_procs_in_collections","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/storing_procs_in_collections"}}');var s=a(23420),t=a(65404);const o={},c=void 0,i={},d=[{value:"\ud83c\udfaf Proc vs Lambda: Argument Handling",id:"-proc-vs-lambda-argument-handling",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-proc-vs-lambda-argument-handling",children:"\ud83c\udfaf Proc vs Lambda: Argument Handling"}),"\n",(0,s.jsxs)(n.p,{children:["Procs are lenient with arguments (extra ones are ignored, missing ones are ",(0,s.jsx)(n.code,{children:"nil"}),"), while lambdas enforce the exact number of parameters. Choose lambdas when you want strict checks and procs when you need flexibility."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'flexible = Proc.new { |a, b| puts "a=#{a}, b=#{b}" }\nstrict   = ->(a, b) { puts "a=#{a}, b=#{b}" }\n\nflexible.call(1)    # => a=1, b=\n# strict.call(1)    # ArgumentError: wrong number of arguments (given 1, expected 2)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>c});var r=a(36672);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);