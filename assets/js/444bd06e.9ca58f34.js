"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58046],{65404:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>d});var o=i(36672);const a={},r=o.createContext(a);function t(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),o.createElement(r.Provider,{value:n},e.children)}},94949:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"rails/configuration/advanced/conditional_middleware_configuration","title":"conditional_middleware_configuration","description":"\ud83d\udd0c Conditional Middleware Configuration Based on Environment or Envvars","source":"@site/docs/rails/configuration/advanced/conditional_middleware_configuration.md","sourceDirName":"rails/configuration/advanced","slug":"/rails/configuration/advanced/conditional_middleware_configuration","permalink":"/keep-being-human-dev/docs/rails/configuration/advanced/conditional_middleware_configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/configuration/advanced/conditional_middleware_configuration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rails_runner_scripts","permalink":"/keep-being-human-dev/docs/rails/command_line/middle/rails_runner_scripts"},"next":{"title":"config_for_nested_yaml","permalink":"/keep-being-human-dev/docs/rails/configuration/advanced/config_for_nested_yaml"}}');var a=i(23420),r=i(65404);const t={},d=void 0,c={},s=[{value:"\ud83d\udd0c Conditional Middleware Configuration Based on Environment or Envvars",id:"-conditional-middleware-configuration-based-on-environment-or-envvars",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-conditional-middleware-configuration-based-on-environment-or-envvars",children:"\ud83d\udd0c Conditional Middleware Configuration Based on Environment or Envvars"}),"\n",(0,a.jsxs)(n.p,{children:["Customize your middleware stack dynamically to optimize performance or enable debugging only when needed. By checking ",(0,a.jsx)(n.code,{children:"Rails.env"})," or ",(0,a.jsx)(n.code,{children:"ENV"})," inside ",(0,a.jsx)(n.code,{children:"config/application.rb"}),", you can insert, replace, or remove middleware without manual edits per environment file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    # Always use Rack::Attack in production\n    if Rails.env.production?\n      config.middleware.use Rack::Attack\n    end\n\n    # Use a custom logger middleware when DEBUG_MODE is enabled\n    if ENV["DEBUG_MODE"] == "true"\n      require_relative "../lib/middleware/request_logger"\n      config.middleware.insert_before 0, Middleware::RequestLogger,\n        headers: ENV.fetch("LOG_HEADERS", "User-Agent,Accept").split(",")\n    end\n\n    # Remove Rack::Lock in multi-threaded env\n    unless config.allow_concurrency\n      config.middleware.delete Rack::Lock\n    end\n  end\nend\n'})}),"\n",(0,a.jsx)(n.p,{children:"This pattern helps keep your middleware configuration DRY and expressive, scaling seamlessly across staging, CI, and production."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);