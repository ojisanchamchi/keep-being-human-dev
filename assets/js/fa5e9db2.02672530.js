"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27761],{44995:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rails/api_mode/advanced/header_based_api_versioning","title":"header_based_api_versioning","description":"\ud83d\udce6 Header\u2011Based API Versioning","source":"@site/docs/rails/api_mode/advanced/header_based_api_versioning.md","sourceDirName":"rails/api_mode/advanced","slug":"/rails/api_mode/advanced/header_based_api_versioning","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/header_based_api_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/api_mode/advanced/header_based_api_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_rack_middleware_injection","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/custom_rack_middleware_injection"},"next":{"title":"http_caching_etags_conditional_get","permalink":"/keep-being-human-dev/docs/rails/api_mode/advanced/http_caching_etags_conditional_get"}}');var i=a(23420),t=a(65404);const r={},o=void 0,d={},c=[{value:"\ud83d\udce6 Header\u2011Based API Versioning",id:"-headerbased-api-versioning",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-headerbased-api-versioning",children:"\ud83d\udce6 Header\u2011Based API Versioning"}),"\n",(0,i.jsxs)(n.p,{children:["For non\u2011breaking evolution, isolate versions via custom route constraints that parse ",(0,i.jsx)(n.code,{children:"Accept"})," headers. Define a constraint class and then scope your routes by version. This keeps controllers clean and allows clients to upgrade seamlessly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# lib/api_constraints.rb\nclass ApiConstraints\n  def initialize(options)\n    @version = options[:version]\n    @default = options[:default]\n  end\n\n  def matches?(req)\n    header = req.headers['Accept']\n    if header&.include?(\"application/vnd.myapp.v#{@version}+json\")\n      true\n    else\n      @default\n    end\n  end\nend\n\n# config/routes.rb\nRails.application.routes.draw do\n  namespace :api, defaults: { format: :json } do\n    scope module: :v1, constraints: ApiConstraints.new(version: 1, default: true) do\n      resources :articles\n    end\n\n    scope module: :v2, constraints: ApiConstraints.new(version: 2) do\n      resources :articles\n    end\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var s=a(36672);const i={},t=s.createContext(i);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);