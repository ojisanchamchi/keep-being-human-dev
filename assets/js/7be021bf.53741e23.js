"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71960],{46186:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"sql/postgresql/advanced/materialized_view_concurrent_refresh","title":"materialized_view_concurrent_refresh","description":"\ud83d\udee0\ufe0f Materialized Views with Concurrent Refresh","source":"@site/docs/sql/postgresql/advanced/materialized_view_concurrent_refresh.md","sourceDirName":"sql/postgresql/advanced","slug":"/sql/postgresql/advanced/materialized_view_concurrent_refresh","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/materialized_view_concurrent_refresh","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/postgresql/advanced/materialized_view_concurrent_refresh.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lateral_joins","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/lateral_joins"},"next":{"title":"parallel_query_execution","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/parallel_query_execution"}}');var s=t(23420),a=t(65404);const i={},o=void 0,c={},l=[{value:"\ud83d\udee0\ufe0f Materialized Views with Concurrent Refresh",id:"\ufe0f-materialized-views-with-concurrent-refresh",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"\ufe0f-materialized-views-with-concurrent-refresh",children:"\ud83d\udee0\ufe0f Materialized Views with Concurrent Refresh"}),"\n",(0,s.jsxs)(r.p,{children:["Use materialized views to cache the results of expensive queries and refresh them periodically. The ",(0,s.jsx)(r.code,{children:"CONCURRENTLY"})," option allows you to refresh without locking out readers, ensuring continuous availability. Remember that ",(0,s.jsx)(r.code,{children:"CONCURRENTLY"})," requires a unique index on the view."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_sales_summary AS\nSELECT date_trunc('day', sale_time) AS day, sum(amount) AS total\nFROM sales\nGROUP BY day;\nCREATE UNIQUE INDEX idx_mv_sales_summary_day ON mv_sales_summary(day);\n\n-- Refresh without blocking reads\nREFRESH MATERIALIZED VIEW CONCURRENTLY mv_sales_summary;\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(36672);const s={},a=n.createContext(s);function i(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);