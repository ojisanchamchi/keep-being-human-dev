"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66170],{65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var i=n(36672);const o={},t=i.createContext(o);function s(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(t.Provider,{value:r},e.children)}},93871:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"gems/solid_queue/middle/error_handling_and_retries","title":"error_handling_and_retries","description":"\ud83d\udee0\ufe0f Error Handling & Retry Strategies","source":"@site/docs/gems/solid_queue/middle/error_handling_and_retries.md","sourceDirName":"gems/solid_queue/middle","slug":"/gems/solid_queue/middle/error_handling_and_retries","permalink":"/keep-being-human-dev/docs/gems/solid_queue/middle/error_handling_and_retries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/middle/error_handling_and_retries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_queue_configuration","permalink":"/keep-being-human-dev/docs/gems/solid_queue/middle/custom_queue_configuration"},"next":{"title":"vcr_custom_hooks","permalink":"/keep-being-human-dev/docs/gems/vcr/advanced/vcr_custom_hooks"}}');var o=n(23420),t=n(65404);const s={},d=void 0,a={},l=[{value:"\ud83d\udee0\ufe0f Error Handling &amp; Retry Strategies",id:"\ufe0f-error-handling--retry-strategies",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"\ufe0f-error-handling--retry-strategies",children:"\ud83d\udee0\ufe0f Error Handling & Retry Strategies"}),"\n",(0,o.jsxs)(r.p,{children:["Solid Queue provides built\u2011in retry controls and failure callbacks. Use ",(0,o.jsx)(r.code,{children:"max_retries"})," and ",(0,o.jsx)(r.code,{children:"retry_delay"})," to tune retry logic, and ",(0,o.jsx)(r.code,{children:"on_failure"})," to hook into error notifications."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"class BillingWorker\n  include Solid::Queue::Worker\n\n  max_retries 5\n  retry_delay ->(attempt) { attempt * 30 }  # backoff: 30s, 60s, 90s...\n\n  on_failure do |error, job|\n    ErrorNotifier.notify(error, job_id: job.id, clazz: job.klass)\n  end\n\n  def perform(invoice_id)\n    BillingService.process(invoice_id)\n  end\nend\n\n# Enqueue a billing job\nSolid::Queue.enqueue(BillingWorker, args: {invoice_id: 123})\n"})})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);