"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19238],{2919:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"ruby/metaprogramming/middle/fluent_interface_chaining","title":"fluent_interface_chaining","description":"\u2728 Fluent Interface with Method Chaining","source":"@site/docs/ruby/metaprogramming/middle/fluent_interface_chaining.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/fluent_interface_chaining","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/fluent_interface_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/fluent_interface_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_validation_macros","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_validation_macros"},"next":{"title":"hook_method_added","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/hook_method_added"}}');var a=t(23420),r=t(65404);const o={},d=void 0,c={},s=[{value:"\u2728 Fluent Interface with Method Chaining",id:"-fluent-interface-with-method-chaining",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-fluent-interface-with-method-chaining",children:"\u2728 Fluent Interface with Method Chaining"}),"\n",(0,a.jsxs)(n.p,{children:["Build chainable methods by returning ",(0,a.jsx)(n.code,{children:"self"})," so calls can be chained fluently. Use metaprogramming to generate these proxies for bulk operations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class QueryBuilder\n  def initialize\n    @clauses = []\n  end\n\n  %i[select where order limit].each do |method|\n    define_method(method) do |arg|\n      @clauses << \"#{method.upcase} #{arg}\"\n      self\n    end\n  end\n\n  def to_sql\n    @clauses.join(' ')\n  end\nend\n\nqb = QueryBuilder.new\nsql = qb.select('*').where('age > 30').order('name').to_sql\nputs sql  # => \"SELECT * WHERE age > 30 ORDER name\"\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(36672);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);