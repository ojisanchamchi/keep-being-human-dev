"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92387],{1189:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/methods/expert/dynamic_define_method","title":"dynamic_define_method","description":"\ud83c\udfaf Dynamic Method Definition with define_method","source":"@site/docs/ruby/methods/expert/dynamic_define_method.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/dynamic_define_method","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/dynamic_define_method","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/dynamic_define_method.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"delegation_with_forwardable","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/delegation_with_forwardable"},"next":{"title":"method_hooks_metaprogramming","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/method_hooks_metaprogramming"}}');var i=n(23420),d=n(65404);const r={},a=void 0,s={},c=[{value:"\ud83c\udfaf Dynamic Method Definition with define_method",id:"-dynamic-method-definition-with-define_method",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-dynamic-method-definition-with-define_method",children:"\ud83c\udfaf Dynamic Method Definition with define_method"}),"\n",(0,i.jsxs)(t.p,{children:["Leverage ",(0,i.jsx)(t.code,{children:"define_method"})," to generate methods at runtime, capturing surrounding scope and enabling concise DSLs. This approach creates methods based on dynamic data and closures, reducing boilerplate and enhancing flexibility."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'class Resource\n  [:create, :update, :delete].each do |action|\n    define_method(action) do |attributes|\n      puts "#{action} called with #{attributes.inspect}"\n    end\n  end\nend\n\nresource = Resource.new\nresource.create(name: \'Test\')  # => "create called with {:name=>\\"Test\\"}"\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'obj = Object.new\nobj.define_singleton_method(:greet) { "Hi from #{self}" }\nputs obj.greet  # => "Hi from #<Object:0x00007fae98839c40>"\n'})})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(36672);const i={},d=o.createContext(i);function r(e){const t=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(d.Provider,{value:t},e.children)}}}]);