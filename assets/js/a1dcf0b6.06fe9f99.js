"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86824],{46483:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"rails/websockets/expert/backpressure_throttling","title":"backpressure_throttling","description":"\ud83d\udd04 Implementing Backpressure Control in Channels","source":"@site/docs/rails/websockets/expert/backpressure_throttling.md","sourceDirName":"rails/websockets/expert","slug":"/rails/websockets/expert/backpressure_throttling","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/backpressure_throttling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/expert/backpressure_throttling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"subscribe_in_javascript","permalink":"/keep-being-human-dev/docs/rails/websockets/beginner/subscribe_in_javascript"},"next":{"title":"binary_streaming","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/binary_streaming"}}');var r=t(23420),i=t(65404);const a={},c=void 0,o={},l=[{value:"\ud83d\udd04 Implementing Backpressure Control in Channels",id:"-implementing-backpressure-control-in-channels",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-implementing-backpressure-control-in-channels",children:"\ud83d\udd04 Implementing Backpressure Control in Channels"}),"\n",(0,r.jsx)(n.p,{children:"Prevent message flooding and protect clients by implementing rate-limiting within your channel. Use a sliding window counter stored in Redis to throttle excessive broadcasts per connection."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    identified_by :current_user, :throttle_key\n\n    def connect\n      self.current_user = find_verified_user\n      self.throttle_key = "ws:#{current_user.id}:throttle"\n    end\n  end\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  MAX_RATE = 5  # messages per 10 seconds\n\n  def speak(data)\n    count = Redis.current.incr(throttle_key)\n    Redis.current.expire(throttle_key, 10) if count == 1\n    if count <= MAX_RATE\n      ActionCable.server.broadcast('chat', data)\n    else\n      transmit(error: 'Rate limit exceeded')\n    end\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"This backpressure mechanism drops or rejects messages beyond your threshold, ensuring stability under high load."})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(36672);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);