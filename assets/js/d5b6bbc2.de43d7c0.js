"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24021],{30266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/syntax/expert/yield_self_then","title":"yield_self_then","description":"\ud83d\udee0\ufe0f Chaining with yield_self and then","source":"@site/docs/ruby/syntax/expert/yield_self_then.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/yield_self_then","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/yield_self_then","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/yield_self_then.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/scoped_refinements"},"next":{"title":"array_tally","permalink":"/keep-being-human-dev/docs/ruby/syntax/middle/array_tally"}}');var r=t(23420),i=t(65404);const a={},d=void 0,o={},l=[{value:"\ud83d\udee0\ufe0f Chaining with <code>yield_self</code> and <code>then</code>",id:"\ufe0f-chaining-with-yield_self-and-then",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"\ufe0f-chaining-with-yield_self-and-then",children:["\ud83d\udee0\ufe0f Chaining with ",(0,r.jsx)(n.code,{children:"yield_self"})," and ",(0,r.jsx)(n.code,{children:"then"})]}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"yield_self"})," (aliased as ",(0,r.jsx)(n.code,{children:"then"}),") to inject intermediate operations into a fluent pipeline without breaking the chain. Particularly useful when you need side\u2011effects or conditional transformations."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"result = [1,2,3]\n  .map(&:to_s)\n  .then { |arr| puts \"Strings: #{arr.join(',')}\"; arr }\n  .filter { |s| s.start_with?('2') }\n\np result # => [\"2\"]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var s=t(36672);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);