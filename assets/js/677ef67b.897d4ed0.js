"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41941],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(36672);const o={},s=a.createContext(o);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},79658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"ruby/yaml/expert/custom_psych_domain_type","title":"custom_psych_domain_type","description":"\ud83d\udee0\ufe0f Custom Domain Type Handlers with Psych","source":"@site/docs/ruby/yaml/expert/custom_psych_domain_type.md","sourceDirName":"ruby/yaml/expert","slug":"/ruby/yaml/expert/custom_psych_domain_type","permalink":"/keep-being-human-dev/docs/ruby/yaml/expert/custom_psych_domain_type","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/yaml/expert/custom_psych_domain_type.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"safe_parse_yaml_string","permalink":"/keep-being-human-dev/docs/ruby/yaml/beginner/safe_parse_yaml_string"},"next":{"title":"secure_yaml_safe_load","permalink":"/keep-being-human-dev/docs/ruby/yaml/expert/secure_yaml_safe_load"}}');var o=t(23420),s=t(65404);const r={},c=void 0,i={},d=[{value:"\ud83d\udee0\ufe0f Custom Domain Type Handlers with Psych",id:"\ufe0f-custom-domain-type-handlers-with-psych",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-custom-domain-type-handlers-with-psych",children:"\ud83d\udee0\ufe0f Custom Domain Type Handlers with Psych"}),"\n",(0,o.jsxs)(n.p,{children:["You can register custom YAML tags to round-trip domain-specific objects seamlessly between Ruby and YAML. Override ",(0,o.jsx)(n.code,{children:"to_yaml"})," or implement ",(0,o.jsx)(n.code,{children:"encode_with"})," and register constructors via ",(0,o.jsx)(n.code,{children:"YAML.add_domain_type"})," to control serialization/deserialization. This leverages Psych\u2019s visitor API to maintain object integrity, versioning, and custom tag URIs."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"require 'yaml'\n\nclass Money\n  attr_reader :currency, :amount\n\n  def initialize(currency, amount)\n    @currency = currency\n    @amount = amount\n  end\n\n  def to_yaml(opts = {})\n    YAML.quick_emit(self, opts) do |out|\n      out.map(taguri) do |map|\n        map.add('currency', currency)\n        map.add('amount', amount)\n      end\n    end\n  end\nend\n\nYAML.add_domain_type('example.com,2023', 'money') do |_tag, val|\n  Money.new(val['currency'], val['amount'])\nend\n\nyaml = Money.new('USD', 100).to_yaml\nputs yaml\nobj = YAML.safe_load(yaml)\nputs obj.class  # => Money\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);