"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[59160],{26223:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rails/performance/expert/gc_jemalloc_tuning","title":"gc_jemalloc_tuning","description":"\u2699\ufe0f Tune Ruby GC with jemalloc and GC::Profiler","source":"@site/docs/rails/performance/expert/gc_jemalloc_tuning.md","sourceDirName":"rails/performance/expert","slug":"/rails/performance/expert/gc_jemalloc_tuning","permalink":"/keep-being-human-dev/docs/rails/performance/expert/gc_jemalloc_tuning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/performance/expert/gc_jemalloc_tuning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fast_jsonapi_serialization","permalink":"/keep-being-human-dev/docs/rails/performance/expert/fast_jsonapi_serialization"},"next":{"title":"middleware_stack_refinement","permalink":"/keep-being-human-dev/docs/rails/performance/expert/middleware_stack_refinement"}}');var o=t(23420),a=t(65404);const i={},s=void 0,c={},l=[{value:"\u2699\ufe0f Tune Ruby GC with jemalloc and GC::Profiler",id:"\ufe0f-tune-ruby-gc-with-jemalloc-and-gcprofiler",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-tune-ruby-gc-with-jemalloc-and-gcprofiler",children:"\u2699\ufe0f Tune Ruby GC with jemalloc and GC::Profiler"}),"\n",(0,o.jsxs)(n.p,{children:["Reduce GC pauses by switching to jemalloc (or tcmalloc) and fine\u2010tuning Ruby's GC parameters. Combine this with ",(0,o.jsx)(n.code,{children:"GC::Profiler"})," to spot allocation hotspots and adjust the heap slots dynamically."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Use jemalloc in production\nexport LD_PRELOAD="/usr/lib/x86_64-linux-gnu/libjemalloc.so"\n\n# In config/puma.rb\non_worker_boot do\n  GC::Profiler.enable\n  GC::OPTS[:min_heap_slots] = 200_000\n  GC::OPTS[:heap_growth_factor] = 1.2\nend\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# At runtime, print GC stats for your slow actions\nActiveSupport::Notifications.subscribe('process_action.action_controller') do |*args|\n  event = ActiveSupport::Notifications::Event.new(*args)\n  puts \"GC time: \"+GC::Profiler.result\nend\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Iterate on ",(0,o.jsx)(n.code,{children:":min_heap_slots"})," and ",(0,o.jsx)(n.code,{children:":heap_growth_factor"})," until you see fewer GC invocations under high load."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(36672);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);