"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28606],{48770:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"ruby/method_missing/expert/transparent_proxy_forwarding","title":"transparent_proxy_forwarding","description":"\ud83d\udd0d Transparent Proxy Forwarding with method_missing","source":"@site/docs/ruby/method_missing/expert/transparent_proxy_forwarding.md","sourceDirName":"ruby/method_missing/expert","slug":"/ruby/method_missing/expert/transparent_proxy_forwarding","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/transparent_proxy_forwarding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/method_missing/expert/transparent_proxy_forwarding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_attributes_dsl","permalink":"/keep-being-human-dev/docs/ruby/method_missing/expert/dynamic_attributes_dsl"},"next":{"title":"dsl_fallback_methods","permalink":"/keep-being-human-dev/docs/ruby/method_missing/middle/dsl_fallback_methods"}}');var s=r(23420),a=r(65404);const o={},i=void 0,d={},p=[{value:"\ud83d\udd0d Transparent Proxy Forwarding with method_missing",id:"-transparent-proxy-forwarding-with-method_missing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-transparent-proxy-forwarding-with-method_missing",children:"\ud83d\udd0d Transparent Proxy Forwarding with method_missing"}),"\n",(0,s.jsxs)(n.p,{children:["Create a transparent proxy to wrap objects and intercept or augment calls without breaking polymorphism. Use ",(0,s.jsx)(n.code,{children:"method_missing"})," to forward unknown messages and ",(0,s.jsx)(n.code,{children:"respond_to_missing?"})," to accurately report capabilities. This pattern is useful for logging, access control, or lazy-loading delegates."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'class LoggingProxy\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &block)\n    puts "Calling #{name} with #{args.inspect}"  # pre-hook\n    result = @target.public_send(name, *args, &block)\n    puts "Returned #{result.inspect}"            # post-hook\n    result\n  end\n\n  def respond_to_missing?(name, include_private = false)\n    @target.respond_to?(name, include_private) || super\n  end\nend\n\narray = [1,2,3]\nproxy = LoggingProxy.new(array)\nproxy.push(4)    # logs call and result; proxy behaves like Array\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(36672);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);