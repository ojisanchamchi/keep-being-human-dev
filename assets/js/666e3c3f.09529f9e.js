"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9845],{63043:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/regex/expert/embed_ruby_code_in_regex","title":"embed_ruby_code_in_regex","description":"\ud83d\udee0\ufe0f Embed Ruby Logic with Code Extensions","source":"@site/docs/ruby/regex/expert/embed_ruby_code_in_regex.md","sourceDirName":"ruby/regex/expert","slug":"/ruby/regex/expert/embed_ruby_code_in_regex","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/embed_ruby_code_in_regex","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/expert/embed_ruby_code_in_regex.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"branch_reset_grouping","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/branch_reset_grouping"},"next":{"title":"inline_toggle_modifiers","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/inline_toggle_modifiers"}}');var o=r(23420),i=r(65404);const s={},c=void 0,d={},a=[{value:"\ud83d\udee0\ufe0f Embed Ruby Logic with Code Extensions",id:"\ufe0f-embed-ruby-logic-with-code-extensions",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-embed-ruby-logic-with-code-extensions",children:"\ud83d\udee0\ufe0f Embed Ruby Logic with Code Extensions"}),"\n",(0,o.jsxs)(n.p,{children:["Oniguruma in Ruby allows embedding Ruby snippets inside a pattern with ",(0,o.jsx)(n.code,{children:"(?{ ... })"})," and dynamic fragments via ",(0,o.jsx)(n.code,{children:"(??{ ... })"}),". This lets you build contexts or decisions at match time."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'counter = 0\nregex = /\n  (\\w+)(?{ counter += 1 })  # increment for each match\n/x\n\n"a b c".scan(regex)\np counter  # => 3\n'})}),"\n",(0,o.jsx)(n.p,{children:"Dynamic pattern generation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'words = %w[foo bar]\nregex = /(??{ Regexp.union(words) })baz/\np "foobaz".match?(regex)  # => true\n'})})]})}function b(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(36672);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);