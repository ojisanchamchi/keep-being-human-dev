"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[36333],{60398:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/active_record_migrations/expert/postgresql_table_partitioning","title":"postgresql_table_partitioning","description":"\ud83d\udc18 Implement PostgreSQL Table Partitioning in Migration","source":"@site/docs/rails/active_record_migrations/expert/postgresql_table_partitioning.md","sourceDirName":"rails/active_record_migrations/expert","slug":"/rails/active_record_migrations/expert/postgresql_table_partitioning","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/postgresql_table_partitioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/expert/postgresql_table_partitioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parallel_migrations_via_rake","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/parallel_migrations_via_rake"},"next":{"title":"reversible_data_backfill","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/reversible_data_backfill"}}');var i=r(23420),a=r(65404);const o={},s=void 0,l={},c=[{value:"\ud83d\udc18 Implement PostgreSQL Table Partitioning in Migration",id:"-implement-postgresql-table-partitioning-in-migration",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-implement-postgresql-table-partitioning-in-migration",children:"\ud83d\udc18 Implement PostgreSQL Table Partitioning in Migration"}),"\n",(0,i.jsx)(t.p,{children:"Partitioning large tables can dramatically boost query performance. Use raw SQL in migrations to set up range or list partitions, letting PostgreSQL route inserts automatically."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"class PartitionOrdersByCreatedAt < ActiveRecord::Migration[6.1]\n  def up\n    execute <<-SQL\n      CREATE TABLE orders_parent (\n        LIKE orders INCLUDING ALL\n      ) PARTITION BY RANGE (created_at);\n\n      CREATE TABLE orders_2023_q1 PARTITION OF orders_parent\n        FOR VALUES FROM ('2023-01-01') TO ('2023-04-01');\n\n      INSERT INTO orders_parent SELECT * FROM orders;\n      DROP TABLE orders;\n      ALTER TABLE orders_parent RENAME TO orders;\n    SQL\n  end\n\n  def down\n    execute <<-SQL\n      -- Reverse: drop partitions and recreate original table\n    SQL\n  end\nend\n"})}),"\n",(0,i.jsx)(t.p,{children:"This ensures seamless cutover with zero-downtime data migration."})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>s});var n=r(36672);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);