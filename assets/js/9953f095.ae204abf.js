"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86133],{65404:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>n});var o=t(36672);const s={},i=o.createContext(s);function r(e){const a=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:a},e.children)}},97951:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>n,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"rails/active_record_validations/expert/composable_lambda_validators","title":"composable_lambda_validators","description":"\ud83e\udd1d Composable Lambda-based Validations","source":"@site/docs/rails/active_record_validations/expert/composable_lambda_validators.md","sourceDirName":"rails/active_record_validations/expert","slug":"/rails/active_record_validations/expert/composable_lambda_validators","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/composable_lambda_validators","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_validations/expert/composable_lambda_validators.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"complex_association_validations","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/complex_association_validations"},"next":{"title":"contextual_validations","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/contextual_validations"}}');var s=t(23420),i=t(65404);const r={},n=void 0,d={},l=[{value:"\ud83e\udd1d Composable Lambda-based Validations",id:"-composable-lambda-based-validations",level:2}];function c(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-composable-lambda-based-validations",children:"\ud83e\udd1d Composable Lambda-based Validations"}),"\n",(0,s.jsx)(a.p,{children:"Compose small lambda validators to share snippets of logic across models. This is particularly useful for micro-validations that don\u2019t justify full classes but are too complex for inline blocks."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# config/initializers/validators.rb\nEmailCheck = ->(record, attribute) do\n  unless record.send(attribute) =~ /\\A[^@\\s]+@[^@\\s]+\\z/\n    record.errors.add(attribute, 'is invalid')\n  end\nend\nUniqueNameCheck = ->(record, attribute) do\n  if record.class.where(name: record.name).where.not(id: record.id).exists?\n    record.errors.add(attribute, 'has already been taken')\n  end\nend\n\n# app/models/vendor.rb\nclass Vendor < ApplicationRecord\n  validate EmailCheck, on: :create\n  validate UniqueNameCheck, on: :update\nend\n"})})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);