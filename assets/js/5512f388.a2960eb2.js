"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90361],{52595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/strings/middle/mutable_string_concatenation","title":"mutable_string_concatenation","description":"\u26a1\ufe0f Optimize Concatenation with U+003CU+003C vs +","source":"@site/docs/ruby/strings/middle/mutable_string_concatenation.md","sourceDirName":"ruby/strings/middle","slug":"/ruby/strings/middle/mutable_string_concatenation","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/mutable_string_concatenation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/strings/middle/mutable_string_concatenation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"heredoc_squiggly","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/heredoc_squiggly"},"next":{"title":"nested_interpolation","permalink":"/keep-being-human-dev/docs/ruby/strings/middle/nested_interpolation"}}');var s=t(23420),r=t(65404);const o={},c=void 0,a={},d=[{value:"\u26a1\ufe0f Optimize Concatenation with <code>U+003CU+003C</code> vs +",id:"\ufe0f-optimize-concatenation-with-u003cu003c-vs-",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"\ufe0f-optimize-concatenation-with-u003cu003c-vs-",children:["\u26a1\ufe0f Optimize Concatenation with ",(0,s.jsx)(n.code,{children:"U+003CU+003C"})," vs +"]}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"U+003CU+003C"})," (shovel) mutates the original string in place and is more memory-efficient than ",(0,s.jsx)(n.code,{children:"+"}),", which allocates a new string each time. When building up large or iterative strings, prefer ",(0,s.jsx)(n.code,{children:"U+003CU+003C"})," to reduce GC pressure and improve performance."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# Less efficient\nresult = ""\n1000.times { |i| result = result + "Line #{i}\\n" }\n\n# More efficient\nbuffer = ""\n1000.times { |i| buffer << "Line #{i}\\n" }\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var i=t(36672);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);