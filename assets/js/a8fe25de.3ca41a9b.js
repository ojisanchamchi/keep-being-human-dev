"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[91325],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(36672);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},83846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"sql/mysql/middle/window_functions","title":"window_functions","description":"\ud83e\ude9f Leveraging Window Functions for Advanced Aggregation","source":"@site/docs/sql/mysql/middle/window_functions.md","sourceDirName":"sql/mysql/middle","slug":"/sql/mysql/middle/window_functions","permalink":"/keep-being-human-dev/docs/sql/mysql/middle/window_functions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/mysql/middle/window_functions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"user_variables","permalink":"/keep-being-human-dev/docs/sql/mysql/middle/user_variables"},"next":{"title":"declarative_partitioning_range","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/declarative_partitioning_range"}}');var o=t(23420),s=t(65404);const r={},d=void 0,a={},c=[{value:"\ud83e\ude9f Leveraging Window Functions for Advanced Aggregation",id:"-leveraging-window-functions-for-advanced-aggregation",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-leveraging-window-functions-for-advanced-aggregation",children:"\ud83e\ude9f Leveraging Window Functions for Advanced Aggregation"}),"\n",(0,o.jsxs)(n.p,{children:["Window functions let you compute totals, ranks, and moving averages without grouping your result set. They maintain row-level details while adding aggregated columns. Use ",(0,o.jsx)(n.code,{children:"OVER()"})," with ",(0,o.jsx)(n.code,{children:"PARTITION BY"})," and ",(0,o.jsx)(n.code,{children:"ORDER BY"})," to scope calculations."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sql",children:"SELECT\n  user_id,\n  order_date,\n  SUM(amount) OVER (PARTITION BY user_id ORDER BY order_date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS rolling_sum\nFROM orders;\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);