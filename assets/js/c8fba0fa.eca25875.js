"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[88210],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(36672);const a={},d=r.createContext(a);function o(e){const t=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(d.Provider,{value:t},e.children)}},82778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ruby/define_method/expert/preserve_method_metadata","title":"preserve_method_metadata","description":"\ud83d\udee0\ufe0f Preserve Method Signature with UnboundMethod","source":"@site/docs/ruby/define_method/expert/preserve_method_metadata.md","sourceDirName":"ruby/define_method/expert","slug":"/ruby/define_method/expert/preserve_method_metadata","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/preserve_method_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/expert/preserve_method_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"hot_swappable_methods","permalink":"/keep-being-human-dev/docs/ruby/define_method/expert/hot_swappable_methods"},"next":{"title":"dynamic_accessors","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/dynamic_accessors"}}');var a=n(23420),d=n(65404);const o={},i=void 0,s={},c=[{value:"\ud83d\udee0\ufe0f Preserve Method Signature with UnboundMethod",id:"\ufe0f-preserve-method-signature-with-unboundmethod",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\ufe0f-preserve-method-signature-with-unboundmethod",children:"\ud83d\udee0\ufe0f Preserve Method Signature with UnboundMethod"}),"\n",(0,a.jsxs)(t.p,{children:["When wrapping existing methods, you often lose arity and metadata. By using ",(0,a.jsx)(t.code,{children:"Module#instance_method"})," and ",(0,a.jsx)(t.code,{children:"UnboundMethod#bind"})," you can capture the original method, then redefine it with ",(0,a.jsx)(t.code,{children:"define_method"})," while forwarding arguments correctly. This approach maintains the original behavior, label, and argument validation."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'class MyService\n  def calculate(a, b=10)\n    a * b\n  end\nend\n\norig = MyService.instance_method(:calculate)\nMyService.send(:define_method, :calculate) do |*args, **kwargs, &block|\n  puts "Calling calculate with #{args}, #{kwargs}"\n  orig.bind(self).call(*args, **kwargs, &block)\nend\n\nservice = MyService.new\nservice.calculate(5)\n# Output: Calling calculate with [5], {}\n# => 50\n'})})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);