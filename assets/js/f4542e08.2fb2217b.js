"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58193],{65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>o});var s=a(36672);const r={},c=s.createContext(r);function t(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(c.Provider,{value:n},e.children)}},71475:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/chain_procs_lambdas","title":"chain_procs_lambdas","description":"\u27bf Chain Procs and Lambdas for Pipelines","source":"@site/docs/ruby/procs_and_lambdas/middle/chain_procs_lambdas.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/chain_procs_lambdas","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/chain_procs_lambdas","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/chain_procs_lambdas.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sandboxed_instance_exec","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/sandboxed_instance_exec"},"next":{"title":"context_capture_proc","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/context_capture_proc"}}');var r=a(23420),c=a(65404);const t={},o=void 0,d={},i=[{value:"\u27bf Chain Procs and Lambdas for Pipelines",id:"-chain-procs-and-lambdas-for-pipelines",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-chain-procs-and-lambdas-for-pipelines",children:"\u27bf Chain Procs and Lambdas for Pipelines"}),"\n",(0,r.jsxs)(n.p,{children:["You can compose multiple Procs or lambdas into a processing pipeline to transform data step by step. This pattern improves readability and separates concerns. Use ",(0,r.jsx)(n.code,{children:"Enumerable#inject"})," or define a helper to chain them."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"pipeline = [\n  Proc.new { |x| x * 2 },\n  ->(x) { x + 3 },\n  ->(x) { x / 5 }\n]\n\nresult = pipeline.inject(10) { |acc, fn| fn.call(acc) }\nputs result   # ((10*2)+3)/5 = 4\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);