"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45554],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>d});var t=a(36672);const r={},c=t.createContext(r);function s(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(c.Provider,{value:n},e.children)}},86951:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/rspec/expert/advanced_diffable_matcher","title":"advanced_diffable_matcher","description":"\ud83d\udd0d Advanced Diffable Matcher","source":"@site/docs/ruby/rspec/expert/advanced_diffable_matcher.md","sourceDirName":"ruby/rspec/expert","slug":"/ruby/rspec/expert/advanced_diffable_matcher","permalink":"/keep-being-human-dev/docs/ruby/rspec/expert/advanced_diffable_matcher","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/expert/advanced_diffable_matcher.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_expectations","permalink":"/keep-being-human-dev/docs/ruby/rspec/beginner/using_expectations"},"next":{"title":"custom_example_group_dsl","permalink":"/keep-being-human-dev/docs/ruby/rspec/expert/custom_example_group_dsl"}}');var r=a(23420),c=a(65404);const s={},d=void 0,i={},o=[{value:"\ud83d\udd0d Advanced Diffable Matcher",id:"-advanced-diffable-matcher",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-advanced-diffable-matcher",children:"\ud83d\udd0d Advanced Diffable Matcher"}),"\n",(0,r.jsxs)(n.p,{children:["Create a custom, chainable matcher that supports rich diffs for nested hash or JSON comparisons. By enabling ",(0,r.jsx)(n.code,{children:"diffable"}),", RSpec will show a unified diff when expectations fail, making it easy to pinpoint mismatches in large structures."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# spec/support/matchers/match_nested_schema.rb\nRSpec::Matchers.define :match_nested_schema do |expected_schema|\n  match do |actual|\n    @errors = compare_schema(actual, expected_schema)\n    @errors.empty?\n  end\n\n  chain :ignoring_extra_keys do\n    @ignore_extra = true\n  end\n\n  failure_message do |actual|\n    "Expected schema to match, but found differences:\\n" + @errors.join("\\n")\n  end\n\n  diffable\n\n  def compare_schema(actual, expected)\n    # Recursively compare actual vs expected, collecting human-readable diffs\n    []\n  end\nend\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# spec/models/user_response_spec.rb\nRSpec.describe UserResponse do\n  subject { JSON.parse(response_body) }\n\n  it 'adheres to API schema' do\n    expected_schema = { 'id' => Integer, 'profile' => { 'name' => String } }\n    expect(subject).to match_nested_schema(expected_schema).ignoring_extra_keys\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);