"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94015],{18575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>i,frontMatter:()=>u,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/classes_and_modules/middle/module_function_usage","title":"module_function_usage","description":"\u2728 Converting Module Methods to Both Instance and Module Functions","source":"@site/docs/ruby/classes_and_modules/middle/module_function_usage.md","sourceDirName":"ruby/classes_and_modules/middle","slug":"/ruby/classes_and_modules/middle/module_function_usage","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_function_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/middle/module_function_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_alias_method","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_alias_method"},"next":{"title":"module_nesting_lookup","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/middle/module_nesting_lookup"}}');var s=t(23420),d=t(65404);const u={},a=void 0,l={},c=[{value:"\u2728 Converting Module Methods to Both Instance and Module Functions",id:"-converting-module-methods-to-both-instance-and-module-functions",level:2}];function r(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-converting-module-methods-to-both-instance-and-module-functions",children:"\u2728 Converting Module Methods to Both Instance and Module Functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"module_function"})," lets you reuse methods internally as private instance methods and externally as module (or class) methods. It\u2019s helpful for utility modules that need consistent behavior across contexts."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'module Formatter\n  module_function\n\n  def truncate(text, length)\n    text[0...length] + \'...\'\n  end\nend\n\n# As module method\ne = Formatter.truncate("Hello, World!", 5)\n# => "Hello..."\n\n# As private instance method\nclass Post\n  include Formatter\n\n  def summary\n    truncate(content, 10)\n  end\nend\n'})})]})}function i(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>u,x:()=>a});var o=t(36672);const s={},d=o.createContext(s);function u(e){const n=o.useContext(d);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:u(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);