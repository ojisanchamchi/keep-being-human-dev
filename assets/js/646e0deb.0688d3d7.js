"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35523],{63025:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource","title":"initialize_mutex_per_resource","description":"\ud83d\udee0\ufe0f Initialize a Mutex for Each Resource","source":"@site/docs/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource.md","sourceDirName":"ruby/concurrency_and_mutexes/beginner","slug":"/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/beginner/initialize_mutex_per_resource.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"monitor_reentrant_mutex.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/monitor_reentrant_mutex.md"},"next":{"title":"manual_lock_unlock","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/beginner/manual_lock_unlock"}}');var c=t(23420),a=t(65404);const o={},i=void 0,u={},s=[{value:"\ud83d\udee0\ufe0f Initialize a Mutex for Each Resource",id:"\ufe0f-initialize-a-mutex-for-each-resource",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"\ufe0f-initialize-a-mutex-for-each-resource",children:"\ud83d\udee0\ufe0f Initialize a Mutex for Each Resource"}),"\n",(0,c.jsxs)(n.p,{children:["For multiple shared resources, create one ",(0,c.jsx)(n.code,{children:"Mutex"})," per resource to avoid unnecessary blocking. This lets threads work in parallel when they're accessing different data."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"require 'thread'\n\nclass BankAccount\n  def initialize(balance)\n    @balance = balance\n    @mutex = Mutex.new\n  end\n\n  def deposit(amount)\n    @mutex.synchronize do\n      @balance += amount\n    end\n  end\n\n  def balance\n    @mutex.synchronize { @balance }\n  end\nend\n\naccount1 = BankAccount.new(100)\naccount2 = BankAccount.new(200)\n\n# Threads can deposit into different accounts concurrently without blocking each other\na = Thread.new { account1.deposit(50) }\nb = Thread.new { account2.deposit(75) }\na.join; b.join\nputs account1.balance  # => 150\nputs account2.balance  # => 275\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(36672);const c={},a=r.createContext(c);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);