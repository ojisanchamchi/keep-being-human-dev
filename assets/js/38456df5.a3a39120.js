"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79498],{30355:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/performance/expert/batch_preloading_scopes","title":"batch_preloading_scopes","description":"\ud83d\udd04 Efficient Batching with findinbatches & preload","source":"@site/docs/rails/performance/expert/batch_preloading_scopes.md","sourceDirName":"rails/performance/expert","slug":"/rails/performance/expert/batch_preloading_scopes","permalink":"/keep-being-human-dev/docs/rails/performance/expert/batch_preloading_scopes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/performance/expert/batch_preloading_scopes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_query_loading","permalink":"/keep-being-human-dev/docs/rails/performance/expert/async_query_loading"},"next":{"title":"fast_jsonapi_serialization","permalink":"/keep-being-human-dev/docs/rails/performance/expert/fast_jsonapi_serialization"}}');var s=r(23420),a=r(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udd04 Efficient Batching with find_in_batches &amp; preload",id:"-efficient-batching-with-find_in_batches--preload",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-efficient-batching-with-find_in_batches--preload",children:"\ud83d\udd04 Efficient Batching with find_in_batches & preload"}),"\n",(0,s.jsxs)(n.p,{children:["Blend ",(0,s.jsx)(n.code,{children:"find_in_batches"})," with ",(0,s.jsx)(n.code,{children:"preload"})," to process vast datasets in chunks while avoiding N+1 queries on associations. This is ideal for background jobs that resync or export data."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"class SyncJob < ApplicationJob\n  queue_as :low\n\n  def perform\n    User.where(active: true).find_in_batches(batch_size: 5_000) do |users_batch|\n      User.preload(:orders, :profile).where(id: users_batch.map(&:id)).each do |user|\n        ExternalApi.push(user, user.orders, user.profile)\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"This pattern ensures each batch issues exactly two queries regardless of batch size and association count."})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var t=r(36672);const s={},a=t.createContext(s);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);