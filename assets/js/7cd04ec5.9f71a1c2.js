"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54172],{65404:(e,i,s)=>{s.d(i,{R:()=>o,x:()=>c});var n=s(36672);const t={},a=n.createContext(t);function o(e){const i=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(a.Provider,{value:i},e.children)}},67134:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"gems/sidekiq/middle/sidekiq_batch_grouping","title":"sidekiq_batch_grouping","description":"\ud83d\udce6 Group Jobs with sidekiq-batch for Callbacks","source":"@site/docs/gems/sidekiq/middle/sidekiq_batch_grouping.md","sourceDirName":"gems/sidekiq/middle","slug":"/gems/sidekiq/middle/sidekiq_batch_grouping","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_batch_grouping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/sidekiq/middle/sidekiq_batch_grouping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sidekiq_tenant_isolation_namespace","permalink":"/keep-being-human-dev/docs/gems/sidekiq/expert/sidekiq_tenant_isolation_namespace"},"next":{"title":"sidekiq_custom_middleware","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_custom_middleware"}}');var t=s(23420),a=s(65404);const o={},c=void 0,d={},r=[{value:"\ud83d\udce6 Group Jobs with sidekiq-batch for Callbacks",id:"-group-jobs-with-sidekiq-batch-for-callbacks",level:2}];function l(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"-group-jobs-with-sidekiq-batch-for-callbacks",children:"\ud83d\udce6 Group Jobs with sidekiq-batch for Callbacks"}),"\n",(0,t.jsxs)(i.p,{children:["When you need a callback after a group of jobs completes, the ",(0,t.jsx)(i.code,{children:"sidekiq-batch"})," gem provides batch tracking. Create a batch, push jobs into it, and define success/error callbacks."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-ruby",children:"# Gemfile\ngem 'sidekiq-batch'\n\n# Usage in code\nbatch = Sidekiq::Batch.new\nbatch.description = \"Process user imports\"\nbatch.on(:complete, ImportBatchCallback, { batch_id: nil })\n\nbatch.jobs do\n  users.each do |user|\n    ImportWorker.perform_async(user.id)\n  end\nend\n\n# Callback handler\nclass ImportBatchCallback\n  def on_complete(status, options)\n    # all ImportWorker jobs finished successfully\n    AdminNotifier.notify_batch_finished(options['batch_id'])\n  end\nend\n"})})]})}function u(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);