"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78146],{30276:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/mocks_and_stubs/beginner/instance_double_usage","title":"instance_double_usage","description":"\ud83e\udde9 Use instance_double for Verifying Real Interfaces","source":"@site/docs/gems/rspec/mocks_and_stubs/beginner/instance_double_usage.md","sourceDirName":"gems/rspec/mocks_and_stubs/beginner","slug":"/gems/rspec/mocks_and_stubs/beginner/instance_double_usage","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/instance_double_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/mocks_and_stubs/beginner/instance_double_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chain_method_stub","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/chain_method_stub"},"next":{"title":"mock_expectation_receive","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/beginner/mock_expectation_receive"}}');var r=s(23420),a=s(65404);const c={},o=void 0,i={},d=[{value:"\ud83e\udde9 Use <code>instance_double</code> for Verifying Real Interfaces",id:"-use-instance_double-for-verifying-real-interfaces",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-use-instance_double-for-verifying-real-interfaces",children:["\ud83e\udde9 Use ",(0,r.jsx)(n.code,{children:"instance_double"})," for Verifying Real Interfaces"]}),"\n",(0,r.jsxs)(n.p,{children:["An ",(0,r.jsx)(n.code,{children:"instance_double"})," creates a test double that only allows methods defined on the real class, preventing typos and ensuring your stubs match the actual API. Combine it with ",(0,r.jsx)(n.code,{children:"allow"})," to stub methods safely."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class PaymentGateway\n  def charge(amount); end\nend\n\nRSpec.describe OrderProcessor do\n  it 'charges the correct amount' do\n    gateway = instance_double(PaymentGateway)\n    allow(gateway).to receive(:charge).with(100).and_return('OK')\n\n    processor = OrderProcessor.new(gateway)\n    expect(processor.process(100)).to eq('OK')\n  end\nend\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>o});var t=s(36672);const r={},a=t.createContext(r);function c(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);