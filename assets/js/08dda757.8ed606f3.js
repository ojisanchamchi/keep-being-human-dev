"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86035],{33335:(e,r,o)=>{o.r(r),o.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/background_jobs/expert/job_orchestration","title":"job_orchestration","description":"\ud83d\udd04 Sequential Job Orchestration with ActiveJob Callbacks","source":"@site/docs/rails/background_jobs/expert/job_orchestration.md","sourceDirName":"rails/background_jobs/expert","slug":"/rails/background_jobs/expert/job_orchestration","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/job_orchestration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/expert/job_orchestration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_retry_strategy","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/custom_retry_strategy"},"next":{"title":"observability_instrumentation","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/observability_instrumentation"}}');var n=o(23420),s=o(65404);const c={},a=void 0,i={},d=[{value:"\ud83d\udd04 Sequential Job Orchestration with ActiveJob Callbacks",id:"-sequential-job-orchestration-with-activejob-callbacks",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-sequential-job-orchestration-with-activejob-callbacks",children:"\ud83d\udd04 Sequential Job Orchestration with ActiveJob Callbacks"}),"\n",(0,n.jsxs)(r.p,{children:["Leverage ActiveJob callbacks to construct complex, multi\u2010step workflows while preserving transactional integrity. Use callbacks like ",(0,n.jsx)(r.code,{children:"after_perform_commit"}),", ",(0,n.jsx)(r.code,{children:"before_enqueue"}),", and ",(0,n.jsx)(r.code,{children:"rescue_from"})," to chain jobs, handle failures, and retry only on successful DB commits."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:"class FirstJob < ApplicationJob\n  after_perform_commit :enqueue_second\n  rescue_from(StandardError) { |e| ErrorNotifierJob.perform_later(self.job_id, e.message) }\n\n  def perform(record_id)\n    record = Record.find(record_id)\n    record.process_part_one!  # may raise ActiveRecord::Rollback\n  end\n\n  private\n\n  def enqueue_second\n    SecondJob.perform_later(record_id)\n  end\nend\n\nclass SecondJob < ApplicationJob\n  def perform(record_id)\n    Record.find(record_id).process_part_two!\n  end\nend\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},65404:(e,r,o)=>{o.d(r,{R:()=>c,x:()=>a});var t=o(36672);const n={},s=t.createContext(n);function c(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);