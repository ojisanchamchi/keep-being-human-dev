"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[1442],{47099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"ruby/networking/middle/tcp_non_blocking_client","title":"tcp_non_blocking_client","description":"\ud83e\udd1d Build a Non\u2011Blocking TCP Client with TCPSocket","source":"@site/docs/ruby/networking/middle/tcp_non_blocking_client.md","sourceDirName":"ruby/networking/middle","slug":"/ruby/networking/middle/tcp_non_blocking_client","permalink":"/keep-being-human-dev/docs/ruby/networking/middle/tcp_non_blocking_client","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/networking/middle/tcp_non_blocking_client.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"http_ssl_customization","permalink":"/keep-being-human-dev/docs/ruby/networking/middle/http_ssl_customization"},"next":{"title":"bigdecimal_precision","permalink":"/keep-being-human-dev/docs/ruby/numbers/advanced/bigdecimal_precision"}}');var i=t(23420),c=t(65404);const s={},r=void 0,l={},a=[{value:"\ud83e\udd1d Build a Non\u2011Blocking TCP Client with TCPSocket",id:"-build-a-nonblocking-tcp-client-with-tcpsocket",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-build-a-nonblocking-tcp-client-with-tcpsocket",children:"\ud83e\udd1d Build a Non\u2011Blocking TCP Client with TCPSocket"}),"\n",(0,i.jsxs)(n.p,{children:["For custom protocols or high\u2011throughput services, you can use Ruby\u2019s ",(0,i.jsx)(n.code,{children:"TCPSocket"})," with ",(0,i.jsx)(n.code,{children:"IO.select"})," for non\u2011blocking I/O. This allows you to wait on multiple sockets simultaneously and handle data as it arrives without threading overhead."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"require 'socket'\n\nsocket = TCPSocket.new('chat.example.com', 12345)\nsocket.sync = true\n\nloop do\n  ready = IO.select([socket, STDIN])\n  ready[0].each do |io|\n    if io == socket\n      data = socket.read_nonblock(1024)\n      puts \"Server: #{data}\" if data\n    else\n      message = STDIN.gets.chomp\n      socket.write(message)\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(36672);const i={},c=o.createContext(i);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);