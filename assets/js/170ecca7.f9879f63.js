"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50180],{10641:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"ruby/operators/expert/dynamic_operator_overloading","title":"dynamic_operator_overloading","description":"\ud83d\udee0 Dynamic Operator Overloading via method_missing","source":"@site/docs/ruby/operators/expert/dynamic_operator_overloading.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/dynamic_operator_overloading","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/dynamic_operator_overloading","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/dynamic_operator_overloading.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_via_operator_overloads","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/dsl_via_operator_overloads"},"next":{"title":"extending_numeric_precision","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/extending_numeric_precision"}}');var t=r(23420),a=r(65404);const i={},s=void 0,d={},p=[{value:"\ud83d\udee0 Dynamic Operator Overloading via <code>method_missing</code>",id:"-dynamic-operator-overloading-via-method_missing",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"-dynamic-operator-overloading-via-method_missing",children:["\ud83d\udee0 Dynamic Operator Overloading via ",(0,t.jsx)(n.code,{children:"method_missing"})]}),"\n",(0,t.jsxs)(n.p,{children:["You can intercept calls to any operator method and define them on the fly using ",(0,t.jsx)(n.code,{children:"method_missing"}),". This is useful for building dynamic DSLs or proxies that handle arbitrary binary operations without predefining every operator."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class OperatorProxy\n  def initialize(&handler)\n    @handler = handler\n  end\n\n  def method_missing(op, *args)\n    if args.size == 2\n      @handler.call(op, *args)\n    else\n      super\n    end\n  end\n\n  def respond_to_missing?(method, include_private = false)\n    true\n  end\nend\n\nproxy = OperatorProxy.new do |op, a, b|\n  puts "Invoked operator #{op} with ": #{a.inspect}, #{b.inspect}"\n  a.send(op, b)\nend\n\nresult = proxy.+(5, 3)   # prints "Invoked operator + with : 5, 3" and returns 8\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var o=r(36672);const t={},a=o.createContext(t);function i(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);