"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[40659],{3541:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/rspec/middle/verifying_partial_doubles","title":"verifying_partial_doubles","description":"\ud83d\udd12 Verifying Partial Doubles","source":"@site/docs/gems/rspec/middle/verifying_partial_doubles.md","sourceDirName":"gems/rspec/middle","slug":"/gems/rspec/middle/verifying_partial_doubles","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/verifying_partial_doubles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/middle/verifying_partial_doubles.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tagged_examples_filtering","permalink":"/keep-being-human-dev/docs/gems/rspec/middle/tagged_examples_filtering"},"next":{"title":"instance_double_interface","permalink":"/keep-being-human-dev/docs/gems/rspec/mocks_and_stubs/advanced/instance_double_interface"}}');var s=t(23420),i=t(65404);const a={},o=void 0,c={},d=[{value:"\ud83d\udd12 Verifying Partial Doubles",id:"-verifying-partial-doubles",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-verifying-partial-doubles",children:"\ud83d\udd12 Verifying Partial Doubles"}),"\n",(0,s.jsx)(n.p,{children:"Enable verifying partial doubles to ensure stubbed or mocked methods actually exist on the real object. This catches tests that drift from the implementation."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# spec/rails_helper.rb\nRSpec.configure do |config|\n  config.verify_partial_doubles = true\nend\n\n# spec/models/user_spec.rb\nRSpec.describe User do\n  it "stubs an existing method" do\n    allow(subject).to receive(:valid?).and_return(true)\n    expect(subject.valid?).to be_truthy\n  end\n\n  it "raises when stubbing a non-existent method" do\n    expect {\n      allow(subject).to receive(:nonexistent)\n    }.to raise_error(RSpec::Mocks::MockExpectationError)\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(36672);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);