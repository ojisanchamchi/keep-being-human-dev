"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[22682],{13690:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/i18n/expert/caching_translations_memcache","title":"caching_translations_memcache","description":"\ud83d\udcbe Caching Translations with MemCacheStore and Digest Keys","source":"@site/docs/rails/i18n/expert/caching_translations_memcache.md","sourceDirName":"rails/i18n/expert","slug":"/rails/i18n/expert/caching_translations_memcache","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/caching_translations_memcache","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/i18n/expert/caching_translations_memcache.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"translate_in_views","permalink":"/keep-being-human-dev/docs/rails/i18n/beginner/translate_in_views"},"next":{"title":"complex_pluralization_rules","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/complex_pluralization_rules"}}');var i=a(23420),s=a(65404);const c={},r=void 0,o={},l=[{value:"\ud83d\udcbe Caching Translations with MemCacheStore and Digest Keys",id:"-caching-translations-with-memcachestore-and-digest-keys",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-caching-translations-with-memcachestore-and-digest-keys",children:"\ud83d\udcbe Caching Translations with MemCacheStore and Digest Keys"}),"\n",(0,i.jsxs)(n.p,{children:["Under heavy load, caching each translation lookup can shave milliseconds off every ",(0,i.jsx)(n.code,{children:"t"})," call. Configure Rails to use your cache store and namespace keys by the YAML digest for automatic invalidation on file changes."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/i18n_cache.rb\nrequire 'digest'\n\nyaml_digest = Digest::MD5.hexdigest(\n  Dir[ Rails.root.join('config','locales','**','*.yml') ].sort.map { |f| File.read(f) }.join\n)\n\nRails.application.config.i18n.tap do |config|\n  config.cache_store = :mem_cache_store, { namespace: \"i18n:#{yaml_digest}\" }\n  config.backend = I18n::Backend::Cache.new(I18n.backend, ActiveSupport::Cache.lookup_store(config.cache_store))\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"Whenever locale files change, the digest changes, automatically expiring old cache entries. This ensures your translations stay fresh in production."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>r});var t=a(36672);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);