"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5289],{30771:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/symbols/advanced/symbol_to_proc","title":"symbol_to_proc","description":"\ud83e\udde9 Symbol#to_proc for Concise Enumeration","source":"@site/docs/ruby/symbols/advanced/symbol_to_proc.md","sourceDirName":"ruby/symbols/advanced","slug":"/ruby/symbols/advanced/symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_to_proc","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/symbols/advanced/symbol_to_proc.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/symbols/advanced/symbol_pattern_matching"},"next":{"title":"dynamic_symbol_creation","permalink":"/keep-being-human-dev/docs/ruby/symbols/beginner/dynamic_symbol_creation"}}');var t=n(23420),s=n(65404);const c={},a=void 0,i={},d=[{value:"\ud83e\udde9 Symbol#to_proc for Concise Enumeration",id:"-symbolto_proc-for-concise-enumeration",level:2}];function l(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"-symbolto_proc-for-concise-enumeration",children:"\ud83e\udde9 Symbol#to_proc for Concise Enumeration"}),"\n",(0,t.jsxs)(o.p,{children:["You can leverage the ",(0,t.jsx)(o.code,{children:"&:method_name"})," shorthand to convert symbols into Procs, making your collection operations and method chains ultra\u2011concise. Under the hood, ",(0,t.jsx)(o.code,{children:"Symbol#to_proc"})," builds a Proc that calls the given method on each element. This idiom works seamlessly with ",(0,t.jsx)(o.code,{children:"map"}),", ",(0,t.jsx)(o.code,{children:"select"}),", ",(0,t.jsx)(o.code,{children:"each"}),", and any method expecting a block, reducing boilerplate and improving readability."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:"# Before:\nnames = users.map { |user| user.name.upcase }\n# After:\nnames = users.map(&:name).map(&:upcase)\n\n# Chaining:\nidentifiers = records.map(&:profile).map(&:id)\n# Equivalent to:\nidentifiers = records.map { |r| r.profile.id }\n"})})]})}function m(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,o,n)=>{n.d(o,{R:()=>c,x:()=>a});var r=n(36672);const t={},s=r.createContext(t);function c(e){const o=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(s.Provider,{value:o},e.children)}}}]);