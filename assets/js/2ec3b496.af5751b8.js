"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[74485],{39367:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"gems/simple_form/middle/custom_input_wrapper","title":"custom_input_wrapper","description":"\ud83d\udee0\ufe0f Customize Input Wrappers","source":"@site/docs/gems/simple_form/middle/custom_input_wrapper.md","sourceDirName":"gems/simple_form/middle","slug":"/gems/simple_form/middle/custom_input_wrapper","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/custom_input_wrapper","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/simple_form/middle/custom_input_wrapper.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"collection_inputs","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/collection_inputs"},"next":{"title":"html_attribute_customization","permalink":"/keep-being-human-dev/docs/gems/simple_form/middle/html_attribute_customization"}}');var s=r(23420),i=r(65404);const o={},a=void 0,p={},m=[{value:"\ud83d\udee0\ufe0f Customize Input Wrappers",id:"\ufe0f-customize-input-wrappers",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"\ufe0f-customize-input-wrappers",children:"\ud83d\udee0\ufe0f Customize Input Wrappers"}),"\n",(0,s.jsxs)(t.p,{children:["Simple Form allows you to define and reuse custom wrappers for consistent form layouts. By configuring wrappers in ",(0,s.jsx)(t.code,{children:"config/initializers/simple_form.rb"}),", you can specify how labels, inputs, hints, and errors are rendered across your app."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# config/initializers/simple_form.rb\nSimpleForm.setup do |config|\n  config.wrappers :vertical_with_hint, tag: 'div', class: 'form-group' do |b|\n    b.use :label, class: 'form-label'\n    b.use :input, class: 'form-control'\n    b.use :hint,  wrap_with: { tag: 'small', class: 'form-text text-muted' }\n    b.use :error, wrap_with: { tag: 'div', class: 'invalid-feedback' }\n  end\nend\n\n# Usage in your form\n= simple_form_for @user, wrapper: :vertical_with_hint do |f|\n  = f.input :email, hint: 'We\u2019ll never share your email.'\n"})})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(36672);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);