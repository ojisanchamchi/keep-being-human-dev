"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[16472],{35400:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"ruby/syntax/expert/pattern_matching_guards","title":"pattern_matching_guards","description":"\ud83e\uddd0 Pattern Matching with Guards and Pin Operator","source":"@site/docs/ruby/syntax/expert/pattern_matching_guards.md","sourceDirName":"ruby/syntax/expert","slug":"/ruby/syntax/expert/pattern_matching_guards","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/pattern_matching_guards","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/expert/pattern_matching_guards.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"numbered_parameters","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/numbered_parameters"},"next":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/syntax/expert/scoped_refinements"}}');var r=t(23420),s=t(65404);const i={},d=void 0,o={},p=[{value:"\ud83e\uddd0 Pattern Matching with Guards and Pin Operator",id:"-pattern-matching-with-guards-and-pin-operator",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-pattern-matching-with-guards-and-pin-operator",children:"\ud83e\uddd0 Pattern Matching with Guards and Pin Operator"}),"\n",(0,r.jsxs)(n.p,{children:["Leverage Ruby 3's pattern matching in combination with guard clauses and the pin (",(0,r.jsx)(n.code,{children:"^"}),") operator to write highly declarative data validations. You can pin existing variables into patterns and apply conditional logic in a single ",(0,r.jsx)(n.code,{children:"case in"})," expression for complex checks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'def process_event(event)\n  id = /\\A\\d+\\z/\n  case event\n  in { type: "user_signup", payload: { user_id: ^id, age: Integer => age } } if age >= 18\n    puts "Adult signup: #{event[:payload][:user_id]}"\n  in { type: "user_signup", payload: { user_id: ^id } }\n    puts "Minor signup, needs approval"\n  else\n    puts "Unhandled event: #{event.inspect}"\n  end\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var a=t(36672);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);