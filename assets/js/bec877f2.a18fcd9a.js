"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43039],{23604:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/action_cable/advanced/rate_limiting_backpressure","title":"rate_limiting_backpressure","description":"\ud83d\uded1 Rate Limiting & Backpressure","source":"@site/docs/rails/action_cable/advanced/rate_limiting_backpressure.md","sourceDirName":"rails/action_cable/advanced","slug":"/rails/action_cable/advanced/rate_limiting_backpressure","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/rate_limiting_backpressure","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/advanced/rate_limiting_backpressure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"kafka_pubsub_adapter","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/kafka_pubsub_adapter"},"next":{"title":"broadcast_messages","permalink":"/keep-being-human-dev/docs/rails/action_cable/beginner/broadcast_messages"}}');var s=a(23420),r=a(65404);const i={},c=void 0,o={},l=[{value:"\ud83d\uded1 Rate Limiting &amp; Backpressure",id:"-rate-limiting--backpressure",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-rate-limiting--backpressure",children:"\ud83d\uded1 Rate Limiting & Backpressure"}),"\n",(0,s.jsx)(n.p,{children:"Implement backpressure to prevent flooding clients or overwhelming your server. Use an internal queue and process messages at a controlled rate, waiting for client acknowledgments before sending more."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# app/channels/throttled_channel.rb\nclass ThrottledChannel < ApplicationCable::Channel\n  def subscribed\n    @queue = []\n    @processing = false\n    stream_from stream_name\n  end\n\n  def receive(data)\n    @queue << data["payload"]\n    process_queue unless @processing\n  end\n\n  private\n  def stream_name\n    "throttle_#{current_user.id}"\n  end\n\n  def process_queue\n    @processing = true\n    while payload = @queue.shift\n      result = heavy_compute(payload)\n      ActionCable.server.broadcast(stream_name, result: result)\n      # wait for client ack before continuing\n      sleep 0.2\n    end\n  ensure\n    @processing = false\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["On the client side, send back an ",(0,s.jsx)(n.code,{children:"ack"})," message once processed to fine-tune the delay."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>c});var t=a(36672);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);