"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68660],{1241:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"ruby/file_io/advanced/encoding_transcoding","title":"encoding_transcoding","description":"\ud83d\udd24 On-the-Fly Encoding Conversion","source":"@site/docs/ruby/file_io/advanced/encoding_transcoding.md","sourceDirName":"ruby/file_io/advanced","slug":"/ruby/file_io/advanced/encoding_transcoding","permalink":"/keep-being-human-dev/docs/ruby/file_io/advanced/encoding_transcoding","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/file_io/advanced/encoding_transcoding.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"chunked_buffer_reading","permalink":"/keep-being-human-dev/docs/ruby/file_io/advanced/chunked_buffer_reading"},"next":{"title":"fcntl_flags","permalink":"/keep-being-human-dev/docs/ruby/file_io/advanced/fcntl_flags"}}');var d=o(23420),t=o(65404);const c={},r=void 0,a={},s=[{value:"\ud83d\udd24 On-the-Fly Encoding Conversion",id:"-on-the-fly-encoding-conversion",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-on-the-fly-encoding-conversion",children:"\ud83d\udd24 On-the-Fly Encoding Conversion"}),"\n",(0,d.jsxs)(n.p,{children:["When reading or writing files in different encodings, use ",(0,d.jsx)(n.code,{children:"File.open"})," with ",(0,d.jsx)(n.code,{children:":external_encoding"})," and ",(0,d.jsx)(n.code,{children:":internal_encoding"})," to transcode automatically. This avoids manual ",(0,d.jsx)(n.code,{children:"String#encode"})," calls and error handling."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"# Read UTF-16LE, write UTF-8\nFile.open('source.txt', 'r:utf-16le:utf-8') do |src|\n  File.open('dest.txt', 'w:utf-8') do |dst|\n    IO.copy_stream(src, dst)\n  end\nend\n"})}),"\n",(0,d.jsxs)(n.p,{children:["You can also specify ",(0,d.jsx)(n.code,{children:":invalid => :replace"})," or ",(0,d.jsx)(n.code,{children:":undef => :replace"})," to handle malformed data seamlessly."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var i=o(36672);const d={},t=i.createContext(d);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);