"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52967],{22954:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/methods/expert/module_prepend_chain","title":"module_prepend_chain","description":"\ud83d\udd00 Applying Behaviors Early with Module#prepend","source":"@site/docs/ruby/methods/expert/module_prepend_chain.md","sourceDirName":"ruby/methods/expert","slug":"/ruby/methods/expert/module_prepend_chain","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/module_prepend_chain","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/expert/module_prepend_chain.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_hooks_metaprogramming","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/method_hooks_metaprogramming"},"next":{"title":"pattern_matching_params","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/pattern_matching_params"}}');var s=t(23420),o=t(65404);const a={},p=void 0,i={},d=[{value:"\ud83d\udd00 Applying Behaviors Early with Module#prepend",id:"-applying-behaviors-early-with-moduleprepend",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-applying-behaviors-early-with-moduleprepend",children:"\ud83d\udd00 Applying Behaviors Early with Module#prepend"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"prepend"})," injects a module before the class in the method lookup chain, enabling wrappers around existing methods without aliasing. This pattern is ideal for cross-cutting concerns like logging or authorization."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'module Logging\n  def process(*args)\n    puts "Calling process with #{args.inspect}"\n    result = super\n    puts "Result: #{result.inspect}"\n    result\n  end\nend\n\nclass Processor\n  prepend Logging\n\n  def process(data)\n    data.map(&:to_s)\n  end\nend\n\nprocessor = Processor.new\nprocessor.process([1,2,3])\n# Output:\n# Calling process with [[1, 2, 3]]\n# Result: ["1", "2", "3"]\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>p});var r=t(36672);const s={},o=r.createContext(s);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function p(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);