"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61542],{39325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rails/middleware/middle/custom_request_logger_middleware","title":"custom_request_logger_middleware","description":"\ud83d\udd0d Log Request Details","source":"@site/docs/rails/middleware/middle/custom_request_logger_middleware.md","sourceDirName":"rails/middleware/middle","slug":"/rails/middleware/middle/custom_request_logger_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/custom_request_logger_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/middle/custom_request_logger_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"conditional_middleware_loading","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/conditional_middleware_loading"},"next":{"title":"middleware_insertion_points","permalink":"/keep-being-human-dev/docs/rails/middleware/middle/middleware_insertion_points"}}');var s=n(23420),i=n(65404);const a={},d=void 0,o={},l=[{value:"\ud83d\udd0d Log Request Details",id:"-log-request-details",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-log-request-details",children:"\ud83d\udd0d Log Request Details"}),"\n",(0,s.jsxs)(t.p,{children:["Creating a custom middleware allows you to capture and log request metadata before Rails even hits your controllers. This can be invaluable for performance monitoring or security auditing. Place your middleware in ",(0,s.jsx)(t.code,{children:"app/middleware"})," and then hook it into the stack."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# app/middleware/request_logger.rb\nclass RequestLogger\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    start_time = Process.clock_gettime(Process::CLOCK_MONOTONIC)\n    status, headers, response = @app.call(env)\n    duration = ((Process.clock_gettime(Process::CLOCK_MONOTONIC) - start_time) * 1000).round(2)\n    Rails.logger.info \"[RequestLogger] #{env['REQUEST_METHOD']} #{env['PATH_INFO']} completed in #{duration}ms with status #{status}\"\n    [status, headers, response]\n  end\nend\n"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    # Insert after Rails::Rack::Logger so you still see Rails logs\n    config.middleware.insert_after Rails::Rack::Logger, RequestLogger\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var r=n(36672);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);