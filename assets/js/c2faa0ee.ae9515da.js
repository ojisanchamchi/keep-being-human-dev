"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76930],{30028:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>_,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/metaprogramming/expert/dsl_instance_eval_class_eval","title":"dsl_instance_eval_class_eval","description":"\ud83c\udf00 Building DSLs with instanceeval and classeval","source":"@site/docs/ruby/metaprogramming/expert/dsl_instance_eval_class_eval.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/dsl_instance_eval_class_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dsl_instance_eval_class_eval","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/dsl_instance_eval_class_eval.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"composable_concerns_like_active_support","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/composable_concerns_like_active_support"},"next":{"title":"dynamic_constant_loading_with_const_missing","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/dynamic_constant_loading_with_const_missing"}}');var a=s(23420),i=s(65404);const l={},c=void 0,r={},o=[{value:"\ud83c\udf00 Building DSLs with instance_eval and class_eval",id:"-building-dsls-with-instance_eval-and-class_eval",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-building-dsls-with-instance_eval-and-class_eval",children:"\ud83c\udf00 Building DSLs with instance_eval and class_eval"}),"\n",(0,a.jsxs)(n.p,{children:["Create clean, internal DSLs by evaluating blocks in the context of target objects or classes. ",(0,a.jsx)(n.code,{children:"instance_eval"})," is perfect for defining instance-level behavior, while ",(0,a.jsx)(n.code,{children:"class_eval"})," (or ",(0,a.jsx)(n.code,{children:"module_eval"}),") works for class-level constructs."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class APIClient\ndef initialize(&block)\n  instance_eval(&block) if block_given?\nend\n\ndef endpoint(path)\n  @endpoint = path\nend\n\ndef method(name, &block)\n  self.class.class_eval do\n    define_method(name, &block)\n  end\nend\nend\n\nclient = APIClient.new do\n  endpoint '/users'\n  method :get_users do\n    get(@endpoint)\n  end\nend\n"})})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var t=s(36672);const a={},i=t.createContext(a);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);