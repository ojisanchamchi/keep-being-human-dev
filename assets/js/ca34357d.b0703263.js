"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53887],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(36672);const c={},i=s.createContext(c);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},79212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/pundit/expert/pundit_rspec_custom_matchers","title":"pundit_rspec_custom_matchers","description":"\ud83c\udfad Build Custom RSpec Matchers for Pundit Policies","source":"@site/docs/gems/pundit/expert/pundit_rspec_custom_matchers.md","sourceDirName":"gems/pundit/expert","slug":"/gems/pundit/expert/pundit_rspec_custom_matchers","permalink":"/keep-being-human-dev/docs/gems/pundit/expert/pundit_rspec_custom_matchers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/pundit/expert/pundit_rspec_custom_matchers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pundit_dynamic_context_scopes","permalink":"/keep-being-human-dev/docs/gems/pundit/expert/pundit_dynamic_context_scopes"},"next":{"title":"policy_scope_in_controller","permalink":"/keep-being-human-dev/docs/gems/pundit/middle/policy_scope_in_controller"}}');var c=n(23420),i=n(65404);const o={},r=void 0,p={},d=[{value:"\ud83c\udfad Build Custom RSpec Matchers for Pundit Policies",id:"-build-custom-rspec-matchers-for-pundit-policies",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"-build-custom-rspec-matchers-for-pundit-policies",children:"\ud83c\udfad Build Custom RSpec Matchers for Pundit Policies"}),"\n",(0,c.jsx)(t.p,{children:"To DRY up repetitive policy specs, define custom RSpec matchers that wrap Pundit\u2019s predicate methods. This yields concise, expressive tests and centralizes failure messages."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:'# spec/support/pundit_matchers.rb\nRSpec::Matchers.define :permit do |action|\n  match do |policy|\n    policy.public_send("#{action}?")\n  end\n\n  failure_message do |policy|\n    "expected #{policy.class} to permit :#{action} for #{policy.user.inspect} on #{policy.record.inspect}"\n  end\nend\n\nRSpec::Matchers.define :forbid do |action|\n  match do |policy|\n    !policy.public_send("#{action}?")\n  end\n\n  failure_message do |policy|\n    "expected #{policy.class} to forbid :#{action} for #{policy.user.inspect} on #{policy.record.inspect}"\n  end\nend\n\n# Load matchers automatically\n# spec/rails_helper.rb\nDir[Rails.root.join(\'spec/support/**/*.rb\')].each { |f| require f }\n'})}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"# spec/policies/post_policy_spec.rb\nRSpec.describe PostPolicy do\n  subject(:policy) { described_class.new(user, post) }\n\n  let(:post) { create(:post) }\n\n  context 'as an admin' do\n    let(:user) { create(:user, :admin) }\n    it { is_expected.to permit(:update) }\n    it { is_expected.to permit(:destroy) }\n  end\n\n  context 'as a regular user' do\n    let(:user) { create(:user) }\n    it { is_expected.to forbid(:destroy) }\n    it { is_expected.to forbid(:publish) }\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}}}]);