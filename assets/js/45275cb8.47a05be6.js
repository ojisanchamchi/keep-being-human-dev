"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[71393],{65404:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(36672);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},98162:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/fibers/expert/async_io_multiplexing","title":"async_io_multiplexing","description":"\u26a1 Asynchronous I/O Multiplexing with Fibers","source":"@site/docs/ruby/fibers/expert/async_io_multiplexing.md","sourceDirName":"ruby/fibers/expert","slug":"/ruby/fibers/expert/async_io_multiplexing","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_io_multiplexing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/expert/async_io_multiplexing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_gem_integration","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/async_gem_integration"},"next":{"title":"cooperative_fiber_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/expert/cooperative_fiber_scheduler"}}');var r=i(23420),s=i(65404);const o={},a=void 0,c={},l=[{value:"\u26a1 Asynchronous I/O Multiplexing with Fibers",id:"-asynchronous-io-multiplexing-with-fibers",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-asynchronous-io-multiplexing-with-fibers",children:"\u26a1 Asynchronous I/O Multiplexing with Fibers"}),"\n",(0,r.jsxs)(n.p,{children:["Leverage ",(0,r.jsx)(n.code,{children:"Fiber"})," with non\u2011blocking IO and ",(0,r.jsx)(n.code,{children:"IO.select"})," to build lightweight async sockets without external gems. You can wrap each connection in a Fiber that yields when its socket would block and resumes when data is available, enabling thousands of concurrent connections in a single thread."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class AsyncSocket\n  def initialize(socket)\n    @socket = socket\n  end\n\n  def read_nonblock(maxlen)\n    loop do\n      begin\n        return @socket.read_nonblock(maxlen)\n      rescue IO::WaitReadable\n        Fiber.yield(:readable)\n      end\n    end\n  end\n\n  def write_nonblock(data)\n    loop do\n      begin\n        return @socket.write_nonblock(data)\n      rescue IO::WaitWritable\n        Fiber.yield(:writable)\n      end\n    end\n  end\nend\n\n# Scheduler\ndef run(fibers)\n  while fibers.any?\n    readable, writable = select(fibers.map(&:value), fibers.map(&:value))\n    fibers.each do |f|\n      if readable&.include?(f.value) || writable&.include?(f.value)\n        f.resume\n      end\n    end\n  end\nend\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);