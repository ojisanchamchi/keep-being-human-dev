"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27798],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(36672);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}},83772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/pundit/beginner/pundit_basic_policy_usage","title":"pundit_basic_policy_usage","description":"\ud83d\udcdc Create a Basic Policy and Use authorize","source":"@site/docs/gems/pundit/beginner/pundit_basic_policy_usage.md","sourceDirName":"gems/pundit/beginner","slug":"/gems/pundit/beginner/pundit_basic_policy_usage","permalink":"/keep-being-human-dev/docs/gems/pundit/beginner/pundit_basic_policy_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/pundit/beginner/pundit_basic_policy_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"graphql_field_authorization","permalink":"/keep-being-human-dev/docs/gems/pundit/advanced/graphql_field_authorization"},"next":{"title":"pundit_install_setup","permalink":"/keep-being-human-dev/docs/gems/pundit/beginner/pundit_install_setup"}}');var i=t(23420),a=t(65404);const o={},r=void 0,c={},d=[{value:"\ud83d\udcdc Create a Basic Policy and Use authorize",id:"-create-a-basic-policy-and-use-authorize",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-create-a-basic-policy-and-use-authorize",children:"\ud83d\udcdc Create a Basic Policy and Use authorize"}),"\n",(0,i.jsxs)(n.p,{children:["Pundit policies define what actions a user can perform on resources. Generate a policy, define authorization methods, and use ",(0,i.jsx)(n.code,{children:"authorize"})," in your controllers to enforce them."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate a policy for Post\nrails generate pundit:policy post\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/policies/post_policy.rb\nclass PostPolicy < ApplicationPolicy\n  def update?\n    user.admin? || record.user_id == user.id\n  end\n\n  def destroy?\n    user.admin?\n  end\nend\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/controllers/posts_controller.rb\nclass PostsController < ApplicationController\n  before_action :set_post, only: %i[show edit update destroy]\n\n  def update\n    authorize @post\n    if @post.update(post_params)\n      redirect_to @post, notice: 'Post updated successfully.'\n    else\n      render :edit\n    end\n  end\n\n  private\n\n  def set_post\n    @post = Post.find(params[:id])\n  end\n\n  def post_params\n    params.require(:post).permit(:title, :content)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);