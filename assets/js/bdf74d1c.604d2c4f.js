"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[37440],{59532:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"ruby/hashes/expert/refinements_safe_hash_extensions","title":"refinements_safe_hash_extensions","description":"\ud83d\udee1\ufe0f Refinements for Safe Hash Extensions","source":"@site/docs/ruby/hashes/expert/refinements_safe_hash_extensions.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/refinements_safe_hash_extensions","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/refinements_safe_hash_extensions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/refinements_safe_hash_extensions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"pattern_matching_nested_hashes","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/pattern_matching_nested_hashes"},"next":{"title":"build_hash_each_with_object","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/build_hash_each_with_object"}}');var a=n(23420),r=n(65404);const i={},o=void 0,c={},h=[{value:"\ud83d\udee1\ufe0f Refinements for Safe Hash Extensions",id:"\ufe0f-refinements-for-safe-hash-extensions",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"\ufe0f-refinements-for-safe-hash-extensions",children:"\ud83d\udee1\ufe0f Refinements for Safe Hash Extensions"}),"\n",(0,a.jsx)(s.p,{children:"Monkey\u2010patching core classes can cause conflicts in large apps or gems. Ruby refinements provide localized patches:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"module HashSliceRefinement\n  refine ::Hash do\n    def slice(*keys)\n      keys.each_with_object({}) { |k, acc| acc[k] = self[k] if key?(k) }\n    end\n  end\nend\n\nusing HashSliceRefinement\nsettings = { a: 1, b: 2, c: 3 }\nslice = settings.slice(:a, :c)\n#=> {:a=>1, :c=>3}\n\n# Outside the `using` scope, `Hash#slice` remains untouched in other modules/gems.\n"})}),"\n",(0,a.jsx)(s.p,{children:"Refinements keep your patch contained, ensuring downstream gems aren\u2019t surprised by your custom helpers."})]})}function d(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(36672);const a={},r=t.createContext(a);function i(e){const s=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);