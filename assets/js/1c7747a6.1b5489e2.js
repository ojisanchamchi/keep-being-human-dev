"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86019],{65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(36672);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}},91592:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_support/expert/advanced_hashdeep_merge","title":"advanced_hashdeep_merge","description":"\ud83d\udd00 Perform Deep Merges on Indifferent Hashes","source":"@site/docs/rails/active_support/expert/advanced_hashdeep_merge.md","sourceDirName":"rails/active_support/expert","slug":"/rails/active_support/expert/advanced_hashdeep_merge","permalink":"/keep-being-human-dev/docs/rails/active_support/expert/advanced_hashdeep_merge","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/expert/advanced_hashdeep_merge.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"try_method","permalink":"/keep-being-human-dev/docs/rails/active_support/beginner/try_method"},"next":{"title":"cache_key_generation_extensibility","permalink":"/keep-being-human-dev/docs/rails/active_support/expert/cache_key_generation_extensibility"}}');var s=n(23420),i=n(65404);const a={},o=void 0,c={},d=[{value:"\ud83d\udd00 Perform Deep Merges on Indifferent Hashes",id:"-perform-deep-merges-on-indifferent-hashes",level:2}];function p(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-perform-deep-merges-on-indifferent-hashes",children:"\ud83d\udd00 Perform Deep Merges on Indifferent Hashes"}),"\n",(0,s.jsxs)(r.p,{children:["ActiveSupport adds ",(0,s.jsx)(r.code,{children:"deep_merge"})," to core hashes, but combining with ",(0,s.jsx)(r.code,{children:"HashWithIndifferentAccess"})," ensures indifferent key access throughout nested structures. This is indispensable for merging complex JSON configs."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:"config_a = { foo: { bar: 1 } }.with_indifferent_access\nconfig_b = { foo: { baz: 2 } }\nmerged = config_a.deep_merge(config_b)\n\n# merged[:foo][:bar] == 1; merged[:foo][:baz] == 2\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Wrap within an initializer to override ",(0,s.jsx)(r.code,{children:"Hash"})," globally if you need ubiquitous support."]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);