"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96896],{22679:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>s});const d=JSON.parse('{"id":"ruby/define_method/advanced/dynamic_method_proxy","title":"dynamic_method_proxy","description":"\ud83d\udd04 Dynamic Method Proxying with define_method","source":"@site/docs/ruby/define_method/advanced/dynamic_method_proxy.md","sourceDirName":"ruby/define_method/advanced","slug":"/ruby/define_method/advanced/dynamic_method_proxy","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/dynamic_method_proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/advanced/dynamic_method_proxy.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dsl_scope_capture","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/dsl_scope_capture"},"next":{"title":"memoization_via_define_method","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/memoization_via_define_method"}}');var i=t(23420),a=t(65404);const o={},r=void 0,c={},s=[{value:"\ud83d\udd04 Dynamic Method Proxying with define_method",id:"-dynamic-method-proxying-with-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-dynamic-method-proxying-with-define_method",children:"\ud83d\udd04 Dynamic Method Proxying with define_method"}),"\n",(0,i.jsx)(n.p,{children:"Create lightweight proxies by dynamically defining forwarding methods. This pattern avoids boilerplate and adapts automatically when the target object\u2019s interface changes."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'class ProxyBuilder\n  def initialize(target)\n    @target = target\n  end\n\n  # Dynamically proxy all public methods except initialize\n  target.public_methods(false).each do |m|\n    define_method(m) do |*args, &blk|\n      puts "Calling #{m} with "+args.inspect\n      @target.public_send(m, *args, &blk)\n    end\n  end\nend\n\nbackend = String.new("hello")\nproxy = ProxyBuilder.new(backend)\nproxy.upcase        # Logs: Calling upcase with []\n# => "HELLO"\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var d=t(36672);const i={},a=d.createContext(i);function o(e){const n=d.useContext(a);return d.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),d.createElement(a.Provider,{value:n},e.children)}}}]);