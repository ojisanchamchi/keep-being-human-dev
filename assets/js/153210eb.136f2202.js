"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82516],{47490:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/exceptions/middle/retry_transient_errors","title":"retry_transient_errors","description":"\ud83d\udd04 Implementing Retry Logic with retry","source":"@site/docs/ruby/exceptions/middle/retry_transient_errors.md","sourceDirName":"ruby/exceptions/middle","slug":"/ruby/exceptions/middle/retry_transient_errors","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/retry_transient_errors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/middle/retry_transient_errors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rescue_specific_exceptions","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/rescue_specific_exceptions"},"next":{"title":"fiber_async_io","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_async_io"}}');var i=r(23420),s=r(65404);const o={},c=void 0,a={},d=[{value:"\ud83d\udd04 Implementing Retry Logic with <code>retry</code>",id:"-implementing-retry-logic-with-retry",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h2,{id:"-implementing-retry-logic-with-retry",children:["\ud83d\udd04 Implementing Retry Logic with ",(0,i.jsx)(t.code,{children:"retry"})]}),"\n",(0,i.jsxs)(t.p,{children:["For transient errors (network hiccups, database deadlocks), you can retry the operation a fixed number of times before giving up. Use a loop counter and ",(0,i.jsx)(t.code,{children:"retry"})," inside ",(0,i.jsx)(t.code,{children:"rescue"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"attempts = 0\nbegin\n  attempts += 1\n  send_api_request\nrescue Net::OpenTimeout, Net::ReadTimeout => e\n  if attempts < 3\n    sleep(0.5)  # backoff\n    retry\n  else\n    raise e\n  end\nend\n"})}),"\n",(0,i.jsx)(t.p,{children:"This code retries up to 3 times on timeouts, with a brief pause between each try."})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(36672);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);