"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[32367],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var a=t(36672);const s={},i=a.createContext(s);function d(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),a.createElement(i.Provider,{value:n},e.children)}},67950:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/methods/middle/alias_method_and_super","title":"alias_method_and_super","description":"\ud83d\udcdd Aliasing Methods and Wrapping Behavior","source":"@site/docs/ruby/methods/middle/alias_method_and_super.md","sourceDirName":"ruby/methods/middle","slug":"/ruby/methods/middle/alias_method_and_super","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/alias_method_and_super","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/middle/alias_method_and_super.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unbound_method_binding","permalink":"/keep-being-human-dev/docs/ruby/methods/expert/unbound_method_binding"},"next":{"title":"default_keyword_arguments","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/default_keyword_arguments"}}');var s=t(23420),i=t(65404);const d={},o=void 0,r={},l=[{value:"\ud83d\udcdd Aliasing Methods and Wrapping Behavior",id:"-aliasing-methods-and-wrapping-behavior",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-aliasing-methods-and-wrapping-behavior",children:"\ud83d\udcdd Aliasing Methods and Wrapping Behavior"}),"\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"alias_method"}),", you can rename an existing method and wrap its behavior in a new method, while preserving the original. This is useful to inject logging, caching, or other cross-cutting concerns."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'class Calculator\n  def calculate(x, y)\n    x + y\n  end\n  # Alias original method\n  alias_method :calculate_without_logging, :calculate\n\n  # Redefine and wrap\n  def calculate(x, y)\n    puts "Calculating #{x} + #{y}"\n    result = calculate_without_logging(x, y)\n    puts "Result: #{result}"\n    result\n  end\nend\n\ncalc = Calculator.new\ncalc.calculate(2,3)\n# Output:\n# Calculating 2 + 3\n# Result: 5\n'})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);