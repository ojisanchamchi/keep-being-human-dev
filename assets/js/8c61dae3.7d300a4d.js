"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[46853],{34531:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/set/advanced/set_key_extractor","title":"set_key_extractor","description":"\ud83d\udddd\ufe0f Custom Key\u2010Based Deduplication in Set","source":"@site/docs/ruby/set/advanced/set_key_extractor.md","sourceDirName":"ruby/set/advanced","slug":"/ruby/set/advanced/set_key_extractor","permalink":"/keep-being-human-dev/docs/ruby/set/advanced/set_key_extractor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/set/advanced/set_key_extractor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_oj_for_high_performance","permalink":"/keep-being-human-dev/docs/ruby/serialization/middle/using_oj_for_high_performance"},"next":{"title":"set_thread_safe","permalink":"/keep-being-human-dev/docs/ruby/set/advanced/set_thread_safe"}}');var a=t(23420),c=t(65404);const o={},r=void 0,i={},d=[{value:"\ud83d\udddd\ufe0f Custom Key\u2010Based Deduplication in Set",id:"\ufe0f-custom-keybased-deduplication-in-set",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\ufe0f-custom-keybased-deduplication-in-set",children:"\ud83d\udddd\ufe0f Custom Key\u2010Based Deduplication in Set"}),"\n",(0,a.jsxs)(n.p,{children:["By default, ",(0,a.jsx)(n.code,{children:"Set"})," uses each object\u2019s ",(0,a.jsx)(n.code,{children:"hash"}),"/",(0,a.jsx)(n.code,{children:"eql?"})," to decide uniqueness. You can subclass ",(0,a.jsx)(n.code,{children:"Set"})," to accept a key\u2010extractor block, allowing you to dedupe by any attribute. This technique is useful when you need a \u201cset\u201d of complex objects keyed by a single field."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'set'\n\nclass KeyedSet < Set\n  def initialize(enum = nil, &key_proc)\n    @key_proc = key_proc || proc { |x| x }\n    super(enum)\n  end\n\n  def add(obj)\n    key = @key_proc.call(obj)\n    # Remove any existing element with the same key\n    existing = detect { |e| @key_proc.call(e) == key }\n    delete(existing) if existing\n    super(obj)\n  end\nend\n\n# Usage: dedupe User instances by email\nusers = [\n  OpenStruct.new(name: 'Alice', email: 'a@x.com'),\n  OpenStruct.new(name: 'Alicia', email: 'a@x.com'),\n  OpenStruct.new(name: 'Bob',   email: 'b@x.com')\n]\n\nset = KeyedSet.new(users) { |u| u.email }\nputs set.to_a.map(&:name)\n# => [\"Alicia\", \"Bob\"]  # keeps the last one for each email\n"})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(36672);const a={},c=s.createContext(a);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);