"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[709],{33023:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/ranges/beginner/inclusive_vs_exclusive_ranges","title":"inclusive_vs_exclusive_ranges","description":"\ud83d\udfe2 Understanding Inclusive vs Exclusive Ranges","source":"@site/docs/ruby/ranges/beginner/inclusive_vs_exclusive_ranges.md","sourceDirName":"ruby/ranges/beginner","slug":"/ruby/ranges/beginner/inclusive_vs_exclusive_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/beginner/inclusive_vs_exclusive_ranges","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/ranges/beginner/inclusive_vs_exclusive_ranges.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"convert_range_to_array","permalink":"/keep-being-human-dev/docs/ruby/ranges/beginner/convert_range_to_array"},"next":{"title":"iterating_over_ranges","permalink":"/keep-being-human-dev/docs/ruby/ranges/beginner/iterating_over_ranges"}}');var i=s(23420),t=s(65404);const a={},c=void 0,u={},o=[{value:"\ud83d\udfe2 Understanding Inclusive vs Exclusive Ranges",id:"-understanding-inclusive-vs-exclusive-ranges",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-understanding-inclusive-vs-exclusive-ranges",children:"\ud83d\udfe2 Understanding Inclusive vs Exclusive Ranges"}),"\n",(0,i.jsxs)(n.p,{children:["Ruby provides two types of ranges: inclusive (",(0,i.jsx)(n.code,{children:".."}),") and exclusive (",(0,i.jsx)(n.code,{children:"..."}),"). Inclusive ranges include the end value, while exclusive ranges omit it. This difference is crucial when iterating or slicing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'(1..5).to_a    # => [1, 2, 3, 4, 5]\n(1...5).to_a   # => [1, 2, 3, 4]\n(\'a\'..\'d\').to_a # => ["a", "b", "c", "d"]\n(\'a\'...\'d\').to_a# => ["a", "b", "c"]\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(36672);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);