"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3422],{62990:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/reflection/beginner/list_available_methods","title":"list_available_methods","description":"\ud83d\udcdd Inspect Available Methods","source":"@site/docs/ruby/reflection/beginner/list_available_methods.md","sourceDirName":"ruby/reflection/beginner","slug":"/ruby/reflection/beginner/list_available_methods","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/list_available_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/beginner/list_available_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"inspect_instance_variables","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/inspect_instance_variables"},"next":{"title":"use_respond_to","permalink":"/keep-being-human-dev/docs/ruby/reflection/beginner/use_respond_to"}}');var i=t(23420),a=t(65404);const o={},r=void 0,l={},c=[{value:"\ud83d\udcdd Inspect Available Methods",id:"-inspect-available-methods",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-inspect-available-methods",children:"\ud83d\udcdd Inspect Available Methods"}),"\n",(0,i.jsxs)(n.p,{children:["Reflective programming often starts with discovering what methods an object or class provides. Use the ",(0,i.jsx)(n.code,{children:"methods"})," or ",(0,i.jsx)(n.code,{children:"instance_methods"})," reflection APIs to list available methods and explore an object's capabilities."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# List all public methods of an object\n"hello".methods.sort.take(10)\n#=> [:%, :* , :+ , :< , :<= , :<< , :<=? , :<=> , :== , :===]\n\n# List instance methods defined on String class (excluding inherited ones)\nString.instance_methods(false)\n#=> [:swapcase, :swapcase!, :next, :next!, ...]\n'})}),"\n",(0,i.jsx)(n.p,{children:"By inspecting methods, you can learn what operations are supported before calling them dynamically."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(36672);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);