"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[80769],{39855:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/currying_and_partial_application","title":"currying_and_partial_application","description":"\ud83e\udde9 Leveraging Currying for Partial Application","source":"@site/docs/ruby/procs_and_lambdas/expert/currying_and_partial_application.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/currying_and_partial_application","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/currying_and_partial_application","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/currying_and_partial_application.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"async_event_driven_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/async_event_driven_procs"},"next":{"title":"dynamic_arity_validation","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/dynamic_arity_validation"}}');var t=n(23420),i=n(65404);const c={},o=void 0,s={},d=[{value:"\ud83e\udde9 Leveraging Currying for Partial Application",id:"-leveraging-currying-for-partial-application",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-leveraging-currying-for-partial-application",children:"\ud83e\udde9 Leveraging Currying for Partial Application"}),"\n",(0,t.jsxs)(a.p,{children:["Currying transforms a multi-argument ",(0,t.jsx)(a.code,{children:"Proc"})," or ",(0,t.jsx)(a.code,{children:"lambda"})," into a chain of single-argument functions, enabling advanced reuse and composition. Use ",(0,t.jsx)(a.code,{children:"#curry"})," on a lambda to create partially applied functions at runtime, saving boilerplate when binding frequently used parameters."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"sum = ->(a, b, c) { a + b + c }\ncurried_sum = sum.curry\nadd_five = curried_sum.call(5)\nadd_five_and_three = add_five.call(3)\nputs add_five_and_three.call(2) # => 10\n"})}),"\n",(0,t.jsx)(a.p,{children:"You can also use this pattern in higher-order functions or middleware stacks to inject common context without rewriting logic."})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>c,x:()=>o});var r=n(36672);const t={},i=r.createContext(t);function c(e){const a=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);