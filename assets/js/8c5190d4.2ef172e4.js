"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[19197],{36218:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/sockets/middle/tcp_client_basic","title":"tcp_client_basic","description":"\ud83d\udd0c Basic TCP Client with TCPSocket","source":"@site/docs/ruby/sockets/middle/tcp_client_basic.md","sourceDirName":"ruby/sockets/middle","slug":"/ruby/sockets/middle/tcp_client_basic","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/tcp_client_basic","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/sockets/middle/tcp_client_basic.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"socket_select_multiplex","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/socket_select_multiplex"},"next":{"title":"tcp_server_basic","permalink":"/keep-being-human-dev/docs/ruby/sockets/middle/tcp_server_basic"}}');var c=s(23420),o=s(65404);const i={},r=void 0,a={},d=[{value:"\ud83d\udd0c Basic TCP Client with TCPSocket",id:"-basic-tcp-client-with-tcpsocket",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h2,{id:"-basic-tcp-client-with-tcpsocket",children:"\ud83d\udd0c Basic TCP Client with TCPSocket"}),"\n",(0,c.jsxs)(t.p,{children:["This tip shows how to create a simple TCP client using Ruby\u2019s built\u2011in ",(0,c.jsx)(t.code,{children:"TCPSocket"}),". You\u2019ll learn how to connect to a remote server, send a request, and handle the response in a straightforward way."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"require 'socket'\n\nhost = 'example.com'\nport = 80\nsocket = TCPSocket.new(host, port)\n\n# Send an HTTP GET request\nsocket.puts \"GET / HTTP/1.1\\r\\nHost: #{host}\\r\\nConnection: close\\r\\n\\r\\n\"\n\n# Read and print the response\nwhile line = socket.gets do\n  puts line\nend\n\nsocket.close\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Adjust ",(0,c.jsx)(t.code,{children:"host"})," and ",(0,c.jsx)(t.code,{children:"port"})," as needed. Always ensure you close the socket to free system resources."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>r});var n=s(36672);const c={},o=n.createContext(c);function i(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);