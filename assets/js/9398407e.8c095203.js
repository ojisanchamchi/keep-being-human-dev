"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31360],{17943:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/directory_management/expert/cross_platform_realtime_dir_watcher","title":"cross_platform_realtime_dir_watcher","description":"\ud83d\udd0d Cross-Platform Real-Time Directory Watcher with Event Batching","source":"@site/docs/ruby/directory_management/expert/cross_platform_realtime_dir_watcher.md","sourceDirName":"ruby/directory_management/expert","slug":"/ruby/directory_management/expert/cross_platform_realtime_dir_watcher","permalink":"/keep-being-human-dev/docs/ruby/directory_management/expert/cross_platform_realtime_dir_watcher","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/directory_management/expert/cross_platform_realtime_dir_watcher.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"recursive_directory_creation","permalink":"/keep-being-human-dev/docs/ruby/directory_management/beginner/recursive_directory_creation"},"next":{"title":"parallel_lazy_directory_traversal","permalink":"/keep-being-human-dev/docs/ruby/directory_management/expert/parallel_lazy_directory_traversal"}}');var a=r(23420),i=r(65404);const c={},s=void 0,o={},d=[{value:"\ud83d\udd0d Cross-Platform Real-Time Directory Watcher with Event Batching",id:"-cross-platform-real-time-directory-watcher-with-event-batching",level:2}];function u(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-cross-platform-real-time-directory-watcher-with-event-batching",children:"\ud83d\udd0d Cross-Platform Real-Time Directory Watcher with Event Batching"}),"\n",(0,a.jsxs)(n.p,{children:["Building a robust watcher requires handling different backends (inotify, FSEvents, Windows APIs) and coalescing noisy events (e.g., editor temp writes). This example uses ",(0,a.jsx)(n.code,{children:"rb-inotify"})," on Linux and ",(0,a.jsx)(n.code,{children:"rb-fsevent"})," on macOS, unified under a concurrent queue with batch de\u2011duplication."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'rb-inotify'\nrequire 'rb-fsevent'\nrequire 'concurrent-ruby'\n\nclass DirectoryWatcher\n  def initialize(paths)\n    @paths = Array(paths)\n    @queue = Concurrent::Array.new\n    @mutex = Mutex.new\n  end\n\n  def run\n    if RUBY_PLATFORM =~ /darwin/\n      @watcher = FSEvent.new\n      @watcher.watch(@paths, file_events: true) { |directories| enqueue(directories) }\n      @watcher.run\n    else\n      notifier = INotify::Notifier.new\n      @paths.each { |p| notifier.watch(p, :modify, :create, :delete, :move) { |e| enqueue([e.name]) } }\n      notifier.run!\n    end\n\n    process_batches\n  end\n\n  private\n\n  def enqueue(events)\n    @mutex.synchronize { @queue.concat(Array(events)) }\n  end\n\n  def process_batches\n    loop do\n      sleep 0.5\n      @mutex.synchronize do\n        next if @queue.empty?\n        batch = @queue.uniq\n        @queue.clear\n        handle_batch(batch)\n      end\n    end\n  end\n\n  def handle_batch(batch)\n    batch.each do |file|\n      # your custom logic: reload, sync, backup, etc.\n      puts \"Detected change in: \", file\n    end\n  end\nend\n\n# Usage:\nDirectoryWatcher.new('/srv/shared_assets').run\n"})}),"\n",(0,a.jsx)(n.p,{children:"This structure:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Adapts to platform-specific APIs."}),"\n",(0,a.jsx)(n.li,{children:"Collects events into a concurrent array."}),"\n",(0,a.jsx)(n.li,{children:"Coalesces duplicates every 0.5s to avoid thrash."}),"\n",(0,a.jsx)(n.li,{children:"Processes each unique path in bulk, enabling batched actions."}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>s});var t=r(36672);const a={},i=t.createContext(a);function c(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);