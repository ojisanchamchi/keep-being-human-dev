"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[93939],{65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var i=o(36672);const t={},s=i.createContext(t);function r(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(s.Provider,{value:n},e.children)}},95853:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/oop/beginner/modules_mixins","title":"modules_mixins","description":"\ud83d\udca1 Mix in Behavior with Modules","source":"@site/docs/ruby/oop/beginner/modules_mixins.md","sourceDirName":"ruby/oop/beginner","slug":"/ruby/oop/beginner/modules_mixins","permalink":"/keep-being-human-dev/docs/ruby/oop/beginner/modules_mixins","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/beginner/modules_mixins.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_overriding","permalink":"/keep-being-human-dev/docs/ruby/oop/beginner/method_overriding"},"next":{"title":"bytecode_introspection_mod","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/bytecode_introspection_mod"}}');var t=o(23420),s=o(65404);const r={},d=void 0,a={},u=[{value:"\ud83d\udca1 Mix in Behavior with Modules",id:"-mix-in-behavior-with-modules",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-mix-in-behavior-with-modules",children:"\ud83d\udca1 Mix in Behavior with Modules"}),"\n",(0,t.jsxs)(n.p,{children:["Modules let you share methods across classes without inheritance. Use ",(0,t.jsx)(n.code,{children:"include ModuleName"})," to mix in instance methods."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'module Walkable\n  def walk\n    "I am walking!"\n  end\nend\n\nclass Person\n  include Walkable\nend\n\np = Person.new\nputs p.walk  # => "I am walking!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);