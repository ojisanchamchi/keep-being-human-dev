"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53115],{44280:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/classes_and_modules/beginner/attr_accessors","title":"attr_accessors","description":"\ud83d\udd13 Simplify Accessors with attr_*","source":"@site/docs/ruby/classes_and_modules/beginner/attr_accessors.md","sourceDirName":"ruby/classes_and_modules/beginner","slug":"/ruby/classes_and_modules/beginner/attr_accessors","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/beginner/attr_accessors","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/beginner/attr_accessors.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"using_refinements","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/advanced/using_refinements"},"next":{"title":"basic_class_definition","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/beginner/basic_class_definition"}}');var r=t(23420),a=t(65404);const c={},o=void 0,i={},d=[{value:"\ud83d\udd13 Simplify Accessors with <code>attr_*</code>",id:"-simplify-accessors-with-attr_",level:2}];function l(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h2,{id:"-simplify-accessors-with-attr_",children:["\ud83d\udd13 Simplify Accessors with ",(0,r.jsx)(s.code,{children:"attr_*"})]}),"\n",(0,r.jsxs)(s.p,{children:["Ruby provides ",(0,r.jsx)(s.code,{children:"attr_reader"}),", ",(0,r.jsx)(s.code,{children:"attr_writer"}),", and ",(0,r.jsx)(s.code,{children:"attr_accessor"})," to generate getter and setter methods automatically. This reduces boilerplate and keeps your class definition concise. Choose the appropriate accessor method based on whether you need read, write, or both."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-ruby",children:"class Person\n  attr_reader :name       # getter only\n  attr_writer :age        # setter only\n  attr_accessor :email    # both getter and setter\n\n  def initialize(name)\n    @name = name\n  end\nend\n"})})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>c,x:()=>o});var n=t(36672);const r={},a=n.createContext(r);function c(e){const s=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);