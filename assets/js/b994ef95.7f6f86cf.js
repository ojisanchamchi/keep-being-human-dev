"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4504],{4305:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module","title":"prepend_hooks_module","description":"\ud83d\udee0\ufe0f Prepending Custom Hooks with Modules","source":"@site/docs/gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/expert","slug":"/gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/expert/prepend_hooks_module.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"metadata_based_hooks","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/expert/metadata_based_hooks"},"next":{"title":"around_hooks_custom_setup","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/middle/around_hooks_custom_setup"}}');var t=n(23420),r=n(65404);const d={},c=void 0,i={},a=[{value:"\ud83d\udee0\ufe0f Prepending Custom Hooks with Modules",id:"\ufe0f-prepending-custom-hooks-with-modules",level:2}];function p(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h2,{id:"\ufe0f-prepending-custom-hooks-with-modules",children:"\ud83d\udee0\ufe0f Prepending Custom Hooks with Modules"}),"\n",(0,t.jsxs)(o.p,{children:["Inject global behavior into all example groups by prepending hook modules into RSpec\u2019s hook system. This technique allows you to implement cross-cutting concerns (e.g., DB sandboxing, logging) without modifying individual specs. Use ",(0,t.jsx)(o.code,{children:"prepend_before"})," and ",(0,t.jsx)(o.code,{children:"prepend_after"})," within a module, and include that module via ",(0,t.jsx)(o.code,{children:"config.extend"})," or ",(0,t.jsx)(o.code,{children:"config.include"}),"."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ruby",children:"module SandboxHooks\n  def self.prepended(base)\n    base.prepend_before(:context) do\n      DB.start_sandbox\n      RSpec.configuration.reporter.message '\ud83d\udd10 Sandbox started'\n    end\n    base.prepend_after(:context) do\n      DB.rollback_sandbox\n      RSpec.configuration.reporter.message '\ud83d\udd13 Sandbox rolled back'\n    end\n  end\nend\n\nRSpec.configure do |config|\n  config.extend SandboxHooks\nend\n\nRSpec.describe User, type: :model do\n  # before any tests in this group, sandbox is started\n  # after group runs, sandbox is rolled back\nend\n"})}),"\n",(0,t.jsxs)(o.p,{children:["By prepending, you ensure your hooks run before any other ",(0,t.jsx)(o.code,{children:"before(:context)"})," logic, giving you full control over setup and teardown order."]})]})}function l(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},65404:(e,o,n)=>{n.d(o,{R:()=>d,x:()=>c});var s=n(36672);const t={},r=s.createContext(t);function d(e){const o=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);