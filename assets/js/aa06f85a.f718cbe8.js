"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4903],{9202:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>u,frontMatter:()=>d,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"ruby/reflection/advanced/method_source_reloader","title":"method_source_reloader","description":"\u2728 Reload and Patch Method Source at Runtime","source":"@site/docs/ruby/reflection/advanced/method_source_reloader.md","sourceDirName":"ruby/reflection/advanced","slug":"/ruby/reflection/advanced/method_source_reloader","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/method_source_reloader","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/reflection/advanced/method_source_reloader.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_method_generation","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/dynamic_method_generation"},"next":{"title":"runtime_constant_injection","permalink":"/keep-being-human-dev/docs/ruby/reflection/advanced/runtime_constant_injection"}}');var r=t(23420),a=t(65404);const d={},c=void 0,s={},i=[{value:"\u2728 Reload and Patch Method Source at Runtime",id:"-reload-and-patch-method-source-at-runtime",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-reload-and-patch-method-source-at-runtime",children:"\u2728 Reload and Patch Method Source at Runtime"}),"\n",(0,r.jsxs)(n.p,{children:["Combine ",(0,r.jsx)(n.code,{children:"Method#source_location"})," with file I/O and ",(0,r.jsx)(n.code,{children:"Module#module_eval"})," to reload or patch a method\u2019s implementation on the fly. This pattern is powerful for live patching in long\u2011running processes or during debugging."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# Locate and reload method from its source file\ndef reload_method(klass, method_name)\n  file, line = klass.instance_method(method_name).source_location\n  src = File.readlines(file)[line-1..-1].take_while{|l| !l.match(/^end/) }.join\n  klass.module_eval(\"def #{method_name}\\n#{src}\\nend\")\nend\n\n# Example: patch User#greet\nclass User; def greet; 'hi'; end; end\n# Edit user.rb on disk to change greet implementation\nreload_method(User, :greet)\nputs User.new.greet  # reflects updated source\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>c});var o=t(36672);const r={},a=o.createContext(r);function d(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);