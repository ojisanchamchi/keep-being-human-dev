"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[26932],{65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>a});var n=t(36672);const o={},s=n.createContext(o);function i(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:r},e.children)}},90991:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/forms/expert/form_object_pattern","title":"form_object_pattern","description":"\ud83d\udd27 Form Object Pattern with ActiveModel for Complex Workflows","source":"@site/docs/rails/forms/expert/form_object_pattern.md","sourceDirName":"rails/forms/expert","slug":"/rails/forms/expert/form_object_pattern","permalink":"/keep-being-human-dev/docs/rails/forms/expert/form_object_pattern","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/forms/expert/form_object_pattern.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_nested_forms","permalink":"/keep-being-human-dev/docs/rails/forms/expert/dynamic_nested_forms"},"next":{"title":"i18n_and_accessibility","permalink":"/keep-being-human-dev/docs/rails/forms/expert/i18n_and_accessibility"}}');var o=t(23420),s=t(65404);const i={},a=void 0,c={},l=[{value:"\ud83d\udd27 Form Object Pattern with ActiveModel for Complex Workflows",id:"-form-object-pattern-with-activemodel-for-complex-workflows",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"-form-object-pattern-with-activemodel-for-complex-workflows",children:"\ud83d\udd27 Form Object Pattern with ActiveModel for Complex Workflows"}),"\n",(0,o.jsxs)(r.p,{children:["Use PORO form objects to decouple form logic from AR models when saving to multiple tables or invoking service calls. Include ",(0,o.jsx)(r.code,{children:"ActiveModel::Model"})," and define custom validations, mapping input to services in a single transaction."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"# app/forms/user_signup_form.rb\nclass UserSignupForm\n  include ActiveModel::Model\n  attr_accessor :email, :password, :profile_attributes\n  validates :email, format: /@/, presence: true\n  validates :password, length: { minimum: 8 }\n  validate :unique_email\n\n  def save\n    return false unless valid?\n    ActiveRecord::Base.transaction do\n      user = User.create!(email: email, password: password)\n      user.create_profile!(profile_attributes)\n      WelcomeMailer.welcome_email(user).deliver_later\n    end\n    true\n  end\n\n  private\n  def unique_email\n    errors.add(:email, 'is taken') if User.exists?(email: email)\n  end\nend\n\n# In controller\ndef create\n  form = UserSignupForm.new(signup_params)\n  if form.save\n    redirect_to root_path, notice: 'Signed up!'\n  else\n    render :new\n  end\nend\n"})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);