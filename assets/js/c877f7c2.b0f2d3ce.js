"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63842],{49343:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rails/i18n/expert/thread_safe_locale_switching","title":"thread_safe_locale_switching","description":"\u2699\ufe0f Thread-Safe Dynamic Locale Switching","source":"@site/docs/rails/i18n/expert/thread_safe_locale_switching.md","sourceDirName":"rails/i18n/expert","slug":"/rails/i18n/expert/thread_safe_locale_switching","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/thread_safe_locale_switching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/i18n/expert/thread_safe_locale_switching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"namespace_lazy_lookups","permalink":"/keep-being-human-dev/docs/rails/i18n/expert/namespace_lazy_lookups"},"next":{"title":"datetime_localization","permalink":"/keep-being-human-dev/docs/rails/i18n/middle/datetime_localization"}}');var i=n(23420),s=n(65404);const r={},c=void 0,o={},l=[{value:"\u2699\ufe0f Thread-Safe Dynamic Locale Switching",id:"\ufe0f-thread-safe-dynamic-locale-switching",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h2,{id:"\ufe0f-thread-safe-dynamic-locale-switching",children:"\u2699\ufe0f Thread-Safe Dynamic Locale Switching"}),"\n",(0,i.jsxs)(a.p,{children:["On multi\u2011threaded servers (Puma/Unicorn), set per\u2011request locale without leaking it across threads. Use an ",(0,i.jsx)(a.code,{children:"around_action"})," to wrap requests, falling back to the default locale in ",(0,i.jsx)(a.code,{children:"ensure"}),"."]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-ruby",children:"# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  around_action :switch_locale\n\n  private\n\n  def switch_locale(&action)\n    locale = params[:locale] || request.headers['Accept-Language']&.scan(/^[a-z]{2}/)&.first\n    I18n.with_locale(locale || I18n.default_locale, &action)\n  end\nend\n"})}),"\n",(0,i.jsxs)(a.p,{children:["This approach uses ",(0,i.jsx)(a.code,{children:"I18n.with_locale"}),", which is thread-safe and guarantees the locale resets after the block, avoiding bleed into other requests."]})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>c});var t=n(36672);const i={},s=t.createContext(i);function r(e){const a=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);