"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[96625],{3301:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>u,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gems/redis/expert/redis_hyperloglog_unique_counts","title":"redis_hyperloglog_unique_counts","description":"\ud83d\udcca High-Performance Unique Counters with HyperLogLog","source":"@site/docs/gems/redis/expert/redis_hyperloglog_unique_counts.md","sourceDirName":"gems/redis/expert","slug":"/gems/redis/expert/redis_hyperloglog_unique_counts","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_hyperloglog_unique_counts","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/expert/redis_hyperloglog_unique_counts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"working_with_lists","permalink":"/keep-being-human-dev/docs/gems/redis/beginner/working_with_lists"},"next":{"title":"redis_lua_atomic_operations","permalink":"/keep-being-human-dev/docs/gems/redis/expert/redis_lua_atomic_operations"}}');var o=t(23420),s=t(65404);const i={},u=void 0,a={},d=[{value:"\ud83d\udcca High-Performance Unique Counters with HyperLogLog",id:"-high-performance-unique-counters-with-hyperloglog",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-high-performance-unique-counters-with-hyperloglog",children:"\ud83d\udcca High-Performance Unique Counters with HyperLogLog"}),"\n",(0,o.jsx)(n.p,{children:"Use Redis HyperLogLog to maintain approximate unique counts with minimal memory (~12kB) even at billions of distinct elements. Perfect for analytics, tracking UVs, or deduplicated metrics."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/services/unique_user_counter.rb\nclass UniqueUserCounter\n  PREFIX = 'users:uv:'\n\n  def track(user_id, date = Date.today)\n    key = PREFIX + date.to_s\n    REDIS.pfadd(key, user_id)\n    REDIS.expire(key, 86_400 * 30) # retain for 30 days\n  end\n\n  def count(date = Date.today)\n    key = PREFIX + date.to_s\n    REDIS.pfcount(key)\n  end\n\n  def multi_day_count(*dates)\n    keys = dates.map { |d| PREFIX + d.to_s }\n    temp = PREFIX + 'tmp:' + SecureRandom.uuid\n    REDIS.pfmerge(temp, *keys)\n    count = REDIS.pfcount(temp)\n    REDIS.del(temp)\n    count\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>u});var r=t(36672);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function u(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);