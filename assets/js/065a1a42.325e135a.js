"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[67839],{65404:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>i});var r=n(36672);const d={},t=r.createContext(d);function s(e){const a=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),r.createElement(t.Provider,{value:a},e.children)}},70725:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"gems/faraday/middle/custom_middleware_integration","title":"custom_middleware_integration","description":"\ud83d\udd0c Custom Middleware Integration","source":"@site/docs/gems/faraday/middle/custom_middleware_integration.md","sourceDirName":"gems/faraday/middle","slug":"/gems/faraday/middle/custom_middleware_integration","permalink":"/keep-being-human-dev/docs/gems/faraday/middle/custom_middleware_integration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faraday/middle/custom_middleware_integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"thread_safe_connection_pool","permalink":"/keep-being-human-dev/docs/gems/faraday/expert/thread_safe_connection_pool"},"next":{"title":"timeouts_and_retries","permalink":"/keep-being-human-dev/docs/gems/faraday/middle/timeouts_and_retries"}}');var d=n(23420),t=n(65404);const s={},i=void 0,o={},c=[{value:"\ud83d\udd0c Custom Middleware Integration",id:"-custom-middleware-integration",level:2}];function u(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(a.h2,{id:"-custom-middleware-integration",children:"\ud83d\udd0c Custom Middleware Integration"}),"\n",(0,d.jsx)(a.p,{children:"Faraday allows you to inject your own middleware into the request/response pipeline to encapsulate cross-cutting concerns like logging, instrumentation, or custom headers. By defining and registering a middleware class, you can keep your code DRY and easier to test."}),"\n",(0,d.jsxs)(a.p,{children:["First, create a custom middleware that inherits from ",(0,d.jsx)(a.code,{children:"Faraday::Middleware"})," or ",(0,d.jsx)(a.code,{children:"Faraday::Response::Middleware"}),":"]}),"\n",(0,d.jsx)(a.pre,{children:(0,d.jsx)(a.code,{className:"language-ruby",children:"# lib/faraday/middleware/add_request_id.rb\nrequire 'faraday'\n\nmodule Faraday\n  module Middleware\n    class AddRequestId < Faraday::Middleware\n      def call(env)\n        env.request_headers['X-Request-ID'] ||= SecureRandom.uuid\n        @app.call(env)\n      end\n    end\n  end\nend\n"})}),"\n",(0,d.jsx)(a.p,{children:"Next, register and use it when building your connection:"}),"\n",(0,d.jsx)(a.pre,{children:(0,d.jsx)(a.code,{className:"language-ruby",children:"require 'faraday'\nrequire_relative 'middleware/add_request_id'\n\nFaraday::Middleware.register_middleware add_request_id: Faraday::Middleware::AddRequestId\n\nconn = Faraday.new(url: 'https://api.example.com') do |faraday|\n  faraday.request  :json                    # encode req bodies as JSON\n  faraday.response :logger, bodies: true    # log requests & responses\n  faraday.use      :add_request_id          # inject your custom middleware\n  faraday.adapter  Faraday.default_adapter # make requests\nend\n\nresponse = conn.get('/resources')\nputs response.headers['X-Request-ID']\n"})})]})}function l(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,d.jsx)(a,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}}}]);