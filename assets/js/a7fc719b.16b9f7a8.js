"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48403],{65404:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var i=r(36672);const n={},a=i.createContext(n);function s(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},90090:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/middleware/expert/rotating_security_header_injector","title":"rotating_security_header_injector","description":"\ud83d\udd12 Rotating Security Header Injector","source":"@site/docs/rails/middleware/expert/rotating_security_header_injector.md","sourceDirName":"rails/middleware/expert","slug":"/rails/middleware/expert/rotating_security_header_injector","permalink":"/keep-being-human-dev/docs/rails/middleware/expert/rotating_security_header_injector","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/middleware/expert/rotating_security_header_injector.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_request_throttling_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/expert/dynamic_request_throttling_middleware"},"next":{"title":"stale_while_revalidate_cache_middleware","permalink":"/keep-being-human-dev/docs/rails/middleware/expert/stale_while_revalidate_cache_middleware"}}');var n=r(23420),a=r(65404);const s={},o=void 0,c={},d=[{value:"\ud83d\udd12 Rotating Security Header Injector",id:"-rotating-security-header-injector",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-rotating-security-header-injector",children:"\ud83d\udd12 Rotating Security Header Injector"}),"\n",(0,n.jsxs)(t.p,{children:["Enhance security by rotating Content-Security-Policy and other headers per request or per deploy, mitigating risk of long-lived static policies. This middleware pulls a list of CSP rules from ",(0,n.jsx)(t.code,{children:"Rails.application.credentials"})," or a database, picks one based on a hash or timestamp, and injects it into the response. Combine this with HSTS, Referrer-Policy and Permissions-Policy for a layered defense."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"class RotatingSecurityHeaders\n  def initialize(app)\n    @app = app\n    @policies = Rails.application.credentials.csp_policies || []\n  end\n\n  def call(env)\n    status, headers, response = @app.call(env)\n    policy = select_policy(env)\n    headers['Content-Security-Policy'] = policy\n    headers['Strict-Transport-Security'] = 'max-age=63072000; includeSubDomains'\n    headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'\n    [status, headers, response]\n  end\n\n  private\n\n  def select_policy(env)\n    # Rotate by request IP, user ID, or timestamp\n    idx = (env['REQUEST_PATH'].hash.abs % @policies.size)\n    @policies[idx]\n  end\nend\n\n# config/initializers/security_middleware.rb\nRails.application.config.middleware.insert_after ActionDispatch::SSL, RotatingSecurityHeaders\n"})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);