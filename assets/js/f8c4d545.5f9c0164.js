"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10524],{65404:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>c});var n=t(36672);const s={},i=n.createContext(s);function r(e){const a=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:a},e.children)}},81032:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/assets/expert/http_cache_invalidation","title":"http_cache_invalidation","description":"\ud83d\udd04 Fine-Grained HTTP Cache Invalidation with Middleware","source":"@site/docs/rails/assets/expert/http_cache_invalidation.md","sourceDirName":"rails/assets/expert","slug":"/rails/assets/expert/http_cache_invalidation","permalink":"/keep-being-human-dev/docs/rails/assets/expert/http_cache_invalidation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/assets/expert/http_cache_invalidation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_asset_host_fallback","permalink":"/keep-being-human-dev/docs/rails/assets/expert/dynamic_asset_host_fallback"},"next":{"title":"inline_critical_css","permalink":"/keep-being-human-dev/docs/rails/assets/expert/inline_critical_css"}}');var s=t(23420),i=t(65404);const r={},c=void 0,d={},l=[{value:"\ud83d\udd04 Fine-Grained HTTP Cache Invalidation with Middleware",id:"-fine-grained-http-cache-invalidation-with-middleware",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-fine-grained-http-cache-invalidation-with-middleware",children:"\ud83d\udd04 Fine-Grained HTTP Cache Invalidation with Middleware"}),"\n",(0,s.jsx)(a.p,{children:"Combine fingerprinted assets with a custom Rack middleware to purge stale entries and set immutable cache headers. This guarantees clients always fetch updated assets while leveraging aggressive caching."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# lib/middleware/asset_cache_invalidator.rb\nclass AssetCacheInvalidator\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    status, headers, body = @app.call(env)\n    if env['PATH_INFO'].start_with?('/assets/')\n      headers['Cache-Control'] = 'public, max-age=31536000, immutable'\n      manifest = Rails.application.assets_manifest\n      asset = env['PATH_INFO'].sub('/assets/', '')\n      # Return 404 for missing or stale assets\n      unless manifest.assets.key?(asset)\n        status = 404\n      end\n    end\n    [status, headers, body]\n  end\nend\n\n# config/application.rb\nconfig.middleware.insert_before Rack::Sendfile, AssetCacheInvalidator\n"})})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);