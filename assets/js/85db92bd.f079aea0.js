"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[48915],{50412:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"rails/action_cable/middle/model_callback_streaming","title":"model_callback_streaming","description":"\ud83d\ude80 Stream Model Events with broadcastappendto","source":"@site/docs/rails/action_cable/middle/model_callback_streaming.md","sourceDirName":"rails/action_cable/middle","slug":"/rails/action_cable/middle/model_callback_streaming","permalink":"/keep-being-human-dev/docs/rails/action_cable/middle/model_callback_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/middle/model_callback_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"manual_broadcast_controller","permalink":"/keep-being-human-dev/docs/rails/action_cable/middle/manual_broadcast_controller"},"next":{"title":"asynchronous_querying_load_async","permalink":"/keep-being-human-dev/docs/rails/active_record/advanced/asynchronous_querying_load_async"}}');var s=n(23420),o=n(65404);const r={},c=void 0,l={},i=[{value:"\ud83d\ude80 Stream Model Events with broadcast_append_to",id:"-stream-model-events-with-broadcast_append_to",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-stream-model-events-with-broadcast_append_to",children:"\ud83d\ude80 Stream Model Events with broadcast_append_to"}),"\n",(0,s.jsxs)(a.p,{children:["Use Rails built-in streaming helpers to broadcast model events automatically. By adding ",(0,s.jsx)(a.code,{children:"after_create_commit"})," or similar callbacks in your model, you can push new records to subscribed clients without writing manual broadcasts."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'# app/models/message.rb\ntypically class Message < ApplicationRecord\n  after_create_commit -> { broadcast_append_to "chat_room_#{room_id}_messages" }\nend\n'})}),"\n",(0,s.jsx)(a.p,{children:"In your channel, subscribe to the same stream identifier:"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'# app/channels/chat_room_channel.rb\nclass ChatRoomChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from "chat_room_#{params[:room_id]}_messages"\n  end\nend\n'})}),"\n",(0,s.jsxs)(a.p,{children:["This setup ensures any new ",(0,s.jsx)(a.code,{children:"Message"})," record is automatically appended to all clients in that chat room."]})]})}function m(e={}){const{wrapper:a}={...(0,o.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>c});var t=n(36672);const s={},o=t.createContext(s);function r(e){const a=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);