"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[21834],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(36672);const t={},a=s.createContext(t);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},85045:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/async_event_driven_procs","title":"async_event_driven_procs","description":"\ud83d\ude80 Building Event-Driven Architectures with Procs","source":"@site/docs/ruby/procs_and_lambdas/expert/async_event_driven_procs.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/async_event_driven_procs","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/async_event_driven_procs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/async_event_driven_procs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"storing_procs_in_collections","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/beginner/storing_procs_in_collections"},"next":{"title":"currying_and_partial_application","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/currying_and_partial_application"}}');var t=r(23420),a=r(65404);const i={},c=void 0,o={},d=[{value:"\ud83d\ude80 Building Event-Driven Architectures with Procs",id:"-building-event-driven-architectures-with-procs",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-building-event-driven-architectures-with-procs",children:"\ud83d\ude80 Building Event-Driven Architectures with Procs"}),"\n",(0,t.jsx)(n.p,{children:"Use procs as event handlers in a publish/subscribe system to decouple producers from consumers. Maintain an event registry mapping symbols to arrays of lambdas, enabling dynamic subscription and real-time event processing."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'class EventBus\n  def initialize\n    @handlers = Hash.new { |h, k| h[k] = [] }\n  end\n\n  def subscribe(event, &handler)\n    @handlers[event] << handler\n  end\n\n  def publish(event, payload)\n    @handlers[event].each { |h| h.call(payload) }\n  end\nend\n\nbus = EventBus.new\nbus.subscribe(:order_created) { |order| puts "Processing order ##{order[:id]}" }\nbus.publish(:order_created, id: 42)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Scale this by wrapping handler registration in modules, using ",(0,t.jsx)(n.code,{children:"Module#prepend"})," to intercept events, or integrate with a thread pool."]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);