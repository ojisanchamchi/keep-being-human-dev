"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4335],{34862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>a,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"ruby/oop/expert/bytecode_introspection_mod","title":"bytecode_introspection_mod","description":"\ud83e\uddf1 Bytecode Introspection with RubyVM::InstructionSequence","source":"@site/docs/ruby/oop/expert/bytecode_introspection_mod.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/bytecode_introspection_mod","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/bytecode_introspection_mod","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/bytecode_introspection_mod.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"modules_mixins","permalink":"/keep-being-human-dev/docs/ruby/oop/beginner/modules_mixins"},"next":{"title":"class_level_exec","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/class_level_exec"}}');var s=n(23420),c=n(65404);const r={},i=void 0,u={},d=[{value:"\ud83e\uddf1 Bytecode Introspection with RubyVM::InstructionSequence",id:"-bytecode-introspection-with-rubyvminstructionsequence",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"-bytecode-introspection-with-rubyvminstructionsequence",children:"\ud83e\uddf1 Bytecode Introspection with RubyVM::InstructionSequence"}),"\n",(0,s.jsxs)(t.p,{children:["Inspect or even rewrite Ruby bytecode at runtime via ",(0,s.jsx)(t.code,{children:"RubyVM::InstructionSequence"}),". You can parse, disassemble, and recompile snippets to fine-tune performance-critical methods."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ruby",children:"code = <<~RUBY\n  def heavy_compute(x)\n    (1..x).reduce(:*)\n  end\nRUBY\n\niseq = RubyVM::InstructionSequence.compile(code)\nputs iseq.disasm\n# Optionally, rebind modified iseq to a class\nMyClass = iseq.eval\nputs MyClass.new.heavy_compute(5)  # => 120\n"})})]})}function a(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var o=n(36672);const s={},c=o.createContext(s);function r(e){const t=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(c.Provider,{value:t},e.children)}}}]);