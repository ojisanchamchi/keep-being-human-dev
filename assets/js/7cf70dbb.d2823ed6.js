"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[82364],{62486:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/background_jobs/advanced/rate_limiting_middleware","title":"rate_limiting_middleware","description":"\u26a1\ufe0f Throttling Jobs with Custom Rate-Limiting Middleware","source":"@site/docs/rails/background_jobs/advanced/rate_limiting_middleware.md","sourceDirName":"rails/background_jobs/advanced","slug":"/rails/background_jobs/advanced/rate_limiting_middleware","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/rate_limiting_middleware","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/advanced/rate_limiting_middleware.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"job_metrics","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/job_metrics"},"next":{"title":"sidekiq_batches","permalink":"/keep-being-human-dev/docs/rails/background_jobs/advanced/sidekiq_batches"}}');var t=i(23420),a=i(65404);const d={},s=void 0,o={},c=[{value:"\u26a1\ufe0f Throttling Jobs with Custom Rate-Limiting Middleware",id:"\ufe0f-throttling-jobs-with-custom-rate-limiting-middleware",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-throttling-jobs-with-custom-rate-limiting-middleware",children:"\u26a1\ufe0f Throttling Jobs with Custom Rate-Limiting Middleware"}),"\n",(0,t.jsx)(n.p,{children:"Introduce a Sidekiq server middleware to throttle job execution by namespace or user, controlling throughput and respecting external API rate limits."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# lib/sidekiq/middleware/server/rate_limiter.rb\nmodule Sidekiq\n  module Middleware\n    module Server\n      class RateLimiter\n        def call(worker, job, queue)\n          key = \"rate:#{worker.class.name}\"\n          if Redis.current.incr(key) > 100\n            # re\u2011enqueue after delay when limit exceeded\n            worker.class.perform_in(1.minute, *job['args'])\n          else\n            yield\n          end\n        ensure\n          Redis.current.expire(key, 60)\n        end\n      end\n    end\n  end\nend\n\n# config/initializers/sidekiq.rb\nSidekiq.configure_server do |config|\n  config.server_middleware do |chain|\n    chain.add Sidekiq::Middleware::Server::RateLimiter\n  end\nend\n"})}),"\n",(0,t.jsx)(n.p,{children:"This code enforces a maximum of 100 jobs per minute per worker class."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>s});var r=i(36672);const t={},a=r.createContext(t);function d(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);