"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31126],{65404:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>i});var n=s(36672);const a={},c=n.createContext(a);function o(e){const t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(c.Provider,{value:t},e.children)}},94230:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/background_jobs/expert/sidekiq_batch_callbacks","title":"sidekiq_batch_callbacks","description":"\ud83d\udce6 High\u2011Throughput Batch Processing with Sidekiq::Batch","source":"@site/docs/rails/background_jobs/expert/sidekiq_batch_callbacks.md","sourceDirName":"rails/background_jobs/expert","slug":"/rails/background_jobs/expert/sidekiq_batch_callbacks","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/sidekiq_batch_callbacks","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/expert/sidekiq_batch_callbacks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"observability_instrumentation","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/observability_instrumentation"},"next":{"title":"unique_jobs_idempotency","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/unique_jobs_idempotency"}}');var a=s(23420),c=s(65404);const o={},i=void 0,r={},d=[{value:"\ud83d\udce6 High\u2011Throughput Batch Processing with Sidekiq::Batch",id:"-highthroughput-batch-processing-with-sidekiqbatch",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-highthroughput-batch-processing-with-sidekiqbatch",children:"\ud83d\udce6 High\u2011Throughput Batch Processing with Sidekiq::Batch"}),"\n",(0,a.jsxs)(t.p,{children:["When you need to launch hundreds or thousands of jobs as a unit and track completion, Sidekiq Pro\u2019s ",(0,a.jsx)(t.code,{children:"Batch"})," API is indispensable. You can attach callbacks for success, death, or custom events to execute cleanup or next\u2010phase tasks once the batch completes."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"batch = Sidekiq::Batch.new\nbatch.description = \"Bulk user data refresh\"\nbatch.on(:success, 'BatchCallback#on_success', { report_id: 42 })\n\nbatch.jobs do\n  User.find_in_batches(batch_size: 1000) do |group|\n    RefreshUserJob.perform_async(group.map(&:id))\n  end\nend\n\n# app/workers/batch_callback.rb\nclass BatchCallback\n  def self.on_success(status, options)\n    ReportMailer.batch_finished(options[:report_id], status.total).deliver_now\n  end\nend\n"})})]})}function h(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);