"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83380],{55646:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"ruby/metaprogramming/expert/proxy_pattern_with_basicobject","title":"proxy_pattern_with_basicobject","description":"\ud83c\udfad Proxy Pattern using BasicObject","source":"@site/docs/ruby/metaprogramming/expert/proxy_pattern_with_basicobject.md","sourceDirName":"ruby/metaprogramming/expert","slug":"/ruby/metaprogramming/expert/proxy_pattern_with_basicobject","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/proxy_pattern_with_basicobject","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/expert/proxy_pattern_with_basicobject.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"performance_measurement_proxy","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/performance_measurement_proxy"},"next":{"title":"runtime_extension_with_fiddle","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/expert/runtime_extension_with_fiddle"}}');var a=n(23420),i=n(65404);const s={},o=void 0,c={},p=[{value:"\ud83c\udfad Proxy Pattern using BasicObject",id:"-proxy-pattern-using-basicobject",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"-proxy-pattern-using-basicobject",children:"\ud83c\udfad Proxy Pattern using BasicObject"}),"\n",(0,a.jsxs)(t.p,{children:["Implement a transparent proxy by subclassing ",(0,a.jsx)(t.code,{children:"BasicObject"}),", which has minimal methods, and forward calls using ",(0,a.jsx)(t.code,{children:"method_missing"}),". This gives you full control over delegation while avoiding name clashes."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'class SimpleProxy < BasicObject\n  def initialize(target)\n    @target = target\n  end\n\n  def method_missing(name, *args, &blk)\n    ::Kernel.puts("Proxying #{name}")\n    @target.__send__(name, *args, &blk)\n  end\n\n  def respond_to_missing?(name, _include_private = false)\n    @target.respond_to?(name)\n  end\nend\n\nreal = \'hello\'.freeze\nproxy = SimpleProxy.new(real)\nproxy.upcase   # Logs "Proxying upcase" then returns "HELLO"\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(36672);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);