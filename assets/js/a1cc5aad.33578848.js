"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[11914],{4621:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"gems/chartkick/expert/dynamic_realtime_updates_with_actioncable","title":"dynamic_realtime_updates_with_actioncable","description":"\ud83d\ude80 Real-Time Charts with ActionCable","source":"@site/docs/gems/chartkick/expert/dynamic_realtime_updates_with_actioncable.md","sourceDirName":"gems/chartkick/expert","slug":"/gems/chartkick/expert/dynamic_realtime_updates_with_actioncable","permalink":"/keep-being-human-dev/docs/gems/chartkick/expert/dynamic_realtime_updates_with_actioncable","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/chartkick/expert/dynamic_realtime_updates_with_actioncable.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_chartjs_library_options","permalink":"/keep-being-human-dev/docs/gems/chartkick/expert/custom_chartjs_library_options"},"next":{"title":"sql_cte_aggregation_for_large_datasets","permalink":"/keep-being-human-dev/docs/gems/chartkick/expert/sql_cte_aggregation_for_large_datasets"}}');var r=t(23420),c=t(65404);const i={},s=void 0,o={},l=[{value:"\ud83d\ude80 Real-Time Charts with ActionCable",id:"-real-time-charts-with-actioncable",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.h2,{id:"-real-time-charts-with-actioncable",children:"\ud83d\ude80 Real-Time Charts with ActionCable"}),"\n",(0,r.jsx)(a.p,{children:"Leverage ActionCable to stream live updates to your Chartkick charts for truly reactive dashboards. By broadcasting deltas from your Rails backend and updating the chart client\u2011side, you avoid full page reloads and minimize payload sizes."}),"\n",(0,r.jsxs)(a.p,{children:["In your channel (e.g., ",(0,r.jsx)(a.code,{children:"ChartsChannel"}),"), broadcast new data points:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ruby",children:'# app/channels/charts_channel.rb\nclass ChartsChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from "charts_#{params[:chart_id]}"\n  end\nend\n\n# in a background job or controller\nActionCable.server.broadcast(\n  "charts_#{chart.id}",\n  { x: Time.current.to_s(:db), y: new_value }\n)\n'})}),"\n",(0,r.jsx)(a.p,{children:"On the client, subscribe and push updates into your Chartkick chart instance:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:'// app/javascript/channels/charts_channel.js\nimport consumer from "@rails/actioncable"\nimport Chartkick from "chartkick"\n\nconsumer.subscriptions.create(\n  { channel: "ChartsChannel", chart_id: "sales-chart" },\n  {\n    received(data) {\n      // chart is a global Chartkick chart instance\n      window.salesChart.update([{name: "Sales", data: [[data.x, data.y]]}])\n    }\n  }\n)\n\n// in your view initializer:\nwindow.salesChart = new Chartkick.LineChart("sales-chart", initialData)\n'})})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>s});var n=t(36672);const r={},c=n.createContext(r);function i(e){const a=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);