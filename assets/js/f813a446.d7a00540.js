"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[2412],{65404:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>o});var s=t(36672);const a={},i=s.createContext(a);function d(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),s.createElement(i.Provider,{value:n},e.children)}},70733:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"ruby/define_method/advanced/dsl_scope_capture","title":"dsl_scope_capture","description":"\ud83e\udde9 Capturing Lexical Scope in DSLs","source":"@site/docs/ruby/define_method/advanced/dsl_scope_capture.md","sourceDirName":"ruby/define_method/advanced","slug":"/ruby/define_method/advanced/dsl_scope_capture","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/dsl_scope_capture","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/advanced/dsl_scope_capture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_visibility_hooks","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/custom_visibility_hooks"},"next":{"title":"dynamic_method_proxy","permalink":"/keep-being-human-dev/docs/ruby/define_method/advanced/dynamic_method_proxy"}}');var a=t(23420),i=t(65404);const d={},o=void 0,c={},r=[{value:"\ud83e\udde9 Capturing Lexical Scope in DSLs",id:"-capturing-lexical-scope-in-dsls",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-capturing-lexical-scope-in-dsls",children:"\ud83e\udde9 Capturing Lexical Scope in DSLs"}),"\n",(0,a.jsxs)(n.p,{children:["When building internal DSLs, ",(0,a.jsx)(n.code,{children:"define_method"})," can capture outer variables, enabling clean and expressive APIs. By closing over local variables, you can generate methods that remember the context in which they were defined."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class ConfigDSL\n  def initialize\n    @settings = {}\n  end\n\n  def setting(name, &block)\n    # Capture the block and name for later invocation\n    define_method(name) do |*args|\n      @settings[name] = block.call(*args)\n    end\n  end\n\n  def settings\n    @settings\n  end\nend\n\n# Usage\ndsl = ConfigDSL.new\ndsl.setting(:timeout) { 5 * 60 }\ndsl.timeout        # => 300\ndsl.settings       # => { timeout: 300 }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);