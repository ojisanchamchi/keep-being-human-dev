"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[97914],{65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(36672);const r={},a=t.createContext(r);function i(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},79438:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/hashes/beginner/merging_hashes","title":"merging_hashes","description":"\u2795 Merging Two Hashes","source":"@site/docs/ruby/hashes/beginner/merging_hashes.md","sourceDirName":"ruby/hashes/beginner","slug":"/ruby/hashes/beginner/merging_hashes","permalink":"/keep-being-human-dev/docs/ruby/hashes/beginner/merging_hashes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/beginner/merging_hashes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"iterating_over_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/beginner/iterating_over_hash"},"next":{"title":"selecting_hash_entries","permalink":"/keep-being-human-dev/docs/ruby/hashes/beginner/selecting_hash_entries"}}');var r=s(23420),a=s(65404);const i={},o=void 0,h={},c=[{value:"\u2795 Merging Two Hashes",id:"-merging-two-hashes",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-merging-two-hashes",children:"\u2795 Merging Two Hashes"}),"\n",(0,r.jsxs)(n.p,{children:["Combine two hashes into one with the ",(0,r.jsx)(n.code,{children:"merge"})," method. If there are duplicate keys, you can provide a block to decide which value to keep."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"defaults = { volume: 5, brightness: 70 }\nuser_settings = { brightness: 90 }\noverall = defaults.merge(user_settings) do |key, old_val, new_val|\n  new_val  # choose user setting over default\nend\nputs overall  # => {:volume=>5, :brightness=>90}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);