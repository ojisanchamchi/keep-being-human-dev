"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20476],{65404:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>l});var n=a(36672);const t={},s=n.createContext(t);function i(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(s.Provider,{value:r},e.children)}},76055:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/arrays/expert/parallel_map_with_threads.md","title":"parallel_map_with_threads.md","description":"\u2699\ufe0f Parallel Map with Threads","source":"@site/docs/ruby/arrays/expert/parallel_map_with_threads.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/parallel_map_with_threads.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/parallel_map_with_threads.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/parallel_map_with_threads.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"n_dimensional_array_generator.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/n_dimensional_array_generator.md"},"next":{"title":"refinements_for_array_extensions.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/refinements_for_array_extensions.md"}}');var t=a(23420),s=a(65404);const i={},l=void 0,o={},d=[{value:"\u2699\ufe0f Parallel Map with Threads",id:"\ufe0f-parallel-map-with-threads",level:2}];function p(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"\ufe0f-parallel-map-with-threads",children:"\u2699\ufe0f Parallel Map with Threads"}),"\n",(0,t.jsx)(r.p,{children:"Leverage Ruby threads to process array elements concurrently and speed up CPU-bound or I/O-bound tasks. This implementation uses a fixed-size thread pool to maintain order and limit resource usage."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ruby",children:"require 'thread'\nrequire 'etc'\n\nclass Array\n  def parallel_map(pool_size: Etc.nprocessors)\n    queue   = SizedQueue.new(pool_size)\n    results = []\n    mutex   = Mutex.new\n\n    workers = pool_size.times.map do\n      Thread.new do\n        while (item = queue.pop rescue nil)\n          value, idx = item\n          res = yield(value)\n          mutex.synchronize { results << [idx, res] }\n        end\n      end\n    end\n\n    each.with_index { |elem, i| queue << [elem, i] }\n    pool_size.times { queue.close }\n    workers.each(&:join)\n\n    results.sort_by(&:first).map(&:last)\n  end\nend\n\n# Usage\nresults = [1,2,3,4].parallel_map { |n| expensive_operation(n) }\n"})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);