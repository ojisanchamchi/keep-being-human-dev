"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[25773],{36266:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/blocks/advanced/proc_currying_and_composition","title":"proc_currying_and_composition","description":"\u27b0 Proc Currying and Composition","source":"@site/docs/ruby/blocks/advanced/proc_currying_and_composition.md","sourceDirName":"ruby/blocks/advanced","slug":"/ruby/blocks/advanced/proc_currying_and_composition","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/proc_currying_and_composition","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/advanced/proc_currying_and_composition.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_wrapper_with_blocks","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/method_wrapper_with_blocks"},"next":{"title":"retry_with_backoff","permalink":"/keep-being-human-dev/docs/ruby/blocks/advanced/retry_with_backoff"}}');var c=o(23420),t=o(65404);const i={},a=void 0,s={},d=[{value:"\u27b0 Proc Currying and Composition",id:"-proc-currying-and-composition",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-proc-currying-and-composition",children:"\u27b0 Proc Currying and Composition"}),"\n",(0,c.jsxs)(n.p,{children:["Use currying to partially apply arguments to Procs and compose complex pipelines. Composition chains multiple transformations into a single callable, leveraging block-to-proc conversions and ",(0,c.jsx)(n.code,{children:"Proc#curry"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"multiply = ->(x, y) { x * y }.curry\nadd      = ->(x, y) { x + y }.curry\n\ndouble   = multiply.call(2)\nincrement = add.call(1)\n\n# Compose: double then increment\npipeline = ->(v) { increment.call(double.call(v)) }\n\np pipeline.call(5) #=> 11\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var r=o(36672);const c={},t=r.createContext(c);function i(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);