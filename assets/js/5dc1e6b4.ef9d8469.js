"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[10347],{16821:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/tempfiles/beginner/tempfile_basic_creation","title":"tempfile_basic_creation","description":"\ud83d\udcdd Create and Write to a Tempfile","source":"@site/docs/ruby/tempfiles/beginner/tempfile_basic_creation.md","sourceDirName":"ruby/tempfiles/beginner","slug":"/ruby/tempfiles/beginner/tempfile_basic_creation","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/beginner/tempfile_basic_creation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/tempfiles/beginner/tempfile_basic_creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"encrypted_tempfile_openssl","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/advanced/encrypted_tempfile_openssl"},"next":{"title":"tempfile_with_block_cleanup","permalink":"/keep-being-human-dev/docs/ruby/tempfiles/beginner/tempfile_with_block_cleanup"}}');var r=n(23420),a=n(65404);const o={},l=void 0,s={},c=[{value:"\ud83d\udcdd Create and Write to a Tempfile",id:"-create-and-write-to-a-tempfile",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-create-and-write-to-a-tempfile",children:"\ud83d\udcdd Create and Write to a Tempfile"}),"\n",(0,r.jsx)(t.p,{children:"Tempfile objects let you create temporary files without worrying about naming conflicts or cleanup. They\u2019re ideal for short\u2011lived data like uploaded images or intermediate results. Simply require the library, instantiate a Tempfile, write your data, and rewind if you need to read it back."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"require 'tempfile'\n\n# Create a new Tempfile (auto-deletes on garbage collection)\ntmp = Tempfile.new('my_tempfile')\n# Write some data to it\ntmp.write(\"Hello, Tempfile!\\n\")\n# Rewind the pointer so you can read from the start\ntmp.rewind\n# Read what you just wrote\nputs tmp.read  # => \"Hello, Tempfile!\\n\"\n\n# Close and unlink when done (optional, auto on exit)\ntmp.close\ntmp.unlink\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var i=n(36672);const r={},a=i.createContext(r);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);