"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50243],{37922:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/arrays/expert/custom_enumerator_chaining.md","title":"custom_enumerator_chaining.md","description":"\ud83d\udd17 Custom Enumerator Chaining","source":"@site/docs/ruby/arrays/expert/custom_enumerator_chaining.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/custom_enumerator_chaining.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/custom_enumerator_chaining.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/custom_enumerator_chaining.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bitset_array_representation.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/bitset_array_representation.md"},"next":{"title":"deep_freeze_immutable_arrays.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/deep_freeze_immutable_arrays.md"}}');var a=r(23420),i=r(65404);const s={},o=void 0,u={},c=[{value:"\ud83d\udd17 Custom Enumerator Chaining",id:"-custom-enumerator-chaining",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-custom-enumerator-chaining",children:"\ud83d\udd17 Custom Enumerator Chaining"}),"\n",(0,a.jsx)(n.p,{children:"Build custom enumerators that lazily chain multiple array sources without intermediate allocations. This tip shows how to implement a unified lazy chain method akin to Enumerable#chain."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"class LazyChain\n  include Enumerable\n\n  def initialize(*enumerables)\n    @enums = enumerables.map(&:lazy)\n  end\n\n  def each\n    @enums.each do |enum|\n      enum.each { |e| yield e }\n    end\n  end\nend\n\n# Usage\na = [1,2]\nb = [3,4]\nchain = LazyChain.new(a, b)\nchain.select(&:odd?).first(3) # => [1,3]\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var t=r(36672);const a={},i=t.createContext(a);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);