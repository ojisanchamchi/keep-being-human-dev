"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78042],{13052:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"ruby/data_types/advanced/pattern_matching","title":"pattern_matching","description":"\ud83d\udd0d Destructure Arrays and Hashes with Pattern Matching","source":"@site/docs/ruby/data_types/advanced/pattern_matching.md","sourceDirName":"ruby/data_types/advanced","slug":"/ruby/data_types/advanced/pattern_matching","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/pattern_matching","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/advanced/pattern_matching.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_enumerators","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/lazy_enumerators"},"next":{"title":"scoped_refinements","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/scoped_refinements"}}');var r=a(23420),s=a(65404);const c={},d=void 0,i={},o=[{value:"\ud83d\udd0d Destructure Arrays and Hashes with Pattern Matching",id:"-destructure-arrays-and-hashes-with-pattern-matching",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-destructure-arrays-and-hashes-with-pattern-matching",children:"\ud83d\udd0d Destructure Arrays and Hashes with Pattern Matching"}),"\n",(0,r.jsxs)(t.p,{children:["Ruby 2.7+ introduces pattern matching (",(0,r.jsx)(t.code,{children:"case ... in"}),") to extract nested values cleanly. You can match on array shapes, hash keys, and even splat remaining elements."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'data = { user: { id: 1, name: "Alice" }, roles: [:admin, :editor] }\ncase data\nin { user: { id:, name: }, roles: [first_role, *rest_roles] }\n  puts "ID: #{id}, Name: #{name}, First Role: #{first_role}, Others: #{rest_roles}"\nend\n# => ID: 1, Name: Alice, First Role: admin, Others: [:editor]\n'})}),"\n",(0,r.jsx)(t.p,{children:"You can also pattern-match arrays of mixed depth:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'arr = [1, 2, [3, 4]]\ncase arr\nin [a, b, [c, d]]\n  puts "#{a}, #{b}, #{c}, #{d}"\nend\n# => 1, 2, 3, 4\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>d});var n=a(36672);const r={},s=n.createContext(r);function c(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);