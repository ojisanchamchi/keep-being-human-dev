"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[31977],{44061:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>i});const r=JSON.parse('{"id":"gems/bcrypt/middle/bcrypt_rehash_on_login","title":"bcrypt_rehash_on_login","description":"\u2b06\ufe0f Upgrading BCrypt Cost for Existing Passwords","source":"@site/docs/gems/bcrypt/middle/bcrypt_rehash_on_login.md","sourceDirName":"gems/bcrypt/middle","slug":"/gems/bcrypt/middle/bcrypt_rehash_on_login","permalink":"/keep-being-human-dev/docs/gems/bcrypt/middle/bcrypt_rehash_on_login","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/bcrypt/middle/bcrypt_rehash_on_login.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"bcrypt_generate_and_verify","permalink":"/keep-being-human-dev/docs/gems/bcrypt/middle/bcrypt_generate_and_verify"},"next":{"title":"after_render_hook","permalink":"/keep-being-human-dev/docs/gems/chartkick/advanced/after_render_hook"}}');var t=s(23420),o=s(65404);const a={},d=void 0,c={},i=[{value:"\u2b06\ufe0f Upgrading BCrypt Cost for Existing Passwords",id:"\ufe0f-upgrading-bcrypt-cost-for-existing-passwords",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-upgrading-bcrypt-cost-for-existing-passwords",children:"\u2b06\ufe0f Upgrading BCrypt Cost for Existing Passwords"}),"\n",(0,t.jsx)(n.p,{children:"When you increase the cost factor, old password digests remain at the previous strength. You can transparently rehash a user\u2019s password at next login by checking the cost and generating a new digest if needed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/user.rb\nclass User < ApplicationRecord\n  def authenticate(unencrypted_password)\n    if BCrypt::Password.new(password_digest).is_password?(unencrypted_password)\n      upgrade_password_cost(unencrypted_password)\n      self\n    else\n      false\n    end\n  end\n\n  private\n\n  def upgrade_password_cost(password)\n    current_cost = BCrypt::Password.new(password_digest).cost\n    if current_cost < BCrypt::Engine.cost\n      update(password_digest: BCrypt::Password.create(password, cost: BCrypt::Engine.cost))\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var r=s(36672);const t={},o=r.createContext(t);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);