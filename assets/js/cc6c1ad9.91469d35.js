"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79867],{48982:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/forms/expert/polymorphic_form_inputs","title":"polymorphic_form_inputs","description":"\ud83e\udde9 Polymorphic Form Inputs for Multiple Association Types","source":"@site/docs/rails/forms/expert/polymorphic_form_inputs.md","sourceDirName":"rails/forms/expert","slug":"/rails/forms/expert/polymorphic_form_inputs","permalink":"/keep-being-human-dev/docs/rails/forms/expert/polymorphic_form_inputs","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/forms/expert/polymorphic_form_inputs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"i18n_and_accessibility","permalink":"/keep-being-human-dev/docs/rails/forms/expert/i18n_and_accessibility"},"next":{"title":"real_time_validations","permalink":"/keep-being-human-dev/docs/rails/forms/expert/real_time_validations"}}');var i=o(23420),s=o(65404);const r={},a=void 0,l={},c=[{value:"\ud83e\udde9 Polymorphic Form Inputs for Multiple Association Types",id:"-polymorphic-form-inputs-for-multiple-association-types",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-polymorphic-form-inputs-for-multiple-association-types",children:"\ud83e\udde9 Polymorphic Form Inputs for Multiple Association Types"}),"\n",(0,i.jsx)(t.p,{children:"Construct a single form supporting multiple associated record types by inspecting a type field and rendering conditional inputs. This reduces duplication when embedding comments, tags, or attachments polymorphically."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-erb",children:'<%= unified_form_with model: @attachment do |f| %>\n  <%= f.input_field :attachable_type, as: :select, collection: %w[Post Comment], data: { action: \'change->poly#toggle\' } %>\n  <div data-poly-target="Post">\n    <%= f.input_field :attachable_id, as: :select, collection: Post.all.pluck(:title, :id) %>\n  </div>\n  <div data-poly-target="Comment" hidden>\n    <%= f.input_field :attachable_id, as: :select, collection: Comment.all.pluck(:body, :id) %>\n  </div>\n  <%= f.submit %>\n<% end %>\n'})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// app/javascript/controllers/poly_controller.js\nimport { Controller } from '@hotwired/stimulus'\nexport default class extends Controller {\n  static targets = ['Post', 'Comment']\n  toggle(event) {\n    this.PostTarget.hidden = event.target.value !== 'Post'\n    this.CommentTarget.hidden = event.target.value !== 'Comment'\n  }\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},65404:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var n=o(36672);const i={},s=n.createContext(i);function r(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);