"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[6076],{65404:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(36672);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}},87080:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/active_support/advanced/nested_hash_transformations","title":"nested_hash_transformations","description":"\ud83d\udd01 Deep Transform Nested Hashes","source":"@site/docs/rails/active_support/advanced/nested_hash_transformations.md","sourceDirName":"rails/active_support/advanced","slug":"/rails/active_support/advanced/nested_hash_transformations","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/nested_hash_transformations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_support/advanced/nested_hash_transformations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"json_encoder_customization","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/json_encoder_customization"},"next":{"title":"notifications_instrumentation","permalink":"/keep-being-human-dev/docs/rails/active_support/advanced/notifications_instrumentation"}}');var a=t(23420),r=t(65404);const o={},i=void 0,d={},c=[{value:"\ud83d\udd01 Deep Transform Nested Hashes",id:"-deep-transform-nested-hashes",level:2}];function u(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"-deep-transform-nested-hashes",children:"\ud83d\udd01 Deep Transform Nested Hashes"}),"\n",(0,a.jsxs)(s.p,{children:["ActiveSupport extends Hash with methods like ",(0,a.jsx)(s.code,{children:"deep_transform_keys"}),", ",(0,a.jsx)(s.code,{children:"deep_transform_values"}),", and ",(0,a.jsx)(s.code,{children:"deep_merge"})," for working with nested structures. This is invaluable when processing API payloads or converting data formats in bulk. These methods preserve the original overriding behavior or transform keys/values recursively."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"payload = { 'user' => { 'first_name' => 'Alice', 'metadata' => { 'age' => '30' } } }\n# Convert all keys to symbols and parse numeric strings\nsymbolized = payload.deep_transform_keys(&:to_sym)\nconverted = symbolized.deep_transform_values do |v|\n  v =~ /^\\d+$/ ? v.to_i : v\nend\n# Merge nested defaults\ndefaults = { user: { metadata: { active: true } } }\nresult = defaults.deep_merge(converted)\n"})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}}}]);