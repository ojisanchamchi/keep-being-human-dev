"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[30554],{65404:(e,i,n)=>{n.d(i,{R:()=>p,x:()=>r});var t=n(36672);const a={},o=t.createContext(a);function p(e){const i=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),t.createElement(o.Provider,{value:i},e.children)}},83437:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>p,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"gems/mini_magick/expert/gif_optimization_pipeline","title":"gif_optimization_pipeline","description":"\ud83c\udf00 Advanced GIF Optimization Pipeline","source":"@site/docs/gems/mini_magick/expert/gif_optimization_pipeline.md","sourceDirName":"gems/mini_magick/expert","slug":"/gems/mini_magick/expert/gif_optimization_pipeline","permalink":"/keep-being-human-dev/docs/gems/mini_magick/expert/gif_optimization_pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/mini_magick/expert/gif_optimization_pipeline.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"resize_image","permalink":"/keep-being-human-dev/docs/gems/mini_magick/beginner/resize_image"},"next":{"title":"pdf_multipage_annotation","permalink":"/keep-being-human-dev/docs/gems/mini_magick/expert/pdf_multipage_annotation"}}');var a=n(23420),o=n(65404);const p={},r=void 0,s={},c=[{value:"\ud83c\udf00 Advanced GIF Optimization Pipeline",id:"-advanced-gif-optimization-pipeline",level:2}];function m(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"-advanced-gif-optimization-pipeline",children:"\ud83c\udf00 Advanced GIF Optimization Pipeline"}),"\n",(0,a.jsx)(i.p,{children:"Use ffmpeg to generate a tailored color palette and stream it into MiniMagick\u2019s Convert to produce an optimized, high-fidelity GIF. This two-pass workflow drastically reduces file size while maintaining color accuracy for complex animations. You can script both steps in Ruby to integrate seamlessly into your pipeline."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-bash",children:"# 1. Extract optimal palette from video\nffmpeg -v warning -i input.mp4 -vf fps=15,scale=640:-1:flags=lanczos,palettegen palette.png\n"})}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-ruby",children:"require 'mini_magick'\n\n# 2. Create optimized GIF using the generated palette\ni = MiniMagick::Tool::Convert.new do |convert|\n  convert << '-i' << 'input.mp4'\n  convert << '-i' << 'palette.png'\n  convert << '-lavfi' << 'fps=15,scale=640:-1:flags=lanczos[x];[x][1:v]paletteuse'\n  convert << '-loop' << '0'\n  convert << 'optimized.gif'\nend\n"})})]})}function l(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);