"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85203],{8930:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"rails/active_record_associations/expert/composite_primary_key_associations","title":"composite_primary_key_associations","description":"\ud83d\udd04 Composite Primary Key Association Integration","source":"@site/docs/rails/active_record_associations/expert/composite_primary_key_associations.md","sourceDirName":"rails/active_record_associations/expert","slug":"/rails/active_record_associations/expert/composite_primary_key_associations","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/composite_primary_key_associations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/expert/composite_primary_key_associations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"association_callbacks_usage","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/association_callbacks_usage"},"next":{"title":"custom_inverse_of_complex","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/expert/custom_inverse_of_complex"}}');var t=o(23420),n=o(65404);const a={},r=void 0,c={},p=[{value:"\ud83d\udd04 Composite Primary Key Association Integration",id:"-composite-primary-key-association-integration",level:2}];function m(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"-composite-primary-key-association-integration",children:"\ud83d\udd04 Composite Primary Key Association Integration"}),"\n",(0,t.jsxs)(s.p,{children:["When dealing with legacy schemas featuring composite primary keys, use the ",(0,t.jsx)(s.code,{children:"composite_primary_keys"})," gem to maintain Rails conventions. This allows you to define associations with composite keys seamlessly."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ruby",children:"# Gemfile\ngem 'composite_primary_keys'\n\nclass Enrollment < ApplicationRecord\n  self.primary_keys = :student_id, :course_id\n  belongs_to :student, class_name: 'User', foreign_key: :student_id\n  belongs_to :course, foreign_key: :course_id\nend\n\nclass User < ApplicationRecord\n  has_many :enrollments, foreign_key: :student_id\n  has_many :courses, through: :enrollments\nend\n"})})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},65404:(e,s,o)=>{o.d(s,{R:()=>a,x:()=>r});var i=o(36672);const t={},n=i.createContext(t);function a(e){const s=i.useContext(n);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(n.Provider,{value:s},e.children)}}}]);