"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62841],{17657:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"ruby/threads/advanced/thread_local_memoization","title":"thread_local_memoization","description":"\ud83e\uddf5 Safe Thread-Local Memoization","source":"@site/docs/ruby/threads/advanced/thread_local_memoization.md","sourceDirName":"ruby/threads/advanced","slug":"/ruby/threads/advanced/thread_local_memoization","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/thread_local_memoization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/threads/advanced/thread_local_memoization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prioritized_queue_and_conditionvariable","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/prioritized_queue_and_conditionvariable"},"next":{"title":"thread_pool_executor_concurrent_ruby","permalink":"/keep-being-human-dev/docs/ruby/threads/advanced/thread_pool_executor_concurrent_ruby"}}');var r=a(23420),o=a(65404);const d={},i=void 0,c={},s=[{value:"\ud83e\uddf5 Safe Thread-Local Memoization",id:"-safe-thread-local-memoization",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-safe-thread-local-memoization",children:"\ud83e\uddf5 Safe Thread-Local Memoization"}),"\n",(0,r.jsxs)(n.p,{children:["Avoid cross-thread cache collisions by storing memoized results in ",(0,r.jsx)(n.code,{children:"Thread.current"}),". This pattern ensures each thread lazily initializes its own data without locks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"module ThreadLocalMemoize\n  def thread_memoize(name)\n    raise ArgumentError unless block_given?\n    Thread.current[:memo] ||= {}\n    Thread.current[:memo][name] ||= yield\n  end\nend\n\nclass ExpensiveLoader\n  extend ThreadLocalMemoize\n\n  def self.config\n    thread_memoize(:config) do\n      # Simulate heavy parsing\n      sleep 0.2\n      {env: ENV['APP_ENV'] || 'development'}\n    end\n  end\nend\n\nthreads = 5.times.map do\n  Thread.new { p ExpensiveLoader.config }\nend\nthreads.each(&:join)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>d,x:()=>i});var t=a(36672);const r={},o=t.createContext(r);function d(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);