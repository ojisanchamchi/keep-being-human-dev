"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[81401],{51775:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"ruby/fibers/middle/fiber_basic_usage","title":"fiber_basic_usage","description":"\ud83d\udd04 Basic Fiber Creation and Execution","source":"@site/docs/ruby/fibers/middle/fiber_basic_usage.md","sourceDirName":"ruby/fibers/middle","slug":"/ruby/fibers/middle/fiber_basic_usage","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_basic_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/middle/fiber_basic_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_arguments","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_arguments"},"next":{"title":"fiber_cooperative_scheduler","permalink":"/keep-being-human-dev/docs/ruby/fibers/middle/fiber_cooperative_scheduler"}}');var s=n(23420),t=n(65404);const a={},o=void 0,c={},d=[{value:"\ud83d\udd04 Basic Fiber Creation and Execution",id:"-basic-fiber-creation-and-execution",level:2}];function u(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"-basic-fiber-creation-and-execution",children:"\ud83d\udd04 Basic Fiber Creation and Execution"}),"\n",(0,s.jsxs)(i.p,{children:["You can define a fiber with ",(0,s.jsx)(i.code,{children:"Fiber.new"})," and control its execution using ",(0,s.jsx)(i.code,{children:"resume"})," and ",(0,s.jsx)(i.code,{children:"yield"}),". This allows you to pause and resume code at specific points, enabling non-blocking workflows within a single thread. Fibers are lighter than threads and give you fine-grained control over where execution should continue."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ruby",children:'fiber = Fiber.new do\n  puts "Inside fiber"\n  Fiber.yield\n  puts "Resuming fiber"\nend\n\nputs "Before resume"\nfiber.resume    # => "Inside fiber"\nputs "After first resume"\nfiber.resume    # => "Resuming fiber"\n'})})]})}function b(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var r=n(36672);const s={},t=r.createContext(s);function a(e){const i=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:i},e.children)}}}]);