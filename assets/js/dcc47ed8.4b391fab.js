"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9121],{7368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"rails/caching/expert/fetch_multi_batch_reads","title":"fetch_multi_batch_reads","description":"\ud83d\ude80 Batch Fetch with fetch_multi to Eliminate N+1 Cache Calls`","source":"@site/docs/rails/caching/expert/fetch_multi_batch_reads.md","sourceDirName":"rails/caching/expert","slug":"/rails/caching/expert/fetch_multi_batch_reads","permalink":"/keep-being-human-dev/docs/rails/caching/expert/fetch_multi_batch_reads","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/expert/fetch_multi_batch_reads.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"view_fragment_caching","permalink":"/keep-being-human-dev/docs/rails/caching/beginner/view_fragment_caching"},"next":{"title":"http_conditional_get","permalink":"/keep-being-human-dev/docs/rails/caching/expert/http_conditional_get"}}');var i=n(23420),a=n(65404);const s={},r=void 0,l={},o=[{value:"\ud83d\ude80 Batch Fetch with <code>fetch_multi</code> to Eliminate N+1 Cache Calls`",id:"-batch-fetch-with-fetch_multi-to-eliminate-n1-cache-calls",level:2}];function h(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h2,{id:"-batch-fetch-with-fetch_multi-to-eliminate-n1-cache-calls",children:["\ud83d\ude80 Batch Fetch with ",(0,i.jsx)(t.code,{children:"fetch_multi"})," to Eliminate N+1 Cache Calls`"]}),"\n",(0,i.jsxs)(t.p,{children:["When you need to load multiple objects, ",(0,i.jsx)(t.code,{children:"fetch_multi"})," groups keys into a single round trip, drastically reducing latency. Use a single block to map missing keys to database calls, then merge results into the returned hash."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:'user_ids = [1, 2, 3]\nkeys    = user_ids.map { |id| "user:#{id}" }\n\nusers_by_key = Rails.cache.fetch_multi(*keys, expires_in: 1.hour) do |key|\n  id = key.split(\':\').last.to_i\n  User.find(id)\nend\n# => {"user:1"=>#<User id:1>, ...}\n'})}),"\n",(0,i.jsx)(t.p,{children:"You can further optimize by preloading associations inside the block and returning structured data for complex objects."})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var c=n(36672);const i={},a=c.createContext(i);function s(e){const t=c.useContext(a);return c.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(a.Provider,{value:t},e.children)}}}]);