"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[99742],{65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>d});var a=t(36672);const r={},o=a.createContext(r);function c(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(o.Provider,{value:n},e.children)}},80408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>a,toc:()=>s});const a=JSON.parse('{"id":"ruby/operators/advanced/pattern_matching_case_in.md","title":"pattern_matching_case_in.md","description":"\ud83c\udfaf Advanced Pattern Matching with in","source":"@site/docs/ruby/operators/advanced/pattern_matching_case_in.md.md","sourceDirName":"ruby/operators/advanced","slug":"/ruby/operators/advanced/pattern_matching_case_in.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/pattern_matching_case_in.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/advanced/pattern_matching_case_in.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"operator_overloading.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/operator_overloading.md"},"next":{"title":"safe_navigation_operator.md","permalink":"/keep-being-human-dev/docs/ruby/operators/advanced/safe_navigation_operator.md"}}');var r=t(23420),o=t(65404);const c={},d=void 0,i={},s=[{value:"\ud83c\udfaf Advanced Pattern Matching with <code>in</code>",id:"-advanced-pattern-matching-with-in",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-advanced-pattern-matching-with-in",children:["\ud83c\udfaf Advanced Pattern Matching with ",(0,r.jsx)(n.code,{children:"in"})]}),"\n",(0,r.jsxs)(n.p,{children:["Ruby 2.7+ supports structural pattern matching via ",(0,r.jsx)(n.code,{children:"case \u2026 in"}),", allowing concise deconstruction of nested data. You can capture values, use the pin operator (",(0,r.jsx)(n.code,{children:"^"}),") to match existing variables, and leverage ",(0,r.jsx)(n.code,{children:"=>"})," to bind the entire matched object."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'case { status: :ok, data: { id: 42, name: "Alice" } }\nin { status: :ok, data: { id:, name: } }\n  puts "ID=#{id}, Name=#{name}"\nin { status: :error, error: } => err_obj\n  puts "Error: #{err_obj[:error]}"\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);