"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35952],{65404:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var s=n(36672);const c={},t=s.createContext(c);function r(e){const a=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),s.createElement(t.Provider,{value:a},e.children)}},65959:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md","title":"dynamic_chaining_matchers.md","description":"\ud83d\udee0\ufe0f Advanced Chaining and Dynamic Parameters","source":"@site/docs/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md.md","sourceDirName":"gems/rspec/custom_matchers/expert","slug":"/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/custom_matchers/expert/dynamic_chaining_matchers.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"diffable_block_expectations.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/diffable_block_expectations.md"},"next":{"title":"metaprogramming_driven_matchers.md","permalink":"/keep-being-human-dev/docs/gems/rspec/custom_matchers/expert/metaprogramming_driven_matchers.md"}}');var c=n(23420),t=n(65404);const r={},i=void 0,m={},o=[{value:"\ud83d\udee0\ufe0f Advanced Chaining and Dynamic Parameters",id:"\ufe0f-advanced-chaining-and-dynamic-parameters",level:2}];function d(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.h2,{id:"\ufe0f-advanced-chaining-and-dynamic-parameters",children:"\ud83d\udee0\ufe0f Advanced Chaining and Dynamic Parameters"}),"\n",(0,c.jsxs)(a.p,{children:["Custom matchers can expose richly chainable interfaces to express complex assertions cleanly. By using ",(0,c.jsx)(a.code,{children:"chain"}),", ",(0,c.jsx)(a.code,{children:"match"}),", and dynamic arguments, you can tailor matchers for different contexts without repetition. This approach is ideal for verifying flexible data structures or multi-step transformations while keeping your specs concise."]}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-ruby",children:'# spec/support/matchers/validate_json_schema.rb\nRSpec::Matchers.define :match_json_schema do |schema_name|\n  match do |actual_json|\n    schema = JSON::SchemaLoader.load("spec/schemas/#{schema_name}.json")\n    JSON::Validator.validate!(schema, actual_json)\n    true\n  rescue JSON::Schema::ValidationError\n    false\n  end\n\n  chain :with_error_message do |expected_message|\n    @expected_message = expected_message\n  end\n\n  match_when_negated do |actual_json|\n    JSON::Validator.validate!(JSON::SchemaLoader.load("spec/schemas/#{schema_name}.json"), actual_json)\n    false\n  rescue JSON::Schema::ValidationError => e\n    e.message.include?(@expected_message)\n  end\n\n  failure_message do |actual_json|\n    "expected JSON to match \'#{schema_name}\' schema but it failed: #{JSON::Validator.fully_validate(JSON::SchemaLoader.load("spec/schemas/#{schema_name}.json"), actual_json).join(", ")}"\n  end\nend\n\n# Usage in a spec:\nexpect(response.body).to match_json_schema(:user_profile).with_error_message("required property \'id\'")\n'})})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,c.jsx)(a,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}}}]);