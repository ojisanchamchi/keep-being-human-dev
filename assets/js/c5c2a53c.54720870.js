"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[51680],{13918:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>d,default:()=>m,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata","title":"dynamic_shared_examples_with_metadata","description":"\u2699\ufe0f Dynamic Shared Examples with Metadata Filtering","source":"@site/docs/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata.md","sourceDirName":"gems/rspec/shared_examples/expert","slug":"/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/shared_examples/expert/dynamic_shared_examples_with_metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"shared_examples_with_arguments","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/beginner/shared_examples_with_arguments"},"next":{"title":"parameterized_shared_examples_with_dynamic_classes","permalink":"/keep-being-human-dev/docs/gems/rspec/shared_examples/expert/parameterized_shared_examples_with_dynamic_classes"}}');var s=t(23420),r=t(65404);const i={},d=void 0,p={},c=[{value:"\u2699\ufe0f Dynamic Shared Examples with Metadata Filtering",id:"\ufe0f-dynamic-shared-examples-with-metadata-filtering",level:2}];function o(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"\ufe0f-dynamic-shared-examples-with-metadata-filtering",children:"\u2699\ufe0f Dynamic Shared Examples with Metadata Filtering"}),"\n",(0,s.jsxs)(a.p,{children:["Leverage RSpec's metadata hooks to automatically include shared examples across multiple spec contexts based on custom metadata. This approach eliminates repetitive ",(0,s.jsx)(a.code,{children:"include_examples"})," calls and centralizes endpoint compliance tests for APIs or other components."]}),"\n",(0,s.jsxs)(a.p,{children:["In ",(0,s.jsx)(a.code,{children:"spec/support/shared_examples/api_compliance.rb"}),", define your shared examples:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# spec/support/shared_examples/api_compliance.rb\nRSpec.shared_examples 'API Endpoint Compliance' do |endpoint|\n  subject { get endpoint }\n\n  it 'responds with 200 OK' do\n    subject\n    expect(response).to have_http_status(:ok)\n  end\n\n  it 'returns JSON content type' do\n    subject\n    expect(response.media_type).to eq('application/json')\n  end\nend\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Then, in your RSpec configuration, tag specs under ",(0,s.jsx)(a.code,{children:"spec/requests"})," with ",(0,s.jsx)(a.code,{children:":api_endpoint"})," metadata and auto-include the shared examples:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"# spec/rails_helper.rb or spec/support/rspec_config.rb\nRSpec.configure do |config|\n  # Derive :api_endpoint metadata from the example group description\n  config.define_derived_metadata(file_path: %r{spec/requests/}) do |meta|\n    meta[:api_endpoint] = \"/api/#{meta[:description].parameterize}\" if meta[:description]\n  end\n\n  # After the context is defined, automatically include the compliance specs\n  config.after(:context, type: :request) do\n    if metadata[:api_endpoint]\n      include_examples 'API Endpoint Compliance', metadata[:api_endpoint]\n    end\n  end\nend\n"})}),"\n",(0,s.jsxs)(a.p,{children:["Now any request spec under ",(0,s.jsx)(a.code,{children:"spec/requests"})," will enforce your API compliance automatically."]})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},65404:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>d});var n=t(36672);const s={},r=n.createContext(s);function i(e){const a=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);