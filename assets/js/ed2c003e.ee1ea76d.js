"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[79293],{25826:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"rails/active_record_validations/expert/contextual_validations","title":"contextual_validations","description":"\ud83c\udfad Contextual Validations with validation_context","source":"@site/docs/rails/active_record_validations/expert/contextual_validations.md","sourceDirName":"rails/active_record_validations/expert","slug":"/rails/active_record_validations/expert/contextual_validations","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/contextual_validations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_validations/expert/contextual_validations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"composable_lambda_validators","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/composable_lambda_validators"},"next":{"title":"custom_validator_classes","permalink":"/keep-being-human-dev/docs/rails/active_record_validations/expert/custom_validator_classes"}}');var i=a(23420),r=a(65404);const o={},s=void 0,d={},l=[{value:"\ud83c\udfad Contextual Validations with validation_context",id:"-contextual-validations-with-validation_context",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-contextual-validations-with-validation_context",children:"\ud83c\udfad Contextual Validations with validation_context"}),"\n",(0,i.jsxs)(t.p,{children:["Use ",(0,i.jsx)(t.code,{children:"valid?(:context_name)"})," and ",(0,i.jsx)(t.code,{children:"on: :context_name"})," to run specific validations in different flows (e.g., signup vs. update). This keeps disparate validation rules isolated and prevents conditional sprawl in your models."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# app/models/order.rb\nclass Order < ApplicationRecord\n  validates :credit_card_number, presence: true, on: :purchase\n  validates :billing_address, presence: true, if: -> { shipping_differs? }\nend\n\n# In controller\ndef purchase\n  @order = Order.new(order_params)\n  if @order.valid?(:purchase)\n    @order.save\n  else\n    render_errors(@order)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(36672);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);