"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77939],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(36672);const s={},a=i.createContext(s);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},68113:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ruby/methods/middle/tap_chaining","title":"tap_chaining","description":"\ud83d\udd17 Using tap for Method Chaining","source":"@site/docs/ruby/methods/middle/tap_chaining.md","sourceDirName":"ruby/methods/middle","slug":"/ruby/methods/middle/tap_chaining","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/tap_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/middle/tap_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"symbol_to_proc","permalink":"/keep-being-human-dev/docs/ruby/methods/middle/symbol_to_proc"},"next":{"title":"custom_minitest_plugin","permalink":"/keep-being-human-dev/docs/ruby/minitest/advanced/custom_minitest_plugin"}}');var s=t(23420),a=t(65404);const o={},r=void 0,d={},c=[{value:"\ud83d\udd17 Using tap for Method Chaining",id:"-using-tap-for-method-chaining",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-using-tap-for-method-chaining",children:"\ud83d\udd17 Using tap for Method Chaining"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tap"})," method yields the object to a block and returns the object itself, making it ideal for inline debugging or configuring objects in a chain. It helps keep code fluent without breaking the chain."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"user = User.new\n  .tap { |u| Rails.logger.debug \"Building user: #{u.inspect}\" }\n  .assign_attributes(name: 'Alice', email: 'a@example.com')\n  .tap(&:save)\n\n# Equivalent without tap\nuser = User.new\nRails.logger.debug \"Building user: #{user.inspect}\"\nuser.assign_attributes(...)\nuser.save\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);