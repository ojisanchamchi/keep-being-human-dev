"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75405],{65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(36672);const i={},c=o.createContext(i);function a(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(c.Provider,{value:n},e.children)}},93089:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/websockets/expert/jwt_connection_authentication","title":"jwt_connection_authentication","description":"\ud83d\udd12 Advanced Connection Authentication with JWT","source":"@site/docs/rails/websockets/expert/jwt_connection_authentication.md","sourceDirName":"rails/websockets/expert","slug":"/rails/websockets/expert/jwt_connection_authentication","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/jwt_connection_authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/expert/jwt_connection_authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"binary_streaming","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/binary_streaming"},"next":{"title":"prometheus_monitoring","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/prometheus_monitoring"}}');var i=t(23420),c=t(65404);const a={},r=void 0,s={},d=[{value:"\ud83d\udd12 Advanced Connection Authentication with JWT",id:"-advanced-connection-authentication-with-jwt",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-advanced-connection-authentication-with-jwt",children:"\ud83d\udd12 Advanced Connection Authentication with JWT"}),"\n",(0,i.jsxs)(n.p,{children:["This tip demonstrates how to securely identify and authenticate WebSocket connections in ActionCable using JSON Web Tokens. By verifying the token in the ",(0,i.jsx)(n.code,{children:"connect"})," method, you can enforce per-connection authorization and attach user context to every channel subscription."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    identified_by :current_user\n\n    def connect\n      token = request.params[:token]\n      payload = JWT.decode(token, Rails.application.secrets.jwt_secret, true, algorithm: 'HS256').first\n      self.current_user = User.find(payload['sub'])\n    rescue JWT::DecodeError, ActiveRecord::RecordNotFound\n      reject_unauthorized_connection\n    end\n  end\nend\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Above, we decode and validate the JWT, then set ",(0,i.jsx)(n.code,{children:"current_user"})," for downstream channels. Unauthorized or invalid tokens immediately terminate the connection."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);