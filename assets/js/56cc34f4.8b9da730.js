"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[86031],{33368:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rails/active_record_migrations/advanced/reversible_data_migrations","title":"reversible_data_migrations","description":"\ud83d\udee0\ufe0f Implement Reversible Data Migrations","source":"@site/docs/rails/active_record_migrations/advanced/reversible_data_migrations.md","sourceDirName":"rails/active_record_migrations/advanced","slug":"/rails/active_record_migrations/advanced/reversible_data_migrations","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/reversible_data_migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/advanced/reversible_data_migrations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"partitioned_tables","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/partitioned_tables"},"next":{"title":"uuid_primary_keys","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/uuid_primary_keys"}}');var t=n(23420),i=n(65404);const s={},o=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Implement Reversible Data Migrations",id:"\ufe0f-implement-reversible-data-migrations",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"\ufe0f-implement-reversible-data-migrations",children:"\ud83d\udee0\ufe0f Implement Reversible Data Migrations"}),"\n",(0,t.jsxs)(a.p,{children:["For data migrations that should be reversible, use the ",(0,t.jsx)(a.code,{children:"reversible"})," helper to define up and down data changes. This ensures that rolling back also reverts data transformations predictably. It\u2019s ideal for cleaning or migrating columns without leaving stale data."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"class NormalizeUserNames < ActiveRecord::Migration[6.1]\n  def change\n    reversible do |dir|\n      dir.up do\n        User.find_each { |u| u.update_columns(name: u.name.strip.titleize) }\n      end\n\n      dir.down do\n        User.find_each { |u| u.update_columns(name: u.name.downcase) }\n      end\n    end\n  end\nend\n"})})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>o});var r=n(36672);const t={},i=r.createContext(t);function s(e){const a=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);