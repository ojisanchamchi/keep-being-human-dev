"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[89574],{7551:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rails/active_record_migrations/expert/deferrable_foreign_keys","title":"deferrable_foreign_keys","description":"\ud83d\udee0\ufe0f Define Deferrable Foreign Keys for Bulk Operations","source":"@site/docs/rails/active_record_migrations/expert/deferrable_foreign_keys.md","sourceDirName":"rails/active_record_migrations/expert","slug":"/rails/active_record_migrations/expert/deferrable_foreign_keys","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/deferrable_foreign_keys","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/expert/deferrable_foreign_keys.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"decouple_models_using_anonymous_class","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/decouple_models_using_anonymous_class"},"next":{"title":"disable_ddl_transaction_for_concurrent_index","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/expert/disable_ddl_transaction_for_concurrent_index"}}');var o=n(23420),i=n(65404);const s={},a=void 0,d={},c=[{value:"\ud83d\udee0\ufe0f Define Deferrable Foreign Keys for Bulk Operations",id:"\ufe0f-define-deferrable-foreign-keys-for-bulk-operations",level:2}];function l(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"\ufe0f-define-deferrable-foreign-keys-for-bulk-operations",children:"\ud83d\udee0\ufe0f Define Deferrable Foreign Keys for Bulk Operations"}),"\n",(0,o.jsxs)(r.p,{children:["When loading data in bulk, you may want to defer foreign key checks to the end of the transaction. Use ",(0,o.jsx)(r.code,{children:"DEFERRABLE"})," constraints to improve insert/update performance:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ruby",children:"class AddDeferrableForeignKeyToOrders < ActiveRecord::Migration[6.1]\n  def change\n    remove_foreign_key :orders, :users\n    add_foreign_key :orders, :users, deferrable: true, initially_deferred: true\n  end\nend\n"})}),"\n",(0,o.jsx)(r.p,{children:"Now you can insert child records before parents in the same transaction, with validation deferred until commit."})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(36672);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);