"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5786],{4657:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rails/controllers/middle/service_objects","title":"service_objects","description":"\ud83d\udee0\ufe0f Delegate Business Logic to Service Objects","source":"@site/docs/rails/controllers/middle/service_objects.md","sourceDirName":"rails/controllers/middle","slug":"/rails/controllers/middle/service_objects","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/service_objects","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/controllers/middle/service_objects.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"respond_to_formats","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/respond_to_formats"},"next":{"title":"streaming_responses","permalink":"/keep-being-human-dev/docs/rails/controllers/middle/streaming_responses"}}');var o=r(23420),t=r(65404);const i={},c=void 0,l={},d=[{value:"\ud83d\udee0\ufe0f Delegate Business Logic to Service Objects",id:"\ufe0f-delegate-business-logic-to-service-objects",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-delegate-business-logic-to-service-objects",children:"\ud83d\udee0\ufe0f Delegate Business Logic to Service Objects"}),"\n",(0,o.jsxs)(n.p,{children:["Keep controllers thin by moving complex business logic into service objects. This improves testability and single responsibility. Use a plain Ruby class under ",(0,o.jsx)(n.code,{children:"app/services"})," and call it from your controller action."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/services/process_order.rb\nclass ProcessOrder\n  def initialize(order)\n    @order = order\n  end\n\n  def call\n    ActiveRecord::Base.transaction do\n      charge_payment\n      send_confirmation_email\n    end\n  end\n\n  private\n\n  def charge_payment\n    # payment logic\n  end\n\n  def send_confirmation_email\n    # mailer logic\n  end\nend\n\n# app/controllers/orders_controller.rb\nclass OrdersController < ApplicationController\n  def create\n    @order = Order.new(order_params)\n    if @order.save && ProcessOrder.new(@order).call\n      redirect_to @order, notice: 'Order processed.'\n    else\n      render :new\n    end\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(36672);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);