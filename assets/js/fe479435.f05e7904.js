"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27868],{56609:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"ruby/hashes/expert/chaining_transform_keys_values","title":"chaining_transform_keys_values","description":"\ud83d\udd17 Chaining Transformations with Transform Keys/Values","source":"@site/docs/ruby/hashes/expert/chaining_transform_keys_values.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/chaining_transform_keys_values","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/chaining_transform_keys_values","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/chaining_transform_keys_values.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"auto_vivification_nested_hashes","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/auto_vivification_nested_hashes"},"next":{"title":"custom_deep_merge_with_conflicts","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/custom_deep_merge_with_conflicts"}}');var t=s(23420),r=s(65404);const i={},o=void 0,c={},h=[{value:"\ud83d\udd17 Chaining Transformations with Transform Keys/Values",id:"-chaining-transformations-with-transform-keysvalues",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-chaining-transformations-with-transform-keysvalues",children:"\ud83d\udd17 Chaining Transformations with Transform Keys/Values"}),"\n",(0,t.jsxs)(n.p,{children:["Ruby 2.5+ introduced ",(0,t.jsx)(n.code,{children:"transform_keys"})," and ",(0,t.jsx)(n.code,{children:"transform_values"}),". Compose them with ",(0,t.jsx)(n.code,{children:"then"})," for a clean pipeline:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"raw = { 'FirstName' => 'Bob', 'LAST_NAME' => 'Smith', 'age' => 30 }\n\nresult = raw\n  .transform_keys(&:downcase)\n  .transform_keys { |k| k.to_sym }\n  .transform_values do |v|\n    v.is_a?(String) ? v.capitalize : v\n  end\n  .then do |h|\n    # add full_name\n    h.merge(full_name: \"#{h[:firstname]} #{h[:last_name]}\")\n  end\n\n#=> {:firstname=>\"Bob\", :last_name=>\"Smith\", :age=>30, :full_name=>\"Bob Smith\"}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This declarative style keeps each transformation focused and readable, ideal for data normalization pipelines."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(36672);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);