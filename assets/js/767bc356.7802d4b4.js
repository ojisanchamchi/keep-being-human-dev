"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90660],{65404:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>c});var t=o(36672);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}},82753:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook","title":"rspec_after_hook","description":"\ud83e\uddf9 Use after Hooks for Cleanup","source":"@site/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/beginner","slug":"/gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"transactional_time_travel","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel"},"next":{"title":"rspec_around_hook","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_around_hook"}}');var r=o(23420),s=o(65404);const a={},c=void 0,i={},d=[{value:"\ud83e\uddf9 Use <code>after</code> Hooks for Cleanup",id:"-use-after-hooks-for-cleanup",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h2,{id:"-use-after-hooks-for-cleanup",children:["\ud83e\uddf9 Use ",(0,r.jsx)(n.code,{children:"after"})," Hooks for Cleanup"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"after"})," hooks run code after each example completes, making them perfect for cleaning up external resources or resetting shared state. Use them to tear down any setup to avoid side effects between examples."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"RSpec.describe FileUploader do\n  before(:each) do\n    @tempfile = Tempfile.new('upload')\n  end\n\n  after(:each) do\n    @tempfile.close\n    @tempfile.unlink\n  end\n\n  it 'writes data to the file' do\n    uploader = FileUploader.new(@tempfile.path)\n    uploader.upload('data')\n    expect(File.read(@tempfile.path)).to eq('data')\n  end\nend\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);