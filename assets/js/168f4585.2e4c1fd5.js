"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[68856],{65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var s=r(36672);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}},85351:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"ruby/exceptions/middle/ensure_for_cleanup","title":"ensure_for_cleanup","description":"\ud83e\uddf9 Using ensure for Resource Cleanup","source":"@site/docs/ruby/exceptions/middle/ensure_for_cleanup.md","sourceDirName":"ruby/exceptions/middle","slug":"/ruby/exceptions/middle/ensure_for_cleanup","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/ensure_for_cleanup","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/middle/ensure_for_cleanup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tracepoint_exception_monitoring","permalink":"/keep-being-human-dev/docs/ruby/exceptions/expert/tracepoint_exception_monitoring"},"next":{"title":"inline_rescue_in_method","permalink":"/keep-being-human-dev/docs/ruby/exceptions/middle/inline_rescue_in_method"}}');var t=r(23420),o=r(65404);const i={},c=void 0,u={},a=[{value:"\ud83e\uddf9 Using <code>ensure</code> for Resource Cleanup",id:"-using-ensure-for-resource-cleanup",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"-using-ensure-for-resource-cleanup",children:["\ud83e\uddf9 Using ",(0,t.jsx)(n.code,{children:"ensure"})," for Resource Cleanup"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ensure"})," block always runs, whether an exception occurs or not. Use it to release resources like file handles, database connections, or locks."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'file = File.open("data.txt", "w")\nbegin\n  file.write("Important data")\n  # ... more processing\nrescue IOError => e\n  puts "Write failed: #{e.message}"\nensure\n  file.close\nend\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Even if an ",(0,t.jsx)(n.code,{children:"IOError"})," is raised, ",(0,t.jsx)(n.code,{children:"ensure"})," guarantees that the file is closed, preventing resource leaks."]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);