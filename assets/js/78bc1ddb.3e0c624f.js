"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[13706],{65404:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>d});var t=o(36672);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}},70102:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"ruby/regex/advanced/lookaround_assertions","title":"lookaround_assertions","description":"\ud83d\udd0d Use Lookaround Assertions","source":"@site/docs/ruby/regex/advanced/lookaround_assertions.md","sourceDirName":"ruby/regex/advanced","slug":"/ruby/regex/advanced/lookaround_assertions","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/lookaround_assertions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/advanced/lookaround_assertions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"gsub_with_block","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/gsub_with_block"},"next":{"title":"named_capture_to_hash","permalink":"/keep-being-human-dev/docs/ruby/regex/advanced/named_capture_to_hash"}}');var s=o(23420),a=o(65404);const r={},d=void 0,c={},i=[{value:"\ud83d\udd0d Use Lookaround Assertions",id:"-use-lookaround-assertions",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-use-lookaround-assertions",children:"\ud83d\udd0d Use Lookaround Assertions"}),"\n",(0,s.jsxs)(n.p,{children:["Use positive/negative lookahead ",(0,s.jsx)(n.code,{children:"(?=...)"}),", negative lookahead ",(0,s.jsx)(n.code,{children:"(?!...)"}),", and lookbehind ",(0,s.jsx)(n.code,{children:"(?<=...)"}),"/",(0,s.jsx)(n.code,{children:"(?<!...)"})," to match context without consuming characters. This is invaluable for validations and context-aware replacements without extra capturing groups."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"text = 'foo123bar'\n# Match digits only when preceded by letters and followed by letters\ndigits = text.scan(/(?<=[A-Za-z])\\d+(?=[A-Za-z])/)\n#=> [\"123\"]\n"})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);