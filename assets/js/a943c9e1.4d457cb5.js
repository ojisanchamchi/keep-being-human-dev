"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[52260],{33744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"ruby/define_method/beginner/dynamic_method_creation","title":"dynamic_method_creation","description":"\u2728 Dynamically Create Simple Methods","source":"@site/docs/ruby/define_method/beginner/dynamic_method_creation.md","sourceDirName":"ruby/define_method/beginner","slug":"/ruby/define_method/beginner/dynamic_method_creation","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/dynamic_method_creation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/beginner/dynamic_method_creation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"capture_external_variable","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/capture_external_variable"},"next":{"title":"method_with_arguments","permalink":"/keep-being-human-dev/docs/ruby/define_method/beginner/method_with_arguments"}}');var r=t(23420),i=t(65404);const a={},d=void 0,c={},s=[{value:"\u2728 Dynamically Create Simple Methods",id:"-dynamically-create-simple-methods",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-dynamically-create-simple-methods",children:"\u2728 Dynamically Create Simple Methods"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"define_method"})," lets you add methods to a class at runtime, perfect for reducing boilerplate. Instead of writing out each method by hand, you can loop over a list and define them dynamically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class Greeter\n  %i[morning afternoon evening].each do |period|\n    define_method("greet_#{period}") do |name|\n      "Good #{period.to_s.capitalize}, \x7f#{name}!"\n    end\n  end\nend\n\ng = Greeter.new\nputs g.greet_morning("Alice")   # => "Good Morning, Alice!"\nputs g.greet_evening("Bob")     # => "Good Evening, Bob!"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var o=t(36672);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);