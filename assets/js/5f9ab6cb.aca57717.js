"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[85299],{26034:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rails/action_cable/expert/metrics_instrumentation","title":"metrics_instrumentation","description":"\ud83d\udcca Instrument and Monitor Action Cable with Prometheus Metrics","source":"@site/docs/rails/action_cable/expert/metrics_instrumentation.md","sourceDirName":"rails/action_cable/expert","slug":"/rails/action_cable/expert/metrics_instrumentation","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/metrics_instrumentation","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/expert/metrics_instrumentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"load_testing_action_cable","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/load_testing_action_cable"},"next":{"title":"redis_scaling_namespace_isolation","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/redis_scaling_namespace_isolation"}}');var s=t(23420),o=t(65404);const r={},a=void 0,c={},l=[{value:"\ud83d\udcca Instrument and Monitor Action Cable with Prometheus Metrics",id:"-instrument-and-monitor-action-cable-with-prometheus-metrics",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-instrument-and-monitor-action-cable-with-prometheus-metrics",children:"\ud83d\udcca Instrument and Monitor Action Cable with Prometheus Metrics"}),"\n",(0,s.jsx)(n.p,{children:"Expose Action Cable internals\u2014connections, subscriptions, message throughput\u2014for real\u2011time monitoring with Prometheus. Hook into connection lifecycle and received frames to feed counters and histograms."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/action_cable_metrics.rb\nrequire 'prometheus/client'\n\nPROM = Prometheus::Client.registry\nconnection_counter = PROM.counter(:ac_connections_total, docstring: 'Total AC connections')\nmessage_histogram = PROM.histogram(:ac_message_duration_seconds, docstring: 'Action Cable message processing time')\n\nmodule ActionCable\n  class Connection < Connection::Base\n    def connect\n      connection_counter.increment\n      super\n    end\n  end\n\n  class Channel < Channel::Base\n    around_action :track_message\n\n    private\n\n    def track_message\n      message_histogram.observe do\n        yield\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then mount a Prometheus endpoint:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# config/routes.rb\nget '/metrics', to: proc { [200, {}, [Prometheus::Client.registry.metrics_text]] }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(36672);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);