"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[64887],{65404:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var a=r(36672);const n={},o=a.createContext(n);function s(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(o.Provider,{value:t},e.children)}},82458:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"javascript/turbo/expert/turbo_stream_broadcasting","title":"turbo_stream_broadcasting","description":"\ud83d\ude80 Advanced Turbo Stream Broadcasting","source":"@site/docs/javascript/turbo/expert/turbo_stream_broadcasting.md","sourceDirName":"javascript/turbo/expert","slug":"/javascript/turbo/expert/turbo_stream_broadcasting","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_broadcasting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/javascript/turbo/expert/turbo_stream_broadcasting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"turbo_security_csp","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_security_csp"},"next":{"title":"turbo_stream_chunked_uploads","permalink":"/keep-being-human-dev/docs/javascript/turbo/expert/turbo_stream_chunked_uploads"}}');var n=r(23420),o=r(65404);const s={},i=void 0,c={},u=[{value:"\ud83d\ude80 Advanced Turbo Stream Broadcasting",id:"-advanced-turbo-stream-broadcasting",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-advanced-turbo-stream-broadcasting",children:"\ud83d\ude80 Advanced Turbo Stream Broadcasting"}),"\n",(0,n.jsx)(t.p,{children:"Leverage Turbo Streams to broadcast real-time updates from the server to multiple clients using ActionCable and custom streams. This approach decouples your front-end JavaScript from specific DOM updates, allowing you to push partials or raw HTML over named channels."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"# app/channels/notifications_channel.rb\ntype StimulusReflex::Channel\n\ndef subscribed\n  stream_for current_user\nend\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-erb",children:'\x3c!-- app/views/notifications/_notification.html.erb --\x3e\n<turbo-stream action="append" target="notifications">\n  <template>\n    <div class="notification"><%= notification.message %></div>\n  </template>\n</turbo-stream>\n'})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:'# Trigger broadcast in your model or job\nNotificationsChannel.broadcast_to(\n  user,\n  render_to_string(partial: "notifications/notification", locals: { notification: new_notification })\n)\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}}}]);