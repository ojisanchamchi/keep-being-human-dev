"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72723],{65404:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var c=a(36672);const i={},t=c.createContext(i);function r(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),c.createElement(t.Provider,{value:n},e.children)}},65973:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>u});const c=JSON.parse('{"id":"ruby/exceptions/advanced/exception_cause_chaining","title":"exception_cause_chaining","description":"\ud83d\udd17 Exception Cause Chaining","source":"@site/docs/ruby/exceptions/advanced/exception_cause_chaining.md","sourceDirName":"ruby/exceptions/advanced","slug":"/ruby/exceptions/advanced/exception_cause_chaining","permalink":"/keep-being-human-dev/docs/ruby/exceptions/advanced/exception_cause_chaining","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/exceptions/advanced/exception_cause_chaining.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_exception_hierarchy","permalink":"/keep-being-human-dev/docs/ruby/exceptions/advanced/custom_exception_hierarchy"},"next":{"title":"exception_notification_integration","permalink":"/keep-being-human-dev/docs/ruby/exceptions/advanced/exception_notification_integration"}}');var i=a(23420),t=a(65404);const r={},o=void 0,s={},u=[{value:"\ud83d\udd17 Exception Cause Chaining",id:"-exception-cause-chaining",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-exception-cause-chaining",children:"\ud83d\udd17 Exception Cause Chaining"}),"\n",(0,i.jsxs)(n.p,{children:["Preserve original error context when wrapping low\u2011level exceptions in higher\u2011level ones using the ",(0,i.jsx)(n.code,{children:"cause:"})," keyword. This makes debugging easier by retaining the backtrace of the root failure. Later you can inspect ",(0,i.jsx)(n.code,{children:"e.cause"})," to drill down into the source."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'begin\n  JSON.parse(payload)\nrescue JSON::ParserError => json_err\n  raise DataProcessingError.new("Payload parsing failed"), cause: json_err\nend\n\nbegin\n  process_data(payload)\nrescue DataProcessingError => e\n  logger.error "Error: #{e.message}"\n  logger.error "Cause: #{e.cause.class} - #{e.cause.message}\\n#{e.cause.backtrace.join("\\n")}"\nend\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);