"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39775],{21811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"rails/debugging/expert/notifications_inspector","title":"notifications_inspector","description":"\ud83d\udce1 ActiveSupport::Notifications Debugging","source":"@site/docs/rails/debugging/expert/notifications_inspector.md","sourceDirName":"rails/debugging/expert","slug":"/rails/debugging/expert/notifications_inspector","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/notifications_inspector","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/debugging/expert/notifications_inspector.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_exception_pry","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/custom_exception_pry"},"next":{"title":"remote_pry_docker_debug","permalink":"/keep-being-human-dev/docs/rails/debugging/expert/remote_pry_docker_debug"}}');var o=t(23420),r=t(65404);const s={},a=void 0,c={},p=[{value:"\ud83d\udce1 ActiveSupport::Notifications Debugging",id:"-activesupportnotifications-debugging",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-activesupportnotifications-debugging",children:"\ud83d\udce1 ActiveSupport::Notifications Debugging"}),"\n",(0,o.jsxs)(n.p,{children:["ActiveSupport::Notifications provide a pub/sub hook into Rails internals. By subscribing to key events like ",(0,o.jsx)(n.code,{children:"process_action.action_controller"})," or ",(0,o.jsx)(n.code,{children:"sql.active_record"}),", you can capture performance data and full payload context, then drop into a debugger on specific conditions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# In Rails console or an initializer\nActiveSupport::Notifications.subscribe('process_action.action_controller') do |_name, start, finish, id, payload|\n  duration = (finish - start) * 1000.0\n  if duration > 500 # ms threshold\n    puts \"Slower than expected: \", payload\n    require 'byebug'; byebug\n  end\nend\n\n# You can also subscribe in code to inspect only certain controllers\nActiveSupport::Notifications.subscribe('sql.active_record') do |*args|\n  name, start, finish, id, payload = args\n  if payload[:sql] =~ /UPDATE/ && payload[:binds].any?\n    binding.byebug\n  end\nend\n"})}),"\n",(0,o.jsx)(n.p,{children:"This approach dynamically halts your app when specific events occur, giving you a full payload in context. Perfect for isolating troublesome slow actions or unexpected data mutations."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(36672);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);