"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[848],{4996:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"ruby/procs_and_lambdas/advanced/destructuring_parameters","title":"destructuring_parameters","description":"\ud83c\udfaf Destructuring Parameters in Lambdas","source":"@site/docs/ruby/procs_and_lambdas/advanced/destructuring_parameters.md","sourceDirName":"ruby/procs_and_lambdas/advanced","slug":"/ruby/procs_and_lambdas/advanced/destructuring_parameters","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/destructuring_parameters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/advanced/destructuring_parameters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"splat_and_double_splat","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/splat_and_double_splat"},"next":{"title":"dynamic_method_definitions","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/advanced/dynamic_method_definitions"}}');var n=a(23420),s=a(65404);const d={},c=void 0,i={},o=[{value:"\ud83c\udfaf Destructuring Parameters in Lambdas",id:"-destructuring-parameters-in-lambdas",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-destructuring-parameters-in-lambdas",children:"\ud83c\udfaf Destructuring Parameters in Lambdas"}),"\n",(0,n.jsx)(r.p,{children:"Ruby 2.7+ allows you to destructure arrays and hashes directly in lambda parameters, making handlers and callbacks concise and self-documenting. This is extremely handy when working with complex data structures."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:'# Array destructuring\nparser = ->((x, y, z)) { "Coords: #{x},#{y},#{z}" }\nputs parser.call([1, 2, 3])  # => "Coords: 1,2,3"\n\n# Hash destructuring with keyword args\nrenderer = ->(title:, content:) {\n  "<h1>#{title}</h1><p>#{content}</p>"\n}\nputs renderer.call(title: "Hi", content: "World")\n'})})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},65404:(e,r,a)=>{a.d(r,{R:()=>d,x:()=>c});var t=a(36672);const n={},s=t.createContext(n);function d(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);