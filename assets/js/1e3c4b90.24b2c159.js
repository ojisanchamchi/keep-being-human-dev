"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[11514],{5164:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/arrays/advanced/slice_when_chunking","title":"slice_when_chunking","description":"\ud83e\ude93 Efficient Custom Chunking with slice_when","source":"@site/docs/ruby/arrays/advanced/slice_when_chunking.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/slice_when_chunking","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/slice_when_chunking","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/slice_when_chunking.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"selective_flatten","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/selective_flatten"},"next":{"title":"transpose_jagged_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/transpose_jagged_arrays"}}');var s=r(23420),a=r(65404);const c={},i=void 0,o={},u=[{value:"\ud83e\ude93 Efficient Custom Chunking with <code>slice_when</code>",id:"-efficient-custom-chunking-with-slice_when",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-efficient-custom-chunking-with-slice_when",children:["\ud83e\ude93 Efficient Custom Chunking with ",(0,s.jsx)(n.code,{children:"slice_when"})]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"slice_when"})," to divide an array into chunks based on a custom predicate. It yields an Enumerator of subarrays, splitting whenever the block returns true for a pair of consecutive elements. This is ideal for grouping ranges or segments without precomputing indices."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"arr = [1, 2, 3, 5, 6, 10]\nchunks = arr.slice_when { |prev, curr| curr != prev + 1 }.to_a\n# => [[1, 2, 3], [5, 6], [10]]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>i});var t=r(36672);const s={},a=t.createContext(s);function c(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);