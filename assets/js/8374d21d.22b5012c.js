"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94652],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(36672);const c={},i=a.createContext(c);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),a.createElement(i.Provider,{value:n},e.children)}},76620:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/action_cable/advanced/jwt_channel_authentication","title":"jwt_channel_authentication","description":"\ud83d\udd10 JWT Channel Authentication","source":"@site/docs/rails/action_cable/advanced/jwt_channel_authentication.md","sourceDirName":"rails/action_cable/advanced","slug":"/rails/action_cable/advanced/jwt_channel_authentication","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/jwt_channel_authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/advanced/jwt_channel_authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"graphql_subscriptions","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/graphql_subscriptions"},"next":{"title":"kafka_pubsub_adapter","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/kafka_pubsub_adapter"}}');var c=t(23420),i=t(65404);const o={},s=void 0,r={},d=[{value:"\ud83d\udd10 JWT Channel Authentication",id:"-jwt-channel-authentication",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-jwt-channel-authentication",children:"\ud83d\udd10 JWT Channel Authentication"}),"\n",(0,c.jsxs)(n.p,{children:["Use JWT tokens to authenticate WebSocket connections and restrict channel subscriptions to verified users only. Reject unauthorized connections at the ",(0,c.jsx)(n.code,{children:"Connection"})," level."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:"# app/channels/application_cable/connection.rb\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n    identified_by :current_user\n\n    def connect\n      self.current_user = find_verified_user\n    end\n\n    private\n    def find_verified_user\n      token = request.params[:token]\n      payload, _ = JWT.decode(token, Rails.application.secret_key_base)\n      User.find_by(id: payload['sub']) || reject_unauthorized_connection\n    rescue JWT::DecodeError\n      reject_unauthorized_connection\n    end\n  end\nend\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Clients must pass ",(0,c.jsx)(n.code,{children:"?token=<JWT>"})," when establishing the WebSocket connection. Channels can then rely on ",(0,c.jsx)(n.code,{children:"current_user"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);