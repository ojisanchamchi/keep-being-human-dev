"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95971],{7025:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"ruby/classes_and_modules/expert/namespaces_with_module_nesting","title":"namespaces_with_module_nesting","description":"\ud83d\udce6 Creating Self-contained Namespaces with Module.nesting","source":"@site/docs/ruby/classes_and_modules/expert/namespaces_with_module_nesting.md","sourceDirName":"ruby/classes_and_modules/expert","slug":"/ruby/classes_and_modules/expert/namespaces_with_module_nesting","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/namespaces_with_module_nesting","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/classes_and_modules/expert/namespaces_with_module_nesting.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"module_prepend_over_mixin","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/module_prepend_over_mixin"},"next":{"title":"prepend_method_wrappers","permalink":"/keep-being-human-dev/docs/ruby/classes_and_modules/expert/prepend_method_wrappers"}}');var a=s(23420),o=s(65404);const d={},r=void 0,i={},c=[{value:"\ud83d\udce6 Creating Self-contained Namespaces with <code>Module.nesting</code>",id:"-creating-self-contained-namespaces-with-modulenesting",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h2,{id:"-creating-self-contained-namespaces-with-modulenesting",children:["\ud83d\udce6 Creating Self-contained Namespaces with ",(0,a.jsx)(n.code,{children:"Module.nesting"})]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Module.nesting"})," gives you introspection on the current module stack, useful for generating contextual constants or auto-loading submodules. This aids in building modular architectures without hardcoding paths."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:'module Admin\n  module Reports\n    def self.load_all\n      Module.nesting.map(&:name)\n    end\n  end\nend\n\nputs Admin::Reports.load_all\n# => ["Admin::Reports", "Admin"]\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can leverage this to derive default file paths or constant scopes dynamically."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>r});var t=s(36672);const a={},o=t.createContext(a);function d(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);