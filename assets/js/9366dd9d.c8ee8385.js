"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[95448],{53739:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>d,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"ruby/concurrency_and_mutexes/middle/condition_variable_usage","title":"condition_variable_usage","description":"\ud83d\udce3 Coordinating Threads with ConditionVariable","source":"@site/docs/ruby/concurrency_and_mutexes/middle/condition_variable_usage.md","sourceDirName":"ruby/concurrency_and_mutexes/middle","slug":"/ruby/concurrency_and_mutexes/middle/condition_variable_usage","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/condition_variable_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/middle/condition_variable_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"reentrant_mutex_monitor","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/expert/reentrant_mutex_monitor"},"next":{"title":"double_checked_locking","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/middle/double_checked_locking"}}');var o=i(23420),r=i(65404);const d={},a=void 0,c={},u=[{value:"\ud83d\udce3 Coordinating Threads with ConditionVariable",id:"-coordinating-threads-with-conditionvariable",level:2}];function s(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-coordinating-threads-with-conditionvariable",children:"\ud83d\udce3 Coordinating Threads with ConditionVariable"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"ConditionVariable"})," in conjunction with a ",(0,o.jsx)(n.code,{children:"Mutex"})," to signal between producer and consumer threads. This pattern avoids busy\u2011waiting and lets consumers sleep until work is available."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:'require \'thread\'\n\nmutex = Mutex.new\ncondition = ConditionVariable.new\nqueue = []\n\nproducer = Thread.new do\n  5.times do |i|\n    sleep(rand * 0.1)\n    mutex.synchronize do\n      queue << i\n      puts "Produced #{i}"\n      condition.signal\n    end\n  end\nend\n\nconsumer = Thread.new do\n  loop do\n    item = nil\n    mutex.synchronize do\n      condition.wait(mutex) while queue.empty?\n      item = queue.shift\nn    end\n    puts "Consumed #{item}" if item\n    break if item == 4\n  end\nend\n\nproducer.join\nconsumer.join\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var t=i(36672);const o={},r=t.createContext(o);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);