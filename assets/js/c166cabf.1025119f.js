"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[76059],{23419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"gems/devise/expert/multi_tenant_authentication","title":"multi_tenant_authentication","description":"\ud83c\udfe2 Multi-Tenant Authentication with Devise and Apartment","source":"@site/docs/gems/devise/expert/multi_tenant_authentication.md","sourceDirName":"gems/devise/expert","slug":"/gems/devise/expert/multi_tenant_authentication","permalink":"/keep-being-human-dev/docs/gems/devise/expert/multi_tenant_authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/devise/expert/multi_tenant_authentication.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"jwt_stateless_api","permalink":"/keep-being-human-dev/docs/gems/devise/expert/jwt_stateless_api"},"next":{"title":"custom_redirect_path","permalink":"/keep-being-human-dev/docs/gems/devise/middle/custom_redirect_path"}}');var i=n(23420),a=n(65404);const r={},o=void 0,c={},u=[{value:"\ud83c\udfe2 Multi-Tenant Authentication with Devise and Apartment",id:"-multi-tenant-authentication-with-devise-and-apartment",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"-multi-tenant-authentication-with-devise-and-apartment",children:"\ud83c\udfe2 Multi-Tenant Authentication with Devise and Apartment"}),"\n",(0,i.jsxs)(t.p,{children:["Scale Devise to support multiple tenants by dynamically scoping the connection via subdomain or header before authentication. Use the ",(0,i.jsx)(t.code,{children:"Apartment"})," gem to switch schemas and override ",(0,i.jsx)(t.code,{children:"current_tenant"})," in ",(0,i.jsx)(t.code,{children:"ApplicationController"}),". Ensure Devise looks in the correct schema for each request."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"# app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  before_action :set_tenant\n\n  private\n\n  def set_tenant\n    tenant_name = request.subdomain.presence || 'public'\n    Apartment::Tenant.switch!(tenant_name)\n  end\nend\n\n# config/routes.rb\nconstraints(SubdomainConstraint) do\n  devise_for :users, controllers: { sessions: 'users/sessions' }\nend\n\n# lib/subdomain_constraint.rb\nclass SubdomainConstraint\n  def self.matches?(request)\n    request.subdomain.present? && request.subdomain != 'www'\n  end\nend\n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(36672);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);