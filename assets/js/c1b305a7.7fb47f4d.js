"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24387],{65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var o=t(36672);const c={},r=o.createContext(c);function i(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),o.createElement(r.Provider,{value:n},e.children)}},83655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"ruby/blocks/expert/capture_and_rebind_block_context","title":"capture_and_rebind_block_context","description":"\ud83d\udd12 Capture and Rebind Block Context","source":"@site/docs/ruby/blocks/expert/capture_and_rebind_block_context.md","sourceDirName":"ruby/blocks/expert","slug":"/ruby/blocks/expert/capture_and_rebind_block_context","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/capture_and_rebind_block_context","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/blocks/expert/capture_and_rebind_block_context.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"block_instrumentation_with_prepend","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/block_instrumentation_with_prepend"},"next":{"title":"context_switch_with_instance_exec","permalink":"/keep-being-human-dev/docs/ruby/blocks/expert/context_switch_with_instance_exec"}}');var c=t(23420),r=t(65404);const i={},d=void 0,a={},s=[{value:"\ud83d\udd12 Capture and Rebind Block Context",id:"-capture-and-rebind-block-context",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-capture-and-rebind-block-context",children:"\ud83d\udd12 Capture and Rebind Block Context"}),"\n",(0,c.jsxs)(n.p,{children:["Rebinding a block\u2019s ",(0,c.jsx)(n.code,{children:"self"})," to another context lets you inject behavior into foreign objects. By turning a ",(0,c.jsx)(n.code,{children:"Proc"})," into an ",(0,c.jsx)(n.code,{children:"UnboundMethod"}),", you can bind it to any receiver dynamically."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:'module BlockRebinding\n  refine Proc do\n    def rebind(context)\n      holder = Module.new { define_method(:dynamic, &self) }\n      method = holder.instance_method(:dynamic)\n      method.bind(context).call\n    end\n  end\nend\n\nusing BlockRebinding\n\ngreet = -> { "Hello from #{self.class}" }\nputs greet.rebind("string".freeze) # => "Hello from String"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);