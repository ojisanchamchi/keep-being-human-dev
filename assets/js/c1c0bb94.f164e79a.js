"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84073],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var t=a(36672);const o={},r=t.createContext(o);function i(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},76492:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"gems/solid_queue/advanced/advanced_exponential_backoff.md","title":"advanced_exponential_backoff.md","description":"\u26a1 Implementing Exponential Backoff for Retries","source":"@site/docs/gems/solid_queue/advanced/advanced_exponential_backoff.md.md","sourceDirName":"gems/solid_queue/advanced","slug":"/gems/solid_queue/advanced/advanced_exponential_backoff.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_exponential_backoff.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/solid_queue/advanced/advanced_exponential_backoff.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"advanced_dynamic_worker_routing.md","permalink":"/keep-being-human-dev/docs/gems/solid_queue/advanced/advanced_dynamic_worker_routing.md"},"next":{"title":"define_and_enqueue_job","permalink":"/keep-being-human-dev/docs/gems/solid_queue/beginner/define_and_enqueue_job"}}');var o=a(23420),r=a(65404);const i={},d=void 0,s={},c=[{value:"\u26a1 Implementing Exponential Backoff for Retries",id:"-implementing-exponential-backoff-for-retries",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-implementing-exponential-backoff-for-retries",children:"\u26a1 Implementing Exponential Backoff for Retries"}),"\n",(0,o.jsx)(n.p,{children:"SolidQueue lets you define custom retry intervals to handle transient failures with exponential backoff. You can configure a global retry strategy or override it per-worker by passing a lambda that calculates delay based on the attempt count."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/solid_queue.rb\nSolidQueue.configure do |config|\n  # Global backoff: 2^attempt * 1_000 milliseconds\n  config.retry_delay = ->(attempt) { (2**attempt) * 1_000 }\nend\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# app/workers/my_worker.rb\nclass MyWorker\n  include SolidQueue::Worker\n\n  # Override per-worker: cubic backoff in ms\n  retries 5\n  retry_delay ->(attempt) { (attempt**3) * 2_000 }\n\n  def perform(args)\n    # your job logic that may raise transient errors\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);