"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50371],{65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(36672);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}},70143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/metaprogramming/middle/dsl_with_instance_eval","title":"dsl_with_instance_eval","description":"\ud83d\udcdd Building a DSL with instance_eval","source":"@site/docs/ruby/metaprogramming/middle/dsl_with_instance_eval.md","sourceDirName":"ruby/metaprogramming/middle","slug":"/ruby/metaprogramming/middle/dsl_with_instance_eval","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dsl_with_instance_eval","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/middle/dsl_with_instance_eval.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"const_missing_autoload","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/const_missing_autoload"},"next":{"title":"dynamic_attr_accessors","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/middle/dynamic_attr_accessors"}}');var i=t(23420),s=t(65404);const r={},c=void 0,o={},l=[{value:"\ud83d\udcdd Building a DSL with instance_eval",id:"-building-a-dsl-with-instance_eval",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-building-a-dsl-with-instance_eval",children:"\ud83d\udcdd Building a DSL with instance_eval"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"instance_eval"})," lets you execute a block in the context of an object, which is the cornerstone of many Ruby DSLs. Use it to create clean, readable configuration blocks."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"class TableBuilder\n  def initialize\n    @columns = []\n  end\n\n  def column(name, type)\n    @columns << { name: name, type: type }\n  end\n\n  def build(&block)\n    instance_eval(&block)\n    @columns\n  end\nend\n\ncolumns = TableBuilder.new.build do\n  column :id,   :integer\n  column :name, :string\nend\n\np columns\n# => [{:name=>:id, :type=>:integer}, {:name=>:name, :type=>:string}]\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);