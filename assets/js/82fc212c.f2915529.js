"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43550],{52034:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/irb/expert/input_preprocessor","title":"input_preprocessor","description":"\ud83d\udee0\ufe0f Preprocess and Transform Input","source":"@site/docs/ruby/irb/expert/input_preprocessor.md","sourceDirName":"ruby/irb/expert","slug":"/ruby/irb/expert/input_preprocessor","permalink":"/keep-being-human-dev/docs/ruby/irb/expert/input_preprocessor","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/irb/expert/input_preprocessor.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"history_incremental_search","permalink":"/keep-being-human-dev/docs/ruby/irb/expert/history_incremental_search"},"next":{"title":"magic_commands_extension","permalink":"/keep-being-human-dev/docs/ruby/irb/expert/magic_commands_extension"}}');var s=r(23420),o=r(65404);const i={},c=void 0,p={},a=[{value:"\ud83d\udee0\ufe0f Preprocess and Transform Input",id:"\ufe0f-preprocess-and-transform-input",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"\ufe0f-preprocess-and-transform-input",children:"\ud83d\udee0\ufe0f Preprocess and Transform Input"}),"\n",(0,s.jsx)(n.p,{children:"Intercept and transform user input before IRB evaluates it. Useful for auto-wrapping methods or injecting debugging hooks."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'module IRB\n  class InputTransformer\n    def transform(line)\n      # Auto-wrap single-line `foo` calls in puts for quick inspection\n      if line.strip =~ /^\\w+$/\n        "puts(#{line.strip})"\n      else\n        super\n      end\n    end\n  end\nend\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Place this in ",(0,s.jsx)(n.code,{children:"~/.irbrc"})," to automatically wrap bare identifiers in ",(0,s.jsx)(n.code,{children:"puts"}),". You can use this hook to inject logging, profiling, or custom DSL expansion."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(36672);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);