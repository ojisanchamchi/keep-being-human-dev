"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50536],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>i});var c=a(36672);const d={},t=c.createContext(d);function s(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),c.createElement(t.Provider,{value:n},e.children)}},94891:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>r});const c=JSON.parse('{"id":"ruby/metaprogramming/advanced/macro_with_included_hook","title":"macro_with_included_hook","description":"\ud83d\udd01 Building macros via included callback","source":"@site/docs/ruby/metaprogramming/advanced/macro_with_included_hook.md","sourceDirName":"ruby/metaprogramming/advanced","slug":"/ruby/metaprogramming/advanced/macro_with_included_hook","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/macro_with_included_hook","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/metaprogramming/advanced/macro_with_included_hook.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"eigenclass_singleton_methods","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/eigenclass_singleton_methods"},"next":{"title":"method_missing_dispatch","permalink":"/keep-being-human-dev/docs/ruby/metaprogramming/advanced/method_missing_dispatch"}}');var d=a(23420),t=a(65404);const s={},i=void 0,o={},r=[{value:"\ud83d\udd01 Building macros via <code>included</code> callback",id:"-building-macros-via-included-callback",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h2,{id:"-building-macros-via-included-callback",children:["\ud83d\udd01 Building macros via ",(0,d.jsx)(n.code,{children:"included"})," callback"]}),"\n",(0,d.jsxs)(n.p,{children:["Define class macros by intercepting ",(0,d.jsx)(n.code,{children:"self.included"})," in modules, injecting class methods, and managing inheritance cleanly."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:"module ActsAsTaggable\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def acts_as_taggable\n      has_many :tags\n    end\n  end\nend\n\nclass Post\n  include ActsAsTaggable\n  acts_as_taggable\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(l,{...e})}):l(e)}}}]);