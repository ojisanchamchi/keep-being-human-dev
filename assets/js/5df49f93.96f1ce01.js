"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[28683],{60809:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel","title":"transactional_time_travel","description":"\u23f1\ufe0f Wrap Examples in Transactions with around(:each)","source":"@site/docs/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel.md","sourceDirName":"gems/rspec/hooks_and_lifecycle/advanced","slug":"/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/hooks_and_lifecycle/advanced/transactional_time_travel.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"orchestrating_external_service","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/advanced/orchestrating_external_service"},"next":{"title":"rspec_after_hook","permalink":"/keep-being-human-dev/docs/gems/rspec/hooks_and_lifecycle/beginner/rspec_after_hook"}}');var s=a(23420),r=a(65404);const c={},o=void 0,i={},l=[{value:"\u23f1\ufe0f Wrap Examples in Transactions with around()",id:"\ufe0f-wrap-examples-in-transactions-with-around",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"\ufe0f-wrap-examples-in-transactions-with-around",children:["\u23f1\ufe0f Wrap Examples in Transactions with around(",":each",")"]}),"\n",(0,s.jsxs)(n.p,{children:["Speed up tests that require database rollbacks or time manipulation by combining transactional fixtures with time-travel. Use ",(0,s.jsx)(n.code,{children:"around(:each)"})," to wrap each example in a transaction and reset time with ",(0,s.jsx)(n.code,{children:"Timecop"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# spec/support/around_transaction_timecop.rb\nRSpec.configure do |config|\n  config.around(:each) do |example|\n    ActiveRecord::Base.connection.transaction(joinable: false, rollback: :always) do\n      Timecop.freeze(Time.now) do\n        example.run\n      end\n    end\n  end\nend\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this setup:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"transaction(..., rollback: :always)"})," ensures each example is rolled back after running."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Timecop.freeze"})," pins the clock at the example start, guaranteeing reproducible time-based assertions."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now you can safely mutate time and database state without polluting other examples."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>c,x:()=>o});var t=a(36672);const s={},r=t.createContext(s);function c(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);