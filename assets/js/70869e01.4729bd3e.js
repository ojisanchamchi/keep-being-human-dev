"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[94159],{63650:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"ruby/marshal/middle/compress_marshal_data","title":"compress_marshal_data","description":"\ud83d\udce6 Compress Marshaled Data with Zlib","source":"@site/docs/ruby/marshal/middle/compress_marshal_data.md","sourceDirName":"ruby/marshal/middle","slug":"/ruby/marshal/middle/compress_marshal_data","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/compress_marshal_data","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/middle/compress_marshal_data.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"marshal_streaming_chunks","permalink":"/keep-being-human-dev/docs/ruby/marshal/expert/marshal_streaming_chunks"},"next":{"title":"custom_marshal_dump_load","permalink":"/keep-being-human-dev/docs/ruby/marshal/middle/custom_marshal_dump_load"}}');var t=s(23420),n=s(65404);const i={},l=void 0,d={},o=[{value:"\ud83d\udce6 Compress Marshaled Data with Zlib",id:"-compress-marshaled-data-with-zlib",level:2}];function m(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"-compress-marshaled-data-with-zlib",children:"\ud83d\udce6 Compress Marshaled Data with Zlib"}),"\n",(0,t.jsxs)(a.p,{children:["To save storage or network bandwidth, wrap your marshaled payload in compression. Use Ruby\u2019s built-in ",(0,t.jsx)(a.code,{children:"Zlib"})," to deflate the serialized string and inflate it on load. This can drastically reduce the size of large objects before persisting or transmitting."]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:'require \'zlib\'\n\ndata = { logs: (1..1000).map { |i| "entry#{i}" } }\n\n# Serialize and compress\npacked = Zlib::Deflate.deflate(Marshal.dump(data))\nputs "Compressed size: #{packed.bytesize}"\n\n# Decompress and deserialize\noriginal = Marshal.load(Zlib::Inflate.inflate(packed))\nputs original[:logs].first  # => "entry1"\n'})})]})}function c(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},65404:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>l});var r=s(36672);const t={},n=r.createContext(t);function i(e){const a=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(n.Provider,{value:a},e.children)}}}]);