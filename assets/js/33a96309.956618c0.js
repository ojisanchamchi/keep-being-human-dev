"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23187],{65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var a=r(36672);const t={},s=a.createContext(t);function o(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},72010:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"ruby/enumerables/beginner/transform_with_map","title":"transform_with_map","description":"\ud83c\udfa8 Transform Arrays with map","source":"@site/docs/ruby/enumerables/beginner/transform_with_map.md","sourceDirName":"ruby/enumerables/beginner","slug":"/ruby/enumerables/beginner/transform_with_map","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/transform_with_map","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/beginner/transform_with_map.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"iterate_with_each","permalink":"/keep-being-human-dev/docs/ruby/enumerables/beginner/iterate_with_each"},"next":{"title":"custom_enumerable_deep_traversal","permalink":"/keep-being-human-dev/docs/ruby/enumerables/expert/custom_enumerable_deep_traversal"}}');var t=r(23420),s=r(65404);const o={},i=void 0,c={},m=[{value:"\ud83c\udfa8 Transform Arrays with map",id:"-transform-arrays-with-map",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-transform-arrays-with-map",children:"\ud83c\udfa8 Transform Arrays with map"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"map"})," (also known as ",(0,t.jsx)(n.code,{children:"collect"}),") takes each element, applies the block, and returns a new array of the results. Use it when you want to transform data without mutating the original array. It's perfect for converting formats or applying calculations in one go."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'names = ["alice", "bob", "carol"]\ncapitalized = names.map { |name| name.capitalize }\n# => ["Alice", "Bob", "Carol"]\n\nsquares = [1, 2, 3].map do |n|\n  n ** 2\nend\n# => [1, 4, 9]\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);