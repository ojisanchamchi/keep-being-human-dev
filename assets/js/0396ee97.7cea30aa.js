"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75275],{16363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"ruby/creating_gems/middle/embed_usage_examples.md","title":"embed_usage_examples.md","description":"\ud83d\udcda Embed Usage Examples in README and Tests","source":"@site/docs/ruby/creating_gems/middle/embed_usage_examples.md.md","sourceDirName":"ruby/creating_gems/middle","slug":"/ruby/creating_gems/middle/embed_usage_examples.md","permalink":"/keep-being-human-dev/docs/ruby/creating_gems/middle/embed_usage_examples.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/creating_gems/middle/embed_usage_examples.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"native_extension_multi_platform","permalink":"/keep-being-human-dev/docs/ruby/creating_gems/expert/native_extension_multi_platform"},"next":{"title":"initialize_gem_with_bundler.md","permalink":"/keep-being-human-dev/docs/ruby/creating_gems/middle/initialize_gem_with_bundler.md"}}');var a=t(23420),r=t(65404);const i={},d=void 0,o={},c=[{value:"\ud83d\udcda Embed Usage Examples in README and Tests",id:"-embed-usage-examples-in-readme-and-tests",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-embed-usage-examples-in-readme-and-tests",children:"\ud83d\udcda Embed Usage Examples in README and Tests"}),"\n",(0,a.jsxs)(n.p,{children:["Demonstrate how to use your gem directly in the ",(0,a.jsx)(n.code,{children:"README.md"})," so users can copy\u2011paste working code. Use fenced code blocks with language annotation:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markdown",children:'```ruby\nrequire "my_cool_gem"\n\nclient = MyCoolGem::Client.new(api_key: ENV["API_KEY"])\nputs client.fetch_data("resource_id")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'\nAlso mirror these examples in your spec suite to catch regressions. For instance, create an integration spec:\n\n```ruby\n# spec/integration/usage_spec.rb\nrequire "spec_helper"\n\nRSpec.describe "Usage Examples" do\n  it "fetches data from the API" do\n    client = MyCoolGem::Client.new(api_key: "test_key")\n    expect(client.fetch_data("123")).to be_a(Hash)\n  end\nend\n'})}),"\n",(0,a.jsx)(n.p,{children:"This ensures your documentation stays accurate as the gem evolves."})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>d});var s=t(36672);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);