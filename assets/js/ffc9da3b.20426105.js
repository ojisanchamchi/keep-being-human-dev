"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5177],{1041:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys","title":"rotate_cookie_encryption_keys","description":"\ud83d\udd11 Rotate and Version Cookie Encryption Keys","source":"@site/docs/rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys.md","sourceDirName":"rails/sessions_and_cookies/advanced","slug":"/rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/sessions_and_cookies/advanced/rotate_cookie_encryption_keys.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"json_hybrid_session_serializer","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/advanced/json_hybrid_session_serializer"},"next":{"title":"sliding_session_expiration","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/advanced/sliding_session_expiration"}}');var s=o(23420),t=o(65404);const a={},r=void 0,c={},d=[{value:"\ud83d\udd11 Rotate and Version Cookie Encryption Keys",id:"-rotate-and-version-cookie-encryption-keys",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-rotate-and-version-cookie-encryption-keys",children:"\ud83d\udd11 Rotate and Version Cookie Encryption Keys"}),"\n",(0,s.jsxs)(n.p,{children:["Rotating your cookie encryption and signing keys regularly limits blast radius if a key is compromised. Rails\u2019 ",(0,s.jsx)(n.code,{children:"cookies_rotations"})," API lets you accept cookies encrypted with old secrets while issuing new ones with the latest key."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"# config/initializers/cookie_rotation.rb\nRails.application.config.action_dispatch.encrypted_cookie_cipher = \"aes-256-gcm\"\n\n# Fetch keys from credentials (or ENV)\nnew_key    = Rails.application.credentials.dig(:cookie_rotations, :new_key)\nold_key    = Rails.application.credentials.dig(:cookie_rotations, :old_key)\nsigned_old = Rails.application.credentials.dig(:cookie_rotations, :signed_old_key)\n\nRails.application.config.action_dispatch.cookies_rotations.tap do |rotations|\n  # Accept cookies encrypted/signed with the old key\n  rotations.rotate :encrypted, new_key\n  rotations.rotate :encrypted, old_key\n\n  # For signed (but not encrypted) cookies\n  rotations.rotate :signed, signed_old\nend\n\n# Usage in controllers:\ncookies.encrypted[:user_pref] = { theme: 'dark', expires: 2.weeks.from_now }\ncookies.signed[:visit_count] ||= 0\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var i=o(36672);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);