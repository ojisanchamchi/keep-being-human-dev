"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[35619],{30706:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"ruby/marshal/advanced/custom_dump_load_versioning","title":"custom_dump_load_versioning","description":"\ud83d\udee0\ufe0f Custom Serialization with Version Control","source":"@site/docs/ruby/marshal/advanced/custom_dump_load_versioning.md","sourceDirName":"ruby/marshal/advanced","slug":"/ruby/marshal/advanced/custom_dump_load_versioning","permalink":"/keep-being-human-dev/docs/ruby/marshal/advanced/custom_dump_load_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/marshal/advanced/custom_dump_load_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tagged_logging","permalink":"/keep-being-human-dev/docs/ruby/logging/middle/tagged_logging"},"next":{"title":"selective_ivars_with_marshal_dump","permalink":"/keep-being-human-dev/docs/ruby/marshal/advanced/selective_ivars_with_marshal_dump"}}');var o=a(23420),r=a(65404);const t={},i=void 0,d={},l=[{value:"\ud83d\udee0\ufe0f Custom Serialization with Version Control",id:"\ufe0f-custom-serialization-with-version-control",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"\ufe0f-custom-serialization-with-version-control",children:"\ud83d\udee0\ufe0f Custom Serialization with Version Control"}),"\n",(0,o.jsxs)(n.p,{children:["Defining your own ",(0,o.jsx)(n.code,{children:"_dump"})," and ",(0,o.jsx)(n.code,{children:"_load"})," methods lets you control precisely what gets serialized, which is essential for maintaining backward compatibility across object structure changes. By embedding a version number in the serialized data, you can evolve your class without breaking old dumps."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"class MyClass\n  attr_accessor :a, :b\n\n  # Prefix serialized data with a version identifier\n  def _dump(level)\n    [1, @a, @b].join('::')\n  end\n\n  # _load is called with the dumped string\n  def self._load(str)\n    version, a, b = str.split('::')\n    case version.to_i\n    when 1\n      new(a, b)\n    # future versions can be handled here\n    else\n      raise ArgumentError, \"Unknown version #{version}\"\n    end\n  end\nend\n\n# Example usage\no = MyClass.new\no.a = 'foo'; o.b = 'bar'\ndumped = Marshal.dump(o)\nrestored = Marshal.load(dumped)\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>i});var s=a(36672);const o={},r=s.createContext(o);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);