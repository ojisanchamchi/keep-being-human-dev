"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[45508],{65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var c=t(36672);const i={},a=c.createContext(i);function o(e){const n=c.useContext(a);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),c.createElement(a.Provider,{value:n},e.children)}},78233:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>l});const c=JSON.parse('{"id":"rails/caching/advanced/low_level_race_condition_ttl","title":"low_level_race_condition_ttl","description":"\u26a1 Low-Level Caching with Race-Condition TTL","source":"@site/docs/rails/caching/advanced/low_level_race_condition_ttl.md","sourceDirName":"rails/caching/advanced","slug":"/rails/caching/advanced/low_level_race_condition_ttl","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/low_level_race_condition_ttl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/advanced/low_level_race_condition_ttl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"http_conditional_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/http_conditional_caching"},"next":{"title":"multi_tier_caching","permalink":"/keep-being-human-dev/docs/rails/caching/advanced/multi_tier_caching"}}');var i=t(23420),a=t(65404);const o={},r=void 0,s={},l=[{value:"\u26a1 Low-Level Caching with Race-Condition TTL",id:"-low-level-caching-with-race-condition-ttl",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-low-level-caching-with-race-condition-ttl",children:"\u26a1 Low-Level Caching with Race-Condition TTL"}),"\n",(0,i.jsxs)(n.p,{children:["For high-traffic endpoints where cache stampedes are a concern, use ",(0,i.jsx)(n.code,{children:"race_condition_ttl"})," to prevent multiple processes from recomputing stale data concurrently. This option lets an expired entry remain valid for a short grace period while a single request refreshes it."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# Fetch or compute a heavy payload\nRails.cache.fetch("heavy_report", expires_in: 1.hour, race_condition_ttl: 10.seconds) do\n  compute_heavy_report\nend\n'})}),"\n",(0,i.jsx)(n.p,{children:"This ensures if the cache expires, the first process enters the block and others use the stale value for up to 10 seconds, drastically reducing DB load."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);