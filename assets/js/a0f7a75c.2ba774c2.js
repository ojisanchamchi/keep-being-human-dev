"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[83145],{25671:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"ruby/hashes/expert/lazy_enumeration_hash_processing","title":"lazy_enumeration_hash_processing","description":"\ud83c\udfc3\u200d\u2642\ufe0f Lazy Enumeration for Large Hashes","source":"@site/docs/ruby/hashes/expert/lazy_enumeration_hash_processing.md","sourceDirName":"ruby/hashes/expert","slug":"/ruby/hashes/expert/lazy_enumeration_hash_processing","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/lazy_enumeration_hash_processing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/expert/lazy_enumeration_hash_processing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"immutable_persistent_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/immutable_persistent_hash"},"next":{"title":"pattern_matching_nested_hashes","permalink":"/keep-being-human-dev/docs/ruby/hashes/expert/pattern_matching_nested_hashes"}}');var t=s(23420),r=s(65404);const i={},o=void 0,h={},c=[{value:"\ud83c\udfc3\u200d\u2642\ufe0f Lazy Enumeration for Large Hashes",id:"\ufe0f-lazy-enumeration-for-large-hashes",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-lazy-enumeration-for-large-hashes",children:"\ud83c\udfc3\u200d\u2642\ufe0f Lazy Enumeration for Large Hashes"}),"\n",(0,t.jsxs)(n.p,{children:["When processing massive hashes, converting to arrays eagerly can blow up memory. Ruby\u2019s ",(0,t.jsx)(n.code,{children:"Enumerator::Lazy"})," lets you pipeline ",(0,t.jsx)(n.code,{children:"map"}),"/",(0,t.jsx)(n.code,{children:"select"})," without immediate materialization:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"big_hash = (1..1_000_000).map { |i| [i, i * 2] }.to_h\n\nresult = big_hash.lazy\n  .select { |k, v| v % 4 == 0 }\n  .map    { |k, v| [k, v / 2] }\n  .first(5)\n\np result\n#=> [[2, 2], [4, 4], [6, 6], [8, 8], [10, 10]]\n"})}),"\n",(0,t.jsx)(n.p,{children:"This approach only computes as many elements as needed, making filtering and transformation of huge hashes efficient in both time and space."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var a=s(36672);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);