"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[3047],{57484:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"rails/benchmarking/middle/rake_task_benchmark","title":"rake_task_benchmark","description":"\u2699\ufe0f Benchmark Long\u2011Running Rake Tasks","source":"@site/docs/rails/benchmarking/middle/rake_task_benchmark.md","sourceDirName":"rails/benchmarking/middle","slug":"/rails/benchmarking/middle/rake_task_benchmark","permalink":"/keep-being-human-dev/docs/rails/benchmarking/middle/rake_task_benchmark","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/benchmarking/middle/rake_task_benchmark.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"console_benchmark_measure","permalink":"/keep-being-human-dev/docs/rails/benchmarking/middle/console_benchmark_measure"},"next":{"title":"view_rendering_benchmark","permalink":"/keep-being-human-dev/docs/rails/benchmarking/middle/view_rendering_benchmark"}}');var t=r(23420),s=r(65404);const i={},o=void 0,c={},d=[{value:"\u2699\ufe0f Benchmark Long\u2011Running Rake Tasks",id:"\ufe0f-benchmark-longrunning-rake-tasks",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"\ufe0f-benchmark-longrunning-rake-tasks",children:"\u2699\ufe0f Benchmark Long\u2011Running Rake Tasks"}),"\n",(0,t.jsx)(n.p,{children:"Integrate benchmarking into your Rake tasks to monitor performance regressions during background jobs or data migrations. This ensures you catch slowdowns before they hit production."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# lib/tasks/data_migration.rake\ntask benchmark_data_migration: :environment do\n  require 'benchmark'\n\n  time = Benchmark.realtime do\n    MyModel.find_each(batch_size: 1000) do |record|\n      record.update!(processed: true)\n    end\n  end\n\n  puts \"Data migration took #{time.round(2)} seconds\"\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Using ",(0,t.jsx)(n.code,{children:"Benchmark.realtime"})," returns a float in seconds\u2014perfect for simple logging. Wrap each sub-step if you need finer granularity."]})]})}function k(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var a=r(36672);const t={},s=a.createContext(t);function i(e){const n=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);