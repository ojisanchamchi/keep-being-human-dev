"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[84659],{32932:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"gems/redis/advanced/redis_streams_event_sourcing","title":"redis_streams_event_sourcing","description":"\ud83d\ude82 Implement Event Sourcing with Redis Streams","source":"@site/docs/gems/redis/advanced/redis_streams_event_sourcing.md","sourceDirName":"gems/redis/advanced","slug":"/gems/redis/advanced/redis_streams_event_sourcing","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_streams_event_sourcing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/advanced/redis_streams_event_sourcing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_redlock_distributed_locks","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_redlock_distributed_locks"},"next":{"title":"connecting_to_redis","permalink":"/keep-being-human-dev/docs/gems/redis/beginner/connecting_to_redis"}}');var r=t(23420),d=t(65404);const a={},i=void 0,o={},c=[{value:"\ud83d\ude82 Implement Event Sourcing with Redis Streams",id:"-implement-event-sourcing-with-redis-streams",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-implement-event-sourcing-with-redis-streams",children:"\ud83d\ude82 Implement Event Sourcing with Redis Streams"}),"\n",(0,r.jsx)(n.p,{children:"Leverage Redis Streams to build an append-only event log in Rails, capturing every domain change in a scalable, fault\u2011tolerant way. By pushing events to a named stream, you can replay, audit, or project state into read models."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# app/models/order_event.rb\nclass OrderEvent\n  STREAM_KEY = \"orders:events\"\n\n  def self.publish(event_type, payload)\n    Redis.current.xadd(\n      STREAM_KEY,\n      { type: event_type, data: payload.to_json, timestamp: Time.now.to_f }\n    )\n  end\nend\n\n# Usage in controller or service\nOrderEvent.publish('order_created', { id: order.id, total: order.total })\n\n# Consumer example\nRedis.current.xread({ Stream: OrderEvent::STREAM_KEY, count: 100, block: 1_000 }) do |stream, events|\n  events.each do |id, fields|\n    data = JSON.parse(fields['data'])\n    # project into read model or handle side effect\n  end\nend\n"})})]})}function m(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(36672);const r={},d=s.createContext(r);function a(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);