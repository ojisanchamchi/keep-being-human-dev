"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66166],{40062:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"ruby/fibers/advanced/fiber_data_pipeline","title":"fiber_data_pipeline","description":"\ud83d\udd04 Glide Through Data Pipelines with Fibers","source":"@site/docs/ruby/fibers/advanced/fiber_data_pipeline.md","sourceDirName":"ruby/fibers/advanced","slug":"/ruby/fibers/advanced/fiber_data_pipeline","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_data_pipeline","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/advanced/fiber_data_pipeline.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_async_io","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_async_io"},"next":{"title":"fiber_enumerator_generator","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_enumerator_generator"}}');var t=r(23420),a=r(65404);const s={},o=void 0,d={},u=[{value:"\ud83d\udd04 Glide Through Data Pipelines with Fibers",id:"-glide-through-data-pipelines-with-fibers",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-glide-through-data-pipelines-with-fibers",children:"\ud83d\udd04 Glide Through Data Pipelines with Fibers"}),"\n",(0,t.jsx)(n.p,{children:"You can build high\u2011performance data pipelines by chaining fibers that push and pull chunks of data, minimizing memory overhead. Each stage yields output to the next, allowing backpressure and streaming of large files or network data without loading it all into memory."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# Producer fiber reads lines\nproducer = Fiber.new do\n  File.foreach("large.log") do |line|\n    Fiber.yield line.upcase\n  end\n  nil\nend\n\n# Consumer fiber transforms and writes\nconsumer = Fiber.new do\n  while chunk = producer.resume\n    processed = chunk.gsub(/ERROR/, "WARN")\n    Fiber.yield processed\n  end\nend\n\n# Runner pulls from consumer\nwhile out = consumer.resume\n  puts out\nend\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(36672);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);