"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41327],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(36672);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},80009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"gems/simple_form/advanced/custom_rich_text_input","title":"custom_rich_text_input","description":"\u2728 Create a Custom Rich Text Input Component","source":"@site/docs/gems/simple_form/advanced/custom_rich_text_input.md","sourceDirName":"gems/simple_form/advanced","slug":"/gems/simple_form/advanced/custom_rich_text_input","permalink":"/keep-being-human-dev/docs/gems/simple_form/advanced/custom_rich_text_input","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/simple_form/advanced/custom_rich_text_input.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"sidekiq_testing_in_rspec","permalink":"/keep-being-human-dev/docs/gems/sidekiq/middle/sidekiq_testing_in_rspec"},"next":{"title":"custom_wrappers","permalink":"/keep-being-human-dev/docs/gems/simple_form/advanced/custom_wrappers"}}');var r=n(23420),s=n(65404);const o={},a=void 0,c={},p=[{value:"\u2728 Create a Custom Rich Text Input Component",id:"-create-a-custom-rich-text-input-component",level:2}];function u(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"-create-a-custom-rich-text-input-component",children:"\u2728 Create a Custom Rich Text Input Component"}),"\n",(0,r.jsxs)(t.p,{children:["Building a custom input class lets you encapsulate third\u2011party JavaScript editors like Trix or CKEditor. By subclassing ",(0,r.jsx)(t.code,{children:"SimpleForm::Inputs::Base"}),", you can define default HTML attributes, include required JS libraries, and integrate file uploads or formatting toolbars with minimal repetitive code."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:"# app/inputs/rich_text_input.rb\nclass RichTextInput < SimpleForm::Inputs::TextInput\n  def input(wrapper_options)\n    merged_options = merge_wrapper_options(input_html_options, wrapper_options)\n    @builder.text_area(attribute_name, merged_options.merge(class: 'rich-text-editor', data: { direct_upload: true }))\n  end\nend\n\n# Usage in a form:\n= simple_form_for(@article) do |f|\n  = f.input :content, as: :rich_text\n"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);