"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[63793],{65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(36672);const a={},c=s.createContext(a);function r(e){const t=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(c.Provider,{value:t},e.children)}},73200:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"ruby/hashes/middle/fetch_with_default_block","title":"fetch_with_default_block","description":"\ud83d\udd0d Using fetch with Default Values","source":"@site/docs/ruby/hashes/middle/fetch_with_default_block.md","sourceDirName":"ruby/hashes/middle","slug":"/ruby/hashes/middle/fetch_with_default_block","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/fetch_with_default_block","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/hashes/middle/fetch_with_default_block.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compact_hash","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/compact_hash"},"next":{"title":"invert_handle_duplicates","permalink":"/keep-being-human-dev/docs/ruby/hashes/middle/invert_handle_duplicates"}}');var a=n(23420),c=n(65404);const r={},i=void 0,u={},o=[{value:"\ud83d\udd0d Using <code>fetch</code> with Default Values",id:"-using-fetch-with-default-values",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h2,{id:"-using-fetch-with-default-values",children:["\ud83d\udd0d Using ",(0,a.jsx)(t.code,{children:"fetch"})," with Default Values"]}),"\n",(0,a.jsxs)(t.p,{children:["When retrieving values from a hash, ",(0,a.jsx)(t.code,{children:"fetch"})," allows you to provide a default (or a block) to handle missing keys gracefully. This is handy when you want to raise a custom error or compute a fallback value on-the-fly."]}),"\n",(0,a.jsx)(t.p,{children:"For example, using a static default:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:"settings = { timeout: 5 }\n# returns 5\nsettings.fetch(:timeout, 10)\n# returns 10 because :retry_count is missing\nsettings.fetch(:retry_count, 3)\n"})}),"\n",(0,a.jsx)(t.p,{children:"Or using a block to compute the default:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ruby",children:'user_data = {}\ndef_name = ->(key) { "No value for #{key}" }\nputs user_data.fetch(:name, &def_name)\n# => "No value for name"\n'})})]})}function d(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);