"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[61400],{64339:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rails/caching/expert/russian_doll_cache_versioning","title":"russian_doll_cache_versioning","description":"\ud83e\udde0 Master Russian Doll Caching with Touch-Based Versioning","source":"@site/docs/rails/caching/expert/russian_doll_cache_versioning.md","sourceDirName":"rails/caching/expert","slug":"/rails/caching/expert/russian_doll_cache_versioning","permalink":"/keep-being-human-dev/docs/rails/caching/expert/russian_doll_cache_versioning","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/caching/expert/russian_doll_cache_versioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"raw_store_bypass_serialization","permalink":"/keep-being-human-dev/docs/rails/caching/expert/raw_store_bypass_serialization"},"next":{"title":"customizing_cli_defaults_with_railsrc","permalink":"/keep-being-human-dev/docs/rails/command_line/advanced/customizing_cli_defaults_with_railsrc"}}');var a=s(23420),t=s(65404);const c={},r=void 0,o={},l=[{value:"\ud83e\udde0 Master Russian Doll Caching with Touch-Based Versioning",id:"-master-russian-doll-caching-with-touch-based-versioning",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"-master-russian-doll-caching-with-touch-based-versioning",children:"\ud83e\udde0 Master Russian Doll Caching with Touch-Based Versioning"}),"\n",(0,a.jsxs)(n.p,{children:["Layered (Russian doll) fragment caching minimizes view rendering by nesting caches. Use ",(0,a.jsx)(n.code,{children:"touch: true"})," on associations to automatically bump parent cache keys when children change."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# app/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments, dependent: :destroy, touch: true\nend\n\n# app/views/posts/_post.html.erb\n<% cache post do %>\n  <h2><%= post.title %></h2>\n  <%= render post.comments %>  \x3c!-- nested cache --\x3e\n<% end %>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["When a comment is created or updated, ",(0,a.jsx)(n.code,{children:"post.updated_at"})," changes, invalidating the parent cache without manual key manipulation."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var i=s(36672);const a={},t=i.createContext(a);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);