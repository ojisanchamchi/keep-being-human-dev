"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8166],{24470:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"gems/ruby-openai/advanced/function_calling_advanced","title":"function_calling_advanced","description":"\ud83d\udee0 Advanced Function Calling and Dynamic Payloads","source":"@site/docs/gems/ruby-openai/advanced/function_calling_advanced.md","sourceDirName":"gems/ruby-openai/advanced","slug":"/gems/ruby-openai/advanced/function_calling_advanced","permalink":"/keep-being-human-dev/docs/gems/ruby-openai/advanced/function_calling_advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/ruby-openai/advanced/function_calling_advanced.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"batch_embeddings_async","permalink":"/keep-being-human-dev/docs/gems/ruby-openai/advanced/batch_embeddings_async"},"next":{"title":"streaming_chat_responses","permalink":"/keep-being-human-dev/docs/gems/ruby-openai/advanced/streaming_chat_responses"}}');var c=a(23420),s=a(65404);const i={},o=void 0,d={},r=[{value:"\ud83d\udee0 Advanced Function Calling and Dynamic Payloads",id:"-advanced-function-calling-and-dynamic-payloads",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"-advanced-function-calling-and-dynamic-payloads",children:"\ud83d\udee0 Advanced Function Calling and Dynamic Payloads"}),"\n",(0,c.jsx)(n.p,{children:"Leverage the OpenAI function calling API to execute domain\u2011specific operations. You can define functions at runtime, parse the model\u2019s function calls, and dynamically dispatch to Ruby methods. This pattern secures side effects and ensures typed responses."}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ruby",children:'require "ruby/openai"\n\nFUNCTIONS = [\n  {\n    name: "get_weather",\n    description: "Get current weather for a city",\n    parameters: {\n      type: "object",\n      properties: { city: { type: "string" } },\n      required: ["city"]\n    }\n  }\n]\n\nclient = OpenAI::Client.new(access_token: ENV["OPENAI_API_KEY"])\nresponse = client.chat.completions(parameters: {\n  model: "gpt-4o",\n  messages: [{ role: "user", content: "What\'s the weather in Paris?" }],\n  functions: FUNCTIONS,\n  function_call: "auto"\n})\n\nchoice = response.dig("choices", 0)\nif (func = choice.dig("message", "function_call"))\n  payload = JSON.parse(func["arguments"])\n  result  = WeatherService.call(payload["city"])  # Your domain logic\n  # Send result back to the model for a natural\u2011language completion\n  final = client.chat.completions(parameters: {\n    model: "gpt-4o",\n    messages: [\n      choice["message"],\n      { role: "function", name: func["name"], content: result.to_json }\n    ]\n  })\n  puts final.dig("choices", 0, "message", "content")\nend\n'})}),"\n",(0,c.jsx)(n.p,{children:"This lets you enforce strong typing, secure function execution, and multi\u2011turn contexts by stitching model calls with your Ruby backend."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(36672);const c={},s=t.createContext(c);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);