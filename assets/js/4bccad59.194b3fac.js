"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[38634],{65404:(s,e,i)=>{i.d(e,{R:()=>r,x:()=>a});var n=i(36672);const o={},t=n.createContext(o);function r(s){const e=n.useContext(t);return n.useMemo(function(){return"function"==typeof s?s(e):{...e,...s}},[e,s])}function a(s){let e;return e=s.disableParentContext?"function"==typeof s.components?s.components(o):s.components||o:r(s.components),n.createElement(t.Provider,{value:e},s.children)}},66346:(s,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"rails/sessions_and_cookies/expert/multi_domain_redis_sessions","title":"multi_domain_redis_sessions","description":"\ud83c\udf10 Multi-Domain Session Sharing with Custom Redis Store","source":"@site/docs/rails/sessions_and_cookies/expert/multi_domain_redis_sessions.md","sourceDirName":"rails/sessions_and_cookies/expert","slug":"/rails/sessions_and_cookies/expert/multi_domain_redis_sessions","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/multi_domain_redis_sessions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/sessions_and_cookies/expert/multi_domain_redis_sessions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"encrypted_cookie_segmentation","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/encrypted_cookie_segmentation"},"next":{"title":"session_secret_rotation","permalink":"/keep-being-human-dev/docs/rails/sessions_and_cookies/expert/session_secret_rotation"}}');var o=i(23420),t=i(65404);const r={},a=void 0,d={},c=[{value:"\ud83c\udf10 Multi-Domain Session Sharing with Custom Redis Store",id:"-multi-domain-session-sharing-with-custom-redis-store",level:2}];function l(s){const e={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...s.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"-multi-domain-session-sharing-with-custom-redis-store",children:"\ud83c\udf10 Multi-Domain Session Sharing with Custom Redis Store"}),"\n",(0,o.jsxs)(e.p,{children:["When you operate across subdomains (e.g., ",(0,o.jsx)(e.code,{children:"app.example.com"})," and ",(0,o.jsx)(e.code,{children:"admin.example.com"}),"), share sessions in Redis while isolating session data per domain or path. Define a custom session store that scopes keys by domain."]}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["Create a custom Redis store under ",(0,o.jsx)(e.code,{children:"lib/multi_domain_session_store.rb"}),":"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ruby",children:"require \"action_dispatch/middleware/session/redis_store\"\n\nclass MultiDomainSessionStore < ActionDispatch::Session::RedisStore\n  private\n\n  # Prefix session ID with domain to avoid collisions\n  def prefixed_session_key(session_id, _env)\n    domain = @env[\"HTTP_HOST\"].split(':').first.gsub('.', '_')\n    \"sess:#{domain}:#{session_id}\"\n  end\nend\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"2",children:["\n",(0,o.jsxs)(e.li,{children:["Configure it in ",(0,o.jsx)(e.code,{children:"config/initializers/session_store.rb"}),":"]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ruby",children:'require Rails.root.join("lib/multi_domain_session_store")\n\nRails.application.config.session_store :multi_domain_session_store,\n  servers: { host: "localhost", port: 6379, db: 0 },\n  key: "_myapp_session",\n  expire_after: 30.minutes,\n  secure: Rails.env.production?,\n  same_site: :lax\n'})}),"\n",(0,o.jsxs)(e.ol,{start:"3",children:["\n",(0,o.jsx)(e.li,{children:"Now sessions are isolated per subdomain in Redis, preventing key collisions and enabling shared Redis infrastructure."}),"\n"]})]})}function u(s={}){const{wrapper:e}={...(0,t.R)(),...s.components};return e?(0,o.jsx)(e,{...s,children:(0,o.jsx)(l,{...s})}):l(s)}}}]);