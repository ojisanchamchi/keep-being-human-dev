"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[5901],{65404:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var r=a(36672);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},74327:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"rails/action_cable/beginner/stream_named_room","title":"stream_named_room","description":"\ud83d\udd17 Streaming from Named Streams","source":"@site/docs/rails/action_cable/beginner/stream_named_room.md","sourceDirName":"rails/action_cable/beginner","slug":"/rails/action_cable/beginner/stream_named_room","permalink":"/keep-being-human-dev/docs/rails/action_cable/beginner/stream_named_room","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/beginner/stream_named_room.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"setup_action_cable","permalink":"/keep-being-human-dev/docs/rails/action_cable/beginner/setup_action_cable"},"next":{"title":"fine_grained_authorization","permalink":"/keep-being-human-dev/docs/rails/action_cable/expert/fine_grained_authorization"}}');var t=a(23420),s=a(65404);const o={},i=void 0,c={},m=[{value:"\ud83d\udd17 Streaming from Named Streams",id:"-streaming-from-named-streams",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-streaming-from-named-streams",children:"\ud83d\udd17 Streaming from Named Streams"}),"\n",(0,t.jsxs)(n.p,{children:["For chat rooms or scoped streams, use ",(0,t.jsx)(n.code,{children:"stream_for"})," to isolate data per resource. Pass parameters when subscribing and broadcast directly to that instance."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/channels/chat_channel.rb\nclass ChatChannel < ApplicationCable::Channel\n  def subscribed\n    room = Room.find(params[:room_id])\n    # Stream only from this specific room\n    stream_for room\n  end\nend\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# app/models/message.rb\nclass Message < ApplicationRecord\n  belongs_to :room\n  after_create_commit do\n    # Broadcast this message to subscribers of the room\n    ChatChannel.broadcast_to(room, content: content, user: user.name)\n  end\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Clients must subscribe with ",(0,t.jsx)(n.code,{children:"{ room_id: 42 }"})," to receive messages for that room."]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);