"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[39027],{10824:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"rails/websockets/advanced/granular_dom_updates","title":"granular_dom_updates","description":"\u2728 Granular DOM Updates with CableReady","source":"@site/docs/rails/websockets/advanced/granular_dom_updates.md","sourceDirName":"rails/websockets/advanced","slug":"/rails/websockets/advanced/granular_dom_updates","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/granular_dom_updates","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/advanced/granular_dom_updates.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_channel_streaming","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/dynamic_channel_streaming"},"next":{"title":"reconnect_backoff","permalink":"/keep-being-human-dev/docs/rails/websockets/advanced/reconnect_backoff"}}');var s=n(23420),r=n(65404);const o={},d=void 0,c={},i=[{value:"\u2728 Granular DOM Updates with CableReady",id:"-granular-dom-updates-with-cableready",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-granular-dom-updates-with-cableready",children:"\u2728 Granular DOM Updates with CableReady"}),"\n",(0,s.jsx)(a.p,{children:"Use CableReady for fine\u2010grained DOM mutations over WebSockets. It batches operations and minimizes client\u2011side diffing overhead."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:'# app/channels/posts_channel.rb\nclass PostsChannel < ApplicationCable::Channel\n  def subscribed\n    stream_for current_user\n  end\n\n  def update(data)\n    post = Post.find(data["id"])\n    post.update!(content: data["content"])\n    broadcast_replace(post)\n  end\n\n  private\n\n  def broadcast_replace(post)\n    CableReady["posts"].inner_html(\n      selector: "#post_#{post.id}",\n      html: ApplicationController.render(\n        partial: "posts/post",\n        locals: { post: post }\n      )\n    )\n    CableReady.broadcast\n  end\nend\n'})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-javascript",children:'// app/javascript/channels/posts_subscriber.js\nimport CableReady from "cable_ready"\nimport consumer from "./consumer"\n\nconsumer.subscriptions.create("PostsChannel", {\n  received(data) {\n    if (data.cableReady) CableReady.perform(data.operations)\n  }\n})\n'})})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>d});var t=n(36672);const s={},r=t.createContext(s);function o(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);