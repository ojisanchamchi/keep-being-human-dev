"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77914],{36028:(e,r,c)=>{c.r(r),c.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/active_record_callbacks/middle/callback_ordering","title":"callback_ordering","description":"\ud83d\udd22 Control Callback Order with prepend","source":"@site/docs/rails/active_record_callbacks/middle/callback_ordering.md","sourceDirName":"rails/active_record_callbacks/middle","slug":"/rails/active_record_callbacks/middle/callback_ordering","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/callback_ordering","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_callbacks/middle/callback_ordering.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"batch_operations_callbacks","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/batch_operations_callbacks"},"next":{"title":"callbacks_in_concerns","permalink":"/keep-being-human-dev/docs/rails/active_record_callbacks/middle/callbacks_in_concerns"}}');var a=c(23420),l=c(65404);const t={},s=void 0,o={},d=[{value:"\ud83d\udd22 Control Callback Order with <code>prepend</code>",id:"-control-callback-order-with-prepend",level:2}];function i(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(r.h2,{id:"-control-callback-order-with-prepend",children:["\ud83d\udd22 Control Callback Order with ",(0,a.jsx)(r.code,{children:"prepend"})]}),"\n",(0,a.jsxs)(r.p,{children:["By default, callbacks run in the order they\u2019re defined. Use ",(0,a.jsx)(r.code,{children:"prepend: true"})," to run critical callbacks earlier than inherited ones."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:'class ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n  before_save :log_save, prepend: true\n\n  private\n\n  def log_save\n    Rails.logger.info "Saving #{self.class.name}..."\n  end\nend\n\nclass Account < ApplicationRecord\n  before_save :encrypt_password\nend\n'})}),"\n",(0,a.jsxs)(r.p,{children:["Here, ",(0,a.jsx)(r.code,{children:"log_save"})," runs before ",(0,a.jsx)(r.code,{children:"encrypt_password"}),", even though it's defined in the parent class."]})]})}function p(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}},65404:(e,r,c)=>{c.d(r,{R:()=>t,x:()=>s});var n=c(36672);const a={},l=n.createContext(a);function t(e){const r=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);