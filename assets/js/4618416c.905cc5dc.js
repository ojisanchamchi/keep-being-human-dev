"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72266],{10348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>p});const o=JSON.parse('{"id":"ruby/operators/expert/spaceship_sort_with_memoization","title":"spaceship_sort_with_memoization","description":"\u2699\ufe0f Optimizing Heavy Comparisons with `` Caching","source":"@site/docs/ruby/operators/expert/spaceship_sort_with_memoization.md","sourceDirName":"ruby/operators/expert","slug":"/ruby/operators/expert/spaceship_sort_with_memoization","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/spaceship_sort_with_memoization","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/operators/expert/spaceship_sort_with_memoization.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"refinements_for_core_operators","permalink":"/keep-being-human-dev/docs/ruby/operators/expert/refinements_for_core_operators"},"next":{"title":"default_assignment_operator","permalink":"/keep-being-human-dev/docs/ruby/operators/middle/default_assignment_operator"}}');var i=n(23420),r=n(65404);const a={},s=void 0,c={},p=[{value:"\u2699\ufe0f Optimizing Heavy Comparisons with <code>&lt;=&gt;</code> Caching",id:"\ufe0f-optimizing-heavy-comparisons-with--caching",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h2,{id:"\ufe0f-optimizing-heavy-comparisons-with--caching",children:["\u2699\ufe0f Optimizing Heavy Comparisons with ",(0,i.jsx)(t.code,{children:"<=>"})," Caching"]}),"\n",(0,i.jsxs)(t.p,{children:["When sorting large collections with expensive comparison logic, memoize results of ",(0,i.jsx)(t.code,{children:"<=>"})," to avoid repeated computation. This technique can dramatically speed up sorts."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"class HeavyItem\n  attr_reader :data\n  def initialize(data); @data = data; @cache = {} end\n\n  def <=>(other)\n    key = [self.object_id, other.object_id]\n    @cache[key] ||= begin\n      # Simulate heavy computation\n      sleep(0.01)\n      self.data.length <=> other.data.length\n    end\n  end\nend\n\nitems = 50.times.map { HeavyItem.new(('a' * rand(1000))) }\n# Without caching: ~0.5s\n# With caching: ~0.25s\nputs items.sort.map(&:data).first.length\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(36672);const i={},r=o.createContext(i);function a(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);