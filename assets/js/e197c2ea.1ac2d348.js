"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[11744],{21418:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"ruby/regex/expert/branch_reset_grouping","title":"branch_reset_grouping","description":"\ud83e\udde9 Simplify Alternatives with Branch Reset Groups","source":"@site/docs/ruby/regex/expert/branch_reset_grouping.md","sourceDirName":"ruby/regex/expert","slug":"/ruby/regex/expert/branch_reset_grouping","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/branch_reset_grouping","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/regex/expert/branch_reset_grouping.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"atomic_groups_for_speed","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/atomic_groups_for_speed"},"next":{"title":"embed_ruby_code_in_regex","permalink":"/keep-being-human-dev/docs/ruby/regex/expert/embed_ruby_code_in_regex"}}');var s=t(23420),a=t(65404);const i={},o=void 0,c={},u=[{value:"\ud83e\udde9 Simplify Alternatives with Branch Reset Groups",id:"-simplify-alternatives-with-branch-reset-groups",level:2}];function p(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h2,{id:"-simplify-alternatives-with-branch-reset-groups",children:"\ud83e\udde9 Simplify Alternatives with Branch Reset Groups"}),"\n",(0,s.jsxs)(r.p,{children:["Branch reset groups ",(0,s.jsx)(r.code,{children:"(?|...)"})," reset the capture numbering for each branch, so named or numbered captures align across alternatives. This cuts complexity when post-processing matches."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ruby",children:'pattern = /(?|\n  (?<key>\\w+)= (?<val>\\d+)\n |\n  (?<val>\\d+)&(?<key>\\w+)\n)/x\n\nm1 = "age=30".match(pattern)\n# m1[:key] => "age", m1[:val] => "30"\n\nm2 = "30&age".match(pattern)\n# m2[:key] => "age", m2[:val] => "30"\n'})}),"\n",(0,s.jsx)(r.p,{children:"Every branch uses the same capture names or numbers, simplifying downstream logic."})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},65404:(e,r,t)=>{t.d(r,{R:()=>i,x:()=>o});var n=t(36672);const s={},a=n.createContext(s);function i(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);