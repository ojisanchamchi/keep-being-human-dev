"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[33410],{14523:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"ruby/directory_management/beginner/dir_list_and_filter","title":"dir_list_and_filter","description":"\ud83d\udcc1 Listing and Filtering Directory Contents","source":"@site/docs/ruby/directory_management/beginner/dir_list_and_filter.md","sourceDirName":"ruby/directory_management/beginner","slug":"/ruby/directory_management/beginner/dir_list_and_filter","permalink":"/keep-being-human-dev/docs/ruby/directory_management/beginner/dir_list_and_filter","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/directory_management/beginner/dir_list_and_filter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"recursive_traversal_find","permalink":"/keep-being-human-dev/docs/ruby/directory_management/advanced/recursive_traversal_find"},"next":{"title":"recursive_directory_creation","permalink":"/keep-being-human-dev/docs/ruby/directory_management/beginner/recursive_directory_creation"}}');var i=r(23420),s=r(65404);const o={},d=void 0,c={},a=[{value:"\ud83d\udcc1 Listing and Filtering Directory Contents",id:"-listing-and-filtering-directory-contents",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-listing-and-filtering-directory-contents",children:"\ud83d\udcc1 Listing and Filtering Directory Contents"}),"\n",(0,i.jsxs)(n.p,{children:["Working with directories often starts with reading their contents. You can use ",(0,i.jsx)(n.code,{children:"Dir.entries"})," to get all items (including ",(0,i.jsx)(n.code,{children:"."})," and ",(0,i.jsx)(n.code,{children:".."}),") or ",(0,i.jsx)(n.code,{children:"Dir.glob"})," to match specific patterns. Pair these with ",(0,i.jsx)(n.code,{children:"File.directory?"})," or ",(0,i.jsx)(n.code,{children:"File.file?"})," to distinguish between files and subdirectories."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# List everything except . and ..\nentries = Dir.entries("./my_folder") - %w[. ..]\nentries.each do |entry|\n  path = File.join("./my_folder", entry)\n  if File.directory?(path)\n    puts "\ud83d\udcc2 Directory: #{entry}"\n  else\n    puts "\ud83d\udcc4 File:      #{entry}"\n  end\nend\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'# List only Ruby files with Dir.glob\nDir.glob("./my_folder/**/*.rb").each do |file|\n  puts "Found Ruby file: #{file}"\nend\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},65404:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var t=r(36672);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);