"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[23236],{65404:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>c});var l=n(36672);const i={},r=l.createContext(i);function t(e){const s=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(r.Provider,{value:s},e.children)}},89414:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"rails/views/expert/cells_gem_decoupling","title":"cells_gem_decoupling","description":"\ud83e\udde9 Decouple View Logic Using Trailblazer Cells","source":"@site/docs/rails/views/expert/cells_gem_decoupling.md","sourceDirName":"rails/views/expert","slug":"/rails/views/expert/cells_gem_decoupling","permalink":"/keep-being-human-dev/docs/rails/views/expert/cells_gem_decoupling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/views/expert/cells_gem_decoupling.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"asset_pipeline_dynamic_paths","permalink":"/keep-being-human-dev/docs/rails/views/expert/asset_pipeline_dynamic_paths"},"next":{"title":"custom_form_builder_dsl","permalink":"/keep-being-human-dev/docs/rails/views/expert/custom_form_builder_dsl"}}');var i=n(23420),r=n(65404);const t={},c=void 0,a={},o=[{value:"\ud83e\udde9 Decouple View Logic Using Trailblazer Cells",id:"-decouple-view-logic-using-trailblazer-cells",level:2}];function d(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h2,{id:"-decouple-view-logic-using-trailblazer-cells",children:"\ud83e\udde9 Decouple View Logic Using Trailblazer Cells"}),"\n",(0,i.jsx)(s.p,{children:"Isolate view rendering and business logic in Trailblazer Cells to adhere to Single Responsibility. Cells give you complete encapsulation and dedicated test boundaries for UI components."}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-ruby",children:"# app/cells/user_cell.rb\nclass UserCell < Cell::ViewModel\n  property :name, :email\n\n  def show\n    render\n  end\nend\n"})}),"\n",(0,i.jsx)(s.p,{children:"Usage in a view:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-erb",children:"<%= cell(:user, @user).show %>\n"})})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);