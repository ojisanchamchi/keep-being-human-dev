"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[53040],{59846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"sql/postgresql/advanced/upsert_on_conflict","title":"upsert_on_conflict","description":"\u2795 Upsert with Conditional ON CONFLICT DO UPDATE","source":"@site/docs/sql/postgresql/advanced/upsert_on_conflict.md","sourceDirName":"sql/postgresql/advanced","slug":"/sql/postgresql/advanced/upsert_on_conflict","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/upsert_on_conflict","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/sql/postgresql/advanced/upsert_on_conflict.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"recursive_cte_hierarchy","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/recursive_cte_hierarchy"},"next":{"title":"window_function_rank","permalink":"/keep-being-human-dev/docs/sql/postgresql/advanced/window_function_rank"}}');var s=t(23420),c=t(65404);const i={},r=void 0,a={},d=[{value:"\u2795 Upsert with Conditional <code>ON CONFLICT</code> DO UPDATE",id:"-upsert-with-conditional-on-conflict-do-update",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"-upsert-with-conditional-on-conflict-do-update",children:["\u2795 Upsert with Conditional ",(0,s.jsx)(n.code,{children:"ON CONFLICT"})," DO UPDATE"]}),"\n",(0,s.jsxs)(n.p,{children:["Utilize the ",(0,s.jsx)(n.code,{children:"ON CONFLICT"})," clause to perform atomic upserts, avoiding race conditions when inserting or updating rows. You can conditionally update only certain columns based on excluded values or add a ",(0,s.jsx)(n.code,{children:"WHERE"})," clause to restrict updates. This pattern simplifies merging incoming data into existing tables."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"INSERT INTO inventory (product_id, stock)\nVALUES (42, 100)\nON CONFLICT (product_id) DO UPDATE\nSET stock = inventory.stock + EXCLUDED.stock\nWHERE inventory.updated_at < NOW() - INTERVAL '1 hour';\n"})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(36672);const s={},c=o.createContext(s);function i(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);