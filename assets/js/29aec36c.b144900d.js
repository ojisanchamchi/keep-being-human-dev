"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[62181],{65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(36672);const r={},d=i.createContext(r);function s(e){const n=i.useContext(d);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(d.Provider,{value:n},e.children)}},72080:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ruby/methods/beginner/defining_methods","title":"defining_methods","description":"\ud83d\udcdd Defining and Calling Methods","source":"@site/docs/ruby/methods/beginner/defining_methods.md","sourceDirName":"ruby/methods/beginner","slug":"/ruby/methods/beginner/defining_methods","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/defining_methods","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/methods/beginner/defining_methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"default_parameters","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/default_parameters"},"next":{"title":"implicit_and_explicit_return","permalink":"/keep-being-human-dev/docs/ruby/methods/beginner/implicit_and_explicit_return"}}');var r=t(23420),d=t(65404);const s={},o=void 0,a={},l=[{value:"\ud83d\udcdd Defining and Calling Methods",id:"-defining-and-calling-methods",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-defining-and-calling-methods",children:"\ud83d\udcdd Defining and Calling Methods"}),"\n",(0,r.jsxs)(n.p,{children:["In Ruby, methods are defined using the ",(0,r.jsx)(n.code,{children:"def"})," keyword followed by a name and optional parameters. They help you encapsulate logic, making your code modular and reusable. You call a method by simply using its name and passing required arguments."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# Define a method\ndef greet(name)\n  "Hello, #{name}!"\nend\n\n# Call the method\ngreeting = greet("Alice")\nputs greeting # => "Hello, Alice!"\n'})})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);