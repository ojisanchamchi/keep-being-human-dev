"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47305],{65404:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var o=t(36672);const u={},s=o.createContext(u);function l(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(u):e.components||u:l(e.components),o.createElement(s.Provider,{value:n},e.children)}},89195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"gems/counter_culture/middle/multiple_counter_usage","title":"multiple_counter_usage","description":"\u2795 Counting Multiple Columns Simultaneously","source":"@site/docs/gems/counter_culture/middle/multiple_counter_usage.md","sourceDirName":"gems/counter_culture/middle","slug":"/gems/counter_culture/middle/multiple_counter_usage","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/multiple_counter_usage","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/counter_culture/middle/multiple_counter_usage.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"multi_level_association_caching","permalink":"/keep-being-human-dev/docs/gems/counter_culture/expert/multi_level_association_caching"},"next":{"title":"scoped_comment_counter","permalink":"/keep-being-human-dev/docs/gems/counter_culture/middle/scoped_comment_counter"}}');var u=t(23420),s=t(65404);const l={},i=void 0,c={},r=[{value:"\u2795 Counting Multiple Columns Simultaneously",id:"-counting-multiple-columns-simultaneously",level:2}];function a(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,u.jsxs)(u.Fragment,{children:[(0,u.jsx)(n.h2,{id:"-counting-multiple-columns-simultaneously",children:"\u2795 Counting Multiple Columns Simultaneously"}),"\n",(0,u.jsx)(n.p,{children:"When you need to maintain more than one counter on the same association (e.g., likes and dislikes), CounterCulture lets you declare multiple counters in a single call. This reduces duplication and keeps your model callbacks concise."}),"\n",(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-ruby",children:"# app/models/vote.rb\nclass Vote < ApplicationRecord\n  belongs_to :video\n\n  counter_culture :video,\n    column_names: {\n      ['votes.value = ?', 1] => 'likes_count',\n      ['votes.value = ?', -1] => 'dislikes_count'\n    }\nend\n\n# app/models/video.rb\nclass Video < ApplicationRecord\n  # must have :likes_count and :dislikes_count as integer columns\nend\n"})}),"\n",(0,u.jsx)(n.p,{children:"And in the migration:"}),"\n",(0,u.jsx)(n.pre,{children:(0,u.jsx)(n.code,{className:"language-ruby",children:"class AddLikeDislikeCountsToVideos < ActiveRecord::Migration[6.1]\n  def change\n    add_column :videos, :likes_count, :integer, default: 0, null: false\n    add_column :videos, :dislikes_count, :integer, default: 0, null: false\n    Video.reset_column_information\n    Video.find_each do |video|\n      counts = video.votes.group(:value).count\n      video.update_columns(\n        likes_count: counts[1] || 0,\n        dislikes_count: counts[-1] || 0\n      )\n    end\n  end\nend\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,u.jsx)(n,{...e,children:(0,u.jsx)(a,{...e})}):a(e)}}}]);