"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[75865],{65404:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>d});var s=n(36672);const t={},i=s.createContext(t);function o(e){const a=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:a},e.children)}},93361:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"ruby/procs_and_lambdas/middle/memoization_lambda","title":"memoization_lambda","description":"\u267b\ufe0f Memoize Expensive Calls Using Lambdas","source":"@site/docs/ruby/procs_and_lambdas/middle/memoization_lambda.md","sourceDirName":"ruby/procs_and_lambdas/middle","slug":"/ruby/procs_and_lambdas/middle/memoization_lambda","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/memoization_lambda","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/middle/memoization_lambda.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lambda_arity","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/lambda_arity"},"next":{"title":"proc_callback","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/middle/proc_callback"}}');var t=n(23420),i=n(65404);const o={},d=void 0,c={},r=[{value:"\u267b\ufe0f Memoize Expensive Calls Using Lambdas",id:"\ufe0f-memoize-expensive-calls-using-lambdas",level:2}];function l(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"\ufe0f-memoize-expensive-calls-using-lambdas",children:"\u267b\ufe0f Memoize Expensive Calls Using Lambdas"}),"\n",(0,t.jsx)(a.p,{children:"Use lambdas alongside a hash to cache heavy computations. This avoids repeated work and speeds up your application. Store prior results keyed by input parameters and return cached values on subsequent calls."}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-ruby",children:"fib = ->(n, cache = {}) do\n  return cache[n] if cache.key?(n)\n  cache[n] = n < 2 ? n : fib.call(n-1, cache) + fib.call(n-2, cache)\nend\n\nputs fib.call(35)  # computed quickly thanks to memoization\n"})})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);