"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[14735],{36240:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"ruby/define_method/middle/validation_helpers","title":"validation_helpers","description":"\u2705 Validation Helpers Generator","source":"@site/docs/ruby/define_method/middle/validation_helpers.md","sourceDirName":"ruby/define_method/middle","slug":"/ruby/define_method/middle/validation_helpers","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/validation_helpers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/define_method/middle/validation_helpers.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"method_wrapper_logging","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/method_wrapper_logging"},"next":{"title":"atomic_directory_swap","permalink":"/keep-being-human-dev/docs/ruby/directory_management/advanced/atomic_directory_swap"}}');var i=t(23420),d=t(65404);const r={},s=void 0,o={},l=[{value:"\u2705 Validation Helpers Generator",id:"-validation-helpers-generator",level:2}];function c(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-validation-helpers-generator",children:"\u2705 Validation Helpers Generator"}),"\n",(0,i.jsx)(n.p,{children:"Automate custom validation methods in your classes by defining a helper generator that creates multiple validation rules with minimal repetition."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'module Validations\n  def self.included(base)\n    base.extend ClassMethods\n  end\n\n  module ClassMethods\n    def validates_presence_of(*attrs)\n      attrs.each do |attr|\n        define_method("validate_#{attr}_present") do\n          value = send(attr)\n          raise "#{attr} can\'t be blank" if value.nil? || value.to_s.strip.empty?\n        end\n        validations << "validate_#{attr}_present"\n      end\n    end\n\n    def validations\n      @validations ||= []\n    end\n  end\n\n  def validate!\n    self.class.validations.each { |v| send(v) }\n  end\nend\n\nclass User\n  include Validations\n  attr_accessor :email, :name\n  validates_presence_of :email, :name\nend\n\nuser = User.new\nuser.name = ""\nuser.validate!  # => RuntimeError: email can\'t be blank\n'})}),"\n",(0,i.jsx)(n.p,{children:"This snippet dynamically defines presence-checking methods and aggregates them, keeping your validation logic consistent and DRY."})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var a=t(36672);const i={},d=a.createContext(i);function r(e){const n=a.useContext(d);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(d.Provider,{value:n},e.children)}}}]);