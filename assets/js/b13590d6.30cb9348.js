"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[27465],{65404:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var i=o(36672);const t={},s=i.createContext(t);function c(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(s.Provider,{value:n},e.children)}},85571:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"gems/redis/advanced/redis_pubsub_connection_pool","title":"redis_pubsub_connection_pool","description":"\ud83d\udce3 Optimize Pub/Sub with Connection Pooling","source":"@site/docs/gems/redis/advanced/redis_pubsub_connection_pool.md","sourceDirName":"gems/redis/advanced","slug":"/gems/redis/advanced/redis_pubsub_connection_pool","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_pubsub_connection_pool","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/redis/advanced/redis_pubsub_connection_pool.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_cluster_integration","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_cluster_integration"},"next":{"title":"redis_redlock_distributed_locks","permalink":"/keep-being-human-dev/docs/gems/redis/advanced/redis_redlock_distributed_locks"}}');var t=o(23420),s=o(65404);const c={},r=void 0,d={},a=[{value:"\ud83d\udce3 Optimize Pub/Sub with Connection Pooling",id:"-optimize-pubsub-with-connection-pooling",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-optimize-pubsub-with-connection-pooling",children:"\ud83d\udce3 Optimize Pub/Sub with Connection Pooling"}),"\n",(0,t.jsxs)(n.p,{children:["Avoid blocking your primary Redis connection by creating a dedicated, pooled client for Pub/Sub patterns. Use ",(0,t.jsx)(n.code,{children:"connection_pool"})," to manage subscribers in background threads efficiently."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\ngem 'connection_pool'\n\n# config/initializers/redis_pubsub.rb\nPUBSUB_POOL = ConnectionPool.new(size: 5, timeout: 5) do\n  Redis.new(url: ENV['REDIS_URL'])\nend\n\n# Subscriber service\nThread.new do\n  PUBSUB_POOL.with do |conn|\n    conn.subscribe('notifications') do |on|\n      on.message do |channel, msg|\n        data = JSON.parse(msg)\n        NotificationDispatcher.call(data)\n      end\n    end\n  end\nend\n\n# Publishing\nRedis.new(url: ENV['REDIS_URL']).publish('notifications', { user: 1, action: 'login' }.to_json)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);