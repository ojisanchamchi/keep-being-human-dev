"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[66038],{65404:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>l});var n=s(36672);const r={},c=n.createContext(r);function d(e){const t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),n.createElement(c.Provider,{value:t},e.children)}},80316:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>d,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"ruby/rspec/middle/rspec_let_vs_let_bang.md","title":"rspec_let_vs_let_bang.md","description":"\ud83d\udd04 Using let vs let! Effectively","source":"@site/docs/ruby/rspec/middle/rspec_let_vs_let_bang.md.md","sourceDirName":"ruby/rspec/middle","slug":"/ruby/rspec/middle/rspec_let_vs_let_bang.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_let_vs_let_bang.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/rspec/middle/rspec_let_vs_let_bang.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_custom_matchers.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_custom_matchers.md"},"next":{"title":"rspec_shared_examples.md","permalink":"/keep-being-human-dev/docs/ruby/rspec/middle/rspec_shared_examples.md"}}');var r=s(23420),c=s(65404);const d={},l=void 0,o={},i=[{value:"\ud83d\udd04 Using <code>let</code> vs <code>let!</code> Effectively",id:"-using-let-vs-let-effectively",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h2,{id:"-using-let-vs-let-effectively",children:["\ud83d\udd04 Using ",(0,r.jsx)(t.code,{children:"let"})," vs ",(0,r.jsx)(t.code,{children:"let!"})," Effectively"]}),"\n",(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.code,{children:"let"})," to lazily evaluate expensive setup only when needed, and ",(0,r.jsx)(t.code,{children:"let!"})," to eagerly create data before each example. This prevents unnecessary database hits while ensuring critical records exist. Always prefer ",(0,r.jsx)(t.code,{children:"let"})," for speed, and switch to ",(0,r.jsx)(t.code,{children:"let!"})," if you're testing side effects or callbacks triggered at setup time."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ruby",children:'# Lazily created only when called\nlet(:user) { create(:user) }\n\nit "doesn\'t hit the DB if not used" do\n  expect(User.count).to eq(0)\nend\n\n# Eager creation ensures it\'s present before example\nlet!(:post) { create(:post, author: user) }\n\nit "counts the post" do\n  expect(Post.count).to eq(1)\nend\n'})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);