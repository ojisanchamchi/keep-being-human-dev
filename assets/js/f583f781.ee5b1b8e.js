"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[18223],{60441:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ruby/variables/expert/thread_fiber_local_variables_expert","title":"thread_fiber_local_variables_expert","description":"\ud83e\uddf5 Isolating State with Thread-Local and Fiber-Local Variables","source":"@site/docs/ruby/variables/expert/thread_fiber_local_variables_expert.md","sourceDirName":"ruby/variables/expert","slug":"/ruby/variables/expert/thread_fiber_local_variables_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/thread_fiber_local_variables_expert","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/expert/thread_fiber_local_variables_expert.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_constant_management_expert","permalink":"/keep-being-human-dev/docs/ruby/variables/expert/dynamic_constant_management_expert"},"next":{"title":"block_vs_method_variable_scope","permalink":"/keep-being-human-dev/docs/ruby/variables/middle/block_vs_method_variable_scope"}}');var n=a(23420),o=a(65404);const i={},s=void 0,c={},l=[{value:"\ud83e\uddf5 Isolating State with Thread-Local and Fiber-Local Variables",id:"-isolating-state-with-thread-local-and-fiber-local-variables",level:2}];function d(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h2,{id:"-isolating-state-with-thread-local-and-fiber-local-variables",children:"\ud83e\uddf5 Isolating State with Thread-Local and Fiber-Local Variables"}),"\n",(0,n.jsxs)(r.p,{children:["For highly concurrent systems, leveraging ",(0,n.jsx)(r.code,{children:"Thread"})," and ",(0,n.jsx)(r.code,{children:"Fiber"})," locals prevents cross-context pollution while sharing APIs. Store transient request IDs, database sessions, or actor mailbox queues in ",(0,n.jsx)(r.code,{children:"Thread.current"})," or ",(0,n.jsx)(r.code,{children:"Fiber.current[]"})," for zero-dependency contextual data without global vars."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ruby",children:'# Thread-local storage example\nth = Thread.new do\n  Thread.current[:request_id] = SecureRandom.uuid\n  puts "Thread ID: #{Thread.current[:request_id]}"\nend\nth.join\n\n# Fiber-local storage example\nfiber = Fiber.new do\n  Fiber.current[:db] = ActiveRecord::Base.connection_pool.checkout\n  puts "Got DB session: #{Fiber.current[:db].object_id}"\n  ActiveRecord::Base.connection_pool.checkin(Fiber.current[:db])\nend\nfiber.resume\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},65404:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>s});var t=a(36672);const n={},o=t.createContext(n);function i(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);