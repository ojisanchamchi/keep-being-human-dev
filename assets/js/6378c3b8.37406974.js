"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34607],{36613:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"ruby/enumerables/middle/flat_map_group_by_transform","title":"flat_map_group_by_transform","description":"\ud83d\udd00 Combine flatmap, groupby, and transform_values","source":"@site/docs/ruby/enumerables/middle/flat_map_group_by_transform.md","sourceDirName":"ruby/enumerables/middle","slug":"/ruby/enumerables/middle/flat_map_group_by_transform","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/flat_map_group_by_transform","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/enumerables/middle/flat_map_group_by_transform.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"each_with_object_hash_building","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/each_with_object_hash_building"},"next":{"title":"lazy_chaining_enumerables","permalink":"/keep-being-human-dev/docs/ruby/enumerables/middle/lazy_chaining_enumerables"}}');var t=a(23420),o=a(65404);const s={},l=void 0,i={},u=[{value:"\ud83d\udd00 Combine flat_map, group_by, and transform_values",id:"-combine-flat_map-group_by-and-transform_values",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-combine-flat_map-group_by-and-transform_values",children:"\ud83d\udd00 Combine flat_map, group_by, and transform_values"}),"\n",(0,t.jsxs)(n.p,{children:["To aggregate items from nested collections, chain ",(0,t.jsx)(n.code,{children:"flat_map"})," to flatten, then ",(0,t.jsx)(n.code,{children:"group_by"})," to categorize, and finally ",(0,t.jsx)(n.code,{children:"transform_values"})," to compute per-group metrics. This avoids manual loops and intermediate variables."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"orders = [\n  { id: 1, items: ['apple', 'banana'] },\n  { id: 2, items: ['banana', 'cherry'] }\n]\n# Count each fruit across all orders\ntally = orders\n  .flat_map { |o| o[:items] }\n  .group_by(&:itself)\n  .transform_values(&:count)\n# => {\"apple\"=>1, \"banana\"=>2, \"cherry\"=>1}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>l});var r=a(36672);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);