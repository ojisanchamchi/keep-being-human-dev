"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[24938],{65404:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(36672);const o={},s=n.createContext(o);function i(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(s.Provider,{value:t},e.children)}},80577:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra","title":"habtm_to_has_many_through_with_extra","description":"\ud83d\udc65 HABTM via Join Model for Extra Attributes","source":"@site/docs/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra.md","sourceDirName":"rails/active_record_associations/advanced","slug":"/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_associations/advanced/habtm_to_has_many_through_with_extra.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"dynamic_associations_definition","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/dynamic_associations_definition"},"next":{"title":"inverse_of_and_eager_preloading","permalink":"/keep-being-human-dev/docs/rails/active_record_associations/advanced/inverse_of_and_eager_preloading"}}');var o=a(23420),s=a(65404);const i={},r=void 0,c={},d=[{value:"\ud83d\udc65 HABTM via Join Model for Extra Attributes",id:"-habtm-via-join-model-for-extra-attributes",level:2}];function _(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"-habtm-via-join-model-for-extra-attributes",children:"\ud83d\udc65 HABTM via Join Model for Extra Attributes"}),"\n",(0,o.jsxs)(t.p,{children:["Migrate from ",(0,o.jsx)(t.code,{children:"has_and_belongs_to_many"})," to ",(0,o.jsx)(t.code,{children:"has_many :through"})," when you need to store additional metadata on the join. This unlocks validations, callbacks, and custom methods on the join model, giving you full control over the relationship."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ruby",children:"# Before: simple HABTM\nclass Patient < ApplicationRecord\n  has_and_belongs_to_many :doctors\nend\n\n# After: join model with extra data\nclass Appointment < ApplicationRecord\n  belongs_to :patient\n  belongs_to :doctor\n  validates :scheduled_at, presence: true\nend\n\nclass Patient < ApplicationRecord\n  has_many :appointments\n  has_many :doctors, through: :appointments\nend\n\nclass Doctor < ApplicationRecord\n  has_many :appointments\n  has_many :patients, through: :appointments\nend\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(_,{...e})}):_(e)}}}]);