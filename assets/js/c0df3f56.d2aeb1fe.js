"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[72110],{65404:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>p});var t=n(36672);const a={},s=t.createContext(a);function o(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function p(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:r},e.children)}},74776:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>p,default:()=>l,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"ruby/procs_and_lambdas/expert/profunctor_style_adapters","title":"profunctor_style_adapters","description":"\ud83e\uddea Implementing Profunctor-Style Adapters for Data Transformation","source":"@site/docs/ruby/procs_and_lambdas/expert/profunctor_style_adapters.md","sourceDirName":"ruby/procs_and_lambdas/expert","slug":"/ruby/procs_and_lambdas/expert/profunctor_style_adapters","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/profunctor_style_adapters","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/procs_and_lambdas/expert/profunctor_style_adapters.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"procs_in_fiber_callbacks","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/procs_in_fiber_callbacks"},"next":{"title":"sandboxed_instance_exec","permalink":"/keep-being-human-dev/docs/ruby/procs_and_lambdas/expert/sandboxed_instance_exec"}}');var a=n(23420),s=n(65404);const o={},p=void 0,c={},d=[{value:"\ud83e\uddea Implementing Profunctor-Style Adapters for Data Transformation",id:"-implementing-profunctor-style-adapters-for-data-transformation",level:2}];function i(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h2,{id:"-implementing-profunctor-style-adapters-for-data-transformation",children:"\ud83e\uddea Implementing Profunctor-Style Adapters for Data Transformation"}),"\n",(0,a.jsxs)(r.p,{children:["Adopt a profunctor pattern by defining ",(0,a.jsx)(r.code,{children:"dimap"})," on procs to pre- and post-process inputs/outputs. This enables building highly composable adapters for parsing, validation, and serialization flows."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-ruby",children:'module ProcProfunctor\n  def dimap(f, g)\n    ->(x) { g.call(self.call(f.call(x))) }\n  end\nend\n\ntransform = ->(s) { JSON.parse(s) }\npre  = ->(raw) { raw.strip }\npost = ->(hash) { OpenStruct.new(hash) }\n\ntransform.extend(ProcProfunctor)\nadapter = transform.dimap(pre, post)\n\nraw = " { \\"name\\": \\"Alice\\" } "\nuser = adapter.call(raw)\nputs user.name # => "Alice"\n'})}),"\n",(0,a.jsx)(r.p,{children:"Leverage these adapters to unify your data flow in microservices or ETL pipelines."})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}}}]);