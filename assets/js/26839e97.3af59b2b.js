"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[41166],{47045:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>t,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"ruby/fibers/advanced/fiber_error_supervision","title":"fiber_error_supervision","description":"\ud83c\udfaf Supervise and Propagate Errors Across Fibers","source":"@site/docs/ruby/fibers/advanced/fiber_error_supervision.md","sourceDirName":"ruby/fibers/advanced","slug":"/ruby/fibers/advanced/fiber_error_supervision","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_error_supervision","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/fibers/advanced/fiber_error_supervision.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"fiber_enumerator_generator","permalink":"/keep-being-human-dev/docs/ruby/fibers/advanced/fiber_enumerator_generator"},"next":{"title":"creating_and_resuming","permalink":"/keep-being-human-dev/docs/ruby/fibers/beginner/creating_and_resuming"}}');var i=n(23420),o=n(65404);const a={},t=void 0,u={},d=[{value:"\ud83c\udfaf Supervise and Propagate Errors Across Fibers",id:"-supervise-and-propagate-errors-across-fibers",level:2}];function c(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h2,{id:"-supervise-and-propagate-errors-across-fibers",children:"\ud83c\udfaf Supervise and Propagate Errors Across Fibers"}),"\n",(0,i.jsx)(r.p,{children:"Implement a supervisor fiber to catch and route exceptions from child fibers, allowing you to restart or log failures. This pattern ensures your system remains responsive even if individual fibers crash."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-ruby",children:'class FiberSupervisor\n  def initialize\n    @workers = []\n  end\n\n  def spawn(&block)\n    f = Fiber.new do\n      begin\n        block.call\n      rescue => e\n        puts "Worker failed: #{e.class} - #{e.message}"\n        # Optionally restart or escalate\n      end\n    end\n    @workers << f\n    f.resume\n  end\n\n  def run\n    loop { @workers.reject!(&:dead?) }\n  end\nend\n\nsupervisor = FiberSupervisor.new\nsupervisor.spawn { raise "Boom" }\nsupervisor.spawn { puts "All good" }\nsupervisor.run\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>t});var s=n(36672);const i={},o=s.createContext(i);function a(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);