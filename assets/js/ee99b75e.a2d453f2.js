"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[36488],{11914:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"rails/configuration/middle/custom_app_config","title":"custom_app_config","description":"\ud83d\udee0\ufe0f Custom config.x Settings","source":"@site/docs/rails/configuration/middle/custom_app_config.md","sourceDirName":"rails/configuration/middle","slug":"/rails/configuration/middle/custom_app_config","permalink":"/keep-being-human-dev/docs/rails/configuration/middle/custom_app_config","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/configuration/middle/custom_app_config.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"railtie_initialization_hooks","permalink":"/keep-being-human-dev/docs/rails/configuration/expert/railtie_initialization_hooks"},"next":{"title":"environment_specific_config","permalink":"/keep-being-human-dev/docs/rails/configuration/middle/environment_specific_config"}}');var t=i(23420),c=i(65404);const s={},a=void 0,r={},d=[{value:"\ud83d\udee0\ufe0f Custom <code>config.x</code> Settings",id:"\ufe0f-custom-configx-settings",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h2,{id:"\ufe0f-custom-configx-settings",children:["\ud83d\udee0\ufe0f Custom ",(0,t.jsx)(n.code,{children:"config.x"})," Settings"]}),"\n",(0,t.jsxs)(n.p,{children:["Rails provides a convenient ",(0,t.jsx)(n.code,{children:"config.x"})," namespace to store custom configuration in a centralized place. You can define arbitrary settings in ",(0,t.jsx)(n.code,{children:"config/application.rb"})," and override them per environment in ",(0,t.jsx)(n.code,{children:"config/environments/*.rb"}),". This keeps your magic numbers or feature flags organized and accessible throughout the app via ",(0,t.jsx)(n.code,{children:"Rails.configuration.x"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:"# config/application.rb\nmodule MyApp\n  class Application < Rails::Application\n    # Define default custom settings\n    config.x.api_timeout_seconds = 5\n    config.x.feature_flags = { new_checkout: false }\n  end\nend\n\n# config/environments/production.rb\nRails.application.configure do\n  # Override in production\n  config.x.api_timeout_seconds = 10\n  config.x.feature_flags[:new_checkout] = true\nend\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can call ",(0,t.jsx)(n.code,{children:"Rails.configuration.x.api_timeout_seconds"})," anywhere in your code or initializers."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var o=i(36672);const t={},c=o.createContext(t);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(c.Provider,{value:n},e.children)}}}]);