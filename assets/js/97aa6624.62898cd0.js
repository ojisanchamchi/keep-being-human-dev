"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[50783],{32669:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"ruby/data_types/advanced/bitwise_operations","title":"bitwise_operations","description":"\ud83e\uddee Perform Bitwise Manipulations for Flags & Masks","source":"@site/docs/ruby/data_types/advanced/bitwise_operations.md","sourceDirName":"ruby/data_types/advanced","slug":"/ruby/data_types/advanced/bitwise_operations","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/bitwise_operations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/data_types/advanced/bitwise_operations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"resilient_parsing","permalink":"/keep-being-human-dev/docs/ruby/csv/middle/resilient_parsing"},"next":{"title":"deep_default_hash","permalink":"/keep-being-human-dev/docs/ruby/data_types/advanced/deep_default_hash"}}');var a=t(23420),r=t(65404);const i={},o=void 0,d={},c=[{value:"\ud83e\uddee Perform Bitwise Manipulations for Flags &amp; Masks",id:"-perform-bitwise-manipulations-for-flags--masks",level:2}];function p(e){const s={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h2,{id:"-perform-bitwise-manipulations-for-flags--masks",children:"\ud83e\uddee Perform Bitwise Manipulations for Flags & Masks"}),"\n",(0,a.jsxs)(s.p,{children:["Ruby\u2019s integer class supports bitwise operators (",(0,a.jsx)(s.code,{children:"&, |, ^, <<, >>"}),"). Use them to define flags, create masks, or even reverse bits in a fixed width."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:'READ    = 0b100\nWRITE   = 0b010\nEXECUTE = 0b001\n\n# Combine flags\npermissions = READ | EXECUTE\nputs (permissions & WRITE).zero? ? "No write" : "Writable"\n# => "No write"\n'})}),"\n",(0,a.jsx)(s.p,{children:"Reverse bits in a given width:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-ruby",children:"class Integer\n  def reverse_bits(width)\n    to_s(2).rjust(width, '0').reverse.to_i(2)\n  end\nend\n\nputs 0b1100.reverse_bits(4).to_s(2)\n# => \"0011\"\n"})})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},65404:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>o});var n=t(36672);const a={},r=n.createContext(a);function i(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);