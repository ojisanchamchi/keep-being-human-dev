"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[43001],{7312:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gems/faraday/expert/thread_safe_connection_pool","title":"thread_safe_connection_pool","description":"\ud83d\udd27 Thread\u2011Safe Connection Pooling with Faraday","source":"@site/docs/gems/faraday/expert/thread_safe_connection_pool.md","sourceDirName":"gems/faraday/expert","slug":"/gems/faraday/expert/thread_safe_connection_pool","permalink":"/keep-being-human-dev/docs/gems/faraday/expert/thread_safe_connection_pool","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/faraday/expert/thread_safe_connection_pool.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"custom_instrumentation_middleware","permalink":"/keep-being-human-dev/docs/gems/faraday/expert/custom_instrumentation_middleware"},"next":{"title":"custom_middleware_integration","permalink":"/keep-being-human-dev/docs/gems/faraday/middle/custom_middleware_integration"}}');var o=t(23420),r=t(65404);const s={},i=void 0,d={},c=[{value:"\ud83d\udd27 Thread\u2011Safe Connection Pooling with Faraday",id:"-threadsafe-connection-pooling-with-faraday",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"-threadsafe-connection-pooling-with-faraday",children:"\ud83d\udd27 Thread\u2011Safe Connection Pooling with Faraday"}),"\n",(0,o.jsxs)(n.p,{children:["For high\u2011throughput or multi\u2011threaded environments, wrap your Faraday client in a connection pool to reuse persistent connections safely. Combining the ",(0,o.jsx)(n.code,{children:"connection_pool"})," gem with a persistent adapter prevents socket churn and ensures thread safety under load."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ruby",children:"# Gemfile\n# gem 'faraday'\n# gem 'connection_pool'\n# gem 'faraday-net_http_persistent'\n\nrequire 'faraday'\nrequire 'connection_pool'\nrequire 'faraday/net_http_persistent'\n\n# Define a global thread\u2011safe pool\nHTTP_POOL = ConnectionPool.new(size: 10, timeout: 5) do\n  Faraday.new(url: 'https://api.service.com') do |builder|\n    builder.request :retry, max: 3, interval: 0.1, max_interval: 1, backoff_factor: 2\n    builder.adapter :net_http_persistent       # Maintains keep\u2011alive connections\n  end\nend\n\n# Use inside threads or concurrent jobs\nthreads = 10.times.map do\n  Thread.new do\n    HTTP_POOL.with do |conn|\n      response = conn.get('/v1/data')\n      process(response.status, response.body)\n    end\n  end\nend\nthreads.each(&:join)\n"})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var a=t(36672);const o={},r=a.createContext(o);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);