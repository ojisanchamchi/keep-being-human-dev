"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[77004],{1865:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"ruby/syntax/advanced/to_proc_shorthand","title":"to_proc_shorthand","description":"\ud83d\udd17 Use Symbol#to_proc Shorthand","source":"@site/docs/ruby/syntax/advanced/to_proc_shorthand.md","sourceDirName":"ruby/syntax/advanced","slug":"/ruby/syntax/advanced/to_proc_shorthand","permalink":"/keep-being-human-dev/docs/ruby/syntax/advanced/to_proc_shorthand","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/syntax/advanced/to_proc_shorthand.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"singleton_class_eval","permalink":"/keep-being-human-dev/docs/ruby/syntax/advanced/singleton_class_eval"},"next":{"title":"trace_point_debugging","permalink":"/keep-being-human-dev/docs/ruby/syntax/advanced/trace_point_debugging"}}');var r=t(23420),s=t(65404);const a={},c=void 0,d={},i=[{value:"\ud83d\udd17 Use Symbol#to_proc Shorthand",id:"-use-symbolto_proc-shorthand",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-use-symbolto_proc-shorthand",children:"\ud83d\udd17 Use Symbol#to_proc Shorthand"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"&:method_name"})," syntax converts a symbol to a block with ",(0,r.jsx)(n.code,{children:"#to_proc"}),". Beyond simple maps, you can combine it with methods like ",(0,r.jsx)(n.code,{children:"slice_before"}),", ",(0,r.jsx)(n.code,{children:"sort_by"}),", and even user-defined methods for elegant one-liners."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'users = [ OpenStruct.new(name: "Alice"), OpenStruct.new(name: "Bob") ]\nnames = users.map(&:name)\n# => ["Alice", "Bob"]\n\n# Group numbers whenever an even number appears\n[1,2,3,4,5,6].slice_before(&:even?).to_a\n# => [[1], [2, 3], [4, 5], [6]]\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var o=t(36672);const r={},s=o.createContext(r);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);