"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[47208],{65404:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>c});var i=a(36672);const r={},s=i.createContext(r);function t(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(s.Provider,{value:n},e.children)}},75335:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"ruby/variables/advanced/dynamic_instance_variables","title":"dynamic_instance_variables","description":"\ud83d\udcbc Dynamic Instance Variable Management","source":"@site/docs/ruby/variables/advanced/dynamic_instance_variables.md","sourceDirName":"ruby/variables/advanced","slug":"/ruby/variables/advanced/dynamic_instance_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/dynamic_instance_variables","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/variables/advanced/dynamic_instance_variables.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"parsing_modifying_query_params","permalink":"/keep-being-human-dev/docs/ruby/uri/middle/parsing_modifying_query_params"},"next":{"title":"dynamic_local_variables","permalink":"/keep-being-human-dev/docs/ruby/variables/advanced/dynamic_local_variables"}}');var r=a(23420),s=a(65404);const t={},c=void 0,o={},d=[{value:"\ud83d\udcbc Dynamic Instance Variable Management",id:"-dynamic-instance-variable-management",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-dynamic-instance-variable-management",children:"\ud83d\udcbc Dynamic Instance Variable Management"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"instance_variable_set"}),", ",(0,r.jsx)(n.code,{children:"instance_variable_get"}),", and ",(0,r.jsx)(n.code,{children:"remove_instance_variable"})," to manage object state dynamically, especially when keys or attributes aren\u2019t known at compile time. This technique is powerful for building DSLs or serializers that map arbitrary data into Ruby objects."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'class Person\n  def initialize(name)\n    @name = name\n  end\n\n  def set_prop(key, value)\n    instance_variable_set("@#{key}", value)\n  end\n\n  def get_prop(key)\n    instance_variable_get("@#{key}")\n  end\n\n  def remove_prop(key)\n    ivar = "@#{key}"\n    remove_instance_variable(ivar) if instance_variable_defined?(ivar)\n  end\nend\n\nperson = Person.new("Alice")\nperson.set_prop(:age, 30)\np person.get_prop(:age)          # => 30\np person.instance_variables      # => [:@name, :@age]\nperson.remove_prop(:age)\np person.instance_variables      # => [:@name]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);