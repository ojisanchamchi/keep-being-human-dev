"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[4002],{8391:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>d,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md","title":"condition_variable_coordination.md","description":"\ud83e\udde9 Coordinating Threads with ConditionVariable","source":"@site/docs/ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md.md","sourceDirName":"ruby/concurrency_and_mutexes/advanced","slug":"/ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/concurrency_and_mutexes/advanced/condition_variable_coordination.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"string_compression_deflate","permalink":"/keep-being-human-dev/docs/ruby/compression/middle/string_compression_deflate"},"next":{"title":"deadlock_prevention.md","permalink":"/keep-being-human-dev/docs/ruby/concurrency_and_mutexes/advanced/deadlock_prevention.md"}}');var r=o(23420),t=o(65404);const d={},a=void 0,c={},s=[{value:"\ud83e\udde9 Coordinating Threads with ConditionVariable",id:"-coordinating-threads-with-conditionvariable",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-coordinating-threads-with-conditionvariable",children:"\ud83e\udde9 Coordinating Threads with ConditionVariable"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ConditionVariable"})," lets threads wait for specific conditions under a ",(0,r.jsx)(n.code,{children:"Mutex"}),". This is ideal for producer-consumer setups where consumers should sleep until data arrives, then process it safely."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'require \'thread\'\n\nbuffer = []\nmutex = Mutex.new\ncondition = ConditionVariable.new\n\n# Producer thread\nproducer = Thread.new do\n  5.times do |i|\n    sleep(rand * 0.1)\n    mutex.synchronize do\n      buffer << i\n      condition.signal  # wake one waiting consumer\n      puts "Produced: #{i}"\n    end\n  end\nend\n\n# Consumer thread\nconsumer = Thread.new do\n  loop do\n    item = mutex.synchronize do\n      # wait until buffer is not empty\n      condition.wait(mutex) while buffer.empty?\n      buffer.shift\n    end\n    puts "Consumed: #{item}"\n    break if item == 4\n  end\nend\n\nproducer.join\nconsumer.join\n'})})]})}function l(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>d,x:()=>a});var i=o(36672);const r={},t=i.createContext(r);function d(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);