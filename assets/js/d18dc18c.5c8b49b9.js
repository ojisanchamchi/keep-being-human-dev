"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[44905],{65404:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>o});var n=r(36672);const s={},t=n.createContext(s);function i(e){const a=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(t.Provider,{value:a},e.children)}},89127:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/arrays/advanced/transpose_jagged_arrays","title":"transpose_jagged_arrays","description":"\ud83d\udd04 Transposing Irregular Matrices","source":"@site/docs/ruby/arrays/advanced/transpose_jagged_arrays.md","sourceDirName":"ruby/arrays/advanced","slug":"/ruby/arrays/advanced/transpose_jagged_arrays","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/transpose_jagged_arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/advanced/transpose_jagged_arrays.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"slice_when_chunking","permalink":"/keep-being-human-dev/docs/ruby/arrays/advanced/slice_when_chunking"},"next":{"title":"accessing_elements","permalink":"/keep-being-human-dev/docs/ruby/arrays/beginner/accessing_elements"}}');var s=r(23420),t=r(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udd04 Transposing Irregular Matrices",id:"-transposing-irregular-matrices",level:2}];function u(e){const a={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"-transposing-irregular-matrices",children:"\ud83d\udd04 Transposing Irregular Matrices"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"Array#transpose"})," expects uniform subarrays, but you can zip with a fill value to handle jagged arrays. First determine the maximum width, then pad each row before transposing. This technique reshapes uneven data grids safely."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ruby",children:"matrix = [[1,2,3], [4,5], [6]]\nmax_cols = matrix.map(&:size).max\npadded = matrix.map { |row| row + [nil] * (max_cols - row.size) }\ntransposed = padded.transpose\n# => [[1,4,6], [2,5,nil], [3,nil,nil]]\n"})})]})}function p(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);