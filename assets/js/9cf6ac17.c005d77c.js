"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[64499],{65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(36672);const c={},a=s.createContext(c);function i(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),s.createElement(a.Provider,{value:t},e.children)}},88341:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics","title":"customize_benchmark_suite_with_metrics","description":"\ud83d\udd27 Extend Benchmark::Suite with Custom Metrics","source":"@site/docs/ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics.md","sourceDirName":"ruby/benchmarking/advanced","slug":"/ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/benchmarking/advanced/customize_benchmark_suite_with_metrics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"compare_algorithms_with_benchmark_ips","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/advanced/compare_algorithms_with_benchmark_ips"},"next":{"title":"disable_gc_for_stable_benchmarks","permalink":"/keep-being-human-dev/docs/ruby/benchmarking/advanced/disable_gc_for_stable_benchmarks"}}');var c=n(23420),a=n(65404);const i={},r=void 0,o={},u=[{value:"\ud83d\udd27 Extend <code>Benchmark::Suite</code> with Custom Metrics",id:"-extend-benchmarksuite-with-custom-metrics",level:2}];function m(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(t.h2,{id:"-extend-benchmarksuite-with-custom-metrics",children:["\ud83d\udd27 Extend ",(0,c.jsx)(t.code,{children:"Benchmark::Suite"})," with Custom Metrics"]}),"\n",(0,c.jsxs)(t.p,{children:["For multi-dimensional analysis, you can subclass ",(0,c.jsx)(t.code,{children:"Benchmark::Suite"})," to add extra columns like memory delta or GC runs. This gives you a consolidated table of time, allocations, and GC count in one pass."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-ruby",children:"require 'benchmark/suite'\n\nclass CustomSuite < Benchmark::Suite\n  report 'allocations' do |n|\n    GC.start; before = GC.stat[:total_allocated_objects]\n    n.times { \"#{rand}\" * 2 }\n    GC.stat[:total_allocated_objects] - before\n  end\nend\n\nsuite = CustomSuite.new\nsuite.bench_ms(10_000)\nsuite.print(:legacy)\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(m,{...e})}):m(e)}}}]);