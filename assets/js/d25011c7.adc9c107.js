"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[9802],{65404:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>c});var t=a(36672);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}},80700:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rails/action_cable/advanced/chunked_streaming","title":"chunked_streaming","description":"\ud83d\udce1 Chunked Binary Streaming","source":"@site/docs/rails/action_cable/advanced/chunked_streaming.md","sourceDirName":"rails/action_cable/advanced","slug":"/rails/action_cable/advanced/chunked_streaming","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/chunked_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/action_cable/advanced/chunked_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"redis_distributed_lock_redlock","permalink":"/keep-being-human-dev/docs/nosql/redis/middle/redis_distributed_lock_redlock"},"next":{"title":"graphql_subscriptions","permalink":"/keep-being-human-dev/docs/rails/action_cable/advanced/graphql_subscriptions"}}');var r=a(23420),i=a(65404);const s={},c=void 0,d={},o=[{value:"\ud83d\udce1 Chunked Binary Streaming",id:"-chunked-binary-streaming",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-chunked-binary-streaming",children:"\ud83d\udce1 Chunked Binary Streaming"}),"\n",(0,r.jsx)(n.p,{children:"Action Cable can stream large binary files (e.g., videos, archives) in manageable chunks. This prevents memory bloat on the server and allows clients to progressively render or download data. Below is an example of chunking a file and broadcasting base64-encoded segments."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:'# app/channels/streaming_channel.rb\nclass StreamingChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from stream_name\n    chunk_file\n  end\n\n  private\n  def stream_name\n    "streaming_#{params[:file_id]}"\n  end\n\n  def chunk_file\n    File.open(Rails.root.join("public", params[:file_id]), "rb") do |file|\n      until file.eof?\n        data = Base64.strict_encode64(file.read(64.kilobytes))\n        ActionCable.server.broadcast(stream_name, chunk: data)\n        sleep 0.1  # throttle as needed\n      end\n    end\n  end\nend\n'})}),"\n",(0,r.jsx)(n.p,{children:"Clients can subscribe to the channel and decode/append chunks in JavaScript."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);