"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[34503],{65404:(e,t,a)=>{a.d(t,{R:()=>c,x:()=>i});var o=a(36672);const n={},r=o.createContext(n);function c(e){const t=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),o.createElement(r.Provider,{value:t},e.children)}},96832:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gems/factory_bot_rails/advanced/advanced_polymorphic_traits","title":"advanced_polymorphic_traits","description":"\ud83e\udde9 Advanced Polymorphic Trait Composition","source":"@site/docs/gems/factory_bot_rails/advanced/advanced_polymorphic_traits.md","sourceDirName":"gems/factory_bot_rails/advanced","slug":"/gems/factory_bot_rails/advanced/advanced_polymorphic_traits","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/advanced_polymorphic_traits","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/factory_bot_rails/advanced/advanced_polymorphic_traits.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rspec_devise_helpers","permalink":"/keep-being-human-dev/docs/gems/devise/middle/rspec_devise_helpers"},"next":{"title":"custom_factorybot_strategy","permalink":"/keep-being-human-dev/docs/gems/factory_bot_rails/advanced/custom_factorybot_strategy"}}');var n=a(23420),r=a(65404);const c={},i=void 0,s={},d=[{value:"\ud83e\udde9 Advanced Polymorphic Trait Composition",id:"-advanced-polymorphic-trait-composition",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"-advanced-polymorphic-trait-composition",children:"\ud83e\udde9 Advanced Polymorphic Trait Composition"}),"\n",(0,n.jsx)(t.p,{children:"When working with polymorphic associations or Single Table Inheritance (STI), you can define generic traits and then compose them for different subtypes. This approach keeps your factories DRY while allowing you to override or extend behavior per subtype."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ruby",children:"describe FactoryBot do\n  factory :attachment do\n    file { Rack::Test::UploadedFile.new('spec/fixtures/sample.pdf', 'application/pdf') }\n\n    trait :image do\n      file { Rack::Test::UploadedFile.new('spec/fixtures/sample.png', 'image/png') }\n      association :attachable, factory: :photo\n    end\n\n    trait :document do\n      association :attachable, factory: :document_record\n    end\n  end\nend\n\n# Usage in specs:\nlet(:image_attachment) { create(:attachment, :image) }\nlet(:doc_attachment)   { create(:attachment, :document) }\n"})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}}}]);