"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[78608],{65404:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var r=a(36672);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},77461:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"rails/websockets/expert/binary_streaming","title":"binary_streaming","description":"\ud83d\udcca High-Performance Binary Data Streaming","source":"@site/docs/rails/websockets/expert/binary_streaming.md","sourceDirName":"rails/websockets/expert","slug":"/rails/websockets/expert/binary_streaming","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/binary_streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/websockets/expert/binary_streaming.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"backpressure_throttling","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/backpressure_throttling"},"next":{"title":"jwt_connection_authentication","permalink":"/keep-being-human-dev/docs/rails/websockets/expert/jwt_connection_authentication"}}');var t=a(23420),s=a(65404);const i={},o=void 0,c={},d=[{value:"\ud83d\udcca High-Performance Binary Data Streaming",id:"-high-performance-binary-data-streaming",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-high-performance-binary-data-streaming",children:"\ud83d\udcca High-Performance Binary Data Streaming"}),"\n",(0,t.jsxs)(n.p,{children:["Stream large or binary content (e.g., audio, video frames) over WebSockets by using ActionCable\u2019s ",(0,t.jsx)(n.code,{children:"transmit"})," with raw binary payloads. This approach minimizes JSON overhead and achieves near real-time throughput."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ruby",children:'# app/channels/stream_channel.rb\nclass StreamChannel < ApplicationCable::Channel\n  def subscribed\n    stream_from "stream_#{params[:session_id]}"\n  end\n\n  def send_chunk(data)\n    binary = Base64.decode64(data[\'chunk\'])\n    ActionCable.server.broadcast("stream_#{params[:session_id]}", binary)\n  end\nend\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// app/javascript/channels/stream_channel.js\nimport consumer from "../channels/consumer"\n\nconst channel = consumer.subscriptions.create(\n  { channel: "StreamChannel", session_id: "abc123" },\n  {\n    received(binary) {\n      // handle ArrayBuffer binary data\n      playAudio(new Uint8Array(binary))\n    }\n  }\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"This method uses Base64 for transport safety then decodes on the server, streaming raw bytes for low-latency consumption."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);