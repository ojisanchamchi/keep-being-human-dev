"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[58643],{61957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"ruby/arrays/expert/memoized_inject.md","title":"memoized_inject.md","description":"\ud83e\udde0 Memoized Inject for Expensive Computations","source":"@site/docs/ruby/arrays/expert/memoized_inject.md.md","sourceDirName":"ruby/arrays/expert","slug":"/ruby/arrays/expert/memoized_inject.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/memoized_inject.md","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/arrays/expert/memoized_inject.md.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"lazy_infinite_enumerator.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/lazy_infinite_enumerator.md"},"next":{"title":"metaprogramming_dynamic_array_methods.md","permalink":"/keep-being-human-dev/docs/ruby/arrays/expert/metaprogramming_dynamic_array_methods.md"}}');var i=t(23420),a=t(65404);const o={},s=void 0,c={},m=[{value:"\ud83e\udde0 Memoized Inject for Expensive Computations",id:"-memoized-inject-for-expensive-computations",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-memoized-inject-for-expensive-computations",children:"\ud83e\udde0 Memoized Inject for Expensive Computations"}),"\n",(0,i.jsx)(n.p,{children:"Combine Enumerable#inject with internal caching to avoid recomputing expensive operations on repeated elements. This pattern is useful for dynamic programming algorithms over arrays."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"results = {}\nvalues  = [5, 10, 15]\n\nfib = lambda do |n|\n  return results[n] if results[n]\n  results[n] = (n < 2 ? n : fib.call(n-1) + fib.call(n-2))\nend\n\nsequence = values.inject([]) do |acc, n|\n  acc << fib.call(n)\nend\nputs sequence.inspect  # => [5, 55, 610]\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(36672);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);