"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[92696],{63324:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"ruby/directory_management/advanced/atomic_directory_swap","title":"atomic_directory_swap","description":"\u2699\ufe0f Atomic Directory Updates Using Temporary Directories","source":"@site/docs/ruby/directory_management/advanced/atomic_directory_swap.md","sourceDirName":"ruby/directory_management/advanced","slug":"/ruby/directory_management/advanced/atomic_directory_swap","permalink":"/keep-being-human-dev/docs/ruby/directory_management/advanced/atomic_directory_swap","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/directory_management/advanced/atomic_directory_swap.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"validation_helpers","permalink":"/keep-being-human-dev/docs/ruby/define_method/middle/validation_helpers"},"next":{"title":"recursive_traversal_find","permalink":"/keep-being-human-dev/docs/ruby/directory_management/advanced/recursive_traversal_find"}}');var i=r(23420),a=r(65404);const o={},s=void 0,c={},d=[{value:"\u2699\ufe0f Atomic Directory Updates Using Temporary Directories",id:"\ufe0f-atomic-directory-updates-using-temporary-directories",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\ufe0f-atomic-directory-updates-using-temporary-directories",children:"\u2699\ufe0f Atomic Directory Updates Using Temporary Directories"}),"\n",(0,i.jsxs)(t.p,{children:["For zero-downtime deployments or safe configuration updates, stage changes in a temp directory and then atomically swap it with ",(0,i.jsx)(t.code,{children:"File.rename"}),". This ensures consumers never see a half-written state."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ruby",children:"require 'fileutils'\nrequire 'tmpdir'\n\ndef atomic_update(target_dir)\n  Dir.mktmpdir(File.basename(target_dir), File.dirname(target_dir)) do |tmp|  \n    tmp_path = Pathname.new(tmp)\n    # Stage new files\n    FileUtils.cp_r('build/output/.', tmp_path)\n\n    # Optionally set permissions or post-process\n    tmp_path.children.each { |p| FileUtils.chmod(0o644, p) if p.file? }\n\n    # Atomic swap: move old out, bring new in\n    backup = \"#{target_dir}.bak\"\n    FileUtils.rm_rf(backup)\n    FileUtils.mv(target_dir, backup)\n    FileUtils.mv(tmp_path, target_dir)\n\n    # Cleanup backup if all good\n    FileUtils.rm_rf(backup)\n  end\nend\n\n# Usage\natomic_update('/var/www/my_app/shared/config')\n"})}),"\n",(0,i.jsxs)(t.p,{children:["By leveraging ",(0,i.jsx)(t.code,{children:"Dir.mktmpdir"})," and ",(0,i.jsx)(t.code,{children:"FileUtils.mv"}),", you guarantee either the old directory or the new one is fully in place, avoiding partial states and ensuring rollback on failure."]})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},65404:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>s});var n=r(36672);const i={},a=n.createContext(i);function o(e){const t=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);