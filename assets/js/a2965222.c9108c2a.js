"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87702],{39938:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"rails/encryption/beginner/message_encryptor_basics","title":"message_encryptor_basics","description":"\ud83d\udd12 Encrypt Data with ActiveSupport::MessageEncryptor","source":"@site/docs/rails/encryption/beginner/message_encryptor_basics.md","sourceDirName":"rails/encryption/beginner","slug":"/rails/encryption/beginner/message_encryptor_basics","permalink":"/keep-being-human-dev/docs/rails/encryption/beginner/message_encryptor_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/encryption/beginner/message_encryptor_basics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"active_record_encryption","permalink":"/keep-being-human-dev/docs/rails/encryption/beginner/active_record_encryption"},"next":{"title":"rails_credentials","permalink":"/keep-being-human-dev/docs/rails/encryption/beginner/rails_credentials"}}');var s=t(23420),c=t(65404);const a={},i=void 0,o={},p=[{value:"\ud83d\udd12 Encrypt Data with ActiveSupport::MessageEncryptor",id:"-encrypt-data-with-activesupportmessageencryptor",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"-encrypt-data-with-activesupportmessageencryptor",children:"\ud83d\udd12 Encrypt Data with ActiveSupport::MessageEncryptor"}),"\n",(0,s.jsxs)(n.p,{children:["For small payloads or single\u2010value encryption (e.g., tokens), use ",(0,s.jsx)(n.code,{children:"ActiveSupport::MessageEncryptor"}),". It handles both encryption and message authentication. First, derive a key, then encrypt and decrypt:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:'# config/initializers/encryptor.rb\nsecret = Rails.application.secret_key_base[0..31]         # 32\u2010byte key\ncrypt  = ActiveSupport::MessageEncryptor.new(secret)\n\n# Encrypt\ntoken   = crypt.encrypt_and_sign(\'user@example.com\')\n# => "--8D4jRatz..."\n\n# Decrypt\nemail = crypt.decrypt_and_verify(token)\n# => "user@example.com"\n'})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(36672);const s={},c=r.createContext(s);function a(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);