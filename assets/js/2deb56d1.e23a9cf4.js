"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[54780],{52003:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>m,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"gems/mini_magick/middle/in_memory_processing","title":"in_memory_processing","description":"\ud83c\udfa8 In-Memory Processing without Temp Files","source":"@site/docs/gems/mini_magick/middle/in_memory_processing.md","sourceDirName":"gems/mini_magick/middle","slug":"/gems/mini_magick/middle/in_memory_processing","permalink":"/keep-being-human-dev/docs/gems/mini_magick/middle/in_memory_processing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/mini_magick/middle/in_memory_processing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"conditional_resize","permalink":"/keep-being-human-dev/docs/gems/mini_magick/middle/conditional_resize"},"next":{"title":"optimize_and_compress","permalink":"/keep-being-human-dev/docs/gems/mini_magick/middle/optimize_and_compress"}}');var s=n(23420),t=n(65404);const r={},m=void 0,c={},a=[{value:"\ud83c\udfa8 In-Memory Processing without Temp Files",id:"-in-memory-processing-without-temp-files",level:2}];function d(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"-in-memory-processing-without-temp-files",children:"\ud83c\udfa8 In-Memory Processing without Temp Files"}),"\n",(0,s.jsxs)(i.p,{children:["Avoid writing intermediate files to disk by chaining operations in memory. You can use ",(0,s.jsx)(i.code,{children:"Image.read"})," and ",(0,s.jsx)(i.code,{children:".to_blob"})," to pass data directly between commands, speeding up your pipeline and reducing I/O overhead."]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ruby",children:'original = MiniMagick::Image.open("input.jpg")\n# Chain operations and get a binary blob\nblob = original.combine_options do |c|\n  c.resize "800x600"\n  c.rotate "90"\nend.to_blob\n\n# Read the modified blob back into MiniMagick\nprocessed = MiniMagick::Image.read(blob)\nprocessed.format "png"\nprocessed.write "output.png"\n'})})]})}function p(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>m});var o=n(36672);const s={},t=o.createContext(s);function r(e){const i=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function m(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:i},e.children)}}}]);