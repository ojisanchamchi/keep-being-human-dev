"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[20846],{28900:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rails/background_jobs/middle/configure_retry_and_discard","title":"configure_retry_and_discard","description":"\u2699\ufe0f Configure Retries and Discards","source":"@site/docs/rails/background_jobs/middle/configure_retry_and_discard.md","sourceDirName":"rails/background_jobs/middle","slug":"/rails/background_jobs/middle/configure_retry_and_discard","permalink":"/keep-being-human-dev/docs/rails/background_jobs/middle/configure_retry_and_discard","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/background_jobs/middle/configure_retry_and_discard.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"unique_jobs_idempotency","permalink":"/keep-being-human-dev/docs/rails/background_jobs/expert/unique_jobs_idempotency"},"next":{"title":"integrate_active_job_sidekiq","permalink":"/keep-being-human-dev/docs/rails/background_jobs/middle/integrate_active_job_sidekiq"}}');var d=n(23420),i=n(65404);const t={},o=void 0,a={},c=[{value:"\u2699\ufe0f Configure Retries and Discards",id:"\ufe0f-configure-retries-and-discards",level:2}];function u(e){const r={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.h2,{id:"\ufe0f-configure-retries-and-discards",children:"\u2699\ufe0f Configure Retries and Discards"}),"\n",(0,d.jsxs)(r.p,{children:["Active Job lets you specify retry and discard strategies per exception type. Use ",(0,d.jsx)(r.code,{children:"retry_on"})," and ",(0,d.jsx)(r.code,{children:"discard_on"})," in your job class to handle transient errors gracefully without crashing your app."]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-ruby",children:"# app/jobs/payment_processing_job.rb\nclass PaymentProcessingJob < ApplicationJob\n  queue_as :billing\n\n  retry_on Net::OpenTimeout, wait: 10.seconds, attempts: 5\n  discard_on ActiveRecord::RecordNotFound\n\n  def perform(order_id)\n    order = Order.find(order_id)\n    PaymentGateway.charge(order)\n  end\nend\n"})})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(u,{...e})}):u(e)}},65404:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var s=n(36672);const d={},i=s.createContext(d);function t(e){const r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:t(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);