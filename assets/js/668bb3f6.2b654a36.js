"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[87152],{929:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"gems/rspec/advanced/around_hooks_for_transactions","title":"around_hooks_for_transactions","description":"\u23f3 Wrap Examples with Around Hooks for Transactions","source":"@site/docs/gems/rspec/advanced/around_hooks_for_transactions.md","sourceDirName":"gems/rspec/advanced","slug":"/gems/rspec/advanced/around_hooks_for_transactions","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/around_hooks_for_transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/gems/rspec/advanced/around_hooks_for_transactions.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"session_store_redis","permalink":"/keep-being-human-dev/docs/gems/redis/middle/session_store_redis"},"next":{"title":"composite_matcher_operators","permalink":"/keep-being-human-dev/docs/gems/rspec/advanced/composite_matcher_operators"}}');var r=o(23420),a=o(65404);const t={},c=void 0,i={},d=[{value:"\u23f3 Wrap Examples with Around Hooks for Transactions",id:"-wrap-examples-with-around-hooks-for-transactions",level:2}];function p(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-wrap-examples-with-around-hooks-for-transactions",children:"\u23f3 Wrap Examples with Around Hooks for Transactions"}),"\n",(0,r.jsxs)(n.p,{children:["Around hooks let you execute code before and after each example, ideal for wrapping tests in database transactions or external service simulations. By structuring setup and teardown in one place, you ensure clean state and avoid leakage between examples. Use ",(0,r.jsx)(n.code,{children:"example.run"})," to yield control inside your hook."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"# spec/support/around_hooks/transactional.rb\nRSpec.configure do |config|\n  config.around(:each, :transactional) do |example|\n    ActiveRecord::Base.transaction do\n      example.run\n      raise ActiveRecord::Rollback\n    end\n  end\nend\n\n# Usage in spec\ndescribe 'Order processing', :transactional do\n  it 'creates line items without persisting' do\n    Order.create!(...)  # will be rolled back\n    expect(Order.count).to eq(0)\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},65404:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>c});var s=o(36672);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);