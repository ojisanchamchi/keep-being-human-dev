"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[8362],{28732:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"ruby/oop/expert/dynamic_method_dsl","title":"dynamic_method_dsl","description":"\ud83d\ude80 Dynamic Method DSL via define_method","source":"@site/docs/ruby/oop/expert/dynamic_method_dsl.md","sourceDirName":"ruby/oop/expert","slug":"/ruby/oop/expert/dynamic_method_dsl","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/dynamic_method_dsl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ruby/oop/expert/dynamic_method_dsl.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrent_ractor_mixins","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/concurrent_ractor_mixins"},"next":{"title":"method_missing_delegate","permalink":"/keep-being-human-dev/docs/ruby/oop/expert/method_missing_delegate"}}');var d=t(23420),r=t(65404);const a={},s=void 0,i={},c=[{value:"\ud83d\ude80 Dynamic Method DSL via define_method",id:"-dynamic-method-dsl-via-define_method",level:2}];function m(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.h2,{id:"-dynamic-method-dsl-via-define_method",children:"\ud83d\ude80 Dynamic Method DSL via define_method"}),"\n",(0,d.jsxs)(n.p,{children:["Leverage ",(0,d.jsx)(n.code,{children:"Module#define_method"})," and metaprogramming to craft internal DSLs that auto-generate methods based on configuration data. This approach reduces boilerplate and opens the door to expressive domain-specific APIs."]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-ruby",children:'class EventHandler\n  EVENTS = %i[create update destroy]\n\n  EVENTS.each do |evt|\n    define_method("on_#{evt}") do |&block|\n      (@handlers ||= {})[evt] = block\n    end\n  end\n\n  def trigger(event, *args)\n    @handlers[event]&.call(*args)\n  end\nend\n\nhandler = EventHandler.new\nhandler.on_create { |data| puts "Created: #{data}" }\nhandler.trigger(:create, "User1")\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(m,{...e})}):m(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(36672);const d={},r=o.createContext(d);function a(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);