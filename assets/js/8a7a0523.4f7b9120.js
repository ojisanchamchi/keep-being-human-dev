"use strict";(self.webpackChunkkeep_being_human_dev=self.webpackChunkkeep_being_human_dev||[]).push([[90794],{65404:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(36672);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}},91113:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"rails/active_record_migrations/advanced/conditional_migrations","title":"conditional_migrations","description":"\ud83d\udd0d Write Conditional Migrations","source":"@site/docs/rails/active_record_migrations/advanced/conditional_migrations.md","sourceDirName":"rails/active_record_migrations/advanced","slug":"/rails/active_record_migrations/advanced/conditional_migrations","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/conditional_migrations","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rails/active_record_migrations/advanced/conditional_migrations.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"concurrent_index","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/concurrent_index"},"next":{"title":"custom_enum_types","permalink":"/keep-being-human-dev/docs/rails/active_record_migrations/advanced/custom_enum_types"}}');var r=i(23420),o=i(65404);const a={},s=void 0,c={},d=[{value:"\ud83d\udd0d Write Conditional Migrations",id:"-write-conditional-migrations",level:2}];function l(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"-write-conditional-migrations",children:"\ud83d\udd0d Write Conditional Migrations"}),"\n",(0,r.jsxs)(n.p,{children:["Make migrations idempotent by checking schema objects before creating or dropping them. Use methods like ",(0,r.jsx)(n.code,{children:"table_exists?"}),", ",(0,r.jsx)(n.code,{children:"column_exists?"}),", ",(0,r.jsx)(n.code,{children:"index_name_exists?"})," to guard statements. This ensures safe reruns in different environments."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",children:"class AddArchivedColumnIfNeeded < ActiveRecord::Migration[6.1]\n  def change\n    unless column_exists?(:projects, :archived)\n      add_column :projects, :archived, :boolean, default: false, null: false\n    end\n  end\nend\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);